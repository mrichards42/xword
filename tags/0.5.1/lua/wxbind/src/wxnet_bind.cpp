// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxnet_net.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxnet_bind.h"



#if wxLUA_USE_wxSocket && wxUSE_SOCKETS
// ---------------------------------------------------------------------------
// Bind class wxSocketBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSocketBase'
int wxluatype_wxSocketBase = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_Close[] = { &wxluatype_wxSocketBase, NULL };
static int LUACALL wxLua_wxSocketBase_Close(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_Close[1] = {{ wxLua_wxSocketBase_Close, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketBase_Close }};
//     void Close()
static int LUACALL wxLua_wxSocketBase_Close(lua_State *L)
{
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call Close
    self->Close();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_Destroy[] = { &wxluatype_wxSocketBase, NULL };
static int LUACALL wxLua_wxSocketBase_Destroy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_Destroy[1] = {{ wxLua_wxSocketBase_Destroy, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketBase_Destroy }};
//     bool Destroy()
static int LUACALL wxLua_wxSocketBase_Destroy(lua_State *L)
{
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call Destroy
    bool returns = (self->Destroy());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_Discard[] = { &wxluatype_wxSocketBase, NULL };
static int LUACALL wxLua_wxSocketBase_Discard(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_Discard[1] = {{ wxLua_wxSocketBase_Discard, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketBase_Discard }};
//     void Discard()
static int LUACALL wxLua_wxSocketBase_Discard(lua_State *L)
{
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call Discard
    self->Discard();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_Error[] = { &wxluatype_wxSocketBase, NULL };
static int LUACALL wxLua_wxSocketBase_Error(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_Error[1] = {{ wxLua_wxSocketBase_Error, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketBase_Error }};
//     bool Error() const
static int LUACALL wxLua_wxSocketBase_Error(lua_State *L)
{
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call Error
    bool returns = (self->Error());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_GetClientData[] = { &wxluatype_wxSocketBase, NULL };
static int LUACALL wxLua_wxSocketBase_GetClientData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_GetClientData[1] = {{ wxLua_wxSocketBase_GetClientData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketBase_GetClientData }};
//     voidptr_long GetClientData() const // C++ returns (void *) You get a number here
static int LUACALL wxLua_wxSocketBase_GetClientData(lua_State *L)
{
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call GetClientData
    long  returns = (long )self->GetClientData();
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_GetFlags[] = { &wxluatype_wxSocketBase, NULL };
static int LUACALL wxLua_wxSocketBase_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_GetFlags[1] = {{ wxLua_wxSocketBase_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketBase_GetFlags }};
//     wxSocketFlags GetFlags() const
static int LUACALL wxLua_wxSocketBase_GetFlags(lua_State *L)
{
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call GetFlags
    wxSocketFlags returns = (self->GetFlags());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_GetLocal[] = { &wxluatype_wxSocketBase, &wxluatype_wxSockAddress, NULL };
static int LUACALL wxLua_wxSocketBase_GetLocal(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_GetLocal[1] = {{ wxLua_wxSocketBase_GetLocal, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSocketBase_GetLocal }};
//     bool GetLocal(wxSockAddress& addr) const
static int LUACALL wxLua_wxSocketBase_GetLocal(lua_State *L)
{
    // wxSockAddress addr
    wxSockAddress * addr = (wxSockAddress *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSockAddress);
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call GetLocal
    bool returns = (self->GetLocal(*addr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_GetPeer[] = { &wxluatype_wxSocketBase, &wxluatype_wxSockAddress, NULL };
static int LUACALL wxLua_wxSocketBase_GetPeer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_GetPeer[1] = {{ wxLua_wxSocketBase_GetPeer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSocketBase_GetPeer }};
//     bool GetPeer(wxSockAddress& addr) const
static int LUACALL wxLua_wxSocketBase_GetPeer(lua_State *L)
{
    // wxSockAddress addr
    wxSockAddress * addr = (wxSockAddress *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSockAddress);
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call GetPeer
    bool returns = (self->GetPeer(*addr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_InterruptWait[] = { &wxluatype_wxSocketBase, NULL };
static int LUACALL wxLua_wxSocketBase_InterruptWait(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_InterruptWait[1] = {{ wxLua_wxSocketBase_InterruptWait, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketBase_InterruptWait }};
//     void InterruptWait()
static int LUACALL wxLua_wxSocketBase_InterruptWait(lua_State *L)
{
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call InterruptWait
    self->InterruptWait();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_IsConnected[] = { &wxluatype_wxSocketBase, NULL };
static int LUACALL wxLua_wxSocketBase_IsConnected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_IsConnected[1] = {{ wxLua_wxSocketBase_IsConnected, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketBase_IsConnected }};
//     bool IsConnected() const
static int LUACALL wxLua_wxSocketBase_IsConnected(lua_State *L)
{
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call IsConnected
    bool returns = (self->IsConnected());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_IsData[] = { &wxluatype_wxSocketBase, NULL };
static int LUACALL wxLua_wxSocketBase_IsData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_IsData[1] = {{ wxLua_wxSocketBase_IsData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketBase_IsData }};
//     bool IsData() const
static int LUACALL wxLua_wxSocketBase_IsData(lua_State *L)
{
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call IsData
    bool returns = (self->IsData());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_IsDisconnected[] = { &wxluatype_wxSocketBase, NULL };
static int LUACALL wxLua_wxSocketBase_IsDisconnected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_IsDisconnected[1] = {{ wxLua_wxSocketBase_IsDisconnected, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketBase_IsDisconnected }};
//     bool IsDisconnected() const
static int LUACALL wxLua_wxSocketBase_IsDisconnected(lua_State *L)
{
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call IsDisconnected
    bool returns = (self->IsDisconnected());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_LastCount[] = { &wxluatype_wxSocketBase, NULL };
static int LUACALL wxLua_wxSocketBase_LastCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_LastCount[1] = {{ wxLua_wxSocketBase_LastCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketBase_LastCount }};
//     unsigned long LastCount() const
static int LUACALL wxLua_wxSocketBase_LastCount(lua_State *L)
{
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call LastCount
    unsigned long returns = (self->LastCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_LastError[] = { &wxluatype_wxSocketBase, NULL };
static int LUACALL wxLua_wxSocketBase_LastError(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_LastError[1] = {{ wxLua_wxSocketBase_LastError, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketBase_LastError }};
//     wxSocketError LastError() const // %gtk|%mac causes link error with Borland C++ w/DLL not exported?
static int LUACALL wxLua_wxSocketBase_LastError(lua_State *L)
{
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call LastError
    wxSocketError returns = (self->LastError());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_Notify[] = { &wxluatype_wxSocketBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSocketBase_Notify(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_Notify[1] = {{ wxLua_wxSocketBase_Notify, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSocketBase_Notify }};
//     void Notify(bool notify)
static int LUACALL wxLua_wxSocketBase_Notify(lua_State *L)
{
    // bool notify
    bool notify = wxlua_getbooleantype(L, 2);
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call Notify
    self->Notify(notify);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_Ok[] = { &wxluatype_wxSocketBase, NULL };
static int LUACALL wxLua_wxSocketBase_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_Ok[1] = {{ wxLua_wxSocketBase_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketBase_Ok }};
//     bool Ok() const
static int LUACALL wxLua_wxSocketBase_Ok(lua_State *L)
{
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_Peek[] = { &wxluatype_wxSocketBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSocketBase_Peek(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_Peek[1] = {{ wxLua_wxSocketBase_Peek, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSocketBase_Peek }};
// %override wxLua_wxSocketBase_Peek
// void Peek(void * buffer, unsigned long nbytes)
static int LUACALL wxLua_wxSocketBase_Peek(lua_State *L)
{
    // unsigned long nbytes
    unsigned long nbytes = (unsigned long)wxlua_getintegertype(L, 2);
    // void * buffer
    void *buffer = malloc(nbytes);
    if (buffer != NULL)
    {
        // get this
        wxSocketBase *self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
        // call Peek
        self->Peek(buffer, nbytes);
        // return the number of parameters
        lua_pushlstring(L, (const char *)buffer, nbytes);
        free(buffer);
        return 1;
    }
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_Read[] = { &wxluatype_wxSocketBase, &wxluatype_TLIGHTUSERDATA, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSocketBase_Read(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_Read[1] = {{ wxLua_wxSocketBase_Read, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSocketBase_Read }};
// %override wxLua_wxSocketBase_Read
// void Read(void * buffer, unsigned long nbytes)
static int LUACALL wxLua_wxSocketBase_Read(lua_State *L)
{
    // unsigned long nbytes
    unsigned long nbytes = (unsigned long)wxlua_getintegertype(L, 2);
    // void * buffer
    void *buffer = malloc(nbytes);
    if (buffer != NULL)
    {
        // get this
        wxSocketBase *self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
        // call Peek
        self->Read(buffer, nbytes);
        // return the number of parameters
        lua_pushlstring(L, (const char *)buffer, nbytes);
        free(buffer);
        return 1;
    }
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_ReadMsg[] = { &wxluatype_wxSocketBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSocketBase_ReadMsg(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_ReadMsg[1] = {{ wxLua_wxSocketBase_ReadMsg, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSocketBase_ReadMsg }};
// %override wxLua_wxSocketBase_ReadMsg
// void ReadMsg(void * buffer, unsigned long nbytes)
static int LUACALL wxLua_wxSocketBase_ReadMsg(lua_State *L)
{
    // unsigned long nbytes
    unsigned long nbytes = (unsigned long)wxlua_getintegertype(L, 2);
    // void * buffer
    void *buffer = malloc(nbytes);
    if (buffer != NULL)
    {
        // get this
        wxSocketBase *self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
        // call Peek
        self->ReadMsg(buffer, nbytes);
        // return the number of parameters
        lua_pushlstring(L, (const char *)buffer, self->LastCount()); // not nbytes since it may return less
        free(buffer);
        return 1;
    }
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_RestoreState[] = { &wxluatype_wxSocketBase, NULL };
static int LUACALL wxLua_wxSocketBase_RestoreState(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_RestoreState[1] = {{ wxLua_wxSocketBase_RestoreState, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketBase_RestoreState }};
//     void RestoreState()
static int LUACALL wxLua_wxSocketBase_RestoreState(lua_State *L)
{
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call RestoreState
    self->RestoreState();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_SaveState[] = { &wxluatype_wxSocketBase, NULL };
static int LUACALL wxLua_wxSocketBase_SaveState(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_SaveState[1] = {{ wxLua_wxSocketBase_SaveState, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketBase_SaveState }};
//     void SaveState()
static int LUACALL wxLua_wxSocketBase_SaveState(lua_State *L)
{
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call SaveState
    self->SaveState();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_SetClientData[] = { &wxluatype_wxSocketBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSocketBase_SetClientData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_SetClientData[1] = {{ wxLua_wxSocketBase_SetClientData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSocketBase_SetClientData }};
//     void SetClientData(voidptr_long number) // C++ is (void *clientData) You can put a number here
static int LUACALL wxLua_wxSocketBase_SetClientData(lua_State *L)
{
    // voidptr_long number
    long number = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call SetClientData
    self->SetClientData((void*)number);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_SetEventHandler[] = { &wxluatype_wxSocketBase, &wxluatype_wxEvtHandler, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSocketBase_SetEventHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_SetEventHandler[1] = {{ wxLua_wxSocketBase_SetEventHandler, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxSocketBase_SetEventHandler }};
//     void SetEventHandler(wxEvtHandler& handler, int id = -1)
static int LUACALL wxLua_wxSocketBase_SetEventHandler(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int id = -1
    int id = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : -1);
    // wxEvtHandler handler
    wxEvtHandler * handler = (wxEvtHandler *)wxluaT_getuserdatatype(L, 2, wxluatype_wxEvtHandler);
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call SetEventHandler
    self->SetEventHandler(*handler, id);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_SetFlags[] = { &wxluatype_wxSocketBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSocketBase_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_SetFlags[1] = {{ wxLua_wxSocketBase_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSocketBase_SetFlags }};
//     void SetFlags(wxSocketFlags flags)
static int LUACALL wxLua_wxSocketBase_SetFlags(lua_State *L)
{
    // wxSocketFlags flags
    wxSocketFlags flags = (wxSocketFlags)wxlua_getenumtype(L, 2);
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_SetNotify[] = { &wxluatype_wxSocketBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSocketBase_SetNotify(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_SetNotify[1] = {{ wxLua_wxSocketBase_SetNotify, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSocketBase_SetNotify }};
//     void SetNotify(wxSocketEventFlags flags)
static int LUACALL wxLua_wxSocketBase_SetNotify(lua_State *L)
{
    // wxSocketEventFlags flags
    wxSocketEventFlags flags = (wxSocketEventFlags)wxlua_getenumtype(L, 2);
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call SetNotify
    self->SetNotify(flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_SetTimeout[] = { &wxluatype_wxSocketBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSocketBase_SetTimeout(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_SetTimeout[1] = {{ wxLua_wxSocketBase_SetTimeout, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSocketBase_SetTimeout }};
//     void SetTimeout(int seconds)
static int LUACALL wxLua_wxSocketBase_SetTimeout(lua_State *L)
{
    // int seconds
    int seconds = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call SetTimeout
    self->SetTimeout(seconds);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_Unread[] = { &wxluatype_wxSocketBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSocketBase_Unread(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_Unread[1] = {{ wxLua_wxSocketBase_Unread, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSocketBase_Unread }};
// %override wxLua_wxSocketBase_Unread
// void Unread(const void * buffer, unsigned long nbytes)
static int LUACALL wxLua_wxSocketBase_Unread(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const void * buffer
    const char *buffer = lua_tostring(L, 2);
    // unsigned long nbytes
    unsigned long nbytes = (argCount >= 3 ? (unsigned long)wxlua_getintegertype(L, 3) : lua_strlen(L, 2));
    // get this
    wxSocketBase *self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call Unread
    self->Unread(buffer, nbytes);
    // return the number of parameters
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_Wait[] = { &wxluatype_wxSocketBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSocketBase_Wait(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_Wait[1] = {{ wxLua_wxSocketBase_Wait, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxSocketBase_Wait }};
//     bool Wait(long seconds = -1, long millisecond = 0)
static int LUACALL wxLua_wxSocketBase_Wait(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long millisecond = 0
    long millisecond = (argCount >= 3 ? (long)wxlua_getnumbertype(L, 3) : 0);
    // long seconds = -1
    long seconds = (argCount >= 2 ? (long)wxlua_getnumbertype(L, 2) : -1);
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call Wait
    bool returns = (self->Wait(seconds, millisecond));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_WaitForLost[] = { &wxluatype_wxSocketBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSocketBase_WaitForLost(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_WaitForLost[1] = {{ wxLua_wxSocketBase_WaitForLost, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxSocketBase_WaitForLost }};
//     bool WaitForLost(long seconds = -1, long millisecond = 0)
static int LUACALL wxLua_wxSocketBase_WaitForLost(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long millisecond = 0
    long millisecond = (argCount >= 3 ? (long)wxlua_getnumbertype(L, 3) : 0);
    // long seconds = -1
    long seconds = (argCount >= 2 ? (long)wxlua_getnumbertype(L, 2) : -1);
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call WaitForLost
    bool returns = (self->WaitForLost(seconds, millisecond));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_WaitForRead[] = { &wxluatype_wxSocketBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSocketBase_WaitForRead(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_WaitForRead[1] = {{ wxLua_wxSocketBase_WaitForRead, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxSocketBase_WaitForRead }};
//     bool WaitForRead(long seconds = -1, long millisecond = 0)
static int LUACALL wxLua_wxSocketBase_WaitForRead(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long millisecond = 0
    long millisecond = (argCount >= 3 ? (long)wxlua_getnumbertype(L, 3) : 0);
    // long seconds = -1
    long seconds = (argCount >= 2 ? (long)wxlua_getnumbertype(L, 2) : -1);
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call WaitForRead
    bool returns = (self->WaitForRead(seconds, millisecond));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_WaitForWrite[] = { &wxluatype_wxSocketBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSocketBase_WaitForWrite(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_WaitForWrite[1] = {{ wxLua_wxSocketBase_WaitForWrite, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxSocketBase_WaitForWrite }};
//     bool WaitForWrite(long seconds = -1, long millisecond = 0)
static int LUACALL wxLua_wxSocketBase_WaitForWrite(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long millisecond = 0
    long millisecond = (argCount >= 3 ? (long)wxlua_getnumbertype(L, 3) : 0);
    // long seconds = -1
    long seconds = (argCount >= 2 ? (long)wxlua_getnumbertype(L, 2) : -1);
    // get this
    wxSocketBase * self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call WaitForWrite
    bool returns = (self->WaitForWrite(seconds, millisecond));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_Write[] = { &wxluatype_wxSocketBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSocketBase_Write(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_Write[1] = {{ wxLua_wxSocketBase_Write, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSocketBase_Write }};
// %override wxLua_wxSocketBase_Write
// void Write(const void * buffer, unsigned long nbytes)
static int LUACALL wxLua_wxSocketBase_Write(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const void * buffer
    const char *buffer = lua_tostring(L, 2);
    // unsigned long nbytes
    unsigned long nbytes = (argCount >= 3 ? (unsigned long)wxlua_getintegertype(L, 3) : lua_strlen(L, 2));
    // get this
    wxSocketBase *self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call Write
    self->Write(buffer, nbytes);
    // return the number of parameters
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketBase_WriteMsg[] = { &wxluatype_wxSocketBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSocketBase_WriteMsg(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketBase_WriteMsg[1] = {{ wxLua_wxSocketBase_WriteMsg, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSocketBase_WriteMsg }};
// %override wxLua_wxSocketBase_WriteMsg
// void WriteMsg(const void * buffer, wxUint32 nbytes)
static int LUACALL wxLua_wxSocketBase_WriteMsg(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const void * buffer
    const char *buffer = lua_tostring(L, 2);
    // unsigned long nbytes
    unsigned long nbytes = (argCount >= 3 ? (unsigned long)wxlua_getintegertype(L, 3) : lua_strlen(L, 2));
    // get this
    wxSocketBase *self = (wxSocketBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketBase);
    // call WriteMsg
    self->WriteMsg(buffer, nbytes);
    // return the number of parameters
    return 0;
}





// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSocketBase_methods[] = {
    { "Close", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_Close, 1, NULL },
    { "Destroy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_Destroy, 1, NULL },
    { "Discard", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_Discard, 1, NULL },
    { "Error", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_Error, 1, NULL },
    { "GetClientData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_GetClientData, 1, NULL },
    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_GetFlags, 1, NULL },
    { "GetLocal", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_GetLocal, 1, NULL },
    { "GetPeer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_GetPeer, 1, NULL },
    { "InterruptWait", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_InterruptWait, 1, NULL },
    { "IsConnected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_IsConnected, 1, NULL },
    { "IsData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_IsData, 1, NULL },
    { "IsDisconnected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_IsDisconnected, 1, NULL },
    { "LastCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_LastCount, 1, NULL },
    { "LastError", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_LastError, 1, NULL },
    { "Notify", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_Notify, 1, NULL },
    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_Ok, 1, NULL },
    { "Peek", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_Peek, 1, NULL },
    { "Read", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_Read, 1, NULL },
    { "ReadMsg", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_ReadMsg, 1, NULL },
    { "RestoreState", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_RestoreState, 1, NULL },
    { "SaveState", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_SaveState, 1, NULL },
    { "SetClientData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_SetClientData, 1, NULL },
    { "SetEventHandler", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_SetEventHandler, 1, NULL },
    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_SetFlags, 1, NULL },
    { "SetNotify", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_SetNotify, 1, NULL },
    { "SetTimeout", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_SetTimeout, 1, NULL },
    { "Unread", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_Unread, 1, NULL },
    { "Wait", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_Wait, 1, NULL },
    { "WaitForLost", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_WaitForLost, 1, NULL },
    { "WaitForRead", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_WaitForRead, 1, NULL },
    { "WaitForWrite", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_WaitForWrite, 1, NULL },
    { "Write", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_Write, 1, NULL },
    { "WriteMsg", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketBase_WriteMsg, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxSocketBase_methodCount = sizeof(wxSocketBase_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSocket && wxUSE_SOCKETS


#if wxLUA_USE_wxSocket && wxUSE_SOCKETS
// ---------------------------------------------------------------------------
// Bind class wxSocketClient
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSocketClient'
int wxluatype_wxSocketClient = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketClient_Connect[] = { &wxluatype_wxSocketClient, &wxluatype_wxSockAddress, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSocketClient_Connect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketClient_Connect[1] = {{ wxLua_wxSocketClient_Connect, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxSocketClient_Connect }};
//     bool Connect(wxSockAddress& address, bool wait = true)
static int LUACALL wxLua_wxSocketClient_Connect(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool wait = true
    bool wait = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // wxSockAddress address
    wxSockAddress * address = (wxSockAddress *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSockAddress);
    // get this
    wxSocketClient * self = (wxSocketClient *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketClient);
    // call Connect
    bool returns = (self->Connect(*address, wait));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketClient_WaitOnConnect[] = { &wxluatype_wxSocketClient, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSocketClient_WaitOnConnect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketClient_WaitOnConnect[1] = {{ wxLua_wxSocketClient_WaitOnConnect, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxSocketClient_WaitOnConnect }};
//     bool WaitOnConnect(long seconds = -1, long milliseconds = 0)
static int LUACALL wxLua_wxSocketClient_WaitOnConnect(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long milliseconds = 0
    long milliseconds = (argCount >= 3 ? (long)wxlua_getnumbertype(L, 3) : 0);
    // long seconds = -1
    long seconds = (argCount >= 2 ? (long)wxlua_getnumbertype(L, 2) : -1);
    // get this
    wxSocketClient * self = (wxSocketClient *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketClient);
    // call WaitOnConnect
    bool returns = (self->WaitOnConnect(seconds, milliseconds));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketClient_delete[] = { &wxluatype_wxSocketClient, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketClient_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSocketClient_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketClient_constructor[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSocketClient_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketClient_constructor[1] = {{ wxLua_wxSocketClient_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxSocketClient_constructor }};
//     wxSocketClient(wxSocketFlags flags = wxSOCKET_NONE)
static int LUACALL wxLua_wxSocketClient_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxSocketFlags flags = wxSOCKET_NONE
    wxSocketFlags flags = (argCount >= 1 ? (wxSocketFlags)wxlua_getenumtype(L, 1) : wxSOCKET_NONE);
    // call constructor
    wxSocketClient* returns = new wxSocketClient(flags);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSocketClient);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSocketClient_methods[] = {
    { "Connect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketClient_Connect, 1, NULL },
    { "WaitOnConnect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketClient_WaitOnConnect, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSocketClient_delete, 1, NULL },
    { "wxSocketClient", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSocketClient_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxSocketClient_methodCount = sizeof(wxSocketClient_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSocket && wxUSE_SOCKETS


#if wxLUA_USE_wxSocket && wxUSE_SOCKETS
// ---------------------------------------------------------------------------
// Bind class wxSocketServer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSocketServer'
int wxluatype_wxSocketServer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketServer_Accept[] = { &wxluatype_wxSocketServer, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSocketServer_Accept(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketServer_Accept[1] = {{ wxLua_wxSocketServer_Accept, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxSocketServer_Accept }};
//     wxSocketBase* Accept(bool wait = true)
static int LUACALL wxLua_wxSocketServer_Accept(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool wait = true
    bool wait = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxSocketServer * self = (wxSocketServer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketServer);
    // call Accept
    wxSocketBase* returns = (wxSocketBase*)self->Accept(wait);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSocketBase);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketServer_AcceptWith[] = { &wxluatype_wxSocketServer, &wxluatype_wxSocketBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSocketServer_AcceptWith(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketServer_AcceptWith[1] = {{ wxLua_wxSocketServer_AcceptWith, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxSocketServer_AcceptWith }};
//     bool AcceptWith(wxSocketBase& socket, bool wait = true)
static int LUACALL wxLua_wxSocketServer_AcceptWith(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool wait = true
    bool wait = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // wxSocketBase socket
    wxSocketBase * socket = (wxSocketBase *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSocketBase);
    // get this
    wxSocketServer * self = (wxSocketServer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketServer);
    // call AcceptWith
    bool returns = (self->AcceptWith(*socket, wait));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketServer_WaitForAccept[] = { &wxluatype_wxSocketServer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSocketServer_WaitForAccept(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketServer_WaitForAccept[1] = {{ wxLua_wxSocketServer_WaitForAccept, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxSocketServer_WaitForAccept }};
//     bool WaitForAccept(long seconds = -1, long millisecond = 0)
static int LUACALL wxLua_wxSocketServer_WaitForAccept(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long millisecond = 0
    long millisecond = (argCount >= 3 ? (long)wxlua_getnumbertype(L, 3) : 0);
    // long seconds = -1
    long seconds = (argCount >= 2 ? (long)wxlua_getnumbertype(L, 2) : -1);
    // get this
    wxSocketServer * self = (wxSocketServer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketServer);
    // call WaitForAccept
    bool returns = (self->WaitForAccept(seconds, millisecond));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketServer_delete[] = { &wxluatype_wxSocketServer, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketServer_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSocketServer_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketServer_constructor[] = { &wxluatype_wxSockAddress, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSocketServer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketServer_constructor[1] = {{ wxLua_wxSocketServer_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxSocketServer_constructor }};
//     wxSocketServer(wxSockAddress& address, wxSocketFlags flags = wxSOCKET_NONE)
static int LUACALL wxLua_wxSocketServer_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxSocketFlags flags = wxSOCKET_NONE
    wxSocketFlags flags = (argCount >= 2 ? (wxSocketFlags)wxlua_getenumtype(L, 2) : wxSOCKET_NONE);
    // wxSockAddress address
    wxSockAddress * address = (wxSockAddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSockAddress);
    // call constructor
    wxSocketServer* returns = new wxSocketServer(*address, flags);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSocketServer);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSocketServer_methods[] = {
    { "Accept", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketServer_Accept, 1, NULL },
    { "AcceptWith", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketServer_AcceptWith, 1, NULL },
    { "WaitForAccept", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketServer_WaitForAccept, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSocketServer_delete, 1, NULL },
    { "wxSocketServer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSocketServer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxSocketServer_methodCount = sizeof(wxSocketServer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSocket && wxUSE_SOCKETS


#if wxLUA_USE_wxSocket && wxUSE_SOCKETS
// ---------------------------------------------------------------------------
// Bind class wxSocketEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSocketEvent'
int wxluatype_wxSocketEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketEvent_GetClientData[] = { &wxluatype_wxSocketEvent, NULL };
static int LUACALL wxLua_wxSocketEvent_GetClientData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketEvent_GetClientData[1] = {{ wxLua_wxSocketEvent_GetClientData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketEvent_GetClientData }};
//     voidptr_long GetClientData() // C++ returns (void *) You get a number here
static int LUACALL wxLua_wxSocketEvent_GetClientData(lua_State *L)
{
    // get this
    wxSocketEvent * self = (wxSocketEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketEvent);
    // call GetClientData
    long  returns = (long )self->GetClientData();
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketEvent_GetSocket[] = { &wxluatype_wxSocketEvent, NULL };
static int LUACALL wxLua_wxSocketEvent_GetSocket(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketEvent_GetSocket[1] = {{ wxLua_wxSocketEvent_GetSocket, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketEvent_GetSocket }};
//     wxSocketBase * GetSocket() const
static int LUACALL wxLua_wxSocketEvent_GetSocket(lua_State *L)
{
    // get this
    wxSocketEvent * self = (wxSocketEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketEvent);
    // call GetSocket
    wxSocketBase* returns = (wxSocketBase*)self->GetSocket();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSocketBase);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketEvent_GetSocketEvent[] = { &wxluatype_wxSocketEvent, NULL };
static int LUACALL wxLua_wxSocketEvent_GetSocketEvent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketEvent_GetSocketEvent[1] = {{ wxLua_wxSocketEvent_GetSocketEvent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSocketEvent_GetSocketEvent }};
//     wxSocketNotify GetSocketEvent() const
static int LUACALL wxLua_wxSocketEvent_GetSocketEvent(lua_State *L)
{
    // get this
    wxSocketEvent * self = (wxSocketEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSocketEvent);
    // call GetSocketEvent
    wxSocketNotify returns = (self->GetSocketEvent());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketEvent_delete[] = { &wxluatype_wxSocketEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSocketEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxSocketEvent_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSocketEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSocketEvent_constructor[1] = {{ wxLua_wxSocketEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxSocketEvent_constructor }};
//     wxSocketEvent(int id = 0)
static int LUACALL wxLua_wxSocketEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int id = 0
    int id = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxSocketEvent* returns = new wxSocketEvent(id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSocketEvent);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSocketEvent_methods[] = {
    { "GetClientData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketEvent_GetClientData, 1, NULL },
    { "GetSocket", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketEvent_GetSocket, 1, NULL },
    { "GetSocketEvent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSocketEvent_GetSocketEvent, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSocketEvent_delete, 1, NULL },
    { "wxSocketEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSocketEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxSocketEvent_methodCount = sizeof(wxSocketEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSocket && wxUSE_SOCKETS


#if wxLUA_USE_wxSocket && wxUSE_SOCKETS
// ---------------------------------------------------------------------------
// Bind class wxSockAddress
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSockAddress'
int wxluatype_wxSockAddress = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSockAddress_Clear[] = { &wxluatype_wxSockAddress, NULL };
static int LUACALL wxLua_wxSockAddress_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSockAddress_Clear[1] = {{ wxLua_wxSockAddress_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSockAddress_Clear }};
//     void Clear()
static int LUACALL wxLua_wxSockAddress_Clear(lua_State *L)
{
    // get this
    wxSockAddress * self = (wxSockAddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSockAddress);
    // call Clear
    self->Clear();

    return 0;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSockAddress_methods[] = {
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSockAddress_Clear, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxSockAddress_methodCount = sizeof(wxSockAddress_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSocket && wxUSE_SOCKETS


#if wxLUA_USE_wxSocket && wxUSE_SOCKETS
// ---------------------------------------------------------------------------
// Bind class wxIPaddress
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxIPaddress'
int wxluatype_wxIPaddress = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxIPaddress_AnyAddress[] = { &wxluatype_wxIPaddress, NULL };
static int LUACALL wxLua_wxIPaddress_AnyAddress(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPaddress_AnyAddress[1] = {{ wxLua_wxIPaddress_AnyAddress, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIPaddress_AnyAddress }};
//     bool AnyAddress()
static int LUACALL wxLua_wxIPaddress_AnyAddress(lua_State *L)
{
    // get this
    wxIPaddress * self = (wxIPaddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIPaddress);
    // call AnyAddress
    bool returns = (self->AnyAddress());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIPaddress_Hostname1[] = { &wxluatype_wxIPaddress, NULL };
static int LUACALL wxLua_wxIPaddress_Hostname1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPaddress_Hostname1[1] = {{ wxLua_wxIPaddress_Hostname1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIPaddress_Hostname1 }};
//     wxString Hostname()
static int LUACALL wxLua_wxIPaddress_Hostname1(lua_State *L)
{
    // get this
    wxIPaddress * self = (wxIPaddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIPaddress);
    // call Hostname
    wxString returns = (self->Hostname());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIPaddress_Hostname[] = { &wxluatype_wxIPaddress, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxIPaddress_Hostname(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPaddress_Hostname[1] = {{ wxLua_wxIPaddress_Hostname, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIPaddress_Hostname }};
//     bool Hostname(const wxString& hostname)
static int LUACALL wxLua_wxIPaddress_Hostname(lua_State *L)
{
    // const wxString hostname
    const wxString hostname = wxlua_getwxStringtype(L, 2);
    // get this
    wxIPaddress * self = (wxIPaddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIPaddress);
    // call Hostname
    bool returns = (self->Hostname(hostname));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIPaddress_IPAddress[] = { &wxluatype_wxIPaddress, NULL };
static int LUACALL wxLua_wxIPaddress_IPAddress(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPaddress_IPAddress[1] = {{ wxLua_wxIPaddress_IPAddress, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIPaddress_IPAddress }};
//     wxString  IPAddress()
static int LUACALL wxLua_wxIPaddress_IPAddress(lua_State *L)
{
    // get this
    wxIPaddress * self = (wxIPaddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIPaddress);
    // call IPAddress
    wxString returns = (self->IPAddress());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIPaddress_IsLocalHost[] = { &wxluatype_wxIPaddress, NULL };
static int LUACALL wxLua_wxIPaddress_IsLocalHost(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPaddress_IsLocalHost[1] = {{ wxLua_wxIPaddress_IsLocalHost, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIPaddress_IsLocalHost }};
//     virtual bool IsLocalHost()
static int LUACALL wxLua_wxIPaddress_IsLocalHost(lua_State *L)
{
    // get this
    wxIPaddress * self = (wxIPaddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIPaddress);
    // call IsLocalHost
    bool returns = (self->IsLocalHost());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIPaddress_LocalHost[] = { &wxluatype_wxIPaddress, NULL };
static int LUACALL wxLua_wxIPaddress_LocalHost(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPaddress_LocalHost[1] = {{ wxLua_wxIPaddress_LocalHost, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIPaddress_LocalHost }};
//     bool LocalHost()
static int LUACALL wxLua_wxIPaddress_LocalHost(lua_State *L)
{
    // get this
    wxIPaddress * self = (wxIPaddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIPaddress);
    // call LocalHost
    bool returns = (self->LocalHost());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIPaddress_Service2[] = { &wxluatype_wxIPaddress, NULL };
static int LUACALL wxLua_wxIPaddress_Service2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPaddress_Service2[1] = {{ wxLua_wxIPaddress_Service2, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIPaddress_Service2 }};
//     unsigned short Service()
static int LUACALL wxLua_wxIPaddress_Service2(lua_State *L)
{
    // get this
    wxIPaddress * self = (wxIPaddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIPaddress);
    // call Service
    unsigned short returns = (self->Service());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIPaddress_Service1[] = { &wxluatype_wxIPaddress, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxIPaddress_Service1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPaddress_Service1[1] = {{ wxLua_wxIPaddress_Service1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIPaddress_Service1 }};
//     bool Service(unsigned short service)
static int LUACALL wxLua_wxIPaddress_Service1(lua_State *L)
{
    // unsigned short service
    unsigned short service = (unsigned short)wxlua_getuintegertype(L, 2);
    // get this
    wxIPaddress * self = (wxIPaddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIPaddress);
    // call Service
    bool returns = (self->Service(service));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIPaddress_Service[] = { &wxluatype_wxIPaddress, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxIPaddress_Service(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPaddress_Service[1] = {{ wxLua_wxIPaddress_Service, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIPaddress_Service }};
//     bool Service(const wxString& service)
static int LUACALL wxLua_wxIPaddress_Service(lua_State *L)
{
    // const wxString service
    const wxString service = wxlua_getwxStringtype(L, 2);
    // get this
    wxIPaddress * self = (wxIPaddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIPaddress);
    // call Service
    bool returns = (self->Service(service));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIPaddress_delete[] = { &wxluatype_wxIPaddress, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPaddress_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxIPaddress_delete }};




#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPaddress_Hostname_overload[] =
{
    { wxLua_wxIPaddress_Hostname1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIPaddress_Hostname1 },
    { wxLua_wxIPaddress_Hostname, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIPaddress_Hostname },
};
static int s_wxluafunc_wxLua_wxIPaddress_Hostname_overload_count = sizeof(s_wxluafunc_wxLua_wxIPaddress_Hostname_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPaddress_Service_overload[] =
{
    { wxLua_wxIPaddress_Service2, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIPaddress_Service2 },
    { wxLua_wxIPaddress_Service1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIPaddress_Service1 },
    { wxLua_wxIPaddress_Service, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIPaddress_Service },
};
static int s_wxluafunc_wxLua_wxIPaddress_Service_overload_count = sizeof(s_wxluafunc_wxLua_wxIPaddress_Service_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxIPaddress_methods[] = {
    { "AnyAddress", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIPaddress_AnyAddress, 1, NULL },

#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS)
    { "Hostname", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIPaddress_Hostname_overload, s_wxluafunc_wxLua_wxIPaddress_Hostname_overload_count, 0 },
#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS)

    { "IPAddress", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIPaddress_IPAddress, 1, NULL },
    { "IsLocalHost", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIPaddress_IsLocalHost, 1, NULL },
    { "LocalHost", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIPaddress_LocalHost, 1, NULL },

#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS)
    { "Service", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIPaddress_Service_overload, s_wxluafunc_wxLua_wxIPaddress_Service_overload_count, 0 },
#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxIPaddress_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxIPaddress_methodCount = sizeof(wxIPaddress_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSocket && wxUSE_SOCKETS


#if wxLUA_USE_wxSocket && wxUSE_SOCKETS
// ---------------------------------------------------------------------------
// Bind class wxIPV4address
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxIPV4address'
int wxluatype_wxIPV4address = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxIPV4address_Hostname[] = { &wxluatype_wxIPV4address, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxIPV4address_Hostname(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPV4address_Hostname[1] = {{ wxLua_wxIPV4address_Hostname, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIPV4address_Hostname }};
//     bool Hostname(unsigned long addr)
static int LUACALL wxLua_wxIPV4address_Hostname(lua_State *L)
{
    // unsigned long addr
    unsigned long addr = (unsigned long)wxlua_getuintegertype(L, 2);
    // get this
    wxIPV4address * self = (wxIPV4address *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIPV4address);
    // call Hostname
    bool returns = (self->Hostname(addr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIPV4address_delete[] = { &wxluatype_wxIPV4address, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPV4address_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxIPV4address_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxIPV4address_constructor1[] = { &wxluatype_wxIPV4address, NULL };
static int LUACALL wxLua_wxIPV4address_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPV4address_constructor1[1] = {{ wxLua_wxIPV4address_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxIPV4address_constructor1 }};
//     wxIPV4address(const wxIPV4address& other);
static int LUACALL wxLua_wxIPV4address_constructor1(lua_State *L)
{
    // const wxIPV4address other
    const wxIPV4address * other = (const wxIPV4address *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIPV4address);
    // call constructor
    wxIPV4address* returns = new wxIPV4address(*other);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIPV4address);

    return 1;
}

static int LUACALL wxLua_wxIPV4address_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPV4address_constructor[1] = {{ wxLua_wxIPV4address_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxIPV4address()
static int LUACALL wxLua_wxIPV4address_constructor(lua_State *L)
{
    // call constructor
    wxIPV4address* returns = new wxIPV4address();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIPV4address);

    return 1;
}




#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIPV4address_constructor_overload[] =
{
    { wxLua_wxIPV4address_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxIPV4address_constructor1 },
    { wxLua_wxIPV4address_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxIPV4address_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxIPV4address_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxIPV4address_methods[] = {
    { "Hostname", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIPV4address_Hostname, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxIPV4address_delete, 1, NULL },

#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS)
    { "wxIPV4address", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxIPV4address_constructor_overload, s_wxluafunc_wxLua_wxIPV4address_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS)

    { 0, 0, 0, 0 },
};

int wxIPV4address_methodCount = sizeof(wxIPV4address_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSocket && wxUSE_SOCKETS


#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL)
// ---------------------------------------------------------------------------
// Bind class wxProtocol
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxProtocol'
int wxluatype_wxProtocol = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxProtocol_Abort[] = { &wxluatype_wxProtocol, NULL };
static int LUACALL wxLua_wxProtocol_Abort(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxProtocol_Abort[1] = {{ wxLua_wxProtocol_Abort, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxProtocol_Abort }};
//     bool Abort()
static int LUACALL wxLua_wxProtocol_Abort(lua_State *L)
{
    // get this
    wxProtocol * self = (wxProtocol *)wxluaT_getuserdatatype(L, 1, wxluatype_wxProtocol);
    // call Abort
    bool returns = (self->Abort());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxProtocol_GetContentType[] = { &wxluatype_wxProtocol, NULL };
static int LUACALL wxLua_wxProtocol_GetContentType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxProtocol_GetContentType[1] = {{ wxLua_wxProtocol_GetContentType, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxProtocol_GetContentType }};
//     wxString GetContentType()
static int LUACALL wxLua_wxProtocol_GetContentType(lua_State *L)
{
    // get this
    wxProtocol * self = (wxProtocol *)wxluaT_getuserdatatype(L, 1, wxluatype_wxProtocol);
    // call GetContentType
    wxString returns = (self->GetContentType());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxProtocol_GetError[] = { &wxluatype_wxProtocol, NULL };
static int LUACALL wxLua_wxProtocol_GetError(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxProtocol_GetError[1] = {{ wxLua_wxProtocol_GetError, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxProtocol_GetError }};
//     wxProtocolError GetError()
static int LUACALL wxLua_wxProtocol_GetError(lua_State *L)
{
    // get this
    wxProtocol * self = (wxProtocol *)wxluaT_getuserdatatype(L, 1, wxluatype_wxProtocol);
    // call GetError
    wxProtocolError returns = (self->GetError());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxUSE_STREAMS) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL))
static wxLuaArgType s_wxluatypeArray_wxLua_wxProtocol_GetInputStream[] = { &wxluatype_wxProtocol, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxProtocol_GetInputStream(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxProtocol_GetInputStream[1] = {{ wxLua_wxProtocol_GetInputStream, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxProtocol_GetInputStream }};
//     wxInputStream *GetInputStream(const wxString& path)
static int LUACALL wxLua_wxProtocol_GetInputStream(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxProtocol * self = (wxProtocol *)wxluaT_getuserdatatype(L, 1, wxluatype_wxProtocol);
    // call GetInputStream
    wxInputStream* returns = (wxInputStream*)self->GetInputStream(path);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxInputStream);

    return 1;
}

#endif // (wxUSE_STREAMS) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL))

static wxLuaArgType s_wxluatypeArray_wxLua_wxProtocol_Reconnect[] = { &wxluatype_wxProtocol, NULL };
static int LUACALL wxLua_wxProtocol_Reconnect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxProtocol_Reconnect[1] = {{ wxLua_wxProtocol_Reconnect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxProtocol_Reconnect }};
//     bool Reconnect()
static int LUACALL wxLua_wxProtocol_Reconnect(lua_State *L)
{
    // get this
    wxProtocol * self = (wxProtocol *)wxluaT_getuserdatatype(L, 1, wxluatype_wxProtocol);
    // call Reconnect
    bool returns = (self->Reconnect());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxProtocol_SetPassword[] = { &wxluatype_wxProtocol, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxProtocol_SetPassword(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxProtocol_SetPassword[1] = {{ wxLua_wxProtocol_SetPassword, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxProtocol_SetPassword }};
//     void SetPassword(const wxString& user)
static int LUACALL wxLua_wxProtocol_SetPassword(lua_State *L)
{
    // const wxString user
    const wxString user = wxlua_getwxStringtype(L, 2);
    // get this
    wxProtocol * self = (wxProtocol *)wxluaT_getuserdatatype(L, 1, wxluatype_wxProtocol);
    // call SetPassword
    self->SetPassword(user);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxProtocol_SetUser[] = { &wxluatype_wxProtocol, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxProtocol_SetUser(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxProtocol_SetUser[1] = {{ wxLua_wxProtocol_SetUser, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxProtocol_SetUser }};
//     void SetUser(const wxString& user)
static int LUACALL wxLua_wxProtocol_SetUser(lua_State *L)
{
    // const wxString user
    const wxString user = wxlua_getwxStringtype(L, 2);
    // get this
    wxProtocol * self = (wxProtocol *)wxluaT_getuserdatatype(L, 1, wxluatype_wxProtocol);
    // call SetUser
    self->SetUser(user);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxProtocol_delete[] = { &wxluatype_wxProtocol, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxProtocol_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxProtocol_delete }};




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxProtocol_methods[] = {
    { "Abort", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxProtocol_Abort, 1, NULL },
    { "GetContentType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxProtocol_GetContentType, 1, NULL },
    { "GetError", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxProtocol_GetError, 1, NULL },

#if (wxUSE_STREAMS) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL))
    { "GetInputStream", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxProtocol_GetInputStream, 1, NULL },
#endif // (wxUSE_STREAMS) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL))

    { "Reconnect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxProtocol_Reconnect, 1, NULL },
    { "SetPassword", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxProtocol_SetPassword, 1, NULL },
    { "SetUser", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxProtocol_SetUser, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxProtocol_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxProtocol_methodCount = sizeof(wxProtocol_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL)


#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_HTTP)
// ---------------------------------------------------------------------------
// Bind class wxHTTP
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHTTP'
int wxluatype_wxHTTP = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxHTTP_GetHeader[] = { &wxluatype_wxHTTP, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHTTP_GetHeader(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHTTP_GetHeader[1] = {{ wxLua_wxHTTP_GetHeader, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHTTP_GetHeader }};
//     wxString GetHeader(const wxString& header)
static int LUACALL wxLua_wxHTTP_GetHeader(lua_State *L)
{
    // const wxString header
    const wxString header = wxlua_getwxStringtype(L, 2);
    // get this
    wxHTTP * self = (wxHTTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHTTP);
    // call GetHeader
    wxString returns = (self->GetHeader(header));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHTTP_GetResponse[] = { &wxluatype_wxHTTP, NULL };
static int LUACALL wxLua_wxHTTP_GetResponse(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHTTP_GetResponse[1] = {{ wxLua_wxHTTP_GetResponse, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHTTP_GetResponse }};
//     int GetResponse() const
static int LUACALL wxLua_wxHTTP_GetResponse(lua_State *L)
{
    // get this
    wxHTTP * self = (wxHTTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHTTP);
    // call GetResponse
    int returns = (self->GetResponse());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHTTP_SetHeader[] = { &wxluatype_wxHTTP, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHTTP_SetHeader(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHTTP_SetHeader[1] = {{ wxLua_wxHTTP_SetHeader, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxHTTP_SetHeader }};
//     void SetHeader(const wxString& header, const wxString& h_data)
static int LUACALL wxLua_wxHTTP_SetHeader(lua_State *L)
{
    // const wxString h_data
    const wxString h_data = wxlua_getwxStringtype(L, 3);
    // const wxString header
    const wxString header = wxlua_getwxStringtype(L, 2);
    // get this
    wxHTTP * self = (wxHTTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHTTP);
    // call SetHeader
    self->SetHeader(header, h_data);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHTTP_delete[] = { &wxluatype_wxHTTP, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHTTP_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxHTTP_delete }};

static int LUACALL wxLua_wxHTTP_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHTTP_constructor[1] = {{ wxLua_wxHTTP_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxHTTP()
static int LUACALL wxLua_wxHTTP_constructor(lua_State *L)
{
    // call constructor
    wxHTTP* returns = new wxHTTP();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHTTP);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHTTP_methods[] = {
    { "GetHeader", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHTTP_GetHeader, 1, NULL },
    { "GetResponse", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHTTP_GetResponse, 1, NULL },
    { "SetHeader", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHTTP_SetHeader, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxHTTP_delete, 1, NULL },
    { "wxHTTP", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHTTP_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxHTTP_methodCount = sizeof(wxHTTP_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_HTTP)


#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP)
// ---------------------------------------------------------------------------
// Bind class wxFTP
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFTP'
int wxluatype_wxFTP = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_ChDir[] = { &wxluatype_wxFTP, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFTP_ChDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_ChDir[1] = {{ wxLua_wxFTP_ChDir, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFTP_ChDir }};
//     bool ChDir(const wxString& dir)
static int LUACALL wxLua_wxFTP_ChDir(lua_State *L)
{
    // const wxString dir
    const wxString dir = wxlua_getwxStringtype(L, 2);
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call ChDir
    bool returns = (self->ChDir(dir));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_CheckCommand[] = { &wxluatype_wxFTP, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFTP_CheckCommand(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_CheckCommand[1] = {{ wxLua_wxFTP_CheckCommand, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxFTP_CheckCommand }};
//     bool CheckCommand(const wxString& command, char ret)
static int LUACALL wxLua_wxFTP_CheckCommand(lua_State *L)
{
    // char ret
    char ret = (char)wxlua_getnumbertype(L, 3);
    // const wxString command
    const wxString command = wxlua_getwxStringtype(L, 2);
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call CheckCommand
    bool returns = (self->CheckCommand(command, ret));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_FileExists[] = { &wxluatype_wxFTP, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFTP_FileExists(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_FileExists[1] = {{ wxLua_wxFTP_FileExists, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFTP_FileExists }};
//     bool FileExists(const wxString& filename)
static int LUACALL wxLua_wxFTP_FileExists(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call FileExists
    bool returns = (self->FileExists(filename));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP))
static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_GetDirList[] = { &wxluatype_wxFTP, &wxluatype_wxArrayString, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFTP_GetDirList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_GetDirList[1] = {{ wxLua_wxFTP_GetDirList, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFTP_GetDirList }};
//     bool GetDirList(wxArrayString& files, const wxString& wildcard = "")
static int LUACALL wxLua_wxFTP_GetDirList(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString wildcard = ""
    const wxString wildcard = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // wxArrayString files
    wxArrayString * files = (wxArrayString *)wxluaT_getuserdatatype(L, 2, wxluatype_wxArrayString);
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call GetDirList
    bool returns = (self->GetDirList(*files, wildcard));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP))

static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_GetFileSize[] = { &wxluatype_wxFTP, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFTP_GetFileSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_GetFileSize[1] = {{ wxLua_wxFTP_GetFileSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFTP_GetFileSize }};
//     int GetFileSize(const wxString& filename)
static int LUACALL wxLua_wxFTP_GetFileSize(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call GetFileSize
    int returns = (self->GetFileSize(filename));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP))
static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_GetFilesList[] = { &wxluatype_wxFTP, &wxluatype_wxArrayString, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFTP_GetFilesList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_GetFilesList[1] = {{ wxLua_wxFTP_GetFilesList, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFTP_GetFilesList }};
//     bool GetFilesList(wxArrayString& files, const wxString& wildcard = "")
static int LUACALL wxLua_wxFTP_GetFilesList(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString wildcard = ""
    const wxString wildcard = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // wxArrayString files
    wxArrayString * files = (wxArrayString *)wxluaT_getuserdatatype(L, 2, wxluatype_wxArrayString);
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call GetFilesList
    bool returns = (self->GetFilesList(*files, wildcard));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP))

static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_GetLastResult[] = { &wxluatype_wxFTP, NULL };
static int LUACALL wxLua_wxFTP_GetLastResult(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_GetLastResult[1] = {{ wxLua_wxFTP_GetLastResult, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFTP_GetLastResult }};
//     wxString GetLastResult()
static int LUACALL wxLua_wxFTP_GetLastResult(lua_State *L)
{
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call GetLastResult
    wxString returns = (self->GetLastResult());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxUSE_STREAMS) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP))
static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_GetOutputStream[] = { &wxluatype_wxFTP, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFTP_GetOutputStream(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_GetOutputStream[1] = {{ wxLua_wxFTP_GetOutputStream, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFTP_GetOutputStream }};
//     wxOutputStream * GetOutputStream(const wxString& file)
static int LUACALL wxLua_wxFTP_GetOutputStream(lua_State *L)
{
    // const wxString file
    const wxString file = wxlua_getwxStringtype(L, 2);
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call GetOutputStream
    wxOutputStream* returns = (wxOutputStream*)self->GetOutputStream(file);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxOutputStream);

    return 1;
}

#endif // (wxUSE_STREAMS) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP))

static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_MkDir[] = { &wxluatype_wxFTP, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFTP_MkDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_MkDir[1] = {{ wxLua_wxFTP_MkDir, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFTP_MkDir }};
//     bool MkDir(const wxString& dir)
static int LUACALL wxLua_wxFTP_MkDir(lua_State *L)
{
    // const wxString dir
    const wxString dir = wxlua_getwxStringtype(L, 2);
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call MkDir
    bool returns = (self->MkDir(dir));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_Pwd[] = { &wxluatype_wxFTP, NULL };
static int LUACALL wxLua_wxFTP_Pwd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_Pwd[1] = {{ wxLua_wxFTP_Pwd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFTP_Pwd }};
//     wxString Pwd()
static int LUACALL wxLua_wxFTP_Pwd(lua_State *L)
{
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call Pwd
    wxString returns = (self->Pwd());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_Rename[] = { &wxluatype_wxFTP, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFTP_Rename(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_Rename[1] = {{ wxLua_wxFTP_Rename, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxFTP_Rename }};
//     bool Rename(const wxString& src, const wxString& dst)
static int LUACALL wxLua_wxFTP_Rename(lua_State *L)
{
    // const wxString dst
    const wxString dst = wxlua_getwxStringtype(L, 3);
    // const wxString src
    const wxString src = wxlua_getwxStringtype(L, 2);
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call Rename
    bool returns = (self->Rename(src, dst));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_RmDir[] = { &wxluatype_wxFTP, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFTP_RmDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_RmDir[1] = {{ wxLua_wxFTP_RmDir, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFTP_RmDir }};
//     bool RmDir(const wxString& dir)
static int LUACALL wxLua_wxFTP_RmDir(lua_State *L)
{
    // const wxString dir
    const wxString dir = wxlua_getwxStringtype(L, 2);
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call RmDir
    bool returns = (self->RmDir(dir));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_RmFile[] = { &wxluatype_wxFTP, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFTP_RmFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_RmFile[1] = {{ wxLua_wxFTP_RmFile, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFTP_RmFile }};
//     bool RmFile(const wxString& path)
static int LUACALL wxLua_wxFTP_RmFile(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call RmFile
    bool returns = (self->RmFile(path));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_SendCommand[] = { &wxluatype_wxFTP, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFTP_SendCommand(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_SendCommand[1] = {{ wxLua_wxFTP_SendCommand, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFTP_SendCommand }};
//     char SendCommand(const wxString& command)
static int LUACALL wxLua_wxFTP_SendCommand(lua_State *L)
{
    // const wxString command
    const wxString command = wxlua_getwxStringtype(L, 2);
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call SendCommand
    char returns = (self->SendCommand(command));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_SetAscii[] = { &wxluatype_wxFTP, NULL };
static int LUACALL wxLua_wxFTP_SetAscii(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_SetAscii[1] = {{ wxLua_wxFTP_SetAscii, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFTP_SetAscii }};
//     bool SetAscii()
static int LUACALL wxLua_wxFTP_SetAscii(lua_State *L)
{
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call SetAscii
    bool returns = (self->SetAscii());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_SetBinary[] = { &wxluatype_wxFTP, NULL };
static int LUACALL wxLua_wxFTP_SetBinary(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_SetBinary[1] = {{ wxLua_wxFTP_SetBinary, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFTP_SetBinary }};
//     bool SetBinary()
static int LUACALL wxLua_wxFTP_SetBinary(lua_State *L)
{
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call SetBinary
    bool returns = (self->SetBinary());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_SetPassive[] = { &wxluatype_wxFTP, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxFTP_SetPassive(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_SetPassive[1] = {{ wxLua_wxFTP_SetPassive, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFTP_SetPassive }};
//     void SetPassive(bool pasv)
static int LUACALL wxLua_wxFTP_SetPassive(lua_State *L)
{
    // bool pasv
    bool pasv = wxlua_getbooleantype(L, 2);
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call SetPassive
    self->SetPassive(pasv);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_SetTransferMode[] = { &wxluatype_wxFTP, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFTP_SetTransferMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_SetTransferMode[1] = {{ wxLua_wxFTP_SetTransferMode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFTP_SetTransferMode }};
//     bool SetTransferMode(wxFTP::TransferMode mode)
static int LUACALL wxLua_wxFTP_SetTransferMode(lua_State *L)
{
    // wxFTP::TransferMode mode
    wxFTP::TransferMode mode = (wxFTP::TransferMode)wxlua_getenumtype(L, 2);
    // get this
    wxFTP * self = (wxFTP *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFTP);
    // call SetTransferMode
    bool returns = (self->SetTransferMode(mode));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFTP_delete[] = { &wxluatype_wxFTP, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFTP_delete }};

static int LUACALL wxLua_wxFTP_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFTP_constructor[1] = {{ wxLua_wxFTP_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxFTP()
static int LUACALL wxLua_wxFTP_constructor(lua_State *L)
{
    // call constructor
    wxFTP* returns = new wxFTP();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFTP);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFTP_methods[] = {
    { "ChDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_ChDir, 1, NULL },
    { "CheckCommand", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_CheckCommand, 1, NULL },
    { "FileExists", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_FileExists, 1, NULL },

#if (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP))
    { "GetDirList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_GetDirList, 1, NULL },
#endif // (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP))

    { "GetFileSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_GetFileSize, 1, NULL },

#if (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP))
    { "GetFilesList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_GetFilesList, 1, NULL },
#endif // (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP))

    { "GetLastResult", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_GetLastResult, 1, NULL },

#if (wxUSE_STREAMS) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP))
    { "GetOutputStream", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_GetOutputStream, 1, NULL },
#endif // (wxUSE_STREAMS) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP))

    { "MkDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_MkDir, 1, NULL },
    { "Pwd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_Pwd, 1, NULL },
    { "Rename", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_Rename, 1, NULL },
    { "RmDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_RmDir, 1, NULL },
    { "RmFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_RmFile, 1, NULL },
    { "SendCommand", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_SendCommand, 1, NULL },
    { "SetAscii", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_SetAscii, 1, NULL },
    { "SetBinary", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_SetBinary, 1, NULL },
    { "SetPassive", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_SetPassive, 1, NULL },
    { "SetTransferMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFTP_SetTransferMode, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFTP_delete, 1, NULL },
    { "wxFTP", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFTP_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxFTP_methodCount = sizeof(wxFTP_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxFTP_enums[] = {
#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP)
        { "ASCII", wxFTP::ASCII },
        { "BINARY", wxFTP::BINARY },
        { "NONE", wxFTP::NONE },
#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP)

    { NULL, 0, },
};
int wxFTP_enumCount = sizeof(wxFTP_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP)


#if wxLUA_USE_wxSocket && wxUSE_SOCKETS
// ---------------------------------------------------------------------------
// Bind class wxURI
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxURI'
int wxluatype_wxURI = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_BuildURI[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_BuildURI(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_BuildURI[1] = {{ wxLua_wxURI_BuildURI, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_BuildURI }};
//     wxString BuildURI() const
static int LUACALL wxLua_wxURI_BuildURI(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call BuildURI
    wxString returns = (self->BuildURI());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_BuildUnescapedURI[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_BuildUnescapedURI(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_BuildUnescapedURI[1] = {{ wxLua_wxURI_BuildUnescapedURI, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_BuildUnescapedURI }};
//     wxString BuildUnescapedURI() const
static int LUACALL wxLua_wxURI_BuildUnescapedURI(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call BuildUnescapedURI
    wxString returns = (self->BuildUnescapedURI());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_Create[] = { &wxluatype_wxURI, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxURI_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_Create[1] = {{ wxLua_wxURI_Create, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxURI_Create }};
//     wxString Create(const wxString& uri)
static int LUACALL wxLua_wxURI_Create(lua_State *L)
{
    // const wxString uri
    const wxString uri = wxlua_getwxStringtype(L, 2);
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call Create
    wxString returns = (self->Create(uri));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_GetFragment[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_GetFragment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_GetFragment[1] = {{ wxLua_wxURI_GetFragment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_GetFragment }};
//     wxString GetFragment() const
static int LUACALL wxLua_wxURI_GetFragment(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call GetFragment
    wxString returns = (self->GetFragment());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_GetHostType[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_GetHostType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_GetHostType[1] = {{ wxLua_wxURI_GetHostType, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_GetHostType }};
//     wxURIHostType GetHostType() const
static int LUACALL wxLua_wxURI_GetHostType(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call GetHostType
    wxURIHostType returns = (self->GetHostType());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_GetPassword[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_GetPassword(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_GetPassword[1] = {{ wxLua_wxURI_GetPassword, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_GetPassword }};
//     wxString GetPassword() const
static int LUACALL wxLua_wxURI_GetPassword(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call GetPassword
    wxString returns = (self->GetPassword());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_GetPath[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_GetPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_GetPath[1] = {{ wxLua_wxURI_GetPath, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_GetPath }};
//     wxString GetPath() const
static int LUACALL wxLua_wxURI_GetPath(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call GetPath
    wxString returns = (self->GetPath());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_GetPort[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_GetPort(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_GetPort[1] = {{ wxLua_wxURI_GetPort, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_GetPort }};
//     wxString GetPort() const
static int LUACALL wxLua_wxURI_GetPort(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call GetPort
    wxString returns = (self->GetPort());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_GetQuery[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_GetQuery(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_GetQuery[1] = {{ wxLua_wxURI_GetQuery, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_GetQuery }};
//     wxString GetQuery() const
static int LUACALL wxLua_wxURI_GetQuery(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call GetQuery
    wxString returns = (self->GetQuery());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_GetScheme[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_GetScheme(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_GetScheme[1] = {{ wxLua_wxURI_GetScheme, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_GetScheme }};
//     wxString GetScheme() const
static int LUACALL wxLua_wxURI_GetScheme(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call GetScheme
    wxString returns = (self->GetScheme());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_GetServer[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_GetServer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_GetServer[1] = {{ wxLua_wxURI_GetServer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_GetServer }};
//     wxString GetServer() const
static int LUACALL wxLua_wxURI_GetServer(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call GetServer
    wxString returns = (self->GetServer());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_GetUser[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_GetUser(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_GetUser[1] = {{ wxLua_wxURI_GetUser, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_GetUser }};
//     wxString GetUser() const
static int LUACALL wxLua_wxURI_GetUser(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call GetUser
    wxString returns = (self->GetUser());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_GetUserInfo[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_GetUserInfo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_GetUserInfo[1] = {{ wxLua_wxURI_GetUserInfo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_GetUserInfo }};
//     wxString GetUserInfo() const
static int LUACALL wxLua_wxURI_GetUserInfo(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call GetUserInfo
    wxString returns = (self->GetUserInfo());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_HasFragment[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_HasFragment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_HasFragment[1] = {{ wxLua_wxURI_HasFragment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_HasFragment }};
//     bool HasFragment() const
static int LUACALL wxLua_wxURI_HasFragment(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call HasFragment
    bool returns = (self->HasFragment());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_HasPath[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_HasPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_HasPath[1] = {{ wxLua_wxURI_HasPath, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_HasPath }};
//     bool HasPath() const
static int LUACALL wxLua_wxURI_HasPath(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call HasPath
    bool returns = (self->HasPath());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_HasPort[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_HasPort(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_HasPort[1] = {{ wxLua_wxURI_HasPort, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_HasPort }};
//     bool HasPort() const
static int LUACALL wxLua_wxURI_HasPort(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call HasPort
    bool returns = (self->HasPort());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_HasQuery[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_HasQuery(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_HasQuery[1] = {{ wxLua_wxURI_HasQuery, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_HasQuery }};
//     bool HasQuery() const
static int LUACALL wxLua_wxURI_HasQuery(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call HasQuery
    bool returns = (self->HasQuery());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_HasScheme[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_HasScheme(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_HasScheme[1] = {{ wxLua_wxURI_HasScheme, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_HasScheme }};
//     bool HasScheme() const
static int LUACALL wxLua_wxURI_HasScheme(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call HasScheme
    bool returns = (self->HasScheme());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_HasServer[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_HasServer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_HasServer[1] = {{ wxLua_wxURI_HasServer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_HasServer }};
//     bool HasServer() const
static int LUACALL wxLua_wxURI_HasServer(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call HasServer
    bool returns = (self->HasServer());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_HasUserInfo[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_HasUserInfo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_HasUserInfo[1] = {{ wxLua_wxURI_HasUserInfo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_HasUserInfo }};
//     bool HasUserInfo() const
static int LUACALL wxLua_wxURI_HasUserInfo(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call HasUserInfo
    bool returns = (self->HasUserInfo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_IsReference[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_IsReference(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_IsReference[1] = {{ wxLua_wxURI_IsReference, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURI_IsReference }};
//     bool IsReference() const
static int LUACALL wxLua_wxURI_IsReference(lua_State *L)
{
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call IsReference
    bool returns = (self->IsReference());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_Resolve[] = { &wxluatype_wxURI, &wxluatype_wxURI, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxURI_Resolve(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_Resolve[1] = {{ wxLua_wxURI_Resolve, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxURI_Resolve }};
//     void Resolve(const wxURI& base, int flags = wxURI_STRICT)
static int LUACALL wxLua_wxURI_Resolve(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxURI_STRICT
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxURI_STRICT);
    // const wxURI base
    const wxURI * base = (const wxURI *)wxluaT_getuserdatatype(L, 2, wxluatype_wxURI);
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call Resolve
    self->Resolve(*base, flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_Unescape[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxURI_Unescape(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_Unescape[1] = {{ wxLua_wxURI_Unescape, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxURI_Unescape }};
//     static wxString Unescape (const wxString& szEscapedURI)
static int LUACALL wxLua_wxURI_Unescape(lua_State *L)
{
    // const wxString szEscapedURI
    const wxString szEscapedURI = wxlua_getwxStringtype(L, 1);
    // call Unescape
    wxString returns = (wxURI::Unescape(szEscapedURI));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_delete[] = { &wxluatype_wxURI, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxURI_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_op_eq[] = { &wxluatype_wxURI, &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_op_eq[1] = {{ wxLua_wxURI_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxURI_op_eq }};
//     %operator bool operator == (const wxURI& uri) const
static int LUACALL wxLua_wxURI_op_eq(lua_State *L)
{
    // const wxURI uri
    const wxURI * uri = (const wxURI *)wxluaT_getuserdatatype(L, 2, wxluatype_wxURI);
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call op_eq
    bool returns = ((*self)==(*uri));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_op_set[] = { &wxluatype_wxURI, &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_op_set[1] = {{ wxLua_wxURI_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxURI_op_set }};
//     %operator wxURI& operator = (const wxURI& uri);
static int LUACALL wxLua_wxURI_op_set(lua_State *L)
{
    // const wxURI uri
    const wxURI * uri = (const wxURI *)wxluaT_getuserdatatype(L, 2, wxluatype_wxURI);
    // get this
    wxURI * self = (wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call op_set
    (*self)=(*uri);
    wxURI* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxURI);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_constructor2[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURI_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_constructor2[1] = {{ wxLua_wxURI_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxURI_constructor2 }};
//     wxURI(const wxURI& uri)
static int LUACALL wxLua_wxURI_constructor2(lua_State *L)
{
    // const wxURI uri
    const wxURI * uri = (const wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call constructor
    wxURI* returns = new wxURI(*uri);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxURI);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURI_constructor1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxURI_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_constructor1[1] = {{ wxLua_wxURI_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxURI_constructor1 }};
//     wxURI(const wxString& uri)
static int LUACALL wxLua_wxURI_constructor1(lua_State *L)
{
    // const wxString uri
    const wxString uri = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxURI* returns = new wxURI(uri);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxURI);

    return 1;
}

static int LUACALL wxLua_wxURI_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_constructor[1] = {{ wxLua_wxURI_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxURI()
static int LUACALL wxLua_wxURI_constructor(lua_State *L)
{
    // call constructor
    wxURI* returns = new wxURI();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxURI);

    return 1;
}




#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURI_constructor_overload[] =
{
    { wxLua_wxURI_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxURI_constructor2 },
    { wxLua_wxURI_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxURI_constructor1 },
    { wxLua_wxURI_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxURI_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxURI_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxURI_methods[] = {
    { "BuildURI", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_BuildURI, 1, NULL },
    { "BuildUnescapedURI", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_BuildUnescapedURI, 1, NULL },
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_Create, 1, NULL },
    { "GetFragment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_GetFragment, 1, NULL },
    { "GetHostType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_GetHostType, 1, NULL },
    { "GetPassword", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_GetPassword, 1, NULL },
    { "GetPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_GetPath, 1, NULL },
    { "GetPort", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_GetPort, 1, NULL },
    { "GetQuery", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_GetQuery, 1, NULL },
    { "GetScheme", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_GetScheme, 1, NULL },
    { "GetServer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_GetServer, 1, NULL },
    { "GetUser", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_GetUser, 1, NULL },
    { "GetUserInfo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_GetUserInfo, 1, NULL },
    { "HasFragment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_HasFragment, 1, NULL },
    { "HasPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_HasPath, 1, NULL },
    { "HasPort", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_HasPort, 1, NULL },
    { "HasQuery", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_HasQuery, 1, NULL },
    { "HasScheme", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_HasScheme, 1, NULL },
    { "HasServer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_HasServer, 1, NULL },
    { "HasUserInfo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_HasUserInfo, 1, NULL },
    { "IsReference", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_IsReference, 1, NULL },
    { "Resolve", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_Resolve, 1, NULL },
    { "Unescape", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxURI_Unescape, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxURI_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_op_eq, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURI_op_set, 1, NULL },

#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS)
    { "wxURI", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxURI_constructor_overload, s_wxluafunc_wxLua_wxURI_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS)

    { 0, 0, 0, 0 },
};

int wxURI_methodCount = sizeof(wxURI_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSocket && wxUSE_SOCKETS


#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)
// ---------------------------------------------------------------------------
// Bind class wxURL
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxURL'
int wxluatype_wxURL = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxURL_GetError[] = { &wxluatype_wxURL, NULL };
static int LUACALL wxLua_wxURL_GetError(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURL_GetError[1] = {{ wxLua_wxURL_GetError, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURL_GetError }};
//     wxURLError GetError() const
static int LUACALL wxLua_wxURL_GetError(lua_State *L)
{
    // get this
    wxURL * self = (wxURL *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURL);
    // call GetError
    wxURLError returns = (self->GetError());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxURL_GetInputStream[] = { &wxluatype_wxURL, NULL };
static int LUACALL wxLua_wxURL_GetInputStream(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURL_GetInputStream[1] = {{ wxLua_wxURL_GetInputStream, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURL_GetInputStream }};
//     wxInputStream *GetInputStream()
static int LUACALL wxLua_wxURL_GetInputStream(lua_State *L)
{
    // get this
    wxURL * self = (wxURL *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURL);
    // call GetInputStream
    wxInputStream* returns = (wxInputStream*)self->GetInputStream();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxInputStream);

    return 1;
}

#endif // ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)) && (wxUSE_STREAMS)

#if ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL))
static wxLuaArgType s_wxluatypeArray_wxLua_wxURL_GetProtocol[] = { &wxluatype_wxURL, NULL };
static int LUACALL wxLua_wxURL_GetProtocol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURL_GetProtocol[1] = {{ wxLua_wxURL_GetProtocol, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURL_GetProtocol }};
//     wxProtocol& GetProtocol()
static int LUACALL wxLua_wxURL_GetProtocol(lua_State *L)
{
    // get this
    wxURL * self = (wxURL *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURL);
    // call GetProtocol
    wxProtocol* returns = &self->GetProtocol();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxProtocol);

    return 1;
}

#endif // ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL))

static wxLuaArgType s_wxluatypeArray_wxLua_wxURL_GetURL[] = { &wxluatype_wxURL, NULL };
static int LUACALL wxLua_wxURL_GetURL(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURL_GetURL[1] = {{ wxLua_wxURL_GetURL, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURL_GetURL }};
//     wxString GetURL() const
static int LUACALL wxLua_wxURL_GetURL(lua_State *L)
{
    // get this
    wxURL * self = (wxURL *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURL);
    // call GetURL
    wxString returns = (self->GetURL());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL) && (wxUSE_PROTOCOL_HTTP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxURL_SetDefaultProxy[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxURL_SetDefaultProxy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURL_SetDefaultProxy[1] = {{ wxLua_wxURL_SetDefaultProxy, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxURL_SetDefaultProxy }};
//     static void SetDefaultProxy(const wxString& url_proxy)
static int LUACALL wxLua_wxURL_SetDefaultProxy(lua_State *L)
{
    // const wxString url_proxy
    const wxString url_proxy = wxlua_getwxStringtype(L, 1);
    // call SetDefaultProxy
    wxURL::SetDefaultProxy(url_proxy);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURL_SetProxy[] = { &wxluatype_wxURL, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxURL_SetProxy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURL_SetProxy[1] = {{ wxLua_wxURL_SetProxy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxURL_SetProxy }};
//     void SetProxy(const wxString& url_proxy)
static int LUACALL wxLua_wxURL_SetProxy(lua_State *L)
{
    // const wxString url_proxy
    const wxString url_proxy = wxlua_getwxStringtype(L, 2);
    // get this
    wxURL * self = (wxURL *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURL);
    // call SetProxy
    self->SetProxy(url_proxy);

    return 0;
}

#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL) && (wxUSE_PROTOCOL_HTTP)

static wxLuaArgType s_wxluatypeArray_wxLua_wxURL_delete[] = { &wxluatype_wxURL, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURL_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxURL_delete }};


#if ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)) && (wxLUA_USE_wxSocket && wxUSE_SOCKETS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxURL_constructor1[] = { &wxluatype_wxURI, NULL };
static int LUACALL wxLua_wxURL_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxURL_constructor1[1] = {{ wxLua_wxURL_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxURL_constructor1 }};
//     wxURL(const wxURI& url)
static int LUACALL wxLua_wxURL_constructor1(lua_State *L)
{
    // const wxURI url
    const wxURI * url = (const wxURI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURI);
    // call constructor
    wxURL* returns = new wxURL(*url);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxURL);

    return 1;
}

#endif // ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)) && (wxLUA_USE_wxSocket && wxUSE_SOCKETS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxURL_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxURL_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxURL_constructor[1] = {{ wxLua_wxURL_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxURL_constructor }};
//     wxURL(const wxString& sUrl)
static int LUACALL wxLua_wxURL_constructor(lua_State *L)
{
    // const wxString sUrl
    const wxString sUrl = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxURL* returns = new wxURL(sUrl);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxURL);

    return 1;
}




#if (((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)) && (wxLUA_USE_wxSocket && wxUSE_SOCKETS))||((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURL_constructor_overload[] =
{

#if ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)) && (wxLUA_USE_wxSocket && wxUSE_SOCKETS)
    { wxLua_wxURL_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxURL_constructor1 },
#endif // ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)) && (wxLUA_USE_wxSocket && wxUSE_SOCKETS)
    { wxLua_wxURL_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxURL_constructor },
};
static int s_wxluafunc_wxLua_wxURL_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxURL_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)) && (wxLUA_USE_wxSocket && wxUSE_SOCKETS))||((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxURL_methods[] = {
    { "GetError", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURL_GetError, 1, NULL },

#if ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)) && (wxUSE_STREAMS)
    { "GetInputStream", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURL_GetInputStream, 1, NULL },
#endif // ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)) && (wxUSE_STREAMS)

#if ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL))
    { "GetProtocol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURL_GetProtocol, 1, NULL },
#endif // ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)) && ((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL))

    { "GetURL", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURL_GetURL, 1, NULL },

#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL) && (wxUSE_PROTOCOL_HTTP)
    { "SetDefaultProxy", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxURL_SetDefaultProxy, 1, NULL },
    { "SetProxy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURL_SetProxy, 1, NULL },
#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL) && (wxUSE_PROTOCOL_HTTP)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxURL_delete, 1, NULL },

#if (((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)) && (wxLUA_USE_wxSocket && wxUSE_SOCKETS))||((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL))
    { "wxURL", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxURL_constructor_overload, s_wxluafunc_wxLua_wxURL_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)) && (wxLUA_USE_wxSocket && wxUSE_SOCKETS))||((wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL))

    { 0, 0, 0, 0 },
};

int wxURL_methodCount = sizeof(wxURL_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)



// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxnet_bind.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------


// ---------------------------------------------------------------------------
// wxLuaGetEventList_wxnet() is called to register events
// ---------------------------------------------------------------------------

wxLuaBindEvent* wxLuaGetEventList_wxnet(size_t &count)
{
    static wxLuaBindEvent eventList[] =
    {
#if wxLUA_USE_wxSocket && wxUSE_SOCKETS
        { "wxEVT_SOCKET", &wxEVT_SOCKET, &wxluatype_wxSocketEvent },
#endif // wxLUA_USE_wxSocket && wxUSE_SOCKETS


        { 0, 0, 0 },
    };
    count = sizeof(eventList)/sizeof(wxLuaBindEvent) - 1;
    return eventList;
}

// ---------------------------------------------------------------------------
// wxLuaGetDefineList_wxnet() is called to register %define and %enum
// ---------------------------------------------------------------------------

wxLuaBindNumber* wxLuaGetDefineList_wxnet(size_t &count)
{
    static wxLuaBindNumber numberList[] =
    {
#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL)
        { "wxPROTO_ABRT", wxPROTO_ABRT },
        { "wxPROTO_CONNERR", wxPROTO_CONNERR },
        { "wxPROTO_INVVAL", wxPROTO_INVVAL },
        { "wxPROTO_NETERR", wxPROTO_NETERR },
        { "wxPROTO_NOERR", wxPROTO_NOERR },
        { "wxPROTO_NOFILE", wxPROTO_NOFILE },
        { "wxPROTO_NOHNDLR", wxPROTO_NOHNDLR },
        { "wxPROTO_PROTERR", wxPROTO_PROTERR },
        { "wxPROTO_RCNCT", wxPROTO_RCNCT },
        { "wxPROTO_STREAMING", wxPROTO_STREAMING },
#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL)

#if wxLUA_USE_wxSocket && wxUSE_SOCKETS
        { "wxSOCKET_BASE", wxSOCKET_BASE },
        { "wxSOCKET_BLOCK", wxSOCKET_BLOCK },
        { "wxSOCKET_CLIENT", wxSOCKET_CLIENT },
        { "wxSOCKET_CONNECTION", wxSOCKET_CONNECTION },
        { "wxSOCKET_CONNECTION_FLAG", wxSOCKET_CONNECTION_FLAG },
        { "wxSOCKET_DATAGRAM", wxSOCKET_DATAGRAM },
        { "wxSOCKET_INPUT", wxSOCKET_INPUT },
        { "wxSOCKET_INPUT_FLAG", wxSOCKET_INPUT_FLAG },
        { "wxSOCKET_INVADDR", wxSOCKET_INVADDR },
        { "wxSOCKET_INVOP", wxSOCKET_INVOP },
        { "wxSOCKET_INVPORT", wxSOCKET_INVPORT },
        { "wxSOCKET_INVSOCK", wxSOCKET_INVSOCK },
        { "wxSOCKET_IOERR", wxSOCKET_IOERR },
        { "wxSOCKET_LOST", wxSOCKET_LOST },
        { "wxSOCKET_LOST_FLAG", wxSOCKET_LOST_FLAG },
        { "wxSOCKET_MEMERR", wxSOCKET_MEMERR },
        { "wxSOCKET_NOERROR", wxSOCKET_NOERROR },
        { "wxSOCKET_NOHOST", wxSOCKET_NOHOST },
        { "wxSOCKET_NONE", wxSOCKET_NONE },
        { "wxSOCKET_NOWAIT", wxSOCKET_NOWAIT },
        { "wxSOCKET_OUTPUT", wxSOCKET_OUTPUT },
        { "wxSOCKET_OUTPUT_FLAG", wxSOCKET_OUTPUT_FLAG },
        { "wxSOCKET_REUSEADDR", wxSOCKET_REUSEADDR },
        { "wxSOCKET_SERVER", wxSOCKET_SERVER },
        { "wxSOCKET_TIMEDOUT", wxSOCKET_TIMEDOUT },
        { "wxSOCKET_UNINIT", wxSOCKET_UNINIT },
        { "wxSOCKET_WAITALL", wxSOCKET_WAITALL },
        { "wxSOCKET_WOULDBLOCK", wxSOCKET_WOULDBLOCK },
        { "wxURI_FRAGMENT", wxURI_FRAGMENT },
        { "wxURI_IPV4ADDRESS", wxURI_IPV4ADDRESS },
        { "wxURI_IPV6ADDRESS", wxURI_IPV6ADDRESS },
        { "wxURI_IPVFUTURE", wxURI_IPVFUTURE },
        { "wxURI_PATH", wxURI_PATH },
        { "wxURI_PORT", wxURI_PORT },
        { "wxURI_QUERY", wxURI_QUERY },
        { "wxURI_REGNAME", wxURI_REGNAME },
        { "wxURI_SCHEME", wxURI_SCHEME },
        { "wxURI_SERVER", wxURI_SERVER },
        { "wxURI_STRICT", wxURI_STRICT },
        { "wxURI_USERINFO", wxURI_USERINFO },
#endif // wxLUA_USE_wxSocket && wxUSE_SOCKETS

#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)
        { "wxURL_CONNERR", wxURL_CONNERR },
        { "wxURL_NOERR", wxURL_NOERR },
        { "wxURL_NOHOST", wxURL_NOHOST },
        { "wxURL_NOPATH", wxURL_NOPATH },
        { "wxURL_NOPROTO", wxURL_NOPROTO },
        { "wxURL_PROTOERR", wxURL_PROTOERR },
        { "wxURL_SNTXERR", wxURL_SNTXERR },
#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)


        { 0, 0 },
    };
    count = sizeof(numberList)/sizeof(wxLuaBindNumber) - 1;
    return numberList;
}

// ---------------------------------------------------------------------------

// wxLuaGetStringList_wxnet() is called to register %define %string
// ---------------------------------------------------------------------------

wxLuaBindString* wxLuaGetStringList_wxnet(size_t &count)
{
    static wxLuaBindString stringList[] =
    {

        { 0, 0 },
    };
    count = sizeof(stringList)/sizeof(wxLuaBindString) - 1;
    return stringList;
}

// ---------------------------------------------------------------------------
// wxLuaGetObjectList_wxnet() is called to register object and pointer bindings
// ---------------------------------------------------------------------------

wxLuaBindObject* wxLuaGetObjectList_wxnet(size_t &count)
{
    static wxLuaBindObject objectList[] =
    {

        { 0, 0, 0, 0 },
    };
    count = sizeof(objectList)/sizeof(wxLuaBindObject) - 1;
    return objectList;
}

// ---------------------------------------------------------------------------
// wxLuaGetFunctionList_wxnet() is called to register global functions
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
// wxLuaGetFunctionList_wxnet() is called to register global functions
// ---------------------------------------------------------------------------

wxLuaBindMethod* wxLuaGetFunctionList_wxnet(size_t &count)
{
    static wxLuaBindMethod functionList[] =
    {

        { 0, 0, 0, 0 }, 
    };
    count = sizeof(functionList)/sizeof(wxLuaBindMethod) - 1;
    return functionList;
}



// ---------------------------------------------------------------------------
// wxLuaGetClassList_wxnet() is called to register classes
// ---------------------------------------------------------------------------

static const char* wxluaclassname_wxEvent = "wxEvent";
static const char* wxluaclassname_wxFTP = "wxFTP";
static const char* wxluaclassname_wxHTTP = "wxHTTP";
static const char* wxluaclassname_wxIPV4address = "wxIPV4address";
static const char* wxluaclassname_wxIPaddress = "wxIPaddress";
static const char* wxluaclassname_wxObject = "wxObject";
static const char* wxluaclassname_wxProtocol = "wxProtocol";
static const char* wxluaclassname_wxSockAddress = "wxSockAddress";
static const char* wxluaclassname_wxSocketBase = "wxSocketBase";
static const char* wxluaclassname_wxSocketClient = "wxSocketClient";
static const char* wxluaclassname_wxSocketEvent = "wxSocketEvent";
static const char* wxluaclassname_wxSocketServer = "wxSocketServer";
static const char* wxluaclassname_wxURI = "wxURI";
static const char* wxluaclassname_wxURL = "wxURL";

static const char* wxluabaseclassnames_wxFTP[] = { wxluaclassname_wxProtocol, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxFTP[] = { NULL };
static const char* wxluabaseclassnames_wxHTTP[] = { wxluaclassname_wxProtocol, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHTTP[] = { NULL };
static const char* wxluabaseclassnames_wxIPV4address[] = { wxluaclassname_wxIPaddress, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxIPV4address[] = { NULL };
static const char* wxluabaseclassnames_wxIPaddress[] = { wxluaclassname_wxSockAddress, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxIPaddress[] = { NULL };
static const char* wxluabaseclassnames_wxProtocol[] = { wxluaclassname_wxSocketClient, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxProtocol[] = { NULL };
static const char* wxluabaseclassnames_wxSockAddress[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxSockAddress[] = { NULL };
static const char* wxluabaseclassnames_wxSocketBase[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxSocketBase[] = { NULL };
static const char* wxluabaseclassnames_wxSocketClient[] = { wxluaclassname_wxSocketBase, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxSocketClient[] = { NULL };
static const char* wxluabaseclassnames_wxSocketEvent[] = { wxluaclassname_wxEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxSocketEvent[] = { NULL };
static const char* wxluabaseclassnames_wxSocketServer[] = { wxluaclassname_wxSocketBase, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxSocketServer[] = { NULL };
static const char* wxluabaseclassnames_wxURI[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxURI[] = { NULL };
static const char* wxluabaseclassnames_wxURL[] = { wxluaclassname_wxURI, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxURL[] = { NULL };
// ---------------------------------------------------------------------------
// Lua Tag Method Values and Tables for each Class
// ---------------------------------------------------------------------------

#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL)
    extern wxLuaBindMethod wxProtocol_methods[];
    extern int wxProtocol_methodCount;
#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL)

#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP)
    extern wxLuaBindMethod wxFTP_methods[];
    extern int wxFTP_methodCount;
    extern wxLuaBindNumber wxFTP_enums[];
    extern int wxFTP_enumCount;
#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP)

#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_HTTP)
    extern wxLuaBindMethod wxHTTP_methods[];
    extern int wxHTTP_methodCount;
#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_HTTP)

#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)
    extern wxLuaBindMethod wxURL_methods[];
    extern int wxURL_methodCount;
#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)

#if wxLUA_USE_wxSocket && wxUSE_SOCKETS
    extern wxLuaBindMethod wxIPV4address_methods[];
    extern int wxIPV4address_methodCount;
    extern wxLuaBindMethod wxIPaddress_methods[];
    extern int wxIPaddress_methodCount;
    extern wxLuaBindMethod wxSockAddress_methods[];
    extern int wxSockAddress_methodCount;
    extern wxLuaBindMethod wxSocketBase_methods[];
    extern int wxSocketBase_methodCount;
    extern wxLuaBindMethod wxSocketClient_methods[];
    extern int wxSocketClient_methodCount;
    extern wxLuaBindMethod wxSocketEvent_methods[];
    extern int wxSocketEvent_methodCount;
    extern wxLuaBindMethod wxSocketServer_methods[];
    extern int wxSocketServer_methodCount;
    extern wxLuaBindMethod wxURI_methods[];
    extern int wxURI_methodCount;
#endif // wxLUA_USE_wxSocket && wxUSE_SOCKETS




wxLuaBindClass* wxLuaGetClassList_wxnet(size_t &count)
{
    static wxLuaBindClass classList[] =
    {
#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP)
        { wxluaclassname_wxFTP, wxFTP_methods, wxFTP_methodCount, CLASSINFO(wxFTP), &wxluatype_wxFTP, wxluabaseclassnames_wxFTP, wxluabaseclassbinds_wxFTP, wxFTP_enums, wxFTP_enumCount, }, 
#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_FTP)

#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_HTTP)
        { wxluaclassname_wxHTTP, wxHTTP_methods, wxHTTP_methodCount, CLASSINFO(wxHTTP), &wxluatype_wxHTTP, wxluabaseclassnames_wxHTTP, wxluabaseclassbinds_wxHTTP, g_wxluanumberArray_None, 0, }, 
#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL_HTTP)

#if wxLUA_USE_wxSocket && wxUSE_SOCKETS
        { wxluaclassname_wxIPV4address, wxIPV4address_methods, wxIPV4address_methodCount, CLASSINFO(wxIPV4address), &wxluatype_wxIPV4address, wxluabaseclassnames_wxIPV4address, wxluabaseclassbinds_wxIPV4address, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxIPaddress, wxIPaddress_methods, wxIPaddress_methodCount, CLASSINFO(wxIPaddress), &wxluatype_wxIPaddress, wxluabaseclassnames_wxIPaddress, wxluabaseclassbinds_wxIPaddress, g_wxluanumberArray_None, 0, }, 
#endif // wxLUA_USE_wxSocket && wxUSE_SOCKETS

#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL)
        { wxluaclassname_wxProtocol, wxProtocol_methods, wxProtocol_methodCount, CLASSINFO(wxProtocol), &wxluatype_wxProtocol, wxluabaseclassnames_wxProtocol, wxluabaseclassbinds_wxProtocol, g_wxluanumberArray_None, 0, }, 
#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_PROTOCOL)

#if wxLUA_USE_wxSocket && wxUSE_SOCKETS
        { wxluaclassname_wxSockAddress, wxSockAddress_methods, wxSockAddress_methodCount, CLASSINFO(wxSockAddress), &wxluatype_wxSockAddress, wxluabaseclassnames_wxSockAddress, wxluabaseclassbinds_wxSockAddress, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxSocketBase, wxSocketBase_methods, wxSocketBase_methodCount, CLASSINFO(wxSocketBase), &wxluatype_wxSocketBase, wxluabaseclassnames_wxSocketBase, wxluabaseclassbinds_wxSocketBase, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxSocketClient, wxSocketClient_methods, wxSocketClient_methodCount, CLASSINFO(wxSocketClient), &wxluatype_wxSocketClient, wxluabaseclassnames_wxSocketClient, wxluabaseclassbinds_wxSocketClient, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxSocketEvent, wxSocketEvent_methods, wxSocketEvent_methodCount, CLASSINFO(wxSocketEvent), &wxluatype_wxSocketEvent, wxluabaseclassnames_wxSocketEvent, wxluabaseclassbinds_wxSocketEvent, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxSocketServer, wxSocketServer_methods, wxSocketServer_methodCount, CLASSINFO(wxSocketServer), &wxluatype_wxSocketServer, wxluabaseclassnames_wxSocketServer, wxluabaseclassbinds_wxSocketServer, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxURI, wxURI_methods, wxURI_methodCount, CLASSINFO(wxURI), &wxluatype_wxURI, wxluabaseclassnames_wxURI, wxluabaseclassbinds_wxURI, g_wxluanumberArray_None, 0, }, 
#endif // wxLUA_USE_wxSocket && wxUSE_SOCKETS

#if (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)
        { wxluaclassname_wxURL, wxURL_methods, wxURL_methodCount, CLASSINFO(wxURL), &wxluatype_wxURL, wxluabaseclassnames_wxURL, wxluabaseclassbinds_wxURL, g_wxluanumberArray_None, 0, }, 
#endif // (wxLUA_USE_wxSocket && wxUSE_SOCKETS) && (wxUSE_URL)


        { 0, 0, 0, 0, 0, 0, 0 }, 
    };
    count = sizeof(classList)/sizeof(wxLuaBindClass) - 1;

    return classList;
}

// ---------------------------------------------------------------------------
// wxLuaBinding_wxnet() - the binding class
// ---------------------------------------------------------------------------

IMPLEMENT_DYNAMIC_CLASS(wxLuaBinding_wxnet, wxLuaBinding)

wxLuaBinding_wxnet::wxLuaBinding_wxnet() : wxLuaBinding()
{
    m_bindingName   = wxT("wxnet");
    m_nameSpace     = wxT("wx");
    m_classArray    = wxLuaGetClassList_wxnet(m_classCount);
    m_numberArray   = wxLuaGetDefineList_wxnet(m_numberCount);
    m_stringArray   = wxLuaGetStringList_wxnet(m_stringCount);
    m_eventArray    = wxLuaGetEventList_wxnet(m_eventCount);
    m_objectArray   = wxLuaGetObjectList_wxnet(m_objectCount);
    m_functionArray = wxLuaGetFunctionList_wxnet(m_functionCount);
}



// ---------------------------------------------------------------------------

bool wxLuaBinding_wxnet_init()
{
    static wxLuaBinding_wxnet m_binding;
    if (wxLuaBinding::GetBindingList()->Find(&m_binding)) return false;

    wxLuaBinding::GetBindingList()->Append(&m_binding);
    return true;
}


