// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxcore_sizer.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxcore_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif



#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxSizerFlags
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSizerFlags'
int wxluatype_wxSizerFlags = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_Align[] = { &wxluatype_wxSizerFlags, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizerFlags_Align(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_Align[1] = {{ wxLua_wxSizerFlags_Align, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizerFlags_Align }};
//     wxSizerFlags& Align(int alignment) // combination of wxAlignment values
static int LUACALL wxLua_wxSizerFlags_Align(lua_State *L)
{
    // int alignment
    int alignment = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call Align
    wxSizerFlags* returns = &self->Align(alignment);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_Border1[] = { &wxluatype_wxSizerFlags, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizerFlags_Border1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_Border1[1] = {{ wxLua_wxSizerFlags_Border1, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxSizerFlags_Border1 }};
//     wxSizerFlags& Border(int direction = wxALL)
static int LUACALL wxLua_wxSizerFlags_Border1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int direction = wxALL
    int direction = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxALL);
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call Border
    wxSizerFlags* returns = &self->Border(direction);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_Border[] = { &wxluatype_wxSizerFlags, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizerFlags_Border(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_Border[1] = {{ wxLua_wxSizerFlags_Border, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSizerFlags_Border }};
//     wxSizerFlags& Border(int direction, int borderInPixels)
static int LUACALL wxLua_wxSizerFlags_Border(lua_State *L)
{
    // int borderInPixels
    int borderInPixels = (int)wxlua_getnumbertype(L, 3);
    // int direction
    int direction = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call Border
    wxSizerFlags* returns = &self->Border(direction, borderInPixels);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_Bottom[] = { &wxluatype_wxSizerFlags, NULL };
static int LUACALL wxLua_wxSizerFlags_Bottom(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_Bottom[1] = {{ wxLua_wxSizerFlags_Bottom, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerFlags_Bottom }};
//     wxSizerFlags& Bottom() // { return Align(wxALIGN_BOTTOM); }
static int LUACALL wxLua_wxSizerFlags_Bottom(lua_State *L)
{
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call Bottom
    wxSizerFlags* returns = &self->Bottom();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_Center[] = { &wxluatype_wxSizerFlags, NULL };
static int LUACALL wxLua_wxSizerFlags_Center(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_Center[1] = {{ wxLua_wxSizerFlags_Center, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerFlags_Center }};
//     wxSizerFlags& Center() // { return Centre(); }
static int LUACALL wxLua_wxSizerFlags_Center(lua_State *L)
{
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call Center
    wxSizerFlags* returns = &self->Center();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_Centre[] = { &wxluatype_wxSizerFlags, NULL };
static int LUACALL wxLua_wxSizerFlags_Centre(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_Centre[1] = {{ wxLua_wxSizerFlags_Centre, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerFlags_Centre }};
//     wxSizerFlags& Centre() // { return Align(wxCENTRE); }
static int LUACALL wxLua_wxSizerFlags_Centre(lua_State *L)
{
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call Centre
    wxSizerFlags* returns = &self->Centre();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_DoubleBorder[] = { &wxluatype_wxSizerFlags, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizerFlags_DoubleBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_DoubleBorder[1] = {{ wxLua_wxSizerFlags_DoubleBorder, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxSizerFlags_DoubleBorder }};
//     wxSizerFlags& DoubleBorder(int direction = wxALL)
static int LUACALL wxLua_wxSizerFlags_DoubleBorder(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int direction = wxALL
    int direction = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxALL);
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call DoubleBorder
    wxSizerFlags* returns = &self->DoubleBorder(direction);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_DoubleHorzBorder[] = { &wxluatype_wxSizerFlags, NULL };
static int LUACALL wxLua_wxSizerFlags_DoubleHorzBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_DoubleHorzBorder[1] = {{ wxLua_wxSizerFlags_DoubleHorzBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerFlags_DoubleHorzBorder }};
//     wxSizerFlags& DoubleHorzBorder()
static int LUACALL wxLua_wxSizerFlags_DoubleHorzBorder(lua_State *L)
{
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call DoubleHorzBorder
    wxSizerFlags* returns = &self->DoubleHorzBorder();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_Expand[] = { &wxluatype_wxSizerFlags, NULL };
static int LUACALL wxLua_wxSizerFlags_Expand(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_Expand[1] = {{ wxLua_wxSizerFlags_Expand, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerFlags_Expand }};
//     wxSizerFlags& Expand() // wxEXPAND
static int LUACALL wxLua_wxSizerFlags_Expand(lua_State *L)
{
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call Expand
    wxSizerFlags* returns = &self->Expand();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_FixedMinSize[] = { &wxluatype_wxSizerFlags, NULL };
static int LUACALL wxLua_wxSizerFlags_FixedMinSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_FixedMinSize[1] = {{ wxLua_wxSizerFlags_FixedMinSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerFlags_FixedMinSize }};
//     wxSizerFlags& FixedMinSize()
static int LUACALL wxLua_wxSizerFlags_FixedMinSize(lua_State *L)
{
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call FixedMinSize
    wxSizerFlags* returns = &self->FixedMinSize();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_GetBorderInPixels[] = { &wxluatype_wxSizerFlags, NULL };
static int LUACALL wxLua_wxSizerFlags_GetBorderInPixels(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_GetBorderInPixels[1] = {{ wxLua_wxSizerFlags_GetBorderInPixels, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerFlags_GetBorderInPixels }};
//     int GetBorderInPixels() const
static int LUACALL wxLua_wxSizerFlags_GetBorderInPixels(lua_State *L)
{
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call GetBorderInPixels
    int returns = (self->GetBorderInPixels());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static int LUACALL wxLua_wxSizerFlags_GetDefaultBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_GetDefaultBorder[1] = {{ wxLua_wxSizerFlags_GetDefaultBorder, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static int GetDefaultBorder() // default border size used by Border() below
static int LUACALL wxLua_wxSizerFlags_GetDefaultBorder(lua_State *L)
{
    // call GetDefaultBorder
    int returns = (wxSizerFlags::GetDefaultBorder());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_GetFlags[] = { &wxluatype_wxSizerFlags, NULL };
static int LUACALL wxLua_wxSizerFlags_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_GetFlags[1] = {{ wxLua_wxSizerFlags_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerFlags_GetFlags }};
//     int GetFlags() const
static int LUACALL wxLua_wxSizerFlags_GetFlags(lua_State *L)
{
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call GetFlags
    int returns = (self->GetFlags());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_GetProportion[] = { &wxluatype_wxSizerFlags, NULL };
static int LUACALL wxLua_wxSizerFlags_GetProportion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_GetProportion[1] = {{ wxLua_wxSizerFlags_GetProportion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerFlags_GetProportion }};
//     int GetProportion() const
static int LUACALL wxLua_wxSizerFlags_GetProportion(lua_State *L)
{
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call GetProportion
    int returns = (self->GetProportion());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_HorzBorder[] = { &wxluatype_wxSizerFlags, NULL };
static int LUACALL wxLua_wxSizerFlags_HorzBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_HorzBorder[1] = {{ wxLua_wxSizerFlags_HorzBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerFlags_HorzBorder }};
//     wxSizerFlags& HorzBorder()
static int LUACALL wxLua_wxSizerFlags_HorzBorder(lua_State *L)
{
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call HorzBorder
    wxSizerFlags* returns = &self->HorzBorder();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_Left[] = { &wxluatype_wxSizerFlags, NULL };
static int LUACALL wxLua_wxSizerFlags_Left(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_Left[1] = {{ wxLua_wxSizerFlags_Left, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerFlags_Left }};
//     wxSizerFlags& Left()   // { return Align(wxALIGN_LEFT); }
static int LUACALL wxLua_wxSizerFlags_Left(lua_State *L)
{
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call Left
    wxSizerFlags* returns = &self->Left();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_Proportion[] = { &wxluatype_wxSizerFlags, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizerFlags_Proportion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_Proportion[1] = {{ wxLua_wxSizerFlags_Proportion, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizerFlags_Proportion }};
//     wxSizerFlags& Proportion(int proportion)
static int LUACALL wxLua_wxSizerFlags_Proportion(lua_State *L)
{
    // int proportion
    int proportion = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call Proportion
    wxSizerFlags* returns = &self->Proportion(proportion);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_Right[] = { &wxluatype_wxSizerFlags, NULL };
static int LUACALL wxLua_wxSizerFlags_Right(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_Right[1] = {{ wxLua_wxSizerFlags_Right, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerFlags_Right }};
//     wxSizerFlags& Right()  // { return Align(wxALIGN_RIGHT); }
static int LUACALL wxLua_wxSizerFlags_Right(lua_State *L)
{
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call Right
    wxSizerFlags* returns = &self->Right();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_Shaped[] = { &wxluatype_wxSizerFlags, NULL };
static int LUACALL wxLua_wxSizerFlags_Shaped(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_Shaped[1] = {{ wxLua_wxSizerFlags_Shaped, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerFlags_Shaped }};
//     wxSizerFlags& Shaped()
static int LUACALL wxLua_wxSizerFlags_Shaped(lua_State *L)
{
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call Shaped
    wxSizerFlags* returns = &self->Shaped();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_Top[] = { &wxluatype_wxSizerFlags, NULL };
static int LUACALL wxLua_wxSizerFlags_Top(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_Top[1] = {{ wxLua_wxSizerFlags_Top, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerFlags_Top }};
//     wxSizerFlags& Top()    // { return Align(wxALIGN_TOP); }
static int LUACALL wxLua_wxSizerFlags_Top(lua_State *L)
{
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call Top
    wxSizerFlags* returns = &self->Top();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_TripleBorder[] = { &wxluatype_wxSizerFlags, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizerFlags_TripleBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_TripleBorder[1] = {{ wxLua_wxSizerFlags_TripleBorder, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxSizerFlags_TripleBorder }};
//     wxSizerFlags& TripleBorder(int direction = wxALL)
static int LUACALL wxLua_wxSizerFlags_TripleBorder(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int direction = wxALL
    int direction = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxALL);
    // get this
    wxSizerFlags * self = (wxSizerFlags *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerFlags);
    // call TripleBorder
    wxSizerFlags* returns = &self->TripleBorder(direction);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_delete[] = { &wxluatype_wxSizerFlags, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSizerFlags_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerFlags_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizerFlags_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_constructor[1] = {{ wxLua_wxSizerFlags_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxSizerFlags_constructor }};
//     wxSizerFlags(int proportion = 0)
static int LUACALL wxLua_wxSizerFlags_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int proportion = 0
    int proportion = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxSizerFlags* returns = new wxSizerFlags(proportion);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSizerFlags((wxSizerFlags*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerFlags);

    return 1;
}




#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerFlags_Border_overload[] =
{
    { wxLua_wxSizerFlags_Border1, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxSizerFlags_Border1 },
    { wxLua_wxSizerFlags_Border, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSizerFlags_Border },
};
static int s_wxluafunc_wxLua_wxSizerFlags_Border_overload_count = sizeof(s_wxluafunc_wxLua_wxSizerFlags_Border_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSizerFlags_methods[] = {
    { "Align", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_Align, 1, NULL },

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "Border", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_Border_overload, s_wxluafunc_wxLua_wxSizerFlags_Border_overload_count, 0 },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { "Bottom", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_Bottom, 1, NULL },
    { "Center", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_Center, 1, NULL },
    { "Centre", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_Centre, 1, NULL },
    { "DoubleBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_DoubleBorder, 1, NULL },
    { "DoubleHorzBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_DoubleHorzBorder, 1, NULL },
    { "Expand", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_Expand, 1, NULL },
    { "FixedMinSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_FixedMinSize, 1, NULL },
    { "GetBorderInPixels", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_GetBorderInPixels, 1, NULL },
    { "GetDefaultBorder", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSizerFlags_GetDefaultBorder, 1, NULL },
    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_GetFlags, 1, NULL },
    { "GetProportion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_GetProportion, 1, NULL },
    { "HorzBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_HorzBorder, 1, NULL },
    { "Left", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_Left, 1, NULL },
    { "Proportion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_Proportion, 1, NULL },
    { "Right", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_Right, 1, NULL },
    { "Shaped", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_Shaped, 1, NULL },
    { "Top", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_Top, 1, NULL },
    { "TripleBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerFlags_TripleBorder, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSizerFlags_delete, 1, NULL },
    { "wxSizerFlags", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSizerFlags_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxSizerFlags_methodCount = sizeof(wxSizerFlags_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))


#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxSizerItem
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSizerItem'
int wxluatype_wxSizerItem = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_CalcMin[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_CalcMin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_CalcMin[1] = {{ wxLua_wxSizerItem_CalcMin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_CalcMin }};
//     wxSize CalcMin()
static int LUACALL wxLua_wxSizerItem_CalcMin(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call CalcMin
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->CalcMin());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_DeleteWindows[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_DeleteWindows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_DeleteWindows[1] = {{ wxLua_wxSizerItem_DeleteWindows, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_DeleteWindows }};
//     void DeleteWindows()
static int LUACALL wxLua_wxSizerItem_DeleteWindows(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call DeleteWindows
    self->DeleteWindows();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_DetachSizer[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_DetachSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_DetachSizer[1] = {{ wxLua_wxSizerItem_DetachSizer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_DetachSizer }};
//     void DetachSizer()
static int LUACALL wxLua_wxSizerItem_DetachSizer(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call DetachSizer
    self->DetachSizer();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_GetBorder[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_GetBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_GetBorder[1] = {{ wxLua_wxSizerItem_GetBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_GetBorder }};
//     int GetBorder() const
static int LUACALL wxLua_wxSizerItem_GetBorder(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call GetBorder
    int returns = (self->GetBorder());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_GetFlag[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_GetFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_GetFlag[1] = {{ wxLua_wxSizerItem_GetFlag, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_GetFlag }};
//     int GetFlag() const
static int LUACALL wxLua_wxSizerItem_GetFlag(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call GetFlag
    int returns = (self->GetFlag());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_GetMinSize[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_GetMinSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_GetMinSize[1] = {{ wxLua_wxSizerItem_GetMinSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_GetMinSize }};
//     wxSize GetMinSize() const
static int LUACALL wxLua_wxSizerItem_GetMinSize(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call GetMinSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetMinSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_GetPosition[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_GetPosition[1] = {{ wxLua_wxSizerItem_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_GetPosition }};
//     wxPoint GetPosition() const
static int LUACALL wxLua_wxSizerItem_GetPosition(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_GetProportion[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_GetProportion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_GetProportion[1] = {{ wxLua_wxSizerItem_GetProportion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_GetProportion }};
//     int GetProportion() const
static int LUACALL wxLua_wxSizerItem_GetProportion(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call GetProportion
    int returns = (self->GetProportion());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_GetRatio[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_GetRatio(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_GetRatio[1] = {{ wxLua_wxSizerItem_GetRatio, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_GetRatio }};
//     float GetRatio() const
static int LUACALL wxLua_wxSizerItem_GetRatio(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call GetRatio
    float returns = (self->GetRatio());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_GetRect[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_GetRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_GetRect[1] = {{ wxLua_wxSizerItem_GetRect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_GetRect }};
//     wxRect GetRect()
static int LUACALL wxLua_wxSizerItem_GetRect(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call GetRect
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetRect());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_GetSize[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_GetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_GetSize[1] = {{ wxLua_wxSizerItem_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_GetSize }};
//     wxSize GetSize() const
static int LUACALL wxLua_wxSizerItem_GetSize(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call GetSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_GetSizer[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_GetSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_GetSizer[1] = {{ wxLua_wxSizerItem_GetSizer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_GetSizer }};
//     wxSizer* GetSizer() const
static int LUACALL wxLua_wxSizerItem_GetSizer(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call GetSizer
    wxSizer* returns = (wxSizer*)self->GetSizer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizer);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_GetSpacer[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_GetSpacer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_GetSpacer[1] = {{ wxLua_wxSizerItem_GetSpacer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_GetSpacer }};
//     wxSize GetSpacer() const
static int LUACALL wxLua_wxSizerItem_GetSpacer(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call GetSpacer
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetSpacer());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_GetUserData[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_GetUserData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_GetUserData[1] = {{ wxLua_wxSizerItem_GetUserData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_GetUserData }};
//     wxObject* GetUserData() const
static int LUACALL wxLua_wxSizerItem_GetUserData(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call GetUserData
    wxObject* returns = (wxObject*)self->GetUserData();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxObject);

    return 1;
}

#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_GetWindow[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_GetWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_GetWindow[1] = {{ wxLua_wxSizerItem_GetWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_GetWindow }};
//     wxWindow* GetWindow() const
static int LUACALL wxLua_wxSizerItem_GetWindow(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call GetWindow
    wxWindow* returns = (wxWindow*)self->GetWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_IsShown[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_IsShown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_IsShown[1] = {{ wxLua_wxSizerItem_IsShown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_IsShown }};
//     bool IsShown() const
static int LUACALL wxLua_wxSizerItem_IsShown(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call IsShown
    bool returns = (self->IsShown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_IsSizer[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_IsSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_IsSizer[1] = {{ wxLua_wxSizerItem_IsSizer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_IsSizer }};
//     bool IsSizer() const
static int LUACALL wxLua_wxSizerItem_IsSizer(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call IsSizer
    bool returns = (self->IsSizer());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_IsSpacer[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_IsSpacer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_IsSpacer[1] = {{ wxLua_wxSizerItem_IsSpacer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_IsSpacer }};
//     bool IsSpacer() const
static int LUACALL wxLua_wxSizerItem_IsSpacer(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call IsSpacer
    bool returns = (self->IsSpacer());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_IsWindow[] = { &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxSizerItem_IsWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_IsWindow[1] = {{ wxLua_wxSizerItem_IsWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizerItem_IsWindow }};
//     bool IsWindow() const
static int LUACALL wxLua_wxSizerItem_IsWindow(lua_State *L)
{
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call IsWindow
    bool returns = (self->IsWindow());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_SetBorder[] = { &wxluatype_wxSizerItem, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizerItem_SetBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_SetBorder[1] = {{ wxLua_wxSizerItem_SetBorder, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizerItem_SetBorder }};
//     void SetBorder(int border)
static int LUACALL wxLua_wxSizerItem_SetBorder(lua_State *L)
{
    // int border
    int border = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call SetBorder
    self->SetBorder(border);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_SetDimension[] = { &wxluatype_wxSizerItem, &wxluatype_wxPoint, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSizerItem_SetDimension(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_SetDimension[1] = {{ wxLua_wxSizerItem_SetDimension, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSizerItem_SetDimension }};
//     void SetDimension(const wxPoint& pos, const wxSize& size)
static int LUACALL wxLua_wxSizerItem_SetDimension(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize);
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call SetDimension
    self->SetDimension(*pos, *size);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_SetFlag[] = { &wxluatype_wxSizerItem, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizerItem_SetFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_SetFlag[1] = {{ wxLua_wxSizerItem_SetFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizerItem_SetFlag }};
//     void SetFlag(int flag)
static int LUACALL wxLua_wxSizerItem_SetFlag(lua_State *L)
{
    // int flag
    int flag = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call SetFlag
    self->SetFlag(flag);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_SetInitSize[] = { &wxluatype_wxSizerItem, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizerItem_SetInitSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_SetInitSize[1] = {{ wxLua_wxSizerItem_SetInitSize, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSizerItem_SetInitSize }};
//     void SetInitSize(int x, int y)
static int LUACALL wxLua_wxSizerItem_SetInitSize(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call SetInitSize
    self->SetInitSize(x, y);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_SetProportion[] = { &wxluatype_wxSizerItem, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizerItem_SetProportion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_SetProportion[1] = {{ wxLua_wxSizerItem_SetProportion, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizerItem_SetProportion }};
//     void SetProportion(int proportion)
static int LUACALL wxLua_wxSizerItem_SetProportion(lua_State *L)
{
    // int proportion
    int proportion = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call SetProportion
    self->SetProportion(proportion);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_SetRatio1[] = { &wxluatype_wxSizerItem, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizerItem_SetRatio1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_SetRatio1[1] = {{ wxLua_wxSizerItem_SetRatio1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizerItem_SetRatio1 }};
//     void SetRatio(float ratio)
static int LUACALL wxLua_wxSizerItem_SetRatio1(lua_State *L)
{
    // float ratio
    float ratio = (float)wxlua_getnumbertype(L, 2);
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call SetRatio
    self->SetRatio(ratio);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_SetRatio[] = { &wxluatype_wxSizerItem, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizerItem_SetRatio(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_SetRatio[1] = {{ wxLua_wxSizerItem_SetRatio, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSizerItem_SetRatio }};
//     void SetRatio(int width, int height)
static int LUACALL wxLua_wxSizerItem_SetRatio(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call SetRatio
    self->SetRatio(width, height);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_SetSizer[] = { &wxluatype_wxSizerItem, &wxluatype_wxSizer, NULL };
static int LUACALL wxLua_wxSizerItem_SetSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_SetSizer[1] = {{ wxLua_wxSizerItem_SetSizer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizerItem_SetSizer }};
//     void SetSizer(wxSizer* sizer)
static int LUACALL wxLua_wxSizerItem_SetSizer(lua_State *L)
{
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call SetSizer
    self->SetSizer(sizer);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_SetSpacer[] = { &wxluatype_wxSizerItem, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSizerItem_SetSpacer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_SetSpacer[1] = {{ wxLua_wxSizerItem_SetSpacer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizerItem_SetSpacer }};
//     void SetSpacer(const wxSize& size)
static int LUACALL wxLua_wxSizerItem_SetSpacer(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call SetSpacer
    self->SetSpacer(*size);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_SetWindow[] = { &wxluatype_wxSizerItem, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxSizerItem_SetWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_SetWindow[1] = {{ wxLua_wxSizerItem_SetWindow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizerItem_SetWindow }};
//     void SetWindow(wxWindow* window)
static int LUACALL wxLua_wxSizerItem_SetWindow(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call SetWindow
    self->SetWindow(window);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_Show[] = { &wxluatype_wxSizerItem, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSizerItem_Show(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_Show[1] = {{ wxLua_wxSizerItem_Show, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizerItem_Show }};
//     void Show(bool show)
static int LUACALL wxLua_wxSizerItem_Show(lua_State *L)
{
    // bool show
    bool show = wxlua_getbooleantype(L, 2);
    // get this
    wxSizerItem * self = (wxSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizerItem);
    // call Show
    self->Show(show);

    return 0;
}


#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_constructor2[] = { &wxluatype_wxSizer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxSizerItem_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_constructor2[1] = {{ wxLua_wxSizerItem_constructor2, WXLUAMETHOD_CONSTRUCTOR, 5, 5, s_wxluatypeArray_wxLua_wxSizerItem_constructor2 }};
//     wxSizerItem(wxSizer* sizer, int proportion, int flag, int border, wxObject* userData)
static int LUACALL wxLua_wxSizerItem_constructor2(lua_State *L)
{
    // wxObject userData
    wxObject * userData = (wxObject *)wxluaT_getuserdatatype(L, 5, wxluatype_wxObject);
    // int border
    int border = (int)wxlua_getnumbertype(L, 4);
    // int flag
    int flag = (int)wxlua_getnumbertype(L, 3);
    // int proportion
    int proportion = (int)wxlua_getnumbertype(L, 2);
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call constructor
    wxSizerItem* returns = new wxSizerItem(sizer, proportion, flag, border, userData);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxSizerItem_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_constructor1[1] = {{ wxLua_wxSizerItem_constructor1, WXLUAMETHOD_CONSTRUCTOR, 5, 5, s_wxluatypeArray_wxLua_wxSizerItem_constructor1 }};
//     wxSizerItem(wxWindow* window, int proportion, int flag, int border, wxObject* userData)
static int LUACALL wxLua_wxSizerItem_constructor1(lua_State *L)
{
    // wxObject userData
    wxObject * userData = (wxObject *)wxluaT_getuserdatatype(L, 5, wxluatype_wxObject);
    // int border
    int border = (int)wxlua_getnumbertype(L, 4);
    // int flag
    int flag = (int)wxlua_getnumbertype(L, 3);
    // int proportion
    int proportion = (int)wxlua_getnumbertype(L, 2);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxSizerItem* returns = new wxSizerItem(window, proportion, flag, border, userData);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizerItem_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxSizerItem_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_constructor[1] = {{ wxLua_wxSizerItem_constructor, WXLUAMETHOD_CONSTRUCTOR, 6, 6, s_wxluatypeArray_wxLua_wxSizerItem_constructor }};
//     wxSizerItem(int width, int height, int proportion, int flag, int border, wxObject* userData)
static int LUACALL wxLua_wxSizerItem_constructor(lua_State *L)
{
    // wxObject userData
    wxObject * userData = (wxObject *)wxluaT_getuserdatatype(L, 6, wxluatype_wxObject);
    // int border
    int border = (int)wxlua_getnumbertype(L, 5);
    // int flag
    int flag = (int)wxlua_getnumbertype(L, 4);
    // int proportion
    int proportion = (int)wxlua_getnumbertype(L, 3);
    // int height
    int height = (int)wxlua_getnumbertype(L, 2);
    // int width
    int width = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxSizerItem* returns = new wxSizerItem(width, height, proportion, flag, border, userData);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))



#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_SetRatio_overload[] =
{
    { wxLua_wxSizerItem_SetRatio1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizerItem_SetRatio1 },
    { wxLua_wxSizerItem_SetRatio, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSizerItem_SetRatio },
};
static int s_wxluafunc_wxLua_wxSizerItem_SetRatio_overload_count = sizeof(s_wxluafunc_wxLua_wxSizerItem_SetRatio_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizerItem_constructor_overload[] =
{

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxSizerItem_constructor2, WXLUAMETHOD_CONSTRUCTOR, 5, 5, s_wxluatypeArray_wxLua_wxSizerItem_constructor2 },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxSizerItem_constructor1, WXLUAMETHOD_CONSTRUCTOR, 5, 5, s_wxluatypeArray_wxLua_wxSizerItem_constructor1 },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxSizerItem_constructor, WXLUAMETHOD_CONSTRUCTOR, 6, 6, s_wxluatypeArray_wxLua_wxSizerItem_constructor },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
};
static int s_wxluafunc_wxLua_wxSizerItem_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxSizerItem_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSizerItem_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "CalcMin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_CalcMin, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { "DeleteWindows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_DeleteWindows, 1, NULL },
    { "DetachSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_DetachSizer, 1, NULL },
    { "GetBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_GetBorder, 1, NULL },
    { "GetFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_GetFlag, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "GetMinSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_GetMinSize, 1, NULL },
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_GetPosition, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { "GetProportion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_GetProportion, 1, NULL },
    { "GetRatio", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_GetRatio, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "GetRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_GetRect, 1, NULL },
    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_GetSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { "GetSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_GetSizer, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "GetSpacer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_GetSpacer, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "GetUserData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_GetUserData, 1, NULL },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { "GetWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_GetWindow, 1, NULL },
    { "IsShown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_IsShown, 1, NULL },
    { "IsSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_IsSizer, 1, NULL },
    { "IsSpacer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_IsSpacer, 1, NULL },
    { "IsWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_IsWindow, 1, NULL },
    { "SetBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_SetBorder, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "SetDimension", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_SetDimension, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { "SetFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_SetFlag, 1, NULL },
    { "SetInitSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_SetInitSize, 1, NULL },
    { "SetProportion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_SetProportion, 1, NULL },

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "SetRatio", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_SetRatio_overload, s_wxluafunc_wxLua_wxSizerItem_SetRatio_overload_count, 0 },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { "SetSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_SetSizer, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "SetSpacer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_SetSpacer, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { "SetWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_SetWindow, 1, NULL },
    { "Show", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizerItem_Show, 1, NULL },

#if ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))
    { "wxSizerItem", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSizerItem_constructor_overload, s_wxluafunc_wxLua_wxSizerItem_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))

    { 0, 0, 0, 0 },
};

int wxSizerItem_methodCount = sizeof(wxSizerItem_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))


#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxSizer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSizer'
int wxluatype_wxSizer = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Add2[] = { &wxluatype_wxSizer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxSizer_Add2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Add2[1] = {{ wxLua_wxSizer_Add2, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxSizer_Add2 }};
//     wxSizerItem* Add(int width, int height, int proportion = 0, int flag = 0, int border = 0, wxObject* userData = NULL)
static int LUACALL wxLua_wxSizer_Add2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject userData = NULL
    wxObject * userData = (argCount >= 7 ? (wxObject *)wxluaT_getuserdatatype(L, 7, wxluatype_wxObject) : NULL);
    // int border = 0
    int border = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // int flag = 0
    int flag = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // int proportion = 0
    int proportion = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Add
    wxSizerItem* returns = (wxSizerItem*)self->Add(width, height, proportion, flag, border, userData);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Add1[] = { &wxluatype_wxSizer, &wxluatype_wxSizer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxSizer_Add1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Add1[1] = {{ wxLua_wxSizer_Add1, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxSizer_Add1 }};
//     wxSizerItem* Add(wxSizer* sizer, int proportion = 0, int flag = 0, int border = 0, wxObject* userData = NULL)
static int LUACALL wxLua_wxSizer_Add1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject userData = NULL
    wxObject * userData = (argCount >= 6 ? (wxObject *)wxluaT_getuserdatatype(L, 6, wxluatype_wxObject) : NULL);
    // int border = 0
    int border = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // int flag = 0
    int flag = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // int proportion = 0
    int proportion = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Add
    wxSizerItem* returns = (wxSizerItem*)self->Add(sizer, proportion, flag, border, userData);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Add[] = { &wxluatype_wxSizer, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxSizer_Add(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Add[1] = {{ wxLua_wxSizer_Add, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxSizer_Add }};
//     wxSizerItem* Add(wxWindow* window, int proportion = 0,int flag = 0, int border = 0, wxObject* userData = NULL)
static int LUACALL wxLua_wxSizer_Add(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject userData = NULL
    wxObject * userData = (argCount >= 6 ? (wxObject *)wxluaT_getuserdatatype(L, 6, wxluatype_wxObject) : NULL);
    // int border = 0
    int border = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // int flag = 0
    int flag = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // int proportion = 0
    int proportion = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Add
    wxSizerItem* returns = (wxSizerItem*)self->Add(window, proportion, flag, border, userData);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_AddSpacer[] = { &wxluatype_wxSizer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizer_AddSpacer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_AddSpacer[1] = {{ wxLua_wxSizer_AddSpacer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizer_AddSpacer }};
//     wxSizerItem* AddSpacer(int size)
static int LUACALL wxLua_wxSizer_AddSpacer(lua_State *L)
{
    // int size
    int size = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call AddSpacer
    wxSizerItem* returns = (wxSizerItem*)self->AddSpacer(size);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_AddStretchSpacer[] = { &wxluatype_wxSizer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizer_AddStretchSpacer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_AddStretchSpacer[1] = {{ wxLua_wxSizer_AddStretchSpacer, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxSizer_AddStretchSpacer }};
//     wxSizerItem* AddStretchSpacer(int prop = 1)
static int LUACALL wxLua_wxSizer_AddStretchSpacer(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int prop = 1
    int prop = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 1);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call AddStretchSpacer
    wxSizerItem* returns = (wxSizerItem*)self->AddStretchSpacer(prop);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_CalcMin[] = { &wxluatype_wxSizer, NULL };
static int LUACALL wxLua_wxSizer_CalcMin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_CalcMin[1] = {{ wxLua_wxSizer_CalcMin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizer_CalcMin }};
//     wxSize CalcMin()
static int LUACALL wxLua_wxSizer_CalcMin(lua_State *L)
{
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call CalcMin
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->CalcMin());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Detach2[] = { &wxluatype_wxSizer, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSizer_Detach2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Detach2[1] = {{ wxLua_wxSizer_Detach2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizer_Detach2 }};
//     bool Detach(size_t index)
static int LUACALL wxLua_wxSizer_Detach2(lua_State *L)
{
    // size_t index
    size_t index = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Detach
    bool returns = (self->Detach(index));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Detach1[] = { &wxluatype_wxSizer, &wxluatype_wxSizer, NULL };
static int LUACALL wxLua_wxSizer_Detach1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Detach1[1] = {{ wxLua_wxSizer_Detach1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizer_Detach1 }};
//     bool Detach(wxSizer* sizer)
static int LUACALL wxLua_wxSizer_Detach1(lua_State *L)
{
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Detach
    bool returns = (self->Detach(sizer));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Detach[] = { &wxluatype_wxSizer, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxSizer_Detach(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Detach[1] = {{ wxLua_wxSizer_Detach, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizer_Detach }};
//     bool Detach(wxWindow* window)
static int LUACALL wxLua_wxSizer_Detach(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Detach
    bool returns = (self->Detach(window));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Fit[] = { &wxluatype_wxSizer, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxSizer_Fit(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Fit[1] = {{ wxLua_wxSizer_Fit, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizer_Fit }};
//     void Fit(wxWindow* window)
static int LUACALL wxLua_wxSizer_Fit(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Fit
    self->Fit(window);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_FitInside[] = { &wxluatype_wxSizer, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxSizer_FitInside(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_FitInside[1] = {{ wxLua_wxSizer_FitInside, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizer_FitInside }};
//     void FitInside(wxWindow* window)
static int LUACALL wxLua_wxSizer_FitInside(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call FitInside
    self->FitInside(window);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_GetItem2[] = { &wxluatype_wxSizer, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSizer_GetItem2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_GetItem2[1] = {{ wxLua_wxSizer_GetItem2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizer_GetItem2 }};
//     wxSizerItem* GetItem(size_t index)
static int LUACALL wxLua_wxSizer_GetItem2(lua_State *L)
{
    // size_t index
    size_t index = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call GetItem
    wxSizerItem* returns = (wxSizerItem*)self->GetItem(index);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_GetItem1[] = { &wxluatype_wxSizer, &wxluatype_wxSizer, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSizer_GetItem1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_GetItem1[1] = {{ wxLua_wxSizer_GetItem1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxSizer_GetItem1 }};
//     wxSizerItem* GetItem(wxSizer* sizer, bool recursive = false)
static int LUACALL wxLua_wxSizer_GetItem1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool recursive = false
    bool recursive = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call GetItem
    wxSizerItem* returns = (wxSizerItem*)self->GetItem(sizer, recursive);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_GetItem[] = { &wxluatype_wxSizer, &wxluatype_wxWindow, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSizer_GetItem(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_GetItem[1] = {{ wxLua_wxSizer_GetItem, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxSizer_GetItem }};
//     wxSizerItem* GetItem(wxWindow* window, bool recursive = false)
static int LUACALL wxLua_wxSizer_GetItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool recursive = false
    bool recursive = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call GetItem
    wxSizerItem* returns = (wxSizerItem*)self->GetItem(window, recursive);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_GetMinSize[] = { &wxluatype_wxSizer, NULL };
static int LUACALL wxLua_wxSizer_GetMinSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_GetMinSize[1] = {{ wxLua_wxSizer_GetMinSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizer_GetMinSize }};
//     wxSize GetMinSize()
static int LUACALL wxLua_wxSizer_GetMinSize(lua_State *L)
{
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call GetMinSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetMinSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_GetPosition[] = { &wxluatype_wxSizer, NULL };
static int LUACALL wxLua_wxSizer_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_GetPosition[1] = {{ wxLua_wxSizer_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizer_GetPosition }};
//     wxPoint GetPosition()
static int LUACALL wxLua_wxSizer_GetPosition(lua_State *L)
{
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_GetSize[] = { &wxluatype_wxSizer, NULL };
static int LUACALL wxLua_wxSizer_GetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_GetSize[1] = {{ wxLua_wxSizer_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizer_GetSize }};
//     wxSize GetSize()
static int LUACALL wxLua_wxSizer_GetSize(lua_State *L)
{
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call GetSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Insert2[] = { &wxluatype_wxSizer, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxSizer_Insert2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Insert2[1] = {{ wxLua_wxSizer_Insert2, WXLUAMETHOD_METHOD, 4, 8, s_wxluatypeArray_wxLua_wxSizer_Insert2 }};
//     wxSizerItem* Insert(size_t index, int width, int height, int proportion = 0, int flag = 0, int border = 0, wxObject* userData = NULL)
static int LUACALL wxLua_wxSizer_Insert2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject userData = NULL
    wxObject * userData = (argCount >= 8 ? (wxObject *)wxluaT_getuserdatatype(L, 8, wxluatype_wxObject) : NULL);
    // int border = 0
    int border = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : 0);
    // int flag = 0
    int flag = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // int proportion = 0
    int proportion = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // int height
    int height = (int)wxlua_getnumbertype(L, 4);
    // int width
    int width = (int)wxlua_getnumbertype(L, 3);
    // size_t index
    size_t index = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Insert
    wxSizerItem* returns = (wxSizerItem*)self->Insert(index, width, height, proportion, flag, border, userData);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Insert1[] = { &wxluatype_wxSizer, &wxluatype_TINTEGER, &wxluatype_wxSizer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxSizer_Insert1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Insert1[1] = {{ wxLua_wxSizer_Insert1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxSizer_Insert1 }};
//     wxSizerItem* Insert(size_t index, wxSizer* sizer, int proportion = 0, int flag = 0, int border = 0, wxObject* userData = NULL)
static int LUACALL wxLua_wxSizer_Insert1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject userData = NULL
    wxObject * userData = (argCount >= 7 ? (wxObject *)wxluaT_getuserdatatype(L, 7, wxluatype_wxObject) : NULL);
    // int border = 0
    int border = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // int flag = 0
    int flag = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // int proportion = 0
    int proportion = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSizer);
    // size_t index
    size_t index = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Insert
    wxSizerItem* returns = (wxSizerItem*)self->Insert(index, sizer, proportion, flag, border, userData);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Insert[] = { &wxluatype_wxSizer, &wxluatype_TINTEGER, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxSizer_Insert(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Insert[1] = {{ wxLua_wxSizer_Insert, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxSizer_Insert }};
//     wxSizerItem* Insert(size_t index, wxWindow* window, int proportion = 0,int flag = 0, int border = 0, wxObject* userData = NULL)
static int LUACALL wxLua_wxSizer_Insert(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject userData = NULL
    wxObject * userData = (argCount >= 7 ? (wxObject *)wxluaT_getuserdatatype(L, 7, wxluatype_wxObject) : NULL);
    // int border = 0
    int border = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // int flag = 0
    int flag = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // int proportion = 0
    int proportion = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // size_t index
    size_t index = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Insert
    wxSizerItem* returns = (wxSizerItem*)self->Insert(index, window, proportion, flag, border, userData);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_InsertSpacer[] = { &wxluatype_wxSizer, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizer_InsertSpacer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_InsertSpacer[1] = {{ wxLua_wxSizer_InsertSpacer, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSizer_InsertSpacer }};
//     wxSizerItem* InsertSpacer(size_t index, int size)
static int LUACALL wxLua_wxSizer_InsertSpacer(lua_State *L)
{
    // int size
    int size = (int)wxlua_getnumbertype(L, 3);
    // size_t index
    size_t index = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call InsertSpacer
    wxSizerItem* returns = (wxSizerItem*)self->InsertSpacer(index, size);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_InsertStretchSpacer[] = { &wxluatype_wxSizer, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizer_InsertStretchSpacer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_InsertStretchSpacer[1] = {{ wxLua_wxSizer_InsertStretchSpacer, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxSizer_InsertStretchSpacer }};
//     wxSizerItem* InsertStretchSpacer(size_t index, int prop = 1)
static int LUACALL wxLua_wxSizer_InsertStretchSpacer(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int prop = 1
    int prop = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 1);
    // size_t index
    size_t index = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call InsertStretchSpacer
    wxSizerItem* returns = (wxSizerItem*)self->InsertStretchSpacer(index, prop);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Layout[] = { &wxluatype_wxSizer, NULL };
static int LUACALL wxLua_wxSizer_Layout(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Layout[1] = {{ wxLua_wxSizer_Layout, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizer_Layout }};
//     void Layout()
static int LUACALL wxLua_wxSizer_Layout(lua_State *L)
{
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Layout
    self->Layout();

    return 0;
}


#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Prepend2[] = { &wxluatype_wxSizer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxSizer_Prepend2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Prepend2[1] = {{ wxLua_wxSizer_Prepend2, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxSizer_Prepend2 }};
//     void Prepend(int width, int height, int proportion = 0, int flag = 0, int border= 0, wxObject* userData = NULL)
static int LUACALL wxLua_wxSizer_Prepend2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject userData = NULL
    wxObject * userData = (argCount >= 7 ? (wxObject *)wxluaT_getuserdatatype(L, 7, wxluatype_wxObject) : NULL);
    // int border = 0
    int border = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // int flag = 0
    int flag = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // int proportion = 0
    int proportion = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Prepend
    self->Prepend(width, height, proportion, flag, border, userData);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Prepend1[] = { &wxluatype_wxSizer, &wxluatype_wxSizer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxSizer_Prepend1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Prepend1[1] = {{ wxLua_wxSizer_Prepend1, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxSizer_Prepend1 }};
//     void Prepend(wxSizer* sizer, int proportion = 0, int flag = 0, int border = 0, wxObject* userData = NULL)
static int LUACALL wxLua_wxSizer_Prepend1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject userData = NULL
    wxObject * userData = (argCount >= 6 ? (wxObject *)wxluaT_getuserdatatype(L, 6, wxluatype_wxObject) : NULL);
    // int border = 0
    int border = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // int flag = 0
    int flag = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // int proportion = 0
    int proportion = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Prepend
    self->Prepend(sizer, proportion, flag, border, userData);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Prepend[] = { &wxluatype_wxSizer, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxSizer_Prepend(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Prepend[1] = {{ wxLua_wxSizer_Prepend, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxSizer_Prepend }};
//     void Prepend(wxWindow* window, int proportion = 0, int flag = 0, int border = 0, wxObject* userData = NULL)
static int LUACALL wxLua_wxSizer_Prepend(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject userData = NULL
    wxObject * userData = (argCount >= 6 ? (wxObject *)wxluaT_getuserdatatype(L, 6, wxluatype_wxObject) : NULL);
    // int border = 0
    int border = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // int flag = 0
    int flag = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // int proportion = 0
    int proportion = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Prepend
    self->Prepend(window, proportion, flag, border, userData);

    return 0;
}

#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_PrependSpacer[] = { &wxluatype_wxSizer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizer_PrependSpacer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_PrependSpacer[1] = {{ wxLua_wxSizer_PrependSpacer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizer_PrependSpacer }};
//     wxSizerItem* PrependSpacer(int size)
static int LUACALL wxLua_wxSizer_PrependSpacer(lua_State *L)
{
    // int size
    int size = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call PrependSpacer
    wxSizerItem* returns = (wxSizerItem*)self->PrependSpacer(size);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_PrependStretchSpacer[] = { &wxluatype_wxSizer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizer_PrependStretchSpacer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_PrependStretchSpacer[1] = {{ wxLua_wxSizer_PrependStretchSpacer, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxSizer_PrependStretchSpacer }};
//     wxSizerItem* PrependStretchSpacer(int prop = 1)
static int LUACALL wxLua_wxSizer_PrependStretchSpacer(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int prop = 1
    int prop = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 1);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call PrependStretchSpacer
    wxSizerItem* returns = (wxSizerItem*)self->PrependStretchSpacer(prop);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_RecalcSizes[] = { &wxluatype_wxSizer, NULL };
static int LUACALL wxLua_wxSizer_RecalcSizes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_RecalcSizes[1] = {{ wxLua_wxSizer_RecalcSizes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizer_RecalcSizes }};
//     void RecalcSizes()
static int LUACALL wxLua_wxSizer_RecalcSizes(lua_State *L)
{
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call RecalcSizes
    self->RecalcSizes();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_SetDimension[] = { &wxluatype_wxSizer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizer_SetDimension(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_SetDimension[1] = {{ wxLua_wxSizer_SetDimension, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxSizer_SetDimension }};
//     void SetDimension(int x, int y, int width, int height)
static int LUACALL wxLua_wxSizer_SetDimension(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 5);
    // int width
    int width = (int)wxlua_getnumbertype(L, 4);
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call SetDimension
    self->SetDimension(x, y, width, height);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_SetItemMinSize2[] = { &wxluatype_wxSizer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizer_SetItemMinSize2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_SetItemMinSize2[1] = {{ wxLua_wxSizer_SetItemMinSize2, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxSizer_SetItemMinSize2 }};
//     void SetItemMinSize(int pos, int width, int height)
static int LUACALL wxLua_wxSizer_SetItemMinSize2(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 4);
    // int width
    int width = (int)wxlua_getnumbertype(L, 3);
    // int pos
    int pos = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call SetItemMinSize
    self->SetItemMinSize(pos, width, height);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_SetItemMinSize1[] = { &wxluatype_wxSizer, &wxluatype_wxSizer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizer_SetItemMinSize1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_SetItemMinSize1[1] = {{ wxLua_wxSizer_SetItemMinSize1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxSizer_SetItemMinSize1 }};
//     void SetItemMinSize(wxSizer* sizer, int width, int height)
static int LUACALL wxLua_wxSizer_SetItemMinSize1(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 4);
    // int width
    int width = (int)wxlua_getnumbertype(L, 3);
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call SetItemMinSize
    self->SetItemMinSize(sizer, width, height);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_SetItemMinSize[] = { &wxluatype_wxSizer, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizer_SetItemMinSize(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_SetItemMinSize[1] = {{ wxLua_wxSizer_SetItemMinSize, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxSizer_SetItemMinSize }};
//     void SetItemMinSize(wxWindow* window, int width, int height)
static int LUACALL wxLua_wxSizer_SetItemMinSize(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 4);
    // int width
    int width = (int)wxlua_getnumbertype(L, 3);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call SetItemMinSize
    self->SetItemMinSize(window, width, height);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_SetMinSize1[] = { &wxluatype_wxSizer, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSizer_SetMinSize1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_SetMinSize1[1] = {{ wxLua_wxSizer_SetMinSize1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizer_SetMinSize1 }};
//     void SetMinSize(const wxSize& size)
static int LUACALL wxLua_wxSizer_SetMinSize1(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call SetMinSize
    self->SetMinSize(*size);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_SetMinSize[] = { &wxluatype_wxSizer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizer_SetMinSize(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_SetMinSize[1] = {{ wxLua_wxSizer_SetMinSize, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSizer_SetMinSize }};
//     void SetMinSize(int width, int height)
static int LUACALL wxLua_wxSizer_SetMinSize(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call SetMinSize
    self->SetMinSize(width, height);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_SetSizeHints[] = { &wxluatype_wxSizer, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxSizer_SetSizeHints(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_SetSizeHints[1] = {{ wxLua_wxSizer_SetSizeHints, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizer_SetSizeHints }};
//     void SetSizeHints(wxWindow* window)
static int LUACALL wxLua_wxSizer_SetSizeHints(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call SetSizeHints
    self->SetSizeHints(window);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_SetVirtualSizeHints[] = { &wxluatype_wxSizer, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxSizer_SetVirtualSizeHints(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_SetVirtualSizeHints[1] = {{ wxLua_wxSizer_SetVirtualSizeHints, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizer_SetVirtualSizeHints }};
//     void SetVirtualSizeHints(wxWindow* window)
static int LUACALL wxLua_wxSizer_SetVirtualSizeHints(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call SetVirtualSizeHints
    self->SetVirtualSizeHints(window);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Show2[] = { &wxluatype_wxSizer, &wxluatype_TINTEGER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSizer_Show2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Show2[1] = {{ wxLua_wxSizer_Show2, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxSizer_Show2 }};
//     bool Show(size_t index, bool show = true)
static int LUACALL wxLua_wxSizer_Show2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool show = true
    bool show = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // size_t index
    size_t index = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Show
    bool returns = (self->Show(index, show));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Show1[] = { &wxluatype_wxSizer, &wxluatype_wxSizer, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSizer_Show1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Show1[1] = {{ wxLua_wxSizer_Show1, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxSizer_Show1 }};
//     bool Show(wxSizer* sizer, bool show = true, bool recursive = false)
static int LUACALL wxLua_wxSizer_Show1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool recursive = false
    bool recursive = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : false);
    // bool show = true
    bool show = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Show
    bool returns = (self->Show(sizer, show, recursive));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizer_Show[] = { &wxluatype_wxSizer, &wxluatype_wxWindow, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSizer_Show(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Show[1] = {{ wxLua_wxSizer_Show, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxSizer_Show }};
//     bool Show(wxWindow* window, bool show = true, bool recursive = false)
static int LUACALL wxLua_wxSizer_Show(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool recursive = false
    bool recursive = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : false);
    // bool show = true
    bool show = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSizer * self = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call Show
    bool returns = (self->Show(window, show, recursive));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}




#if ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Add_overload[] =
{

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxSizer_Add2, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxSizer_Add2 },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxSizer_Add1, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxSizer_Add1 },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxSizer_Add, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxSizer_Add },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
};
static int s_wxluafunc_wxLua_wxSizer_Add_overload_count = sizeof(s_wxluafunc_wxLua_wxSizer_Add_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Detach_overload[] =
{
    { wxLua_wxSizer_Detach2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizer_Detach2 },
    { wxLua_wxSizer_Detach1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizer_Detach1 },
    { wxLua_wxSizer_Detach, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizer_Detach },
};
static int s_wxluafunc_wxLua_wxSizer_Detach_overload_count = sizeof(s_wxluafunc_wxLua_wxSizer_Detach_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_GetItem_overload[] =
{
    { wxLua_wxSizer_GetItem2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizer_GetItem2 },
    { wxLua_wxSizer_GetItem1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxSizer_GetItem1 },
    { wxLua_wxSizer_GetItem, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxSizer_GetItem },
};
static int s_wxluafunc_wxLua_wxSizer_GetItem_overload_count = sizeof(s_wxluafunc_wxLua_wxSizer_GetItem_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Insert_overload[] =
{

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxSizer_Insert2, WXLUAMETHOD_METHOD, 4, 8, s_wxluatypeArray_wxLua_wxSizer_Insert2 },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxSizer_Insert1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxSizer_Insert1 },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxSizer_Insert, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxSizer_Insert },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
};
static int s_wxluafunc_wxLua_wxSizer_Insert_overload_count = sizeof(s_wxluafunc_wxLua_wxSizer_Insert_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Prepend_overload[] =
{

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxSizer_Prepend2, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxSizer_Prepend2 },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxSizer_Prepend1, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxSizer_Prepend1 },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxSizer_Prepend, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxSizer_Prepend },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
};
static int s_wxluafunc_wxLua_wxSizer_Prepend_overload_count = sizeof(s_wxluafunc_wxLua_wxSizer_Prepend_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_SetItemMinSize_overload[] =
{
    { wxLua_wxSizer_SetItemMinSize2, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxSizer_SetItemMinSize2 },
    { wxLua_wxSizer_SetItemMinSize1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxSizer_SetItemMinSize1 },
    { wxLua_wxSizer_SetItemMinSize, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxSizer_SetItemMinSize },
};
static int s_wxluafunc_wxLua_wxSizer_SetItemMinSize_overload_count = sizeof(s_wxluafunc_wxLua_wxSizer_SetItemMinSize_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if ((wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))||((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_SetMinSize_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxSizer_SetMinSize1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSizer_SetMinSize1 },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxSizer_SetMinSize, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSizer_SetMinSize },
};
static int s_wxluafunc_wxLua_wxSizer_SetMinSize_overload_count = sizeof(s_wxluafunc_wxLua_wxSizer_SetMinSize_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))||((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizer_Show_overload[] =
{
    { wxLua_wxSizer_Show2, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxSizer_Show2 },
    { wxLua_wxSizer_Show1, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxSizer_Show1 },
    { wxLua_wxSizer_Show, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxSizer_Show },
};
static int s_wxluafunc_wxLua_wxSizer_Show_overload_count = sizeof(s_wxluafunc_wxLua_wxSizer_Show_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSizer_methods[] = {
#if ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_Add_overload, s_wxluafunc_wxLua_wxSizer_Add_overload_count, 0 },
#endif // ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))

    { "AddSpacer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_AddSpacer, 1, NULL },
    { "AddStretchSpacer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_AddStretchSpacer, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "CalcMin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_CalcMin, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "Detach", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_Detach_overload, s_wxluafunc_wxLua_wxSizer_Detach_overload_count, 0 },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { "Fit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_Fit, 1, NULL },
    { "FitInside", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_FitInside, 1, NULL },

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "GetItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_GetItem_overload, s_wxluafunc_wxLua_wxSizer_GetItem_overload_count, 0 },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "GetMinSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_GetMinSize, 1, NULL },
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_GetPosition, 1, NULL },
    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_GetSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_Insert_overload, s_wxluafunc_wxLua_wxSizer_Insert_overload_count, 0 },
#endif // ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))

    { "InsertSpacer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_InsertSpacer, 1, NULL },
    { "InsertStretchSpacer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_InsertStretchSpacer, 1, NULL },
    { "Layout", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_Layout, 1, NULL },

#if ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))
    { "Prepend", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_Prepend_overload, s_wxluafunc_wxLua_wxSizer_Prepend_overload_count, 0 },
#endif // ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))

    { "PrependSpacer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_PrependSpacer, 1, NULL },
    { "PrependStretchSpacer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_PrependStretchSpacer, 1, NULL },
    { "RecalcSizes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_RecalcSizes, 1, NULL },
    { "SetDimension", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_SetDimension, 1, NULL },

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "SetItemMinSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_SetItemMinSize_overload, s_wxluafunc_wxLua_wxSizer_SetItemMinSize_overload_count, 0 },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if ((wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))||((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "SetMinSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_SetMinSize_overload, s_wxluafunc_wxLua_wxSizer_SetMinSize_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))||((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { "SetSizeHints", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_SetSizeHints, 1, NULL },
    { "SetVirtualSizeHints", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_SetVirtualSizeHints, 1, NULL },

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "Show", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizer_Show_overload, s_wxluafunc_wxLua_wxSizer_Show_overload_count, 0 },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { 0, 0, 0, 0 },
};

int wxSizer_methodCount = sizeof(wxSizer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))


#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxBoxSizer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxBoxSizer'
int wxluatype_wxBoxSizer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxBoxSizer_GetOrientation[] = { &wxluatype_wxBoxSizer, NULL };
static int LUACALL wxLua_wxBoxSizer_GetOrientation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBoxSizer_GetOrientation[1] = {{ wxLua_wxBoxSizer_GetOrientation, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBoxSizer_GetOrientation }};
//     int GetOrientation()
static int LUACALL wxLua_wxBoxSizer_GetOrientation(lua_State *L)
{
    // get this
    wxBoxSizer * self = (wxBoxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBoxSizer);
    // call GetOrientation
    int returns = (self->GetOrientation());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBoxSizer_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBoxSizer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBoxSizer_constructor[1] = {{ wxLua_wxBoxSizer_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxBoxSizer_constructor }};
//     wxBoxSizer(int orient)
static int LUACALL wxLua_wxBoxSizer_constructor(lua_State *L)
{
    // int orient
    int orient = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxBoxSizer* returns = new wxBoxSizer(orient);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBoxSizer);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxBoxSizer_methods[] = {
    { "GetOrientation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBoxSizer_GetOrientation, 1, NULL },
    { "wxBoxSizer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxBoxSizer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxBoxSizer_methodCount = sizeof(wxBoxSizer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))


#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxGridSizer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridSizer'
int wxluatype_wxGridSizer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizer_GetCols[] = { &wxluatype_wxGridSizer, NULL };
static int LUACALL wxLua_wxGridSizer_GetCols(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizer_GetCols[1] = {{ wxLua_wxGridSizer_GetCols, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridSizer_GetCols }};
//     int GetCols()
static int LUACALL wxLua_wxGridSizer_GetCols(lua_State *L)
{
    // get this
    wxGridSizer * self = (wxGridSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridSizer);
    // call GetCols
    int returns = (self->GetCols());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizer_GetHGap[] = { &wxluatype_wxGridSizer, NULL };
static int LUACALL wxLua_wxGridSizer_GetHGap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizer_GetHGap[1] = {{ wxLua_wxGridSizer_GetHGap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridSizer_GetHGap }};
//     int GetHGap()
static int LUACALL wxLua_wxGridSizer_GetHGap(lua_State *L)
{
    // get this
    wxGridSizer * self = (wxGridSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridSizer);
    // call GetHGap
    int returns = (self->GetHGap());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizer_GetRows[] = { &wxluatype_wxGridSizer, NULL };
static int LUACALL wxLua_wxGridSizer_GetRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizer_GetRows[1] = {{ wxLua_wxGridSizer_GetRows, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridSizer_GetRows }};
//     int GetRows()
static int LUACALL wxLua_wxGridSizer_GetRows(lua_State *L)
{
    // get this
    wxGridSizer * self = (wxGridSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridSizer);
    // call GetRows
    int returns = (self->GetRows());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizer_GetVGap[] = { &wxluatype_wxGridSizer, NULL };
static int LUACALL wxLua_wxGridSizer_GetVGap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizer_GetVGap[1] = {{ wxLua_wxGridSizer_GetVGap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridSizer_GetVGap }};
//     int GetVGap()
static int LUACALL wxLua_wxGridSizer_GetVGap(lua_State *L)
{
    // get this
    wxGridSizer * self = (wxGridSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridSizer);
    // call GetVGap
    int returns = (self->GetVGap());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizer_SetCols[] = { &wxluatype_wxGridSizer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridSizer_SetCols(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizer_SetCols[1] = {{ wxLua_wxGridSizer_SetCols, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridSizer_SetCols }};
//     void SetCols(int cols)
static int LUACALL wxLua_wxGridSizer_SetCols(lua_State *L)
{
    // int cols
    int cols = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridSizer * self = (wxGridSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridSizer);
    // call SetCols
    self->SetCols(cols);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizer_SetHGap[] = { &wxluatype_wxGridSizer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridSizer_SetHGap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizer_SetHGap[1] = {{ wxLua_wxGridSizer_SetHGap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridSizer_SetHGap }};
//     void SetHGap(int gap)
static int LUACALL wxLua_wxGridSizer_SetHGap(lua_State *L)
{
    // int gap
    int gap = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridSizer * self = (wxGridSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridSizer);
    // call SetHGap
    self->SetHGap(gap);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizer_SetRows[] = { &wxluatype_wxGridSizer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridSizer_SetRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizer_SetRows[1] = {{ wxLua_wxGridSizer_SetRows, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridSizer_SetRows }};
//     void SetRows(int rows)
static int LUACALL wxLua_wxGridSizer_SetRows(lua_State *L)
{
    // int rows
    int rows = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridSizer * self = (wxGridSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridSizer);
    // call SetRows
    self->SetRows(rows);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizer_SetVGap[] = { &wxluatype_wxGridSizer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridSizer_SetVGap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizer_SetVGap[1] = {{ wxLua_wxGridSizer_SetVGap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridSizer_SetVGap }};
//     void SetVGap(int gap)
static int LUACALL wxLua_wxGridSizer_SetVGap(lua_State *L)
{
    // int gap
    int gap = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridSizer * self = (wxGridSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridSizer);
    // call SetVGap
    self->SetVGap(gap);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizer_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridSizer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizer_constructor[1] = {{ wxLua_wxGridSizer_constructor, WXLUAMETHOD_CONSTRUCTOR, 4, 4, s_wxluatypeArray_wxLua_wxGridSizer_constructor }};
//     wxGridSizer(int cols, int rows, int vgap, int hgap)
static int LUACALL wxLua_wxGridSizer_constructor(lua_State *L)
{
    // int hgap
    int hgap = (int)wxlua_getnumbertype(L, 4);
    // int vgap
    int vgap = (int)wxlua_getnumbertype(L, 3);
    // int rows
    int rows = (int)wxlua_getnumbertype(L, 2);
    // int cols
    int cols = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxGridSizer* returns = new wxGridSizer(cols, rows, vgap, hgap);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridSizer);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridSizer_methods[] = {
    { "GetCols", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridSizer_GetCols, 1, NULL },
    { "GetHGap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridSizer_GetHGap, 1, NULL },
    { "GetRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridSizer_GetRows, 1, NULL },
    { "GetVGap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridSizer_GetVGap, 1, NULL },
    { "SetCols", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridSizer_SetCols, 1, NULL },
    { "SetHGap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridSizer_SetHGap, 1, NULL },
    { "SetRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridSizer_SetRows, 1, NULL },
    { "SetVGap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridSizer_SetVGap, 1, NULL },
    { "wxGridSizer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridSizer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridSizer_methodCount = sizeof(wxGridSizer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))


#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxFlexGridSizer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFlexGridSizer'
int wxluatype_wxFlexGridSizer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFlexGridSizer_AddGrowableCol[] = { &wxluatype_wxFlexGridSizer, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFlexGridSizer_AddGrowableCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFlexGridSizer_AddGrowableCol[1] = {{ wxLua_wxFlexGridSizer_AddGrowableCol, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFlexGridSizer_AddGrowableCol }};
//     void AddGrowableCol( size_t idx, int proportion = 0 )
static int LUACALL wxLua_wxFlexGridSizer_AddGrowableCol(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int proportion = 0
    int proportion = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // size_t idx
    size_t idx = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxFlexGridSizer * self = (wxFlexGridSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFlexGridSizer);
    // call AddGrowableCol
    self->AddGrowableCol(idx, proportion);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFlexGridSizer_AddGrowableRow[] = { &wxluatype_wxFlexGridSizer, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFlexGridSizer_AddGrowableRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFlexGridSizer_AddGrowableRow[1] = {{ wxLua_wxFlexGridSizer_AddGrowableRow, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFlexGridSizer_AddGrowableRow }};
//     void AddGrowableRow( size_t idx, int proportion = 0 )
static int LUACALL wxLua_wxFlexGridSizer_AddGrowableRow(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int proportion = 0
    int proportion = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // size_t idx
    size_t idx = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxFlexGridSizer * self = (wxFlexGridSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFlexGridSizer);
    // call AddGrowableRow
    self->AddGrowableRow(idx, proportion);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFlexGridSizer_GetFlexibleDirection[] = { &wxluatype_wxFlexGridSizer, NULL };
static int LUACALL wxLua_wxFlexGridSizer_GetFlexibleDirection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFlexGridSizer_GetFlexibleDirection[1] = {{ wxLua_wxFlexGridSizer_GetFlexibleDirection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFlexGridSizer_GetFlexibleDirection }};
//     int GetFlexibleDirection() const
static int LUACALL wxLua_wxFlexGridSizer_GetFlexibleDirection(lua_State *L)
{
    // get this
    wxFlexGridSizer * self = (wxFlexGridSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFlexGridSizer);
    // call GetFlexibleDirection
    int returns = (self->GetFlexibleDirection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFlexGridSizer_GetNonFlexibleGrowMode[] = { &wxluatype_wxFlexGridSizer, NULL };
static int LUACALL wxLua_wxFlexGridSizer_GetNonFlexibleGrowMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFlexGridSizer_GetNonFlexibleGrowMode[1] = {{ wxLua_wxFlexGridSizer_GetNonFlexibleGrowMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFlexGridSizer_GetNonFlexibleGrowMode }};
//     wxFlexSizerGrowMode GetNonFlexibleGrowMode() const
static int LUACALL wxLua_wxFlexGridSizer_GetNonFlexibleGrowMode(lua_State *L)
{
    // get this
    wxFlexGridSizer * self = (wxFlexGridSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFlexGridSizer);
    // call GetNonFlexibleGrowMode
    wxFlexSizerGrowMode returns = (self->GetNonFlexibleGrowMode());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFlexGridSizer_RemoveGrowableCol[] = { &wxluatype_wxFlexGridSizer, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFlexGridSizer_RemoveGrowableCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFlexGridSizer_RemoveGrowableCol[1] = {{ wxLua_wxFlexGridSizer_RemoveGrowableCol, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFlexGridSizer_RemoveGrowableCol }};
//     void RemoveGrowableCol( size_t idx )
static int LUACALL wxLua_wxFlexGridSizer_RemoveGrowableCol(lua_State *L)
{
    // size_t idx
    size_t idx = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxFlexGridSizer * self = (wxFlexGridSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFlexGridSizer);
    // call RemoveGrowableCol
    self->RemoveGrowableCol(idx);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFlexGridSizer_RemoveGrowableRow[] = { &wxluatype_wxFlexGridSizer, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFlexGridSizer_RemoveGrowableRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFlexGridSizer_RemoveGrowableRow[1] = {{ wxLua_wxFlexGridSizer_RemoveGrowableRow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFlexGridSizer_RemoveGrowableRow }};
//     void RemoveGrowableRow( size_t idx)
static int LUACALL wxLua_wxFlexGridSizer_RemoveGrowableRow(lua_State *L)
{
    // size_t idx
    size_t idx = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxFlexGridSizer * self = (wxFlexGridSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFlexGridSizer);
    // call RemoveGrowableRow
    self->RemoveGrowableRow(idx);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFlexGridSizer_SetFlexibleDirection[] = { &wxluatype_wxFlexGridSizer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFlexGridSizer_SetFlexibleDirection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFlexGridSizer_SetFlexibleDirection[1] = {{ wxLua_wxFlexGridSizer_SetFlexibleDirection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFlexGridSizer_SetFlexibleDirection }};
//     void SetFlexibleDirection(int direction)
static int LUACALL wxLua_wxFlexGridSizer_SetFlexibleDirection(lua_State *L)
{
    // int direction
    int direction = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxFlexGridSizer * self = (wxFlexGridSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFlexGridSizer);
    // call SetFlexibleDirection
    self->SetFlexibleDirection(direction);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFlexGridSizer_SetNonFlexibleGrowMode[] = { &wxluatype_wxFlexGridSizer, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFlexGridSizer_SetNonFlexibleGrowMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFlexGridSizer_SetNonFlexibleGrowMode[1] = {{ wxLua_wxFlexGridSizer_SetNonFlexibleGrowMode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFlexGridSizer_SetNonFlexibleGrowMode }};
//     void SetNonFlexibleGrowMode(wxFlexSizerGrowMode mode)
static int LUACALL wxLua_wxFlexGridSizer_SetNonFlexibleGrowMode(lua_State *L)
{
    // wxFlexSizerGrowMode mode
    wxFlexSizerGrowMode mode = (wxFlexSizerGrowMode)wxlua_getenumtype(L, 2);
    // get this
    wxFlexGridSizer * self = (wxFlexGridSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFlexGridSizer);
    // call SetNonFlexibleGrowMode
    self->SetNonFlexibleGrowMode(mode);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFlexGridSizer_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFlexGridSizer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFlexGridSizer_constructor[1] = {{ wxLua_wxFlexGridSizer_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 4, s_wxluatypeArray_wxLua_wxFlexGridSizer_constructor }};
//     wxFlexGridSizer(int rows, int cols, int vgap=0, int hgap=0)
static int LUACALL wxLua_wxFlexGridSizer_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int hgap = 0
    int hgap = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // int vgap = 0
    int vgap = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int cols
    int cols = (int)wxlua_getnumbertype(L, 2);
    // int rows
    int rows = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxFlexGridSizer* returns = new wxFlexGridSizer(rows, cols, vgap, hgap);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFlexGridSizer);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFlexGridSizer_methods[] = {
    { "AddGrowableCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFlexGridSizer_AddGrowableCol, 1, NULL },
    { "AddGrowableRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFlexGridSizer_AddGrowableRow, 1, NULL },
    { "GetFlexibleDirection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFlexGridSizer_GetFlexibleDirection, 1, NULL },
    { "GetNonFlexibleGrowMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFlexGridSizer_GetNonFlexibleGrowMode, 1, NULL },
    { "RemoveGrowableCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFlexGridSizer_RemoveGrowableCol, 1, NULL },
    { "RemoveGrowableRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFlexGridSizer_RemoveGrowableRow, 1, NULL },
    { "SetFlexibleDirection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFlexGridSizer_SetFlexibleDirection, 1, NULL },
    { "SetNonFlexibleGrowMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFlexGridSizer_SetNonFlexibleGrowMode, 1, NULL },
    { "wxFlexGridSizer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFlexGridSizer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxFlexGridSizer_methodCount = sizeof(wxFlexGridSizer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))


#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxGridBagSizer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridBagSizer'
int wxluatype_wxGridBagSizer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_Add3[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxGBSizerItem, NULL };
static int LUACALL wxLua_wxGridBagSizer_Add3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_Add3[1] = {{ wxLua_wxGridBagSizer_Add3, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_Add3 }};
//     wxSizerItem* Add(wxGBSizerItem* item)
static int LUACALL wxLua_wxGridBagSizer_Add3(lua_State *L)
{
    // wxGBSizerItem item
    wxGBSizerItem * item = (wxGBSizerItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGBSizerItem);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call Add
    wxSizerItem* returns = (wxSizerItem*)self->Add(item);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}


#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_Add2[] = { &wxluatype_wxGridBagSizer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxGBPosition, &wxluatype_wxGBSpan, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxGridBagSizer_Add2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_Add2[1] = {{ wxLua_wxGridBagSizer_Add2, WXLUAMETHOD_METHOD, 4, 8, s_wxluatypeArray_wxLua_wxGridBagSizer_Add2 }};
//     wxSizerItem* Add(int width, int height, const wxGBPosition& pos, const wxGBSpan& span = wxDefaultSpan, int flag = 0, int border = 0, wxObject* userData = NULL)
static int LUACALL wxLua_wxGridBagSizer_Add2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject userData = NULL
    wxObject * userData = (argCount >= 8 ? (wxObject *)wxluaT_getuserdatatype(L, 8, wxluatype_wxObject) : NULL);
    // int border = 0
    int border = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : 0);
    // int flag = 0
    int flag = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // const wxGBSpan span = wxDefaultSpan
    const wxGBSpan * span = (argCount >= 5 ? (const wxGBSpan *)wxluaT_getuserdatatype(L, 5, wxluatype_wxGBSpan) : &wxDefaultSpan);
    // const wxGBPosition pos
    const wxGBPosition * pos = (const wxGBPosition *)wxluaT_getuserdatatype(L, 4, wxluatype_wxGBPosition);
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call Add
    wxSizerItem* returns = (wxSizerItem*)self->Add(width, height, *pos, *span, flag, border, userData);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_Add1[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxSizer, &wxluatype_wxGBPosition, &wxluatype_wxGBSpan, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxGridBagSizer_Add1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_Add1[1] = {{ wxLua_wxGridBagSizer_Add1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxGridBagSizer_Add1 }};
//     wxSizerItem* Add(wxSizer* sizer, const wxGBPosition& pos, const wxGBSpan& span = wxDefaultSpan, int flag = 0, int border = 0, wxObject* userData = NULL)
static int LUACALL wxLua_wxGridBagSizer_Add1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject userData = NULL
    wxObject * userData = (argCount >= 7 ? (wxObject *)wxluaT_getuserdatatype(L, 7, wxluatype_wxObject) : NULL);
    // int border = 0
    int border = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // int flag = 0
    int flag = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // const wxGBSpan span = wxDefaultSpan
    const wxGBSpan * span = (argCount >= 4 ? (const wxGBSpan *)wxluaT_getuserdatatype(L, 4, wxluatype_wxGBSpan) : &wxDefaultSpan);
    // const wxGBPosition pos
    const wxGBPosition * pos = (const wxGBPosition *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGBPosition);
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call Add
    wxSizerItem* returns = (wxSizerItem*)self->Add(sizer, *pos, *span, flag, border, userData);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_Add[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxWindow, &wxluatype_wxGBPosition, &wxluatype_wxGBSpan, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxGridBagSizer_Add(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_Add[1] = {{ wxLua_wxGridBagSizer_Add, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxGridBagSizer_Add }};
//     wxSizerItem* Add(wxWindow* window, const wxGBPosition& pos, const wxGBSpan& span = wxDefaultSpan, int flag = 0, int border = 0, wxObject* userData = NULL)
static int LUACALL wxLua_wxGridBagSizer_Add(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject userData = NULL
    wxObject * userData = (argCount >= 7 ? (wxObject *)wxluaT_getuserdatatype(L, 7, wxluatype_wxObject) : NULL);
    // int border = 0
    int border = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // int flag = 0
    int flag = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // const wxGBSpan span = wxDefaultSpan
    const wxGBSpan * span = (argCount >= 4 ? (const wxGBSpan *)wxluaT_getuserdatatype(L, 4, wxluatype_wxGBSpan) : &wxDefaultSpan);
    // const wxGBPosition pos
    const wxGBPosition * pos = (const wxGBPosition *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGBPosition);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call Add
    wxSizerItem* returns = (wxSizerItem*)self->Add(window, *pos, *span, flag, border, userData);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizerItem);

    return 1;
}

#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_CheckForIntersection1[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxGBPosition, &wxluatype_wxGBSpan, &wxluatype_wxGBSizerItem, NULL };
static int LUACALL wxLua_wxGridBagSizer_CheckForIntersection1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_CheckForIntersection1[1] = {{ wxLua_wxGridBagSizer_CheckForIntersection1, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxGridBagSizer_CheckForIntersection1 }};
//     bool CheckForIntersection(const wxGBPosition& pos, const wxGBSpan& span, wxGBSizerItem* excludeItem = NULL)
static int LUACALL wxLua_wxGridBagSizer_CheckForIntersection1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxGBSizerItem excludeItem = NULL
    wxGBSizerItem * excludeItem = (argCount >= 4 ? (wxGBSizerItem *)wxluaT_getuserdatatype(L, 4, wxluatype_wxGBSizerItem) : NULL);
    // const wxGBSpan span
    const wxGBSpan * span = (const wxGBSpan *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGBSpan);
    // const wxGBPosition pos
    const wxGBPosition * pos = (const wxGBPosition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGBPosition);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call CheckForIntersection
    bool returns = (self->CheckForIntersection(*pos, *span, excludeItem));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_CheckForIntersection[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxGBSizerItem, &wxluatype_wxGBSizerItem, NULL };
static int LUACALL wxLua_wxGridBagSizer_CheckForIntersection(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_CheckForIntersection[1] = {{ wxLua_wxGridBagSizer_CheckForIntersection, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxGridBagSizer_CheckForIntersection }};
//     bool CheckForIntersection(wxGBSizerItem* item, wxGBSizerItem* excludeItem = NULL)
static int LUACALL wxLua_wxGridBagSizer_CheckForIntersection(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxGBSizerItem excludeItem = NULL
    wxGBSizerItem * excludeItem = (argCount >= 3 ? (wxGBSizerItem *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGBSizerItem) : NULL);
    // wxGBSizerItem item
    wxGBSizerItem * item = (wxGBSizerItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGBSizerItem);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call CheckForIntersection
    bool returns = (self->CheckForIntersection(item, excludeItem));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_FindItem1[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxSizer, NULL };
static int LUACALL wxLua_wxGridBagSizer_FindItem1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_FindItem1[1] = {{ wxLua_wxGridBagSizer_FindItem1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_FindItem1 }};
//     wxGBSizerItem* FindItem(wxSizer* sizer)
static int LUACALL wxLua_wxGridBagSizer_FindItem1(lua_State *L)
{
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call FindItem
    wxGBSizerItem* returns = (wxGBSizerItem*)self->FindItem(sizer);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_FindItem[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxGridBagSizer_FindItem(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_FindItem[1] = {{ wxLua_wxGridBagSizer_FindItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_FindItem }};
//     wxGBSizerItem* FindItem(wxWindow* window)
static int LUACALL wxLua_wxGridBagSizer_FindItem(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call FindItem
    wxGBSizerItem* returns = (wxGBSizerItem*)self->FindItem(window);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBSizerItem);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_FindItemAtPoint[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxGridBagSizer_FindItemAtPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_FindItemAtPoint[1] = {{ wxLua_wxGridBagSizer_FindItemAtPoint, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_FindItemAtPoint }};
//     wxGBSizerItem*  FindItemAtPoint(const wxPoint& pt)
static int LUACALL wxLua_wxGridBagSizer_FindItemAtPoint(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call FindItemAtPoint
    wxGBSizerItem* returns = (wxGBSizerItem*)self->FindItemAtPoint(*pt);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBSizerItem);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_FindItemAtPosition[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxGBPosition, NULL };
static int LUACALL wxLua_wxGridBagSizer_FindItemAtPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_FindItemAtPosition[1] = {{ wxLua_wxGridBagSizer_FindItemAtPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_FindItemAtPosition }};
//     wxGBSizerItem*  FindItemAtPosition(const wxGBPosition& pos)
static int LUACALL wxLua_wxGridBagSizer_FindItemAtPosition(lua_State *L)
{
    // const wxGBPosition pos
    const wxGBPosition * pos = (const wxGBPosition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGBPosition);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call FindItemAtPosition
    wxGBSizerItem* returns = (wxGBSizerItem*)self->FindItemAtPosition(*pos);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBSizerItem);

    return 1;
}


#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_FindItemWithData[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxGridBagSizer_FindItemWithData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_FindItemWithData[1] = {{ wxLua_wxGridBagSizer_FindItemWithData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_FindItemWithData }};
//     wxGBSizerItem*  FindItemWithData(const wxObject* userData)
static int LUACALL wxLua_wxGridBagSizer_FindItemWithData(lua_State *L)
{
    // const wxObject userData
    const wxObject * userData = (const wxObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxObject);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call FindItemWithData
    wxGBSizerItem* returns = (wxGBSizerItem*)self->FindItemWithData(userData);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBSizerItem);

    return 1;
}

#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_GetCellSize[] = { &wxluatype_wxGridBagSizer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridBagSizer_GetCellSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_GetCellSize[1] = {{ wxLua_wxGridBagSizer_GetCellSize, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridBagSizer_GetCellSize }};
//     wxSize GetCellSize(int row, int col) const
static int LUACALL wxLua_wxGridBagSizer_GetCellSize(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call GetCellSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetCellSize(row, col));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_GetEmptyCellSize[] = { &wxluatype_wxGridBagSizer, NULL };
static int LUACALL wxLua_wxGridBagSizer_GetEmptyCellSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_GetEmptyCellSize[1] = {{ wxLua_wxGridBagSizer_GetEmptyCellSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridBagSizer_GetEmptyCellSize }};
//     wxSize GetEmptyCellSize() const
static int LUACALL wxLua_wxGridBagSizer_GetEmptyCellSize(lua_State *L)
{
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call GetEmptyCellSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetEmptyCellSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemPosition2[] = { &wxluatype_wxGridBagSizer, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGridBagSizer_GetItemPosition2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_GetItemPosition2[1] = {{ wxLua_wxGridBagSizer_GetItemPosition2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemPosition2 }};
//     wxGBPosition  GetItemPosition(size_t index)
static int LUACALL wxLua_wxGridBagSizer_GetItemPosition2(lua_State *L)
{
    // size_t index
    size_t index = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call GetItemPosition
    // allocate a new object using the copy constructor
    wxGBPosition* returns = new wxGBPosition(self->GetItemPosition(index));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxGBPosition((wxGBPosition*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBPosition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemPosition1[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxSizer, NULL };
static int LUACALL wxLua_wxGridBagSizer_GetItemPosition1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_GetItemPosition1[1] = {{ wxLua_wxGridBagSizer_GetItemPosition1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemPosition1 }};
//     wxGBPosition  GetItemPosition(wxSizer* sizer)
static int LUACALL wxLua_wxGridBagSizer_GetItemPosition1(lua_State *L)
{
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call GetItemPosition
    // allocate a new object using the copy constructor
    wxGBPosition* returns = new wxGBPosition(self->GetItemPosition(sizer));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxGBPosition((wxGBPosition*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBPosition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemPosition[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxGridBagSizer_GetItemPosition(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_GetItemPosition[1] = {{ wxLua_wxGridBagSizer_GetItemPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemPosition }};
//     wxGBPosition  GetItemPosition(wxWindow* window)
static int LUACALL wxLua_wxGridBagSizer_GetItemPosition(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call GetItemPosition
    // allocate a new object using the copy constructor
    wxGBPosition* returns = new wxGBPosition(self->GetItemPosition(window));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxGBPosition((wxGBPosition*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBPosition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemSpan2[] = { &wxluatype_wxGridBagSizer, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGridBagSizer_GetItemSpan2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_GetItemSpan2[1] = {{ wxLua_wxGridBagSizer_GetItemSpan2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemSpan2 }};
//     wxGBSpan GetItemSpan(size_t index)
static int LUACALL wxLua_wxGridBagSizer_GetItemSpan2(lua_State *L)
{
    // size_t index
    size_t index = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call GetItemSpan
    // allocate a new object using the copy constructor
    wxGBSpan* returns = new wxGBSpan(self->GetItemSpan(index));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxGBSpan((wxGBSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemSpan1[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxSizer, NULL };
static int LUACALL wxLua_wxGridBagSizer_GetItemSpan1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_GetItemSpan1[1] = {{ wxLua_wxGridBagSizer_GetItemSpan1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemSpan1 }};
//     wxGBSpan GetItemSpan(wxSizer* sizer)
static int LUACALL wxLua_wxGridBagSizer_GetItemSpan1(lua_State *L)
{
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call GetItemSpan
    // allocate a new object using the copy constructor
    wxGBSpan* returns = new wxGBSpan(self->GetItemSpan(sizer));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxGBSpan((wxGBSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemSpan[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxGridBagSizer_GetItemSpan(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_GetItemSpan[1] = {{ wxLua_wxGridBagSizer_GetItemSpan, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemSpan }};
//     wxGBSpan GetItemSpan(wxWindow* window)
static int LUACALL wxLua_wxGridBagSizer_GetItemSpan(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call GetItemSpan
    // allocate a new object using the copy constructor
    wxGBSpan* returns = new wxGBSpan(self->GetItemSpan(window));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxGBSpan((wxGBSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBSpan);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_SetEmptyCellSize[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxGridBagSizer_SetEmptyCellSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_SetEmptyCellSize[1] = {{ wxLua_wxGridBagSizer_SetEmptyCellSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_SetEmptyCellSize }};
//     void SetEmptyCellSize(const wxSize& sz)
static int LUACALL wxLua_wxGridBagSizer_SetEmptyCellSize(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call SetEmptyCellSize
    self->SetEmptyCellSize(*sz);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemPosition2[] = { &wxluatype_wxGridBagSizer, &wxluatype_TINTEGER, &wxluatype_wxGBPosition, NULL };
static int LUACALL wxLua_wxGridBagSizer_SetItemPosition2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_SetItemPosition2[1] = {{ wxLua_wxGridBagSizer_SetItemPosition2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemPosition2 }};
//     bool SetItemPosition(size_t index, const wxGBPosition& pos)
static int LUACALL wxLua_wxGridBagSizer_SetItemPosition2(lua_State *L)
{
    // const wxGBPosition pos
    const wxGBPosition * pos = (const wxGBPosition *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGBPosition);
    // size_t index
    size_t index = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call SetItemPosition
    bool returns = (self->SetItemPosition(index, *pos));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemPosition1[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxSizer, &wxluatype_wxGBPosition, NULL };
static int LUACALL wxLua_wxGridBagSizer_SetItemPosition1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_SetItemPosition1[1] = {{ wxLua_wxGridBagSizer_SetItemPosition1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemPosition1 }};
//     bool SetItemPosition(wxSizer* sizer, const wxGBPosition& pos)
static int LUACALL wxLua_wxGridBagSizer_SetItemPosition1(lua_State *L)
{
    // const wxGBPosition pos
    const wxGBPosition * pos = (const wxGBPosition *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGBPosition);
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call SetItemPosition
    bool returns = (self->SetItemPosition(sizer, *pos));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemPosition[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxWindow, &wxluatype_wxGBPosition, NULL };
static int LUACALL wxLua_wxGridBagSizer_SetItemPosition(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_SetItemPosition[1] = {{ wxLua_wxGridBagSizer_SetItemPosition, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemPosition }};
//     bool SetItemPosition(wxWindow* window, const wxGBPosition& pos)
static int LUACALL wxLua_wxGridBagSizer_SetItemPosition(lua_State *L)
{
    // const wxGBPosition pos
    const wxGBPosition * pos = (const wxGBPosition *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGBPosition);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call SetItemPosition
    bool returns = (self->SetItemPosition(window, *pos));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemSpan2[] = { &wxluatype_wxGridBagSizer, &wxluatype_TINTEGER, &wxluatype_wxGBSpan, NULL };
static int LUACALL wxLua_wxGridBagSizer_SetItemSpan2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_SetItemSpan2[1] = {{ wxLua_wxGridBagSizer_SetItemSpan2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemSpan2 }};
//     bool SetItemSpan(size_t index, const wxGBSpan& span)
static int LUACALL wxLua_wxGridBagSizer_SetItemSpan2(lua_State *L)
{
    // const wxGBSpan span
    const wxGBSpan * span = (const wxGBSpan *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGBSpan);
    // size_t index
    size_t index = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call SetItemSpan
    bool returns = (self->SetItemSpan(index, *span));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemSpan1[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxSizer, &wxluatype_wxGBSpan, NULL };
static int LUACALL wxLua_wxGridBagSizer_SetItemSpan1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_SetItemSpan1[1] = {{ wxLua_wxGridBagSizer_SetItemSpan1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemSpan1 }};
//     bool SetItemSpan(wxSizer* sizer, const wxGBSpan& span)
static int LUACALL wxLua_wxGridBagSizer_SetItemSpan1(lua_State *L)
{
    // const wxGBSpan span
    const wxGBSpan * span = (const wxGBSpan *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGBSpan);
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call SetItemSpan
    bool returns = (self->SetItemSpan(sizer, *span));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemSpan[] = { &wxluatype_wxGridBagSizer, &wxluatype_wxWindow, &wxluatype_wxGBSpan, NULL };
static int LUACALL wxLua_wxGridBagSizer_SetItemSpan(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_SetItemSpan[1] = {{ wxLua_wxGridBagSizer_SetItemSpan, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemSpan }};
//     bool SetItemSpan(wxWindow* window, const wxGBSpan& span)
static int LUACALL wxLua_wxGridBagSizer_SetItemSpan(lua_State *L)
{
    // const wxGBSpan span
    const wxGBSpan * span = (const wxGBSpan *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGBSpan);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxGridBagSizer * self = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridBagSizer);
    // call SetItemSpan
    bool returns = (self->SetItemSpan(window, *span));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridBagSizer_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridBagSizer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_constructor[1] = {{ wxLua_wxGridBagSizer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_constructor }};
//     wxGridBagSizer(int vgap=0, int hgap=0)
static int LUACALL wxLua_wxGridBagSizer_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int hgap = 0
    int hgap = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // int vgap = 0
    int vgap = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxGridBagSizer* returns = new wxGridBagSizer(vgap, hgap);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridBagSizer);

    return 1;
}




#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))||((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_Add_overload[] =
{
    { wxLua_wxGridBagSizer_Add3, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_Add3 },

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxGridBagSizer_Add2, WXLUAMETHOD_METHOD, 4, 8, s_wxluatypeArray_wxLua_wxGridBagSizer_Add2 },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxGridBagSizer_Add1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxGridBagSizer_Add1 },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxGridBagSizer_Add, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxGridBagSizer_Add },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
};
static int s_wxluafunc_wxLua_wxGridBagSizer_Add_overload_count = sizeof(s_wxluafunc_wxLua_wxGridBagSizer_Add_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))||((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_CheckForIntersection_overload[] =
{
    { wxLua_wxGridBagSizer_CheckForIntersection1, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxGridBagSizer_CheckForIntersection1 },
    { wxLua_wxGridBagSizer_CheckForIntersection, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxGridBagSizer_CheckForIntersection },
};
static int s_wxluafunc_wxLua_wxGridBagSizer_CheckForIntersection_overload_count = sizeof(s_wxluafunc_wxLua_wxGridBagSizer_CheckForIntersection_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_FindItem_overload[] =
{
    { wxLua_wxGridBagSizer_FindItem1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_FindItem1 },
    { wxLua_wxGridBagSizer_FindItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_FindItem },
};
static int s_wxluafunc_wxLua_wxGridBagSizer_FindItem_overload_count = sizeof(s_wxluafunc_wxLua_wxGridBagSizer_FindItem_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_GetItemPosition_overload[] =
{
    { wxLua_wxGridBagSizer_GetItemPosition2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemPosition2 },
    { wxLua_wxGridBagSizer_GetItemPosition1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemPosition1 },
    { wxLua_wxGridBagSizer_GetItemPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemPosition },
};
static int s_wxluafunc_wxLua_wxGridBagSizer_GetItemPosition_overload_count = sizeof(s_wxluafunc_wxLua_wxGridBagSizer_GetItemPosition_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_GetItemSpan_overload[] =
{
    { wxLua_wxGridBagSizer_GetItemSpan2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemSpan2 },
    { wxLua_wxGridBagSizer_GetItemSpan1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemSpan1 },
    { wxLua_wxGridBagSizer_GetItemSpan, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridBagSizer_GetItemSpan },
};
static int s_wxluafunc_wxLua_wxGridBagSizer_GetItemSpan_overload_count = sizeof(s_wxluafunc_wxLua_wxGridBagSizer_GetItemSpan_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_SetItemPosition_overload[] =
{
    { wxLua_wxGridBagSizer_SetItemPosition2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemPosition2 },
    { wxLua_wxGridBagSizer_SetItemPosition1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemPosition1 },
    { wxLua_wxGridBagSizer_SetItemPosition, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemPosition },
};
static int s_wxluafunc_wxLua_wxGridBagSizer_SetItemPosition_overload_count = sizeof(s_wxluafunc_wxLua_wxGridBagSizer_SetItemPosition_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridBagSizer_SetItemSpan_overload[] =
{
    { wxLua_wxGridBagSizer_SetItemSpan2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemSpan2 },
    { wxLua_wxGridBagSizer_SetItemSpan1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemSpan1 },
    { wxLua_wxGridBagSizer_SetItemSpan, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridBagSizer_SetItemSpan },
};
static int s_wxluafunc_wxLua_wxGridBagSizer_SetItemSpan_overload_count = sizeof(s_wxluafunc_wxLua_wxGridBagSizer_SetItemSpan_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridBagSizer_methods[] = {
#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))||((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridBagSizer_Add_overload, s_wxluafunc_wxLua_wxGridBagSizer_Add_overload_count, 0 },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))||((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "CheckForIntersection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridBagSizer_CheckForIntersection_overload, s_wxluafunc_wxLua_wxGridBagSizer_CheckForIntersection_overload_count, 0 },
    { "FindItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridBagSizer_FindItem_overload, s_wxluafunc_wxLua_wxGridBagSizer_FindItem_overload_count, 0 },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "FindItemAtPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridBagSizer_FindItemAtPoint, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { "FindItemAtPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridBagSizer_FindItemAtPosition, 1, NULL },

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "FindItemWithData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridBagSizer_FindItemWithData, 1, NULL },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "GetCellSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridBagSizer_GetCellSize, 1, NULL },
    { "GetEmptyCellSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridBagSizer_GetEmptyCellSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "GetItemPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridBagSizer_GetItemPosition_overload, s_wxluafunc_wxLua_wxGridBagSizer_GetItemPosition_overload_count, 0 },
    { "GetItemSpan", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridBagSizer_GetItemSpan_overload, s_wxluafunc_wxLua_wxGridBagSizer_GetItemSpan_overload_count, 0 },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "SetEmptyCellSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridBagSizer_SetEmptyCellSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "SetItemPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridBagSizer_SetItemPosition_overload, s_wxluafunc_wxLua_wxGridBagSizer_SetItemPosition_overload_count, 0 },
    { "SetItemSpan", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridBagSizer_SetItemSpan_overload, s_wxluafunc_wxLua_wxGridBagSizer_SetItemSpan_overload_count, 0 },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { "wxGridBagSizer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridBagSizer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridBagSizer_methodCount = sizeof(wxGridBagSizer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))


#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxGBPosition
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGBPosition'
int wxluatype_wxGBPosition = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBPosition_GetCol[] = { &wxluatype_wxGBPosition, NULL };
static int LUACALL wxLua_wxGBPosition_GetCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBPosition_GetCol[1] = {{ wxLua_wxGBPosition_GetCol, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGBPosition_GetCol }};
//     int GetCol() const
static int LUACALL wxLua_wxGBPosition_GetCol(lua_State *L)
{
    // get this
    wxGBPosition * self = (wxGBPosition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBPosition);
    // call GetCol
    int returns = (self->GetCol());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBPosition_GetRow[] = { &wxluatype_wxGBPosition, NULL };
static int LUACALL wxLua_wxGBPosition_GetRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBPosition_GetRow[1] = {{ wxLua_wxGBPosition_GetRow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGBPosition_GetRow }};
//     int GetRow() const
static int LUACALL wxLua_wxGBPosition_GetRow(lua_State *L)
{
    // get this
    wxGBPosition * self = (wxGBPosition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBPosition);
    // call GetRow
    int returns = (self->GetRow());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBPosition_SetCol[] = { &wxluatype_wxGBPosition, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGBPosition_SetCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBPosition_SetCol[1] = {{ wxLua_wxGBPosition_SetCol, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGBPosition_SetCol }};
//     void SetCol(int col)
static int LUACALL wxLua_wxGBPosition_SetCol(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGBPosition * self = (wxGBPosition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBPosition);
    // call SetCol
    self->SetCol(col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBPosition_SetRow[] = { &wxluatype_wxGBPosition, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGBPosition_SetRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBPosition_SetRow[1] = {{ wxLua_wxGBPosition_SetRow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGBPosition_SetRow }};
//     void SetRow(int row)
static int LUACALL wxLua_wxGBPosition_SetRow(lua_State *L)
{
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGBPosition * self = (wxGBPosition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBPosition);
    // call SetRow
    self->SetRow(row);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBPosition_delete[] = { &wxluatype_wxGBPosition, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBPosition_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGBPosition_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBPosition_op_eq[] = { &wxluatype_wxGBPosition, &wxluatype_wxGBPosition, NULL };
static int LUACALL wxLua_wxGBPosition_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBPosition_op_eq[1] = {{ wxLua_wxGBPosition_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGBPosition_op_eq }};
//     %operator bool operator==(const wxGBPosition& p) const
static int LUACALL wxLua_wxGBPosition_op_eq(lua_State *L)
{
    // const wxGBPosition p
    const wxGBPosition * p = (const wxGBPosition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGBPosition);
    // get this
    wxGBPosition * self = (wxGBPosition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBPosition);
    // call op_eq
    bool returns = ((*self)==(*p));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBPosition_constructor1[] = { &wxluatype_wxGBPosition, NULL };
static int LUACALL wxLua_wxGBPosition_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBPosition_constructor1[1] = {{ wxLua_wxGBPosition_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxGBPosition_constructor1 }};
//     wxGBPosition(const wxGBPosition& pos)
static int LUACALL wxLua_wxGBPosition_constructor1(lua_State *L)
{
    // const wxGBPosition pos
    const wxGBPosition * pos = (const wxGBPosition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBPosition);
    // call constructor
    wxGBPosition* returns = new wxGBPosition(*pos);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxGBPosition((wxGBPosition*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBPosition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBPosition_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGBPosition_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBPosition_constructor[1] = {{ wxLua_wxGBPosition_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxGBPosition_constructor }};
//     wxGBPosition(int row=0, int col=0)
static int LUACALL wxLua_wxGBPosition_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int col = 0
    int col = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // int row = 0
    int row = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxGBPosition* returns = new wxGBPosition(row, col);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxGBPosition((wxGBPosition*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBPosition);

    return 1;
}




#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBPosition_constructor_overload[] =
{
    { wxLua_wxGBPosition_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxGBPosition_constructor1 },
    { wxLua_wxGBPosition_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxGBPosition_constructor },
};
static int s_wxluafunc_wxLua_wxGBPosition_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxGBPosition_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGBPosition_methods[] = {
    { "GetCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBPosition_GetCol, 1, NULL },
    { "GetRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBPosition_GetRow, 1, NULL },
    { "SetCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBPosition_SetCol, 1, NULL },
    { "SetRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBPosition_SetRow, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGBPosition_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBPosition_op_eq, 1, NULL },

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "wxGBPosition", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGBPosition_constructor_overload, s_wxluafunc_wxLua_wxGBPosition_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { 0, 0, 0, 0 },
};

int wxGBPosition_methodCount = sizeof(wxGBPosition_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))


#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxGBSpan
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGBSpan'
int wxluatype_wxGBSpan = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSpan_GetColspan[] = { &wxluatype_wxGBSpan, NULL };
static int LUACALL wxLua_wxGBSpan_GetColspan(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSpan_GetColspan[1] = {{ wxLua_wxGBSpan_GetColspan, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGBSpan_GetColspan }};
//     int GetColspan() const
static int LUACALL wxLua_wxGBSpan_GetColspan(lua_State *L)
{
    // get this
    wxGBSpan * self = (wxGBSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBSpan);
    // call GetColspan
    int returns = (self->GetColspan());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSpan_GetRowspan[] = { &wxluatype_wxGBSpan, NULL };
static int LUACALL wxLua_wxGBSpan_GetRowspan(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSpan_GetRowspan[1] = {{ wxLua_wxGBSpan_GetRowspan, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGBSpan_GetRowspan }};
//     int GetRowspan() const
static int LUACALL wxLua_wxGBSpan_GetRowspan(lua_State *L)
{
    // get this
    wxGBSpan * self = (wxGBSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBSpan);
    // call GetRowspan
    int returns = (self->GetRowspan());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSpan_SetColspan[] = { &wxluatype_wxGBSpan, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGBSpan_SetColspan(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSpan_SetColspan[1] = {{ wxLua_wxGBSpan_SetColspan, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGBSpan_SetColspan }};
//     void SetColspan(int colspan)
static int LUACALL wxLua_wxGBSpan_SetColspan(lua_State *L)
{
    // int colspan
    int colspan = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGBSpan * self = (wxGBSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBSpan);
    // call SetColspan
    self->SetColspan(colspan);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSpan_SetRowspan[] = { &wxluatype_wxGBSpan, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGBSpan_SetRowspan(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSpan_SetRowspan[1] = {{ wxLua_wxGBSpan_SetRowspan, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGBSpan_SetRowspan }};
//     void SetRowspan(int rowspan)
static int LUACALL wxLua_wxGBSpan_SetRowspan(lua_State *L)
{
    // int rowspan
    int rowspan = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGBSpan * self = (wxGBSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBSpan);
    // call SetRowspan
    self->SetRowspan(rowspan);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSpan_delete[] = { &wxluatype_wxGBSpan, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSpan_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGBSpan_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSpan_op_eq[] = { &wxluatype_wxGBSpan, &wxluatype_wxGBSpan, NULL };
static int LUACALL wxLua_wxGBSpan_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSpan_op_eq[1] = {{ wxLua_wxGBSpan_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGBSpan_op_eq }};
//     %operator bool operator==(const wxGBSpan& o) const
static int LUACALL wxLua_wxGBSpan_op_eq(lua_State *L)
{
    // const wxGBSpan o
    const wxGBSpan * o = (const wxGBSpan *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGBSpan);
    // get this
    wxGBSpan * self = (wxGBSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBSpan);
    // call op_eq
    bool returns = ((*self)==(*o));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSpan_constructor1[] = { &wxluatype_wxGBSpan, NULL };
static int LUACALL wxLua_wxGBSpan_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSpan_constructor1[1] = {{ wxLua_wxGBSpan_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxGBSpan_constructor1 }};
//     wxGBSpan(const wxGBSpan& span)
static int LUACALL wxLua_wxGBSpan_constructor1(lua_State *L)
{
    // const wxGBSpan span
    const wxGBSpan * span = (const wxGBSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBSpan);
    // call constructor
    wxGBSpan* returns = new wxGBSpan(*span);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxGBSpan((wxGBSpan*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSpan_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGBSpan_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSpan_constructor[1] = {{ wxLua_wxGBSpan_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxGBSpan_constructor }};
//     wxGBSpan(int rowspan=1, int colspan=1)
static int LUACALL wxLua_wxGBSpan_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int colspan = 1
    int colspan = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 1);
    // int rowspan = 1
    int rowspan = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 1);
    // call constructor
    wxGBSpan* returns = new wxGBSpan(rowspan, colspan);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxGBSpan((wxGBSpan*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBSpan);

    return 1;
}




#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSpan_constructor_overload[] =
{
    { wxLua_wxGBSpan_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxGBSpan_constructor1 },
    { wxLua_wxGBSpan_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxGBSpan_constructor },
};
static int s_wxluafunc_wxLua_wxGBSpan_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxGBSpan_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGBSpan_methods[] = {
    { "GetColspan", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBSpan_GetColspan, 1, NULL },
    { "GetRowspan", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBSpan_GetRowspan, 1, NULL },
    { "SetColspan", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBSpan_SetColspan, 1, NULL },
    { "SetRowspan", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBSpan_SetRowspan, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGBSpan_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBSpan_op_eq, 1, NULL },

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "wxGBSpan", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGBSpan_constructor_overload, s_wxluafunc_wxLua_wxGBSpan_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { 0, 0, 0, 0 },
};

int wxGBSpan_methodCount = sizeof(wxGBSpan_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))


#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxGBSizerItem
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGBSizerItem'
int wxluatype_wxGBSizerItem = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSizerItem_GetEndPos[] = { &wxluatype_wxGBSizerItem, NULL };
static int LUACALL wxLua_wxGBSizerItem_GetEndPos(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSizerItem_GetEndPos[1] = {{ wxLua_wxGBSizerItem_GetEndPos, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGBSizerItem_GetEndPos }};
// %override wxLua_wxGBSizerItem_GetEndPos
//     void GetEndPos(int& row, int& col)
static int LUACALL wxLua_wxGBSizerItem_GetEndPos(lua_State *L)
{
    int col = 0;
    int row = 0;
    // get this
    wxGBSizerItem * self = (wxGBSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBSizerItem);
    // call GetEndPos
    self->GetEndPos(row, col);
    lua_pushnumber(L, row);
    lua_pushnumber(L, col);
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSizerItem_GetGBSizer[] = { &wxluatype_wxGBSizerItem, NULL };
static int LUACALL wxLua_wxGBSizerItem_GetGBSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSizerItem_GetGBSizer[1] = {{ wxLua_wxGBSizerItem_GetGBSizer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGBSizerItem_GetGBSizer }};
//     wxGridBagSizer* GetGBSizer() const
static int LUACALL wxLua_wxGBSizerItem_GetGBSizer(lua_State *L)
{
    // get this
    wxGBSizerItem * self = (wxGBSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBSizerItem);
    // call GetGBSizer
    wxGridBagSizer* returns = (wxGridBagSizer*)self->GetGBSizer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridBagSizer);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSizerItem_GetPos[] = { &wxluatype_wxGBSizerItem, NULL };
static int LUACALL wxLua_wxGBSizerItem_GetPos(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSizerItem_GetPos[1] = {{ wxLua_wxGBSizerItem_GetPos, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGBSizerItem_GetPos }};
//     wxGBPosition GetPos() const
static int LUACALL wxLua_wxGBSizerItem_GetPos(lua_State *L)
{
    // get this
    wxGBSizerItem * self = (wxGBSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBSizerItem);
    // call GetPos
    // allocate a new object using the copy constructor
    wxGBPosition* returns = new wxGBPosition(self->GetPos());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxGBPosition((wxGBPosition*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBPosition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSizerItem_GetSpan[] = { &wxluatype_wxGBSizerItem, NULL };
static int LUACALL wxLua_wxGBSizerItem_GetSpan(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSizerItem_GetSpan[1] = {{ wxLua_wxGBSizerItem_GetSpan, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGBSizerItem_GetSpan }};
//     wxGBSpan GetSpan() const
static int LUACALL wxLua_wxGBSizerItem_GetSpan(lua_State *L)
{
    // get this
    wxGBSizerItem * self = (wxGBSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBSizerItem);
    // call GetSpan
    // allocate a new object using the copy constructor
    wxGBSpan* returns = new wxGBSpan(self->GetSpan());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxGBSpan((wxGBSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSizerItem_Intersects1[] = { &wxluatype_wxGBSizerItem, &wxluatype_wxGBPosition, &wxluatype_wxGBSpan, NULL };
static int LUACALL wxLua_wxGBSizerItem_Intersects1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSizerItem_Intersects1[1] = {{ wxLua_wxGBSizerItem_Intersects1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGBSizerItem_Intersects1 }};
//     bool Intersects(const wxGBPosition& pos, const wxGBSpan& span)
static int LUACALL wxLua_wxGBSizerItem_Intersects1(lua_State *L)
{
    // const wxGBSpan span
    const wxGBSpan * span = (const wxGBSpan *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGBSpan);
    // const wxGBPosition pos
    const wxGBPosition * pos = (const wxGBPosition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGBPosition);
    // get this
    wxGBSizerItem * self = (wxGBSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBSizerItem);
    // call Intersects
    bool returns = (self->Intersects(*pos, *span));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSizerItem_Intersects[] = { &wxluatype_wxGBSizerItem, &wxluatype_wxGBSizerItem, NULL };
static int LUACALL wxLua_wxGBSizerItem_Intersects(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSizerItem_Intersects[1] = {{ wxLua_wxGBSizerItem_Intersects, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGBSizerItem_Intersects }};
//     bool Intersects(const wxGBSizerItem& other)
static int LUACALL wxLua_wxGBSizerItem_Intersects(lua_State *L)
{
    // const wxGBSizerItem other
    const wxGBSizerItem * other = (const wxGBSizerItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGBSizerItem);
    // get this
    wxGBSizerItem * self = (wxGBSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBSizerItem);
    // call Intersects
    bool returns = (self->Intersects(*other));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSizerItem_SetGBSizer[] = { &wxluatype_wxGBSizerItem, &wxluatype_wxGridBagSizer, NULL };
static int LUACALL wxLua_wxGBSizerItem_SetGBSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSizerItem_SetGBSizer[1] = {{ wxLua_wxGBSizerItem_SetGBSizer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGBSizerItem_SetGBSizer }};
//     void SetGBSizer(wxGridBagSizer* sizer)
static int LUACALL wxLua_wxGBSizerItem_SetGBSizer(lua_State *L)
{
    // wxGridBagSizer sizer
    wxGridBagSizer * sizer = (wxGridBagSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridBagSizer);
    // get this
    wxGBSizerItem * self = (wxGBSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBSizerItem);
    // call SetGBSizer
    self->SetGBSizer(sizer);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSizerItem_SetPos[] = { &wxluatype_wxGBSizerItem, &wxluatype_wxGBPosition, NULL };
static int LUACALL wxLua_wxGBSizerItem_SetPos(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSizerItem_SetPos[1] = {{ wxLua_wxGBSizerItem_SetPos, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGBSizerItem_SetPos }};
//     bool SetPos( const wxGBPosition& pos )
static int LUACALL wxLua_wxGBSizerItem_SetPos(lua_State *L)
{
    // const wxGBPosition pos
    const wxGBPosition * pos = (const wxGBPosition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGBPosition);
    // get this
    wxGBSizerItem * self = (wxGBSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBSizerItem);
    // call SetPos
    bool returns = (self->SetPos(*pos));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSizerItem_SetSpan[] = { &wxluatype_wxGBSizerItem, &wxluatype_wxGBSpan, NULL };
static int LUACALL wxLua_wxGBSizerItem_SetSpan(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSizerItem_SetSpan[1] = {{ wxLua_wxGBSizerItem_SetSpan, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGBSizerItem_SetSpan }};
//     bool SetSpan( const wxGBSpan& span )
static int LUACALL wxLua_wxGBSizerItem_SetSpan(lua_State *L)
{
    // const wxGBSpan span
    const wxGBSpan * span = (const wxGBSpan *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGBSpan);
    // get this
    wxGBSizerItem * self = (wxGBSizerItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGBSizerItem);
    // call SetSpan
    bool returns = (self->SetSpan(*span));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSizerItem_constructor3[] = { &wxluatype_wxSizer, &wxluatype_wxGBPosition, &wxluatype_wxGBSpan, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxGBSizerItem_constructor3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSizerItem_constructor3[1] = {{ wxLua_wxGBSizerItem_constructor3, WXLUAMETHOD_CONSTRUCTOR, 6, 6, s_wxluatypeArray_wxLua_wxGBSizerItem_constructor3 }};
//     wxGBSizerItem( wxSizer *sizer, const wxGBPosition& pos, const wxGBSpan& span, int flag, int border, wxObject* userData )
static int LUACALL wxLua_wxGBSizerItem_constructor3(lua_State *L)
{
    // wxObject userData
    wxObject * userData = (wxObject *)wxluaT_getuserdatatype(L, 6, wxluatype_wxObject);
    // int border
    int border = (int)wxlua_getnumbertype(L, 5);
    // int flag
    int flag = (int)wxlua_getnumbertype(L, 4);
    // const wxGBSpan span
    const wxGBSpan * span = (const wxGBSpan *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGBSpan);
    // const wxGBPosition pos
    const wxGBPosition * pos = (const wxGBPosition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGBPosition);
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizer);
    // call constructor
    wxGBSizerItem* returns = new wxGBSizerItem(sizer, *pos, *span, flag, border, userData);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSizerItem_constructor2[] = { &wxluatype_wxWindow, &wxluatype_wxGBPosition, &wxluatype_wxGBSpan, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxGBSizerItem_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSizerItem_constructor2[1] = {{ wxLua_wxGBSizerItem_constructor2, WXLUAMETHOD_CONSTRUCTOR, 6, 6, s_wxluatypeArray_wxLua_wxGBSizerItem_constructor2 }};
//     wxGBSizerItem( wxWindow *window, const wxGBPosition& pos, const wxGBSpan& span, int flag, int border, wxObject* userData )
static int LUACALL wxLua_wxGBSizerItem_constructor2(lua_State *L)
{
    // wxObject userData
    wxObject * userData = (wxObject *)wxluaT_getuserdatatype(L, 6, wxluatype_wxObject);
    // int border
    int border = (int)wxlua_getnumbertype(L, 5);
    // int flag
    int flag = (int)wxlua_getnumbertype(L, 4);
    // const wxGBSpan span
    const wxGBSpan * span = (const wxGBSpan *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGBSpan);
    // const wxGBPosition pos
    const wxGBPosition * pos = (const wxGBPosition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGBPosition);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxGBSizerItem* returns = new wxGBSizerItem(window, *pos, *span, flag, border, userData);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBSizerItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGBSizerItem_constructor1[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxGBPosition, &wxluatype_wxGBSpan, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxGBSizerItem_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSizerItem_constructor1[1] = {{ wxLua_wxGBSizerItem_constructor1, WXLUAMETHOD_CONSTRUCTOR, 7, 7, s_wxluatypeArray_wxLua_wxGBSizerItem_constructor1 }};
//     wxGBSizerItem( int width, int height, const wxGBPosition& pos, const wxGBSpan& span, int flag, int border, wxObject* userData)
static int LUACALL wxLua_wxGBSizerItem_constructor1(lua_State *L)
{
    // wxObject userData
    wxObject * userData = (wxObject *)wxluaT_getuserdatatype(L, 7, wxluatype_wxObject);
    // int border
    int border = (int)wxlua_getnumbertype(L, 6);
    // int flag
    int flag = (int)wxlua_getnumbertype(L, 5);
    // const wxGBSpan span
    const wxGBSpan * span = (const wxGBSpan *)wxluaT_getuserdatatype(L, 4, wxluatype_wxGBSpan);
    // const wxGBPosition pos
    const wxGBPosition * pos = (const wxGBPosition *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGBPosition);
    // int height
    int height = (int)wxlua_getnumbertype(L, 2);
    // int width
    int width = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxGBSizerItem* returns = new wxGBSizerItem(width, height, *pos, *span, flag, border, userData);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBSizerItem);

    return 1;
}

#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static int LUACALL wxLua_wxGBSizerItem_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSizerItem_constructor[1] = {{ wxLua_wxGBSizerItem_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxGBSizerItem()
static int LUACALL wxLua_wxGBSizerItem_constructor(lua_State *L)
{
    // call constructor
    wxGBSizerItem* returns = new wxGBSizerItem();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGBSizerItem);

    return 1;
}




#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSizerItem_Intersects_overload[] =
{
    { wxLua_wxGBSizerItem_Intersects1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGBSizerItem_Intersects1 },
    { wxLua_wxGBSizerItem_Intersects, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGBSizerItem_Intersects },
};
static int s_wxluafunc_wxLua_wxGBSizerItem_Intersects_overload_count = sizeof(s_wxluafunc_wxLua_wxGBSizerItem_Intersects_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))||((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGBSizerItem_constructor_overload[] =
{

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxGBSizerItem_constructor3, WXLUAMETHOD_CONSTRUCTOR, 6, 6, s_wxluatypeArray_wxLua_wxGBSizerItem_constructor3 },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxGBSizerItem_constructor2, WXLUAMETHOD_CONSTRUCTOR, 6, 6, s_wxluatypeArray_wxLua_wxGBSizerItem_constructor2 },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxGBSizerItem_constructor1, WXLUAMETHOD_CONSTRUCTOR, 7, 7, s_wxluatypeArray_wxLua_wxGBSizerItem_constructor1 },
#endif // (wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxGBSizerItem_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxGBSizerItem_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxGBSizerItem_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))||((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGBSizerItem_methods[] = {
    { "GetEndPos", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBSizerItem_GetEndPos, 1, NULL },
    { "GetGBSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBSizerItem_GetGBSizer, 1, NULL },
    { "GetPos", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBSizerItem_GetPos, 1, NULL },
    { "GetSpan", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBSizerItem_GetSpan, 1, NULL },

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "Intersects", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBSizerItem_Intersects_overload, s_wxluafunc_wxLua_wxGBSizerItem_Intersects_overload_count, 0 },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { "SetGBSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBSizerItem_SetGBSizer, 1, NULL },
    { "SetPos", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBSizerItem_SetPos, 1, NULL },
    { "SetSpan", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGBSizerItem_SetSpan, 1, NULL },

#if ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))||((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "wxGBSizerItem", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGBSizerItem_constructor_overload, s_wxluafunc_wxLua_wxGBSizerItem_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxObject) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))))||((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { 0, 0, 0, 0 },
};

int wxGBSizerItem_methodCount = sizeof(wxGBSizerItem_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))


#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_NOTEBOOK && (!wxCHECK_VERSION(2,6,0)))
// ---------------------------------------------------------------------------
// Bind class wxNotebookSizer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxNotebookSizer'
int wxluatype_wxNotebookSizer = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_NOTEBOOK && (!wxCHECK_VERSION(2,6,0))))
static wxLuaArgType s_wxluatypeArray_wxLua_wxNotebookSizer_GetNotebook[] = { &wxluatype_wxNotebookSizer, NULL };
static int LUACALL wxLua_wxNotebookSizer_GetNotebook(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotebookSizer_GetNotebook[1] = {{ wxLua_wxNotebookSizer_GetNotebook, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNotebookSizer_GetNotebook }};
//     wxNotebook* GetNotebook()
static int LUACALL wxLua_wxNotebookSizer_GetNotebook(lua_State *L)
{
    // get this
    wxNotebookSizer * self = (wxNotebookSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNotebookSizer);
    // call GetNotebook
    wxNotebook* returns = (wxNotebook*)self->GetNotebook();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNotebook);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNotebookSizer_constructor[] = { &wxluatype_wxNotebook, NULL };
static int LUACALL wxLua_wxNotebookSizer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotebookSizer_constructor[1] = {{ wxLua_wxNotebookSizer_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxNotebookSizer_constructor }};
//     wxNotebookSizer(wxNotebook* notebook)
static int LUACALL wxLua_wxNotebookSizer_constructor(lua_State *L)
{
    // wxNotebook notebook
    wxNotebook * notebook = (wxNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNotebook);
    // call constructor
    wxNotebookSizer* returns = new wxNotebookSizer(notebook);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNotebookSizer);

    return 1;
}

#endif // (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_NOTEBOOK && (!wxCHECK_VERSION(2,6,0))))



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxNotebookSizer_methods[] = {
#if (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_NOTEBOOK && (!wxCHECK_VERSION(2,6,0))))
    { "GetNotebook", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNotebookSizer_GetNotebook, 1, NULL },
    { "wxNotebookSizer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxNotebookSizer_constructor, 1, NULL },
#endif // (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_NOTEBOOK && (!wxCHECK_VERSION(2,6,0))))

    { 0, 0, 0, 0 },
};

int wxNotebookSizer_methodCount = sizeof(wxNotebookSizer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_NOTEBOOK && (!wxCHECK_VERSION(2,6,0)))


#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX)
// ---------------------------------------------------------------------------
// Bind class wxStaticBoxSizer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxStaticBoxSizer'
int wxluatype_wxStaticBoxSizer = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX)) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX)
static wxLuaArgType s_wxluatypeArray_wxLua_wxStaticBoxSizer_GetStaticBox[] = { &wxluatype_wxStaticBoxSizer, NULL };
static int LUACALL wxLua_wxStaticBoxSizer_GetStaticBox(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticBoxSizer_GetStaticBox[1] = {{ wxLua_wxStaticBoxSizer_GetStaticBox, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStaticBoxSizer_GetStaticBox }};
//     wxStaticBox* GetStaticBox()
static int LUACALL wxLua_wxStaticBoxSizer_GetStaticBox(lua_State *L)
{
    // get this
    wxStaticBoxSizer * self = (wxStaticBoxSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStaticBoxSizer);
    // call GetStaticBox
    wxStaticBox* returns = (wxStaticBox*)self->GetStaticBox();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStaticBox);

    return 1;
}

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX)) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX)

static wxLuaArgType s_wxluatypeArray_wxLua_wxStaticBoxSizer_constructor1[] = { &wxluatype_TNUMBER, &wxluatype_wxWindow, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxStaticBoxSizer_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticBoxSizer_constructor1[1] = {{ wxLua_wxStaticBoxSizer_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxStaticBoxSizer_constructor1 }};
//     wxStaticBoxSizer(int orient, wxWindow *parent, const wxString& label = "")
static int LUACALL wxLua_wxStaticBoxSizer_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString label = ""
    const wxString label = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // int orient
    int orient = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxStaticBoxSizer* returns = new wxStaticBoxSizer(orient, parent, label);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStaticBoxSizer);

    return 1;
}


#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX)) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX)
static wxLuaArgType s_wxluatypeArray_wxLua_wxStaticBoxSizer_constructor[] = { &wxluatype_wxStaticBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxStaticBoxSizer_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticBoxSizer_constructor[1] = {{ wxLua_wxStaticBoxSizer_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxStaticBoxSizer_constructor }};
//     wxStaticBoxSizer(wxStaticBox* box, int orient)
static int LUACALL wxLua_wxStaticBoxSizer_constructor(lua_State *L)
{
    // int orient
    int orient = (int)wxlua_getnumbertype(L, 2);
    // wxStaticBox box
    wxStaticBox * box = (wxStaticBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStaticBox);
    // call constructor
    wxStaticBoxSizer* returns = new wxStaticBoxSizer(box, orient);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStaticBoxSizer);

    return 1;
}

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX)) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX)



#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX))||(((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX)) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticBoxSizer_constructor_overload[] =
{
    { wxLua_wxStaticBoxSizer_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxStaticBoxSizer_constructor1 },

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX)) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX)
    { wxLua_wxStaticBoxSizer_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxStaticBoxSizer_constructor },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX)) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX)
};
static int s_wxluafunc_wxLua_wxStaticBoxSizer_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxStaticBoxSizer_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX))||(((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX)) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxStaticBoxSizer_methods[] = {
#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX)) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX)
    { "GetStaticBox", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStaticBoxSizer_GetStaticBox, 1, NULL },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX)) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX)

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX))||(((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX)) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX))
    { "wxStaticBoxSizer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxStaticBoxSizer_constructor_overload, s_wxluafunc_wxLua_wxStaticBoxSizer_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX))||(((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX)) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX))

    { 0, 0, 0, 0 },
};

int wxStaticBoxSizer_methodCount = sizeof(wxStaticBoxSizer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_STATBOX)


#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_BUTTON)
// ---------------------------------------------------------------------------
// Bind class wxStdDialogButtonSizer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxStdDialogButtonSizer'
int wxluatype_wxStdDialogButtonSizer = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_BUTTON))
static wxLuaArgType s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_AddButton[] = { &wxluatype_wxStdDialogButtonSizer, &wxluatype_wxButton, NULL };
static int LUACALL wxLua_wxStdDialogButtonSizer_AddButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStdDialogButtonSizer_AddButton[1] = {{ wxLua_wxStdDialogButtonSizer_AddButton, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_AddButton }};
//     void AddButton(wxButton *button)
static int LUACALL wxLua_wxStdDialogButtonSizer_AddButton(lua_State *L)
{
    // wxButton button
    wxButton * button = (wxButton *)wxluaT_getuserdatatype(L, 2, wxluatype_wxButton);
    // get this
    wxStdDialogButtonSizer * self = (wxStdDialogButtonSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStdDialogButtonSizer);
    // call AddButton
    self->AddButton(button);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_GetAffirmativeButton[] = { &wxluatype_wxStdDialogButtonSizer, NULL };
static int LUACALL wxLua_wxStdDialogButtonSizer_GetAffirmativeButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStdDialogButtonSizer_GetAffirmativeButton[1] = {{ wxLua_wxStdDialogButtonSizer_GetAffirmativeButton, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_GetAffirmativeButton }};
//     wxButton *GetAffirmativeButton() const
static int LUACALL wxLua_wxStdDialogButtonSizer_GetAffirmativeButton(lua_State *L)
{
    // get this
    wxStdDialogButtonSizer * self = (wxStdDialogButtonSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStdDialogButtonSizer);
    // call GetAffirmativeButton
    wxButton* returns = (wxButton*)self->GetAffirmativeButton();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxButton);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_GetApplyButton[] = { &wxluatype_wxStdDialogButtonSizer, NULL };
static int LUACALL wxLua_wxStdDialogButtonSizer_GetApplyButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStdDialogButtonSizer_GetApplyButton[1] = {{ wxLua_wxStdDialogButtonSizer_GetApplyButton, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_GetApplyButton }};
//     wxButton *GetApplyButton() const
static int LUACALL wxLua_wxStdDialogButtonSizer_GetApplyButton(lua_State *L)
{
    // get this
    wxStdDialogButtonSizer * self = (wxStdDialogButtonSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStdDialogButtonSizer);
    // call GetApplyButton
    wxButton* returns = (wxButton*)self->GetApplyButton();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxButton);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_GetCancelButton[] = { &wxluatype_wxStdDialogButtonSizer, NULL };
static int LUACALL wxLua_wxStdDialogButtonSizer_GetCancelButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStdDialogButtonSizer_GetCancelButton[1] = {{ wxLua_wxStdDialogButtonSizer_GetCancelButton, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_GetCancelButton }};
//     wxButton *GetCancelButton() const
static int LUACALL wxLua_wxStdDialogButtonSizer_GetCancelButton(lua_State *L)
{
    // get this
    wxStdDialogButtonSizer * self = (wxStdDialogButtonSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStdDialogButtonSizer);
    // call GetCancelButton
    wxButton* returns = (wxButton*)self->GetCancelButton();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxButton);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_GetHelpButton[] = { &wxluatype_wxStdDialogButtonSizer, NULL };
static int LUACALL wxLua_wxStdDialogButtonSizer_GetHelpButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStdDialogButtonSizer_GetHelpButton[1] = {{ wxLua_wxStdDialogButtonSizer_GetHelpButton, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_GetHelpButton }};
//     wxButton *GetHelpButton() const
static int LUACALL wxLua_wxStdDialogButtonSizer_GetHelpButton(lua_State *L)
{
    // get this
    wxStdDialogButtonSizer * self = (wxStdDialogButtonSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStdDialogButtonSizer);
    // call GetHelpButton
    wxButton* returns = (wxButton*)self->GetHelpButton();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxButton);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_GetNegativeButton[] = { &wxluatype_wxStdDialogButtonSizer, NULL };
static int LUACALL wxLua_wxStdDialogButtonSizer_GetNegativeButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStdDialogButtonSizer_GetNegativeButton[1] = {{ wxLua_wxStdDialogButtonSizer_GetNegativeButton, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_GetNegativeButton }};
//     wxButton *GetNegativeButton() const
static int LUACALL wxLua_wxStdDialogButtonSizer_GetNegativeButton(lua_State *L)
{
    // get this
    wxStdDialogButtonSizer * self = (wxStdDialogButtonSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStdDialogButtonSizer);
    // call GetNegativeButton
    wxButton* returns = (wxButton*)self->GetNegativeButton();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxButton);

    return 1;
}

#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_BUTTON))

static wxLuaArgType s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_Realize[] = { &wxluatype_wxStdDialogButtonSizer, NULL };
static int LUACALL wxLua_wxStdDialogButtonSizer_Realize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStdDialogButtonSizer_Realize[1] = {{ wxLua_wxStdDialogButtonSizer_Realize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_Realize }};
//     void Realize()
static int LUACALL wxLua_wxStdDialogButtonSizer_Realize(lua_State *L)
{
    // get this
    wxStdDialogButtonSizer * self = (wxStdDialogButtonSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStdDialogButtonSizer);
    // call Realize
    self->Realize();

    return 0;
}


#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_BUTTON))
static wxLuaArgType s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_SetAffirmativeButton[] = { &wxluatype_wxStdDialogButtonSizer, &wxluatype_wxButton, NULL };
static int LUACALL wxLua_wxStdDialogButtonSizer_SetAffirmativeButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStdDialogButtonSizer_SetAffirmativeButton[1] = {{ wxLua_wxStdDialogButtonSizer_SetAffirmativeButton, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_SetAffirmativeButton }};
//     void SetAffirmativeButton( wxButton *button )
static int LUACALL wxLua_wxStdDialogButtonSizer_SetAffirmativeButton(lua_State *L)
{
    // wxButton button
    wxButton * button = (wxButton *)wxluaT_getuserdatatype(L, 2, wxluatype_wxButton);
    // get this
    wxStdDialogButtonSizer * self = (wxStdDialogButtonSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStdDialogButtonSizer);
    // call SetAffirmativeButton
    self->SetAffirmativeButton(button);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_SetCancelButton[] = { &wxluatype_wxStdDialogButtonSizer, &wxluatype_wxButton, NULL };
static int LUACALL wxLua_wxStdDialogButtonSizer_SetCancelButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStdDialogButtonSizer_SetCancelButton[1] = {{ wxLua_wxStdDialogButtonSizer_SetCancelButton, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_SetCancelButton }};
//     void SetCancelButton( wxButton *button )
static int LUACALL wxLua_wxStdDialogButtonSizer_SetCancelButton(lua_State *L)
{
    // wxButton button
    wxButton * button = (wxButton *)wxluaT_getuserdatatype(L, 2, wxluatype_wxButton);
    // get this
    wxStdDialogButtonSizer * self = (wxStdDialogButtonSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStdDialogButtonSizer);
    // call SetCancelButton
    self->SetCancelButton(button);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_SetNegativeButton[] = { &wxluatype_wxStdDialogButtonSizer, &wxluatype_wxButton, NULL };
static int LUACALL wxLua_wxStdDialogButtonSizer_SetNegativeButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStdDialogButtonSizer_SetNegativeButton[1] = {{ wxLua_wxStdDialogButtonSizer_SetNegativeButton, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxStdDialogButtonSizer_SetNegativeButton }};
//     void SetNegativeButton( wxButton *button )
static int LUACALL wxLua_wxStdDialogButtonSizer_SetNegativeButton(lua_State *L)
{
    // wxButton button
    wxButton * button = (wxButton *)wxluaT_getuserdatatype(L, 2, wxluatype_wxButton);
    // get this
    wxStdDialogButtonSizer * self = (wxStdDialogButtonSizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStdDialogButtonSizer);
    // call SetNegativeButton
    self->SetNegativeButton(button);

    return 0;
}

#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_BUTTON))

static int LUACALL wxLua_wxStdDialogButtonSizer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStdDialogButtonSizer_constructor[1] = {{ wxLua_wxStdDialogButtonSizer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxStdDialogButtonSizer()
static int LUACALL wxLua_wxStdDialogButtonSizer_constructor(lua_State *L)
{
    // call constructor
    wxStdDialogButtonSizer* returns = new wxStdDialogButtonSizer();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStdDialogButtonSizer);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxStdDialogButtonSizer_methods[] = {
#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_BUTTON))
    { "AddButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStdDialogButtonSizer_AddButton, 1, NULL },
    { "GetAffirmativeButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStdDialogButtonSizer_GetAffirmativeButton, 1, NULL },
    { "GetApplyButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStdDialogButtonSizer_GetApplyButton, 1, NULL },
    { "GetCancelButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStdDialogButtonSizer_GetCancelButton, 1, NULL },
    { "GetHelpButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStdDialogButtonSizer_GetHelpButton, 1, NULL },
    { "GetNegativeButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStdDialogButtonSizer_GetNegativeButton, 1, NULL },
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_BUTTON))

    { "Realize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStdDialogButtonSizer_Realize, 1, NULL },

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_BUTTON))
    { "SetAffirmativeButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStdDialogButtonSizer_SetAffirmativeButton, 1, NULL },
    { "SetCancelButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStdDialogButtonSizer_SetCancelButton, 1, NULL },
    { "SetNegativeButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStdDialogButtonSizer_SetNegativeButton, 1, NULL },
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_BUTTON))

    { "wxStdDialogButtonSizer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxStdDialogButtonSizer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxStdDialogButtonSizer_methodCount = sizeof(wxStdDialogButtonSizer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_BUTTON)


#if (wxLUA_USE_wxSizer) && (wxLUA_USE_wxLayoutConstraints && (!wxCHECK_VERSION(2,6,0)))
// ---------------------------------------------------------------------------
// Bind class wxLayoutConstraints
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLayoutConstraints'
int wxluatype_wxLayoutConstraints = WXLUA_TUNKNOWN;

static int LUACALL wxLua_wxLayoutConstraints_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLayoutConstraints_constructor[1] = {{ wxLua_wxLayoutConstraints_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxLayoutConstraints()
static int LUACALL wxLua_wxLayoutConstraints_constructor(lua_State *L)
{
    // call constructor
    wxLayoutConstraints* returns = new wxLayoutConstraints();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLayoutConstraints);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLayoutConstraints_methods[] = {
    { "wxLayoutConstraints", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLayoutConstraints_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxLayoutConstraints_methodCount = sizeof(wxLayoutConstraints_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSizer) && (wxLUA_USE_wxLayoutConstraints && (!wxCHECK_VERSION(2,6,0)))


#if (wxLUA_USE_wxSizer) && (wxLUA_USE_wxLayoutConstraints && (!wxCHECK_VERSION(2,6,0)))
// ---------------------------------------------------------------------------
// Bind class wxIndividualLayoutConstraint
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxIndividualLayoutConstraint'
int wxluatype_wxIndividualLayoutConstraint = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_Above[] = { &wxluatype_wxIndividualLayoutConstraint, &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIndividualLayoutConstraint_Above(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIndividualLayoutConstraint_Above[1] = {{ wxLua_wxIndividualLayoutConstraint_Above, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_Above }};
//     void Above(wxWindow *otherWin, int margin = 0)
static int LUACALL wxLua_wxIndividualLayoutConstraint_Above(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int margin = 0
    int margin = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // wxWindow otherWin
    wxWindow * otherWin = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxIndividualLayoutConstraint * self = (wxIndividualLayoutConstraint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIndividualLayoutConstraint);
    // call Above
    self->Above(otherWin, margin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_Absolute[] = { &wxluatype_wxIndividualLayoutConstraint, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIndividualLayoutConstraint_Absolute(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIndividualLayoutConstraint_Absolute[1] = {{ wxLua_wxIndividualLayoutConstraint_Absolute, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_Absolute }};
//     void Absolute(int value)
static int LUACALL wxLua_wxIndividualLayoutConstraint_Absolute(lua_State *L)
{
    // int value
    int value = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxIndividualLayoutConstraint * self = (wxIndividualLayoutConstraint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIndividualLayoutConstraint);
    // call Absolute
    self->Absolute(value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_AsIs[] = { &wxluatype_wxIndividualLayoutConstraint, NULL };
static int LUACALL wxLua_wxIndividualLayoutConstraint_AsIs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIndividualLayoutConstraint_AsIs[1] = {{ wxLua_wxIndividualLayoutConstraint_AsIs, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_AsIs }};
//     void AsIs()
static int LUACALL wxLua_wxIndividualLayoutConstraint_AsIs(lua_State *L)
{
    // get this
    wxIndividualLayoutConstraint * self = (wxIndividualLayoutConstraint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIndividualLayoutConstraint);
    // call AsIs
    self->AsIs();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_Below[] = { &wxluatype_wxIndividualLayoutConstraint, &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIndividualLayoutConstraint_Below(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIndividualLayoutConstraint_Below[1] = {{ wxLua_wxIndividualLayoutConstraint_Below, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_Below }};
//     void Below(wxWindow *otherWin, int margin = 0)
static int LUACALL wxLua_wxIndividualLayoutConstraint_Below(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int margin = 0
    int margin = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // wxWindow otherWin
    wxWindow * otherWin = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxIndividualLayoutConstraint * self = (wxIndividualLayoutConstraint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIndividualLayoutConstraint);
    // call Below
    self->Below(otherWin, margin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_LeftOf[] = { &wxluatype_wxIndividualLayoutConstraint, &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIndividualLayoutConstraint_LeftOf(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIndividualLayoutConstraint_LeftOf[1] = {{ wxLua_wxIndividualLayoutConstraint_LeftOf, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_LeftOf }};
//     void LeftOf(wxWindow *otherWin, int margin = 0)
static int LUACALL wxLua_wxIndividualLayoutConstraint_LeftOf(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int margin = 0
    int margin = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // wxWindow otherWin
    wxWindow * otherWin = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxIndividualLayoutConstraint * self = (wxIndividualLayoutConstraint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIndividualLayoutConstraint);
    // call LeftOf
    self->LeftOf(otherWin, margin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_PercentOf[] = { &wxluatype_wxIndividualLayoutConstraint, &wxluatype_wxWindow, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIndividualLayoutConstraint_PercentOf(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIndividualLayoutConstraint_PercentOf[1] = {{ wxLua_wxIndividualLayoutConstraint_PercentOf, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_PercentOf }};
//     void PercentOf(wxWindow *otherWin, wxEdge edge, int per)
static int LUACALL wxLua_wxIndividualLayoutConstraint_PercentOf(lua_State *L)
{
    // int per
    int per = (int)wxlua_getnumbertype(L, 4);
    // wxEdge edge
    wxEdge edge = (wxEdge)wxlua_getenumtype(L, 3);
    // wxWindow otherWin
    wxWindow * otherWin = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxIndividualLayoutConstraint * self = (wxIndividualLayoutConstraint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIndividualLayoutConstraint);
    // call PercentOf
    self->PercentOf(otherWin, edge, per);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_RightOf[] = { &wxluatype_wxIndividualLayoutConstraint, &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIndividualLayoutConstraint_RightOf(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIndividualLayoutConstraint_RightOf[1] = {{ wxLua_wxIndividualLayoutConstraint_RightOf, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_RightOf }};
//     void RightOf(wxWindow *otherWin, int margin = 0)
static int LUACALL wxLua_wxIndividualLayoutConstraint_RightOf(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int margin = 0
    int margin = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // wxWindow otherWin
    wxWindow * otherWin = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxIndividualLayoutConstraint * self = (wxIndividualLayoutConstraint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIndividualLayoutConstraint);
    // call RightOf
    self->RightOf(otherWin, margin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_SameAs[] = { &wxluatype_wxIndividualLayoutConstraint, &wxluatype_wxWindow, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIndividualLayoutConstraint_SameAs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIndividualLayoutConstraint_SameAs[1] = {{ wxLua_wxIndividualLayoutConstraint_SameAs, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_SameAs }};
//     void SameAs(wxWindow *otherWin, wxEdge edge, int margin = 0)
static int LUACALL wxLua_wxIndividualLayoutConstraint_SameAs(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int margin = 0
    int margin = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // wxEdge edge
    wxEdge edge = (wxEdge)wxlua_getenumtype(L, 3);
    // wxWindow otherWin
    wxWindow * otherWin = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxIndividualLayoutConstraint * self = (wxIndividualLayoutConstraint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIndividualLayoutConstraint);
    // call SameAs
    self->SameAs(otherWin, edge, margin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_Set[] = { &wxluatype_wxIndividualLayoutConstraint, &wxluatype_TINTEGER, &wxluatype_wxWindow, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIndividualLayoutConstraint_Set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIndividualLayoutConstraint_Set[1] = {{ wxLua_wxIndividualLayoutConstraint_Set, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_Set }};
//     void Set(wxRelationship rel, wxWindow *otherWin, wxEdge otherEdge, int value = 0, int margin = 0)
static int LUACALL wxLua_wxIndividualLayoutConstraint_Set(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int margin = 0
    int margin = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // int value = 0
    int value = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // wxEdge otherEdge
    wxEdge otherEdge = (wxEdge)wxlua_getenumtype(L, 4);
    // wxWindow otherWin
    wxWindow * otherWin = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxRelationship rel
    wxRelationship rel = (wxRelationship)wxlua_getenumtype(L, 2);
    // get this
    wxIndividualLayoutConstraint * self = (wxIndividualLayoutConstraint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIndividualLayoutConstraint);
    // call Set
    self->Set(rel, otherWin, otherEdge, value, margin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_Unconstrained[] = { &wxluatype_wxIndividualLayoutConstraint, NULL };
static int LUACALL wxLua_wxIndividualLayoutConstraint_Unconstrained(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIndividualLayoutConstraint_Unconstrained[1] = {{ wxLua_wxIndividualLayoutConstraint_Unconstrained, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIndividualLayoutConstraint_Unconstrained }};
//     void Unconstrained()
static int LUACALL wxLua_wxIndividualLayoutConstraint_Unconstrained(lua_State *L)
{
    // get this
    wxIndividualLayoutConstraint * self = (wxIndividualLayoutConstraint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIndividualLayoutConstraint);
    // call Unconstrained
    self->Unconstrained();

    return 0;
}

static int LUACALL wxLua_wxIndividualLayoutConstraint_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIndividualLayoutConstraint_constructor[1] = {{ wxLua_wxIndividualLayoutConstraint_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxIndividualLayoutConstraint()
static int LUACALL wxLua_wxIndividualLayoutConstraint_constructor(lua_State *L)
{
    // call constructor
    wxIndividualLayoutConstraint* returns = new wxIndividualLayoutConstraint();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIndividualLayoutConstraint);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxIndividualLayoutConstraint_methods[] = {
    { "Above", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIndividualLayoutConstraint_Above, 1, NULL },
    { "Absolute", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIndividualLayoutConstraint_Absolute, 1, NULL },
    { "AsIs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIndividualLayoutConstraint_AsIs, 1, NULL },
    { "Below", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIndividualLayoutConstraint_Below, 1, NULL },
    { "LeftOf", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIndividualLayoutConstraint_LeftOf, 1, NULL },
    { "PercentOf", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIndividualLayoutConstraint_PercentOf, 1, NULL },
    { "RightOf", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIndividualLayoutConstraint_RightOf, 1, NULL },
    { "SameAs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIndividualLayoutConstraint_SameAs, 1, NULL },
    { "Set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIndividualLayoutConstraint_Set, 1, NULL },
    { "Unconstrained", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIndividualLayoutConstraint_Unconstrained, 1, NULL },
    { "wxIndividualLayoutConstraint", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxIndividualLayoutConstraint_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxIndividualLayoutConstraint_methodCount = sizeof(wxIndividualLayoutConstraint_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxSizer) && (wxLUA_USE_wxLayoutConstraints && (!wxCHECK_VERSION(2,6,0)))

