// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxbase_datetime.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxbase_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif



#if wxLUA_USE_wxDateTime && wxUSE_DATETIME
// ---------------------------------------------------------------------------
// Bind class wxDateTime
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDateTime'
int wxluatype_wxDateTime = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateSpan && wxUSE_DATETIME)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_Add1[] = { &wxluatype_wxDateTime, &wxluatype_wxDateSpan, NULL };
static int LUACALL wxLua_wxDateTime_Add1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_Add1[1] = {{ wxLua_wxDateTime_Add1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_Add1 }};
//     wxDateTime& Add(const wxDateSpan& diff)
static int LUACALL wxLua_wxDateTime_Add1(lua_State *L)
{
    // const wxDateSpan diff
    const wxDateSpan * diff = (const wxDateSpan *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateSpan);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call Add
    wxDateTime* returns = &self->Add(*diff);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateSpan && wxUSE_DATETIME)

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_Add[] = { &wxluatype_wxDateTime, &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxDateTime_Add(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_Add[1] = {{ wxLua_wxDateTime_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_Add }};
//     wxDateTime& Add(const wxTimeSpan& diff)
static int LUACALL wxLua_wxDateTime_Add(lua_State *L)
{
    // const wxTimeSpan diff
    const wxTimeSpan * diff = (const wxTimeSpan *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTimeSpan);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call Add
    wxDateTime* returns = &self->Add(*diff);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_Format[] = { &wxluatype_wxDateTime, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTime_Format(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_Format[1] = {{ wxLua_wxDateTime_Format, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxDateTime_Format }};
//     wxString Format(wxString format = "%c", wxDateTime::TZ tz = wxDateTime::Local) const
static int LUACALL wxLua_wxDateTime_Format(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxDateTime::TZ tz = wxDateTime::Local
    wxDateTime::TZ tz = (argCount >= 3 ? (wxDateTime::TZ)wxlua_getenumtype(L, 3) : wxDateTime::Local);
    // wxString format = "%c"
    wxString format = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxT("%c")));
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call Format
    wxString returns = (self->Format(format, tz));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_FormatDate[] = { &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_FormatDate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_FormatDate[1] = {{ wxLua_wxDateTime_FormatDate, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTime_FormatDate }};
//     wxString FormatDate() const
static int LUACALL wxLua_wxDateTime_FormatDate(lua_State *L)
{
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call FormatDate
    wxString returns = (self->FormatDate());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_FormatISODate[] = { &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_FormatISODate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_FormatISODate[1] = {{ wxLua_wxDateTime_FormatISODate, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTime_FormatISODate }};
//     wxString FormatISODate() const
static int LUACALL wxLua_wxDateTime_FormatISODate(lua_State *L)
{
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call FormatISODate
    wxString returns = (self->FormatISODate());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_FormatISOTime[] = { &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_FormatISOTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_FormatISOTime[1] = {{ wxLua_wxDateTime_FormatISOTime, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTime_FormatISOTime }};
//     wxString FormatISOTime() const
static int LUACALL wxLua_wxDateTime_FormatISOTime(lua_State *L)
{
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call FormatISOTime
    wxString returns = (self->FormatISOTime());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_FormatTime[] = { &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_FormatTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_FormatTime[1] = {{ wxLua_wxDateTime_FormatTime, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTime_FormatTime }};
//     wxString FormatTime() const
static int LUACALL wxLua_wxDateTime_FormatTime(lua_State *L)
{
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call FormatTime
    wxString returns = (self->FormatTime());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_GetJDN[] = { &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_GetJDN(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_GetJDN[1] = {{ wxLua_wxDateTime_GetJDN, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTime_GetJDN }};
//     double GetJDN() const
static int LUACALL wxLua_wxDateTime_GetJDN(lua_State *L)
{
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call GetJDN
    double returns = (self->GetJDN());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_GetJulianDayNumber[] = { &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_GetJulianDayNumber(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_GetJulianDayNumber[1] = {{ wxLua_wxDateTime_GetJulianDayNumber, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTime_GetJulianDayNumber }};
//     double GetJulianDayNumber() const
static int LUACALL wxLua_wxDateTime_GetJulianDayNumber(lua_State *L)
{
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call GetJulianDayNumber
    double returns = (self->GetJulianDayNumber());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_GetLastMonthDay[] = { &wxluatype_wxDateTime, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_GetLastMonthDay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_GetLastMonthDay[1] = {{ wxLua_wxDateTime_GetLastMonthDay, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxDateTime_GetLastMonthDay }};
//     wxDateTime GetLastMonthDay(wxDateTime::Month month = wxDateTime::Inv_Month, int year = wxDateTime::Inv_Year) const
static int LUACALL wxLua_wxDateTime_GetLastMonthDay(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int year = wxDateTime::Inv_Year
    int year = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxDateTime::Inv_Year);
    // wxDateTime::Month month = wxDateTime::Inv_Month
    wxDateTime::Month month = (argCount >= 2 ? (wxDateTime::Month)wxlua_getenumtype(L, 2) : wxDateTime::Inv_Month);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call GetLastMonthDay
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->GetLastMonthDay(month, year));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_GetLastWeekDay[] = { &wxluatype_wxDateTime, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_GetLastWeekDay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_GetLastWeekDay[1] = {{ wxLua_wxDateTime_GetLastWeekDay, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxDateTime_GetLastWeekDay }};
//     wxDateTime GetLastWeekDay(wxDateTime::WeekDay weekday, wxDateTime::Month month = wxDateTime::Inv_Month, int year = wxDateTime::Inv_Year)
static int LUACALL wxLua_wxDateTime_GetLastWeekDay(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int year = wxDateTime::Inv_Year
    int year = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxDateTime::Inv_Year);
    // wxDateTime::Month month = wxDateTime::Inv_Month
    wxDateTime::Month month = (argCount >= 3 ? (wxDateTime::Month)wxlua_getenumtype(L, 3) : wxDateTime::Inv_Month);
    // wxDateTime::WeekDay weekday
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay)wxlua_getenumtype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call GetLastWeekDay
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->GetLastWeekDay(weekday, month, year));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_GetMJD[] = { &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_GetMJD(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_GetMJD[1] = {{ wxLua_wxDateTime_GetMJD, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTime_GetMJD }};
//     double GetMJD() const
static int LUACALL wxLua_wxDateTime_GetMJD(lua_State *L)
{
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call GetMJD
    double returns = (self->GetMJD());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_GetModifiedJulianDayNumber[] = { &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_GetModifiedJulianDayNumber(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_GetModifiedJulianDayNumber[1] = {{ wxLua_wxDateTime_GetModifiedJulianDayNumber, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTime_GetModifiedJulianDayNumber }};
//     double GetModifiedJulianDayNumber() const
static int LUACALL wxLua_wxDateTime_GetModifiedJulianDayNumber(lua_State *L)
{
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call GetModifiedJulianDayNumber
    double returns = (self->GetModifiedJulianDayNumber());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_GetNextWeekDay[] = { &wxluatype_wxDateTime, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTime_GetNextWeekDay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_GetNextWeekDay[1] = {{ wxLua_wxDateTime_GetNextWeekDay, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_GetNextWeekDay }};
//     wxDateTime GetNextWeekDay(wxDateTime::WeekDay weekday) const
static int LUACALL wxLua_wxDateTime_GetNextWeekDay(lua_State *L)
{
    // wxDateTime::WeekDay weekday
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay)wxlua_getenumtype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call GetNextWeekDay
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->GetNextWeekDay(weekday));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_GetPrevWeekDay[] = { &wxluatype_wxDateTime, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTime_GetPrevWeekDay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_GetPrevWeekDay[1] = {{ wxLua_wxDateTime_GetPrevWeekDay, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_GetPrevWeekDay }};
//     wxDateTime GetPrevWeekDay(wxDateTime::WeekDay weekday) const
static int LUACALL wxLua_wxDateTime_GetPrevWeekDay(lua_State *L)
{
    // wxDateTime::WeekDay weekday
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay)wxlua_getenumtype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call GetPrevWeekDay
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->GetPrevWeekDay(weekday));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_GetRataDie[] = { &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_GetRataDie(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_GetRataDie[1] = {{ wxLua_wxDateTime_GetRataDie, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTime_GetRataDie }};
//     double GetRataDie() const
static int LUACALL wxLua_wxDateTime_GetRataDie(lua_State *L)
{
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call GetRataDie
    double returns = (self->GetRataDie());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_GetTicks[] = { &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_GetTicks(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_GetTicks[1] = {{ wxLua_wxDateTime_GetTicks, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTime_GetTicks }};
//     long GetTicks()
static int LUACALL wxLua_wxDateTime_GetTicks(lua_State *L)
{
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call GetTicks
    long  returns = (self->GetTicks());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && ((!wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_GetWeek[] = { &wxluatype_wxDateTime, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTime_GetWeek(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_GetWeek[1] = {{ wxLua_wxDateTime_GetWeek, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxDateTime_GetWeek }};
//     !%wxchkver_2_6 wxDateTime GetWeek(wxDateTime::wxDateTime_t numWeek, wxDateTime::WeekDay weekday = wxDateTime::Mon) const
static int LUACALL wxLua_wxDateTime_GetWeek(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxDateTime::WeekDay weekday = wxDateTime::Mon
    wxDateTime::WeekDay weekday = (argCount >= 3 ? (wxDateTime::WeekDay)wxlua_getenumtype(L, 3) : wxDateTime::Mon);
    // wxDateTime::wxDateTime_t numWeek
    wxDateTime::wxDateTime_t numWeek = (wxDateTime::wxDateTime_t)wxlua_getnumbertype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call GetWeek
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->GetWeek(numWeek, weekday));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && ((!wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME))

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_GetWeekDay[] = { &wxluatype_wxDateTime, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_GetWeekDay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_GetWeekDay[1] = {{ wxLua_wxDateTime_GetWeekDay, WXLUAMETHOD_METHOD, 2, 5, s_wxluatypeArray_wxLua_wxDateTime_GetWeekDay }};
//     wxDateTime GetWeekDay(wxDateTime::WeekDay weekday, int n = 1, wxDateTime::Month month = wxDateTime::Inv_Month, int year = wxDateTime::Inv_Year) const
static int LUACALL wxLua_wxDateTime_GetWeekDay(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int year = wxDateTime::Inv_Year
    int year = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxDateTime::Inv_Year);
    // wxDateTime::Month month = wxDateTime::Inv_Month
    wxDateTime::Month month = (argCount >= 4 ? (wxDateTime::Month)wxlua_getenumtype(L, 4) : wxDateTime::Inv_Month);
    // int n = 1
    int n = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 1);
    // wxDateTime::WeekDay weekday
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay)wxlua_getenumtype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call GetWeekDay
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->GetWeekDay(weekday, n, month, year));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_GetWeekDayInSameWeek[] = { &wxluatype_wxDateTime, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTime_GetWeekDayInSameWeek(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_GetWeekDayInSameWeek[1] = {{ wxLua_wxDateTime_GetWeekDayInSameWeek, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_GetWeekDayInSameWeek }};
//     wxDateTime  GetWeekDayInSameWeek(wxDateTime::WeekDay weekday) const
static int LUACALL wxLua_wxDateTime_GetWeekDayInSameWeek(lua_State *L)
{
    // wxDateTime::WeekDay weekday
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay)wxlua_getenumtype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call GetWeekDayInSameWeek
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->GetWeekDayInSameWeek(weekday));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_GetYearDay[] = { &wxluatype_wxDateTime, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_GetYearDay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_GetYearDay[1] = {{ wxLua_wxDateTime_GetYearDay, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_GetYearDay }};
//     wxDateTime GetYearDay(wxDateTime::wxDateTime_t yday) const
static int LUACALL wxLua_wxDateTime_GetYearDay(lua_State *L)
{
    // wxDateTime::wxDateTime_t yday
    wxDateTime::wxDateTime_t yday = (wxDateTime::wxDateTime_t)wxlua_getnumbertype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call GetYearDay
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->GetYearDay(yday));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_IsBetween[] = { &wxluatype_wxDateTime, &wxluatype_wxDateTime, &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_IsBetween(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_IsBetween[1] = {{ wxLua_wxDateTime_IsBetween, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDateTime_IsBetween }};
//     bool IsBetween(const wxDateTime& t1, const wxDateTime& t2) const
static int LUACALL wxLua_wxDateTime_IsBetween(lua_State *L)
{
    // const wxDateTime t2
    const wxDateTime * t2 = (const wxDateTime *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDateTime);
    // const wxDateTime t1
    const wxDateTime * t1 = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call IsBetween
    bool returns = (self->IsBetween(*t1, *t2));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_IsDST[] = { &wxluatype_wxDateTime, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTime_IsDST(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_IsDST[1] = {{ wxLua_wxDateTime_IsDST, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxDateTime_IsDST }};
//     int IsDST(wxDateTime::Country country = wxDateTime::Country_Default) const
static int LUACALL wxLua_wxDateTime_IsDST(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxDateTime::Country country = wxDateTime::Country_Default
    wxDateTime::Country country = (argCount >= 2 ? (wxDateTime::Country)wxlua_getenumtype(L, 2) : wxDateTime::Country_Default);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call IsDST
    int returns = (self->IsDST(country));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_IsEarlierThan[] = { &wxluatype_wxDateTime, &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_IsEarlierThan(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_IsEarlierThan[1] = {{ wxLua_wxDateTime_IsEarlierThan, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_IsEarlierThan }};
//     bool IsEarlierThan(const wxDateTime& datetime) const
static int LUACALL wxLua_wxDateTime_IsEarlierThan(lua_State *L)
{
    // const wxDateTime datetime
    const wxDateTime * datetime = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call IsEarlierThan
    bool returns = (self->IsEarlierThan(*datetime));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_IsEqualTo[] = { &wxluatype_wxDateTime, &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_IsEqualTo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_IsEqualTo[1] = {{ wxLua_wxDateTime_IsEqualTo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_IsEqualTo }};
//     bool IsEqualTo(const wxDateTime& datetime) const
static int LUACALL wxLua_wxDateTime_IsEqualTo(lua_State *L)
{
    // const wxDateTime datetime
    const wxDateTime * datetime = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call IsEqualTo
    bool returns = (self->IsEqualTo(*datetime));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_IsEqualUpTo[] = { &wxluatype_wxDateTime, &wxluatype_wxDateTime, &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxDateTime_IsEqualUpTo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_IsEqualUpTo[1] = {{ wxLua_wxDateTime_IsEqualUpTo, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDateTime_IsEqualUpTo }};
//     bool IsEqualUpTo(const wxDateTime& dt, const wxTimeSpan& ts) const
static int LUACALL wxLua_wxDateTime_IsEqualUpTo(lua_State *L)
{
    // const wxTimeSpan ts
    const wxTimeSpan * ts = (const wxTimeSpan *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTimeSpan);
    // const wxDateTime dt
    const wxDateTime * dt = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call IsEqualUpTo
    bool returns = (self->IsEqualUpTo(*dt, *ts));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_IsLaterThan[] = { &wxluatype_wxDateTime, &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_IsLaterThan(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_IsLaterThan[1] = {{ wxLua_wxDateTime_IsLaterThan, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_IsLaterThan }};
//     bool IsLaterThan(const wxDateTime& datetime) const
static int LUACALL wxLua_wxDateTime_IsLaterThan(lua_State *L)
{
    // const wxDateTime datetime
    const wxDateTime * datetime = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call IsLaterThan
    bool returns = (self->IsLaterThan(*datetime));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_IsSameDate[] = { &wxluatype_wxDateTime, &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_IsSameDate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_IsSameDate[1] = {{ wxLua_wxDateTime_IsSameDate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_IsSameDate }};
//     bool IsSameDate(const wxDateTime& dt) const
static int LUACALL wxLua_wxDateTime_IsSameDate(lua_State *L)
{
    // const wxDateTime dt
    const wxDateTime * dt = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call IsSameDate
    bool returns = (self->IsSameDate(*dt));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_IsSameTime[] = { &wxluatype_wxDateTime, &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_IsSameTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_IsSameTime[1] = {{ wxLua_wxDateTime_IsSameTime, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_IsSameTime }};
//     bool IsSameTime(const wxDateTime& dt) const
static int LUACALL wxLua_wxDateTime_IsSameTime(lua_State *L)
{
    // const wxDateTime dt
    const wxDateTime * dt = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call IsSameTime
    bool returns = (self->IsSameTime(*dt));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_IsStrictlyBetween[] = { &wxluatype_wxDateTime, &wxluatype_wxDateTime, &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_IsStrictlyBetween(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_IsStrictlyBetween[1] = {{ wxLua_wxDateTime_IsStrictlyBetween, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDateTime_IsStrictlyBetween }};
//     bool IsStrictlyBetween(const wxDateTime& t1, const wxDateTime& t2) const
static int LUACALL wxLua_wxDateTime_IsStrictlyBetween(lua_State *L)
{
    // const wxDateTime t2
    const wxDateTime * t2 = (const wxDateTime *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDateTime);
    // const wxDateTime t1
    const wxDateTime * t1 = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call IsStrictlyBetween
    bool returns = (self->IsStrictlyBetween(*t1, *t2));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_IsValid[] = { &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_IsValid(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_IsValid[1] = {{ wxLua_wxDateTime_IsValid, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTime_IsValid }};
//     bool IsValid()
static int LUACALL wxLua_wxDateTime_IsValid(lua_State *L)
{
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call IsValid
    bool returns = (self->IsValid());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_IsWorkDay[] = { &wxluatype_wxDateTime, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTime_IsWorkDay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_IsWorkDay[1] = {{ wxLua_wxDateTime_IsWorkDay, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxDateTime_IsWorkDay }};
//     bool IsWorkDay(wxDateTime::Country country = wxDateTime::Country_Default) const
static int LUACALL wxLua_wxDateTime_IsWorkDay(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxDateTime::Country country = wxDateTime::Country_Default
    wxDateTime::Country country = (argCount >= 2 ? (wxDateTime::Country)wxlua_getenumtype(L, 2) : wxDateTime::Country_Default);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call IsWorkDay
    bool returns = (self->IsWorkDay(country));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_MakeGMT[] = { &wxluatype_wxDateTime, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDateTime_MakeGMT(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_MakeGMT[1] = {{ wxLua_wxDateTime_MakeGMT, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxDateTime_MakeGMT }};
//     wxDateTime& MakeGMT(bool noDST = false)
static int LUACALL wxLua_wxDateTime_MakeGMT(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool noDST = false
    bool noDST = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call MakeGMT
    wxDateTime* returns = &self->MakeGMT(noDST);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_ParseDate[] = { &wxluatype_wxDateTime, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDateTime_ParseDate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_ParseDate[1] = {{ wxLua_wxDateTime_ParseDate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_ParseDate }};
//     wxString ParseDate(wxString date)
static int LUACALL wxLua_wxDateTime_ParseDate(lua_State *L)
{
    // wxString date
    wxString date = wxlua_getwxStringtype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call ParseDate
    wxString returns = (self->ParseDate(date));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_ParseDateTime[] = { &wxluatype_wxDateTime, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDateTime_ParseDateTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_ParseDateTime[1] = {{ wxLua_wxDateTime_ParseDateTime, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_ParseDateTime }};
//     wxString ParseDateTime(wxString datetime)
static int LUACALL wxLua_wxDateTime_ParseDateTime(lua_State *L)
{
    // wxString datetime
    wxString datetime = wxlua_getwxStringtype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call ParseDateTime
    wxString returns = (self->ParseDateTime(datetime));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_ParseFormat[] = { &wxluatype_wxDateTime, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_ParseFormat(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_ParseFormat[1] = {{ wxLua_wxDateTime_ParseFormat, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxDateTime_ParseFormat }};
//     wxString ParseFormat(wxString date, wxString format = "%c", const wxDateTime& dateDef = wxDefaultDateTime)
static int LUACALL wxLua_wxDateTime_ParseFormat(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxDateTime dateDef = wxDefaultDateTime
    const wxDateTime * dateDef = (argCount >= 4 ? (const wxDateTime *)wxluaT_getuserdatatype(L, 4, wxluatype_wxDateTime) : &wxDefaultDateTime);
    // wxString format = "%c"
    wxString format = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxT("%c")));
    // wxString date
    wxString date = wxlua_getwxStringtype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call ParseFormat
    wxString returns = (self->ParseFormat(date, format, *dateDef));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_ParseRfc822Date[] = { &wxluatype_wxDateTime, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDateTime_ParseRfc822Date(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_ParseRfc822Date[1] = {{ wxLua_wxDateTime_ParseRfc822Date, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_ParseRfc822Date }};
//     wxString ParseRfc822Date(wxString date)
static int LUACALL wxLua_wxDateTime_ParseRfc822Date(lua_State *L)
{
    // wxString date
    wxString date = wxlua_getwxStringtype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call ParseRfc822Date
    wxString returns = (self->ParseRfc822Date(date));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_ParseTime[] = { &wxluatype_wxDateTime, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDateTime_ParseTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_ParseTime[1] = {{ wxLua_wxDateTime_ParseTime, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_ParseTime }};
//     wxString ParseTime(wxString time)
static int LUACALL wxLua_wxDateTime_ParseTime(lua_State *L)
{
    // wxString time
    wxString time = wxlua_getwxStringtype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call ParseTime
    wxString returns = (self->ParseTime(time));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_ResetTime[] = { &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_ResetTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_ResetTime[1] = {{ wxLua_wxDateTime_ResetTime, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTime_ResetTime }};
//     wxDateTime& ResetTime()
static int LUACALL wxLua_wxDateTime_ResetTime(lua_State *L)
{
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call ResetTime
    wxDateTime* returns = &self->ResetTime();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_Set[] = { &wxluatype_wxDateTime, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTime_Set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_Set[1] = {{ wxLua_wxDateTime_Set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_Set }};
//     wxDateTime& Set(time_t time) // use with Lua's os.time() on MSW, Linux, others?
static int LUACALL wxLua_wxDateTime_Set(lua_State *L)
{
    // time_t time
    time_t time = (time_t)wxlua_getuintegertype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call Set
    wxDateTime* returns = &self->Set(time);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetDay[] = { &wxluatype_wxDateTime, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_SetDay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetDay[1] = {{ wxLua_wxDateTime_SetDay, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_SetDay }};
//     wxDateTime& SetDay(int day)
static int LUACALL wxLua_wxDateTime_SetDay(lua_State *L)
{
    // int day
    int day = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call SetDay
    wxDateTime* returns = &self->SetDay(day);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetHour[] = { &wxluatype_wxDateTime, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_SetHour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetHour[1] = {{ wxLua_wxDateTime_SetHour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_SetHour }};
//     wxDateTime& SetHour(int hour)
static int LUACALL wxLua_wxDateTime_SetHour(lua_State *L)
{
    // int hour
    int hour = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call SetHour
    wxDateTime* returns = &self->SetHour(hour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetMillisecond[] = { &wxluatype_wxDateTime, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_SetMillisecond(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetMillisecond[1] = {{ wxLua_wxDateTime_SetMillisecond, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_SetMillisecond }};
//     wxDateTime& SetMillisecond(int millisecond)
static int LUACALL wxLua_wxDateTime_SetMillisecond(lua_State *L)
{
    // int millisecond
    int millisecond = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call SetMillisecond
    wxDateTime* returns = &self->SetMillisecond(millisecond);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetMinute[] = { &wxluatype_wxDateTime, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_SetMinute(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetMinute[1] = {{ wxLua_wxDateTime_SetMinute, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_SetMinute }};
//     wxDateTime& SetMinute(int minute)
static int LUACALL wxLua_wxDateTime_SetMinute(lua_State *L)
{
    // int minute
    int minute = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call SetMinute
    wxDateTime* returns = &self->SetMinute(minute);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetMonth[] = { &wxluatype_wxDateTime, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTime_SetMonth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetMonth[1] = {{ wxLua_wxDateTime_SetMonth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_SetMonth }};
//     wxDateTime& SetMonth(wxDateTime::Month month)
static int LUACALL wxLua_wxDateTime_SetMonth(lua_State *L)
{
    // wxDateTime::Month month
    wxDateTime::Month month = (wxDateTime::Month)wxlua_getenumtype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call SetMonth
    wxDateTime* returns = &self->SetMonth(month);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetSecond[] = { &wxluatype_wxDateTime, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_SetSecond(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetSecond[1] = {{ wxLua_wxDateTime_SetSecond, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_SetSecond }};
//     wxDateTime& SetSecond(int second)
static int LUACALL wxLua_wxDateTime_SetSecond(lua_State *L)
{
    // int second
    int second = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call SetSecond
    wxDateTime* returns = &self->SetSecond(second);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetToCurrent[] = { &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTime_SetToCurrent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetToCurrent[1] = {{ wxLua_wxDateTime_SetToCurrent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTime_SetToCurrent }};
//     wxDateTime& SetToCurrent()
static int LUACALL wxLua_wxDateTime_SetToCurrent(lua_State *L)
{
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call SetToCurrent
    wxDateTime* returns = &self->SetToCurrent();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetToDMY[] = { &wxluatype_wxDateTime, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_SetToDMY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetToDMY[1] = {{ wxLua_wxDateTime_SetToDMY, WXLUAMETHOD_METHOD, 2, 8, s_wxluatypeArray_wxLua_wxDateTime_SetToDMY }};
//     %rename SetToDMY wxDateTime& Set(int day, wxDateTime::Month month = wxDateTime::Inv_Month, int year = wxDateTime::Inv_Year, int hour = 0, int minute = 0, int second = 0, int millisec = 0)
static int LUACALL wxLua_wxDateTime_SetToDMY(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int millisec = 0
    int millisec = (argCount >= 8 ? (int)wxlua_getnumbertype(L, 8) : 0);
    // int second = 0
    int second = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : 0);
    // int minute = 0
    int minute = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // int hour = 0
    int hour = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // int year = wxDateTime::Inv_Year
    int year = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxDateTime::Inv_Year);
    // wxDateTime::Month month = wxDateTime::Inv_Month
    wxDateTime::Month month = (argCount >= 3 ? (wxDateTime::Month)wxlua_getenumtype(L, 3) : wxDateTime::Inv_Month);
    // int day
    int day = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call Set
    wxDateTime* returns = &self->Set(day, month, year, hour, minute, second, millisec);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetToHMS[] = { &wxluatype_wxDateTime, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_SetToHMS(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetToHMS[1] = {{ wxLua_wxDateTime_SetToHMS, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxDateTime_SetToHMS }};
//     %rename SetToHMS wxDateTime& Set(int hour, int minute, int second, int millisec)
static int LUACALL wxLua_wxDateTime_SetToHMS(lua_State *L)
{
    // int millisec
    int millisec = (int)wxlua_getnumbertype(L, 5);
    // int second
    int second = (int)wxlua_getnumbertype(L, 4);
    // int minute
    int minute = (int)wxlua_getnumbertype(L, 3);
    // int hour
    int hour = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call Set
    wxDateTime* returns = &self->Set(hour, minute, second, millisec);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetToJDN[] = { &wxluatype_wxDateTime, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_SetToJDN(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetToJDN[1] = {{ wxLua_wxDateTime_SetToJDN, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_SetToJDN }};
//     %rename SetToJDN wxDateTime& Set(double dateTime)
static int LUACALL wxLua_wxDateTime_SetToJDN(lua_State *L)
{
    // double dateTime
    double dateTime = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call Set
    wxDateTime* returns = &self->Set(dateTime);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetToLastMonthDay[] = { &wxluatype_wxDateTime, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_SetToLastMonthDay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetToLastMonthDay[1] = {{ wxLua_wxDateTime_SetToLastMonthDay, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxDateTime_SetToLastMonthDay }};
//     wxDateTime& SetToLastMonthDay(wxDateTime::Month month = wxDateTime::Inv_Month, int year = wxDateTime::Inv_Year)
static int LUACALL wxLua_wxDateTime_SetToLastMonthDay(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int year = wxDateTime::Inv_Year
    int year = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxDateTime::Inv_Year);
    // wxDateTime::Month month = wxDateTime::Inv_Month
    wxDateTime::Month month = (argCount >= 2 ? (wxDateTime::Month)wxlua_getenumtype(L, 2) : wxDateTime::Inv_Month);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call SetToLastMonthDay
    wxDateTime* returns = &self->SetToLastMonthDay(month, year);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetToLastWeekDay[] = { &wxluatype_wxDateTime, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_SetToLastWeekDay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetToLastWeekDay[1] = {{ wxLua_wxDateTime_SetToLastWeekDay, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxDateTime_SetToLastWeekDay }};
//     bool SetToLastWeekDay(wxDateTime::WeekDay weekday, wxDateTime::Month month = wxDateTime::Inv_Month, int year = wxDateTime::Inv_Year)
static int LUACALL wxLua_wxDateTime_SetToLastWeekDay(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int year = wxDateTime::Inv_Year
    int year = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxDateTime::Inv_Year);
    // wxDateTime::Month month = wxDateTime::Inv_Month
    wxDateTime::Month month = (argCount >= 3 ? (wxDateTime::Month)wxlua_getenumtype(L, 3) : wxDateTime::Inv_Month);
    // wxDateTime::WeekDay weekday
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay)wxlua_getenumtype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call SetToLastWeekDay
    bool returns = (self->SetToLastWeekDay(weekday, month, year));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetToNextWeekDay[] = { &wxluatype_wxDateTime, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTime_SetToNextWeekDay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetToNextWeekDay[1] = {{ wxLua_wxDateTime_SetToNextWeekDay, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_SetToNextWeekDay }};
//     wxDateTime& SetToNextWeekDay(wxDateTime::WeekDay weekday)
static int LUACALL wxLua_wxDateTime_SetToNextWeekDay(lua_State *L)
{
    // wxDateTime::WeekDay weekday
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay)wxlua_getenumtype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call SetToNextWeekDay
    wxDateTime* returns = &self->SetToNextWeekDay(weekday);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetToPrevWeekDay[] = { &wxluatype_wxDateTime, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTime_SetToPrevWeekDay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetToPrevWeekDay[1] = {{ wxLua_wxDateTime_SetToPrevWeekDay, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_SetToPrevWeekDay }};
//     wxDateTime& SetToPrevWeekDay(wxDateTime::WeekDay weekday)
static int LUACALL wxLua_wxDateTime_SetToPrevWeekDay(lua_State *L)
{
    // wxDateTime::WeekDay weekday
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay)wxlua_getenumtype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call SetToPrevWeekDay
    wxDateTime* returns = &self->SetToPrevWeekDay(weekday);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}


#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && ((!wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetToTheWeek[] = { &wxluatype_wxDateTime, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTime_SetToTheWeek(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetToTheWeek[1] = {{ wxLua_wxDateTime_SetToTheWeek, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxDateTime_SetToTheWeek }};
//     !%wxchkver_2_6 bool SetToTheWeek(wxDateTime::wxDateTime_t numWeek, wxDateTime::WeekDay weekday = wxDateTime::Mon)
static int LUACALL wxLua_wxDateTime_SetToTheWeek(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxDateTime::WeekDay weekday = wxDateTime::Mon
    wxDateTime::WeekDay weekday = (argCount >= 3 ? (wxDateTime::WeekDay)wxlua_getenumtype(L, 3) : wxDateTime::Mon);
    // wxDateTime::wxDateTime_t numWeek
    wxDateTime::wxDateTime_t numWeek = (wxDateTime::wxDateTime_t)wxlua_getnumbertype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call SetToTheWeek
    bool returns = (self->SetToTheWeek(numWeek, weekday));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && ((!wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME))

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetToWeekDay[] = { &wxluatype_wxDateTime, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_SetToWeekDay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetToWeekDay[1] = {{ wxLua_wxDateTime_SetToWeekDay, WXLUAMETHOD_METHOD, 2, 5, s_wxluatypeArray_wxLua_wxDateTime_SetToWeekDay }};
//     bool SetToWeekDay(wxDateTime::WeekDay weekday, int n = 1, wxDateTime::Month month = wxDateTime::Inv_Month, int year = wxDateTime::Inv_Year)
static int LUACALL wxLua_wxDateTime_SetToWeekDay(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int year = wxDateTime::Inv_Year
    int year = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxDateTime::Inv_Year);
    // wxDateTime::Month month = wxDateTime::Inv_Month
    wxDateTime::Month month = (argCount >= 4 ? (wxDateTime::Month)wxlua_getenumtype(L, 4) : wxDateTime::Inv_Month);
    // int n = 1
    int n = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 1);
    // wxDateTime::WeekDay weekday
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay)wxlua_getenumtype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call SetToWeekDay
    bool returns = (self->SetToWeekDay(weekday, n, month, year));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetToWeekDayInSameWeek[] = { &wxluatype_wxDateTime, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTime_SetToWeekDayInSameWeek(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetToWeekDayInSameWeek[1] = {{ wxLua_wxDateTime_SetToWeekDayInSameWeek, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_SetToWeekDayInSameWeek }};
//     wxDateTime& SetToWeekDayInSameWeek(wxDateTime::WeekDay weekday)
static int LUACALL wxLua_wxDateTime_SetToWeekDayInSameWeek(lua_State *L)
{
    // wxDateTime::WeekDay weekday
    wxDateTime::WeekDay weekday = (wxDateTime::WeekDay)wxlua_getenumtype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call SetToWeekDayInSameWeek
    wxDateTime* returns = &self->SetToWeekDayInSameWeek(weekday);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}


#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && ((wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetToWeekOfYear[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTime_SetToWeekOfYear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetToWeekOfYear[1] = {{ wxLua_wxDateTime_SetToWeekOfYear, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 3, s_wxluatypeArray_wxLua_wxDateTime_SetToWeekOfYear }};
//     %wxchkver_2_6 static wxDateTime SetToWeekOfYear(int year, wxDateTime::wxDateTime_t numWeek, wxDateTime::WeekDay weekday = wxDateTime::Mon)
static int LUACALL wxLua_wxDateTime_SetToWeekOfYear(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxDateTime::WeekDay weekday = wxDateTime::Mon
    wxDateTime::WeekDay weekday = (argCount >= 3 ? (wxDateTime::WeekDay)wxlua_getenumtype(L, 3) : wxDateTime::Mon);
    // wxDateTime::wxDateTime_t numWeek
    wxDateTime::wxDateTime_t numWeek = (wxDateTime::wxDateTime_t)wxlua_getnumbertype(L, 2);
    // int year
    int year = (int)wxlua_getnumbertype(L, 1);
    // call SetToWeekOfYear
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(wxDateTime::SetToWeekOfYear(year, numWeek, weekday));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && ((wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME))

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetToYearDay[] = { &wxluatype_wxDateTime, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_SetToYearDay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetToYearDay[1] = {{ wxLua_wxDateTime_SetToYearDay, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_SetToYearDay }};
//     wxDateTime& SetToYearDay(wxDateTime::wxDateTime_t yday)
static int LUACALL wxLua_wxDateTime_SetToYearDay(lua_State *L)
{
    // wxDateTime::wxDateTime_t yday
    wxDateTime::wxDateTime_t yday = (wxDateTime::wxDateTime_t)wxlua_getnumbertype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call SetToYearDay
    wxDateTime* returns = &self->SetToYearDay(yday);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_SetYear[] = { &wxluatype_wxDateTime, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTime_SetYear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_SetYear[1] = {{ wxLua_wxDateTime_SetYear, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_SetYear }};
//     wxDateTime& SetYear(int year)
static int LUACALL wxLua_wxDateTime_SetYear(lua_State *L)
{
    // int year
    int year = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call SetYear
    wxDateTime* returns = &self->SetYear(year);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}


#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateSpan && wxUSE_DATETIME)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_Subtract1[] = { &wxluatype_wxDateTime, &wxluatype_wxDateSpan, NULL };
static int LUACALL wxLua_wxDateTime_Subtract1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_Subtract1[1] = {{ wxLua_wxDateTime_Subtract1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_Subtract1 }};
//     wxDateTime& Subtract(const wxDateSpan& diff)
static int LUACALL wxLua_wxDateTime_Subtract1(lua_State *L)
{
    // const wxDateSpan diff
    const wxDateSpan * diff = (const wxDateSpan *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateSpan);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call Subtract
    wxDateTime* returns = &self->Subtract(*diff);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateSpan && wxUSE_DATETIME)

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_Subtract[] = { &wxluatype_wxDateTime, &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxDateTime_Subtract(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_Subtract[1] = {{ wxLua_wxDateTime_Subtract, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_Subtract }};
//     wxDateTime& Subtract(const wxTimeSpan& diff)
static int LUACALL wxLua_wxDateTime_Subtract(lua_State *L)
{
    // const wxTimeSpan diff
    const wxTimeSpan * diff = (const wxTimeSpan *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTimeSpan);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call Subtract
    wxDateTime* returns = &self->Subtract(*diff);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_ToGMT[] = { &wxluatype_wxDateTime, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDateTime_ToGMT(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_ToGMT[1] = {{ wxLua_wxDateTime_ToGMT, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxDateTime_ToGMT }};
//     wxDateTime ToGMT(bool noDST = false) const
static int LUACALL wxLua_wxDateTime_ToGMT(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool noDST = false
    bool noDST = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // get this
    wxDateTime * self = (wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call ToGMT
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->ToGMT(noDST));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_delete[] = { &wxluatype_wxDateTime, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDateTime_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTime_constructor1[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTime_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_constructor1[1] = {{ wxLua_wxDateTime_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDateTime_constructor1 }};
//     wxDateTime(time_t dateTime) // use with Lua's os.time() on MSW, Linux, others?
static int LUACALL wxLua_wxDateTime_constructor1(lua_State *L)
{
    // time_t dateTime
    time_t dateTime = (time_t)wxlua_getuintegertype(L, 1);
    // call constructor
    wxDateTime* returns = new wxDateTime(dateTime);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static int LUACALL wxLua_wxDateTime_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_constructor[1] = {{ wxLua_wxDateTime_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDateTime()
static int LUACALL wxLua_wxDateTime_constructor(lua_State *L)
{
    // call constructor
    wxDateTime* returns = new wxDateTime();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeFromDMY_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTimeFromDMY_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeFromDMY_constructor[1] = {{ wxLua_wxDateTimeFromDMY_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 7, s_wxluatypeArray_wxLua_wxDateTimeFromDMY_constructor }};
//     %rename wxDateTimeFromDMY wxDateTime(int day, wxDateTime::Month month = wxDateTime::Inv_Month, int year = wxDateTime::Inv_Year, int hour = 0, int minute = 0, int second = 0, int millisec = 0)
static int LUACALL wxLua_wxDateTimeFromDMY_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int millisec = 0
    int millisec = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : 0);
    // int second = 0
    int second = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // int minute = 0
    int minute = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // int hour = 0
    int hour = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // int year = wxDateTime::Inv_Year
    int year = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxDateTime::Inv_Year);
    // wxDateTime::Month month = wxDateTime::Inv_Month
    wxDateTime::Month month = (argCount >= 2 ? (wxDateTime::Month)wxlua_getenumtype(L, 2) : wxDateTime::Inv_Month);
    // int day
    int day = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxDateTime* returns = new wxDateTime(day, month, year, hour, minute, second, millisec);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeFromHMS_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTimeFromHMS_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeFromHMS_constructor[1] = {{ wxLua_wxDateTimeFromHMS_constructor, WXLUAMETHOD_CONSTRUCTOR, 4, 4, s_wxluatypeArray_wxLua_wxDateTimeFromHMS_constructor }};
//     %rename wxDateTimeFromHMS wxDateTime(int hour, int minute, int second, int millisec)
static int LUACALL wxLua_wxDateTimeFromHMS_constructor(lua_State *L)
{
    // int millisec
    int millisec = (int)wxlua_getnumbertype(L, 4);
    // int second
    int second = (int)wxlua_getnumbertype(L, 3);
    // int minute
    int minute = (int)wxlua_getnumbertype(L, 2);
    // int hour
    int hour = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxDateTime* returns = new wxDateTime(hour, minute, second, millisec);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeFromJDN_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateTimeFromJDN_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeFromJDN_constructor[1] = {{ wxLua_wxDateTimeFromJDN_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDateTimeFromJDN_constructor }};
//     %rename wxDateTimeFromJDN wxDateTime(double dateTime)
static int LUACALL wxLua_wxDateTimeFromJDN_constructor(lua_State *L)
{
    // double dateTime
    double dateTime = (double)wxlua_getnumbertype(L, 1);
    // call constructor
    wxDateTime* returns = new wxDateTime(dateTime);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}




#if ((wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateSpan && wxUSE_DATETIME))||((wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_Add_overload[] =
{

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateSpan && wxUSE_DATETIME)
    { wxLua_wxDateTime_Add1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_Add1 },
#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateSpan && wxUSE_DATETIME)

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME)
    { wxLua_wxDateTime_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_Add },
#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME)
};
static int s_wxluafunc_wxLua_wxDateTime_Add_overload_count = sizeof(s_wxluafunc_wxLua_wxDateTime_Add_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_Subtract_overload[] =
{

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateSpan && wxUSE_DATETIME)
    { wxLua_wxDateTime_Subtract1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_Subtract1 },
#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateSpan && wxUSE_DATETIME)

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME)
    { wxLua_wxDateTime_Subtract, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTime_Subtract },
#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME)
};
static int s_wxluafunc_wxLua_wxDateTime_Subtract_overload_count = sizeof(s_wxluafunc_wxLua_wxDateTime_Subtract_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateSpan && wxUSE_DATETIME))||((wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME))

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTime_constructor_overload[] =
{
    { wxLua_wxDateTime_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDateTime_constructor1 },
    { wxLua_wxDateTime_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxDateTime_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxDateTime_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDateTime_methods[] = {
#if ((wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateSpan && wxUSE_DATETIME))||((wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME))
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_Add_overload, s_wxluafunc_wxLua_wxDateTime_Add_overload_count, 0 },
#endif // ((wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateSpan && wxUSE_DATETIME))||((wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME))

    { "Format", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_Format, 1, NULL },
    { "FormatDate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_FormatDate, 1, NULL },
    { "FormatISODate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_FormatISODate, 1, NULL },
    { "FormatISOTime", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_FormatISOTime, 1, NULL },
    { "FormatTime", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_FormatTime, 1, NULL },
    { "GetJDN", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_GetJDN, 1, NULL },
    { "GetJulianDayNumber", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_GetJulianDayNumber, 1, NULL },
    { "GetLastMonthDay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_GetLastMonthDay, 1, NULL },
    { "GetLastWeekDay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_GetLastWeekDay, 1, NULL },
    { "GetMJD", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_GetMJD, 1, NULL },
    { "GetModifiedJulianDayNumber", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_GetModifiedJulianDayNumber, 1, NULL },
    { "GetNextWeekDay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_GetNextWeekDay, 1, NULL },
    { "GetPrevWeekDay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_GetPrevWeekDay, 1, NULL },
    { "GetRataDie", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_GetRataDie, 1, NULL },
    { "GetTicks", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_GetTicks, 1, NULL },

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && ((!wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME))
    { "GetWeek", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_GetWeek, 1, NULL },
#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && ((!wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME))

    { "GetWeekDay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_GetWeekDay, 1, NULL },
    { "GetWeekDayInSameWeek", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_GetWeekDayInSameWeek, 1, NULL },
    { "GetYearDay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_GetYearDay, 1, NULL },
    { "IsBetween", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_IsBetween, 1, NULL },
    { "IsDST", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_IsDST, 1, NULL },
    { "IsEarlierThan", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_IsEarlierThan, 1, NULL },
    { "IsEqualTo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_IsEqualTo, 1, NULL },

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME)
    { "IsEqualUpTo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_IsEqualUpTo, 1, NULL },
#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME)

    { "IsLaterThan", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_IsLaterThan, 1, NULL },
    { "IsSameDate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_IsSameDate, 1, NULL },
    { "IsSameTime", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_IsSameTime, 1, NULL },
    { "IsStrictlyBetween", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_IsStrictlyBetween, 1, NULL },
    { "IsValid", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_IsValid, 1, NULL },
    { "IsWorkDay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_IsWorkDay, 1, NULL },
    { "MakeGMT", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_MakeGMT, 1, NULL },
    { "ParseDate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_ParseDate, 1, NULL },
    { "ParseDateTime", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_ParseDateTime, 1, NULL },
    { "ParseFormat", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_ParseFormat, 1, NULL },
    { "ParseRfc822Date", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_ParseRfc822Date, 1, NULL },
    { "ParseTime", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_ParseTime, 1, NULL },
    { "ResetTime", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_ResetTime, 1, NULL },
    { "Set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_Set, 1, NULL },
    { "SetDay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetDay, 1, NULL },
    { "SetHour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetHour, 1, NULL },
    { "SetMillisecond", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetMillisecond, 1, NULL },
    { "SetMinute", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetMinute, 1, NULL },
    { "SetMonth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetMonth, 1, NULL },
    { "SetSecond", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetSecond, 1, NULL },
    { "SetToCurrent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetToCurrent, 1, NULL },
    { "SetToDMY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetToDMY, 1, NULL },
    { "SetToHMS", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetToHMS, 1, NULL },
    { "SetToJDN", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetToJDN, 1, NULL },
    { "SetToLastMonthDay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetToLastMonthDay, 1, NULL },
    { "SetToLastWeekDay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetToLastWeekDay, 1, NULL },
    { "SetToNextWeekDay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetToNextWeekDay, 1, NULL },
    { "SetToPrevWeekDay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetToPrevWeekDay, 1, NULL },

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && ((!wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME))
    { "SetToTheWeek", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetToTheWeek, 1, NULL },
#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && ((!wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME))

    { "SetToWeekDay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetToWeekDay, 1, NULL },
    { "SetToWeekDayInSameWeek", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetToWeekDayInSameWeek, 1, NULL },

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && ((wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME))
    { "SetToWeekOfYear", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDateTime_SetToWeekOfYear, 1, NULL },
#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && ((wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME))

    { "SetToYearDay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetToYearDay, 1, NULL },
    { "SetYear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_SetYear, 1, NULL },

#if ((wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateSpan && wxUSE_DATETIME))||((wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME))
    { "Subtract", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_Subtract_overload, s_wxluafunc_wxLua_wxDateTime_Subtract_overload_count, 0 },
#endif // ((wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateSpan && wxUSE_DATETIME))||((wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME))

    { "ToGMT", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTime_ToGMT, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDateTime_delete, 1, NULL },

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
    { "wxDateTime", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDateTime_constructor_overload, s_wxluafunc_wxLua_wxDateTime_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

    { "wxDateTimeFromDMY", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDateTimeFromDMY_constructor, 1, NULL },
    { "wxDateTimeFromHMS", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDateTimeFromHMS_constructor, 1, NULL },
    { "wxDateTimeFromJDN", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDateTimeFromJDN_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDateTime_methodCount = sizeof(wxDateTime_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxDateTime_enums[] = {
#if wxLUA_USE_wxDateTime && wxUSE_DATETIME
        { "ADT", wxDateTime::ADT },
        { "AKDT", wxDateTime::AKDT },
        { "AKST", wxDateTime::AKST },
        { "AST", wxDateTime::AST },
        { "A_CST", wxDateTime::A_CST },
        { "A_ESST", wxDateTime::A_ESST },
        { "A_EST", wxDateTime::A_EST },
        { "A_WST", wxDateTime::A_WST },
        { "Apr", wxDateTime::Apr },
        { "Aug", wxDateTime::Aug },
        { "CDT", wxDateTime::CDT },
        { "CEST", wxDateTime::CEST },
        { "CET", wxDateTime::CET },
        { "CST", wxDateTime::CST },
        { "Country_Default", wxDateTime::Country_Default },
        { "Country_EEC", wxDateTime::Country_EEC },
        { "Country_Unknown", wxDateTime::Country_Unknown },
        { "Country_WesternEurope_End", wxDateTime::Country_WesternEurope_End },
        { "Country_WesternEurope_Start", wxDateTime::Country_WesternEurope_Start },
        { "Dec", wxDateTime::Dec },
        { "EDT", wxDateTime::EDT },
        { "EEST", wxDateTime::EEST },
        { "EET", wxDateTime::EET },
        { "EST", wxDateTime::EST },
        { "Feb", wxDateTime::Feb },
        { "France", wxDateTime::France },
        { "Fri", wxDateTime::Fri },
        { "GMT0", wxDateTime::GMT0 },
        { "GMT1", wxDateTime::GMT1 },
        { "GMT10", wxDateTime::GMT10 },
        { "GMT11", wxDateTime::GMT11 },
        { "GMT12", wxDateTime::GMT12 },
#endif // wxLUA_USE_wxDateTime && wxUSE_DATETIME

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
        { "GMT13", wxDateTime::GMT13 },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

#if wxLUA_USE_wxDateTime && wxUSE_DATETIME
        { "GMT2", wxDateTime::GMT2 },
        { "GMT3", wxDateTime::GMT3 },
        { "GMT4", wxDateTime::GMT4 },
        { "GMT5", wxDateTime::GMT5 },
        { "GMT6", wxDateTime::GMT6 },
        { "GMT7", wxDateTime::GMT7 },
        { "GMT8", wxDateTime::GMT8 },
        { "GMT9", wxDateTime::GMT9 },
        { "GMT_1", wxDateTime::GMT_1 },
        { "GMT_10", wxDateTime::GMT_10 },
        { "GMT_11", wxDateTime::GMT_11 },
        { "GMT_12", wxDateTime::GMT_12 },
        { "GMT_2", wxDateTime::GMT_2 },
        { "GMT_3", wxDateTime::GMT_3 },
        { "GMT_4", wxDateTime::GMT_4 },
        { "GMT_5", wxDateTime::GMT_5 },
        { "GMT_6", wxDateTime::GMT_6 },
        { "GMT_7", wxDateTime::GMT_7 },
        { "GMT_8", wxDateTime::GMT_8 },
        { "GMT_9", wxDateTime::GMT_9 },
        { "Germany", wxDateTime::Germany },
        { "Gregorian", wxDateTime::Gregorian },
        { "HST", wxDateTime::HST },
        { "Inv_Month", wxDateTime::Inv_Month },
        { "Inv_WeekDay", wxDateTime::Inv_WeekDay },
        { "Jan", wxDateTime::Jan },
        { "Jul", wxDateTime::Jul },
        { "Julian", wxDateTime::Julian },
        { "Jun", wxDateTime::Jun },
        { "Local", wxDateTime::Local },
        { "MDT", wxDateTime::MDT },
        { "MSD", wxDateTime::MSD },
        { "MSK", wxDateTime::MSK },
        { "MST", wxDateTime::MST },
        { "Mar", wxDateTime::Mar },
        { "May", wxDateTime::May },
        { "Mon", wxDateTime::Mon },
#endif // wxLUA_USE_wxDateTime && wxUSE_DATETIME

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
        { "NZDT", wxDateTime::NZDT },
        { "NZST", wxDateTime::NZST },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

#if wxLUA_USE_wxDateTime && wxUSE_DATETIME
        { "Nov", wxDateTime::Nov },
        { "Oct", wxDateTime::Oct },
        { "PDT", wxDateTime::PDT },
        { "PST", wxDateTime::PST },
        { "Russia", wxDateTime::Russia },
        { "Sat", wxDateTime::Sat },
        { "Sep", wxDateTime::Sep },
        { "Sun", wxDateTime::Sun },
        { "Thu", wxDateTime::Thu },
        { "Tue", wxDateTime::Tue },
        { "UK", wxDateTime::UK },
        { "USA", wxDateTime::USA },
        { "UTC", wxDateTime::UTC },
        { "WEST", wxDateTime::WEST },
        { "WET", wxDateTime::WET },
        { "Wed", wxDateTime::Wed },
#endif // wxLUA_USE_wxDateTime && wxUSE_DATETIME

    { NULL, 0, },
};
int wxDateTime_enumCount = sizeof(wxDateTime_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // wxLUA_USE_wxDateTime && wxUSE_DATETIME


#if wxLUA_USE_wxDateTime && wxUSE_DATETIME
// ---------------------------------------------------------------------------
// Bind class wxDateTimeArray
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDateTimeArray'
int wxluatype_wxDateTimeArray = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeArray_Add[] = { &wxluatype_wxDateTimeArray, &wxluatype_wxDateTime, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTimeArray_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeArray_Add[1] = {{ wxLua_wxDateTimeArray_Add, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxDateTimeArray_Add }};
//     void Add(const wxDateTime& dateTime, size_t copies = 1)
static int LUACALL wxLua_wxDateTimeArray_Add(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t copies = 1
    size_t copies = (argCount >= 3 ? (size_t)wxlua_getuintegertype(L, 3) : 1);
    // const wxDateTime dateTime
    const wxDateTime * dateTime = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // get this
    wxDateTimeArray * self = (wxDateTimeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTimeArray);
    // call Add
    self->Add(*dateTime, copies);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeArray_Alloc[] = { &wxluatype_wxDateTimeArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTimeArray_Alloc(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeArray_Alloc[1] = {{ wxLua_wxDateTimeArray_Alloc, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTimeArray_Alloc }};
//     void Alloc(size_t nCount)
static int LUACALL wxLua_wxDateTimeArray_Alloc(lua_State *L)
{
    // size_t nCount
    size_t nCount = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxDateTimeArray * self = (wxDateTimeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTimeArray);
    // call Alloc
    self->Alloc(nCount);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeArray_Clear[] = { &wxluatype_wxDateTimeArray, NULL };
static int LUACALL wxLua_wxDateTimeArray_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeArray_Clear[1] = {{ wxLua_wxDateTimeArray_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTimeArray_Clear }};
//     void Clear()
static int LUACALL wxLua_wxDateTimeArray_Clear(lua_State *L)
{
    // get this
    wxDateTimeArray * self = (wxDateTimeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTimeArray);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeArray_Empty[] = { &wxluatype_wxDateTimeArray, NULL };
static int LUACALL wxLua_wxDateTimeArray_Empty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeArray_Empty[1] = {{ wxLua_wxDateTimeArray_Empty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTimeArray_Empty }};
//     void Empty()
static int LUACALL wxLua_wxDateTimeArray_Empty(lua_State *L)
{
    // get this
    wxDateTimeArray * self = (wxDateTimeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTimeArray);
    // call Empty
    self->Empty();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeArray_GetCount[] = { &wxluatype_wxDateTimeArray, NULL };
static int LUACALL wxLua_wxDateTimeArray_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeArray_GetCount[1] = {{ wxLua_wxDateTimeArray_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTimeArray_GetCount }};
//     int GetCount() const
static int LUACALL wxLua_wxDateTimeArray_GetCount(lua_State *L)
{
    // get this
    wxDateTimeArray * self = (wxDateTimeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTimeArray);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeArray_Insert[] = { &wxluatype_wxDateTimeArray, &wxluatype_wxDateTime, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTimeArray_Insert(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeArray_Insert[1] = {{ wxLua_wxDateTimeArray_Insert, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxDateTimeArray_Insert }};
//     void Insert(const wxDateTime& dt, int nIndex, size_t copies = 1)
static int LUACALL wxLua_wxDateTimeArray_Insert(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t copies = 1
    size_t copies = (argCount >= 4 ? (size_t)wxlua_getuintegertype(L, 4) : 1);
    // int nIndex
    int nIndex = (int)wxlua_getnumbertype(L, 3);
    // const wxDateTime dt
    const wxDateTime * dt = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // get this
    wxDateTimeArray * self = (wxDateTimeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTimeArray);
    // call Insert
    self->Insert(*dt, nIndex, copies);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeArray_IsEmpty[] = { &wxluatype_wxDateTimeArray, NULL };
static int LUACALL wxLua_wxDateTimeArray_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeArray_IsEmpty[1] = {{ wxLua_wxDateTimeArray_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTimeArray_IsEmpty }};
//     bool IsEmpty()
static int LUACALL wxLua_wxDateTimeArray_IsEmpty(lua_State *L)
{
    // get this
    wxDateTimeArray * self = (wxDateTimeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTimeArray);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeArray_Item[] = { &wxluatype_wxDateTimeArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTimeArray_Item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeArray_Item[1] = {{ wxLua_wxDateTimeArray_Item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateTimeArray_Item }};
//     wxDateTime Item(size_t nIndex) const
static int LUACALL wxLua_wxDateTimeArray_Item(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxDateTimeArray * self = (wxDateTimeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTimeArray);
    // call Item
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->Item(nIndex));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeArray_Last[] = { &wxluatype_wxDateTimeArray, NULL };
static int LUACALL wxLua_wxDateTimeArray_Last(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeArray_Last[1] = {{ wxLua_wxDateTimeArray_Last, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTimeArray_Last }};
//     wxDateTime Last()
static int LUACALL wxLua_wxDateTimeArray_Last(lua_State *L)
{
    // get this
    wxDateTimeArray * self = (wxDateTimeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTimeArray);
    // call Last
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->Last());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeArray_RemoveAt[] = { &wxluatype_wxDateTimeArray, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDateTimeArray_RemoveAt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeArray_RemoveAt[1] = {{ wxLua_wxDateTimeArray_RemoveAt, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxDateTimeArray_RemoveAt }};
//     void RemoveAt(size_t nIndex, size_t count = 1)
static int LUACALL wxLua_wxDateTimeArray_RemoveAt(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t count = 1
    size_t count = (argCount >= 3 ? (size_t)wxlua_getuintegertype(L, 3) : 1);
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxDateTimeArray * self = (wxDateTimeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTimeArray);
    // call RemoveAt
    self->RemoveAt(nIndex, count);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeArray_Shrink[] = { &wxluatype_wxDateTimeArray, NULL };
static int LUACALL wxLua_wxDateTimeArray_Shrink(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeArray_Shrink[1] = {{ wxLua_wxDateTimeArray_Shrink, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateTimeArray_Shrink }};
//     void Shrink()
static int LUACALL wxLua_wxDateTimeArray_Shrink(lua_State *L)
{
    // get this
    wxDateTimeArray * self = (wxDateTimeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTimeArray);
    // call Shrink
    self->Shrink();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeArray_delete[] = { &wxluatype_wxDateTimeArray, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeArray_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDateTimeArray_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeArray_constructor1[] = { &wxluatype_wxDateTimeArray, NULL };
static int LUACALL wxLua_wxDateTimeArray_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeArray_constructor1[1] = {{ wxLua_wxDateTimeArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDateTimeArray_constructor1 }};
//     wxDateTimeArray(const wxDateTimeArray& array)
static int LUACALL wxLua_wxDateTimeArray_constructor1(lua_State *L)
{
    // const wxDateTimeArray array
    const wxDateTimeArray * array = (const wxDateTimeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTimeArray);
    // call constructor
    wxDateTimeArray* returns = new wxDateTimeArray(*array);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTimeArray((wxDateTimeArray*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTimeArray);

    return 1;
}

static int LUACALL wxLua_wxDateTimeArray_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeArray_constructor[1] = {{ wxLua_wxDateTimeArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDateTimeArray()
static int LUACALL wxLua_wxDateTimeArray_constructor(lua_State *L)
{
    // call constructor
    wxDateTimeArray* returns = new wxDateTimeArray();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTimeArray((wxDateTimeArray*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTimeArray);

    return 1;
}




#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeArray_constructor_overload[] =
{
    { wxLua_wxDateTimeArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDateTimeArray_constructor1 },
    { wxLua_wxDateTimeArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxDateTimeArray_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxDateTimeArray_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDateTimeArray_methods[] = {
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTimeArray_Add, 1, NULL },
    { "Alloc", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTimeArray_Alloc, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTimeArray_Clear, 1, NULL },
    { "Empty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTimeArray_Empty, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTimeArray_GetCount, 1, NULL },
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTimeArray_Insert, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTimeArray_IsEmpty, 1, NULL },
    { "Item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTimeArray_Item, 1, NULL },
    { "Last", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTimeArray_Last, 1, NULL },
    { "RemoveAt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTimeArray_RemoveAt, 1, NULL },
    { "Shrink", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateTimeArray_Shrink, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDateTimeArray_delete, 1, NULL },

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
    { "wxDateTimeArray", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDateTimeArray_constructor_overload, s_wxluafunc_wxLua_wxDateTimeArray_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

    { 0, 0, 0, 0 },
};

int wxDateTimeArray_methodCount = sizeof(wxDateTimeArray_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDateTime && wxUSE_DATETIME


#if wxLUA_USE_wxTimeSpan && wxUSE_DATETIME
// ---------------------------------------------------------------------------
// Bind class wxTimeSpan
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTimeSpan'
int wxluatype_wxTimeSpan = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_Abs[] = { &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_Abs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Abs[1] = {{ wxLua_wxTimeSpan_Abs, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_Abs }};
//     wxTimeSpan Abs()
static int LUACALL wxLua_wxTimeSpan_Abs(lua_State *L)
{
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call Abs
    // allocate a new object using the copy constructor
    wxTimeSpan* returns = new wxTimeSpan(self->Abs());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_Add[] = { &wxluatype_wxTimeSpan, &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Add[1] = {{ wxLua_wxTimeSpan_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTimeSpan_Add }};
//     wxTimeSpan Add(const wxTimeSpan& diff) const
static int LUACALL wxLua_wxTimeSpan_Add(lua_State *L)
{
    // const wxTimeSpan diff
    const wxTimeSpan * diff = (const wxTimeSpan *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTimeSpan);
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call Add
    // allocate a new object using the copy constructor
    wxTimeSpan* returns = new wxTimeSpan(self->Add(*diff));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static int LUACALL wxLua_wxTimeSpan_Day(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Day[1] = {{ wxLua_wxTimeSpan_Day, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxTimeSpan Day()
static int LUACALL wxLua_wxTimeSpan_Day(lua_State *L)
{
    // call Day
    // allocate a new object using the copy constructor
    wxTimeSpan* returns = new wxTimeSpan(wxTimeSpan::Day());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_Days[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTimeSpan_Days(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Days[1] = {{ wxLua_wxTimeSpan_Days, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_Days }};
//     static wxTimeSpan Days(long days)
static int LUACALL wxLua_wxTimeSpan_Days(lua_State *L)
{
    // long days
    long days = (long)wxlua_getnumbertype(L, 1);
    // call Days
    // allocate a new object using the copy constructor
    wxTimeSpan* returns = new wxTimeSpan(wxTimeSpan::Days(days));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_Format[] = { &wxluatype_wxTimeSpan, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTimeSpan_Format(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Format[1] = {{ wxLua_wxTimeSpan_Format, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxTimeSpan_Format }};
//     wxString Format(wxString format = "%H:%M:%S") const
static int LUACALL wxLua_wxTimeSpan_Format(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxString format = "%H:%M:%S"
    wxString format = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxT("%H:%M:%S")));
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call Format
    wxString returns = (self->Format(format));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_GetDays[] = { &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_GetDays(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_GetDays[1] = {{ wxLua_wxTimeSpan_GetDays, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_GetDays }};
//     int GetDays() const
static int LUACALL wxLua_wxTimeSpan_GetDays(lua_State *L)
{
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call GetDays
    int returns = (self->GetDays());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_GetHours[] = { &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_GetHours(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_GetHours[1] = {{ wxLua_wxTimeSpan_GetHours, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_GetHours }};
//     int GetHours() const
static int LUACALL wxLua_wxTimeSpan_GetHours(lua_State *L)
{
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call GetHours
    int returns = (self->GetHours());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME) && (wxUSE_LONGLONG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_GetMilliseconds[] = { &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_GetMilliseconds(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_GetMilliseconds[1] = {{ wxLua_wxTimeSpan_GetMilliseconds, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_GetMilliseconds }};
//     wxLongLong GetMilliseconds() const
static int LUACALL wxLua_wxTimeSpan_GetMilliseconds(lua_State *L)
{
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call GetMilliseconds
    // allocate a new object using the copy constructor
    wxLongLong* returns = new wxLongLong(self->GetMilliseconds());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLongLong((wxLongLong*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLongLong);

    return 1;
}

#endif // (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME) && (wxUSE_LONGLONG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_GetMinutes[] = { &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_GetMinutes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_GetMinutes[1] = {{ wxLua_wxTimeSpan_GetMinutes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_GetMinutes }};
//     int GetMinutes() const
static int LUACALL wxLua_wxTimeSpan_GetMinutes(lua_State *L)
{
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call GetMinutes
    int returns = (self->GetMinutes());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME) && (wxUSE_LONGLONG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_GetSeconds[] = { &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_GetSeconds(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_GetSeconds[1] = {{ wxLua_wxTimeSpan_GetSeconds, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_GetSeconds }};
//     wxLongLong GetSeconds() const
static int LUACALL wxLua_wxTimeSpan_GetSeconds(lua_State *L)
{
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call GetSeconds
    // allocate a new object using the copy constructor
    wxLongLong* returns = new wxLongLong(self->GetSeconds());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLongLong((wxLongLong*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLongLong);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_GetValue[] = { &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_GetValue[1] = {{ wxLua_wxTimeSpan_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_GetValue }};
//     wxLongLong GetValue() const
static int LUACALL wxLua_wxTimeSpan_GetValue(lua_State *L)
{
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call GetValue
    // allocate a new object using the copy constructor
    wxLongLong* returns = new wxLongLong(self->GetValue());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLongLong((wxLongLong*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLongLong);

    return 1;
}

#endif // (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME) && (wxUSE_LONGLONG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_GetWeeks[] = { &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_GetWeeks(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_GetWeeks[1] = {{ wxLua_wxTimeSpan_GetWeeks, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_GetWeeks }};
//     int GetWeeks() const
static int LUACALL wxLua_wxTimeSpan_GetWeeks(lua_State *L)
{
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call GetWeeks
    int returns = (self->GetWeeks());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static int LUACALL wxLua_wxTimeSpan_Hour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Hour[1] = {{ wxLua_wxTimeSpan_Hour, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxTimeSpan  Hour()
static int LUACALL wxLua_wxTimeSpan_Hour(lua_State *L)
{
    // call Hour
    // allocate a new object using the copy constructor
    wxTimeSpan* returns = new wxTimeSpan(wxTimeSpan::Hour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_Hours[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTimeSpan_Hours(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Hours[1] = {{ wxLua_wxTimeSpan_Hours, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_Hours }};
//     static wxTimeSpan  Hours(long hours)
static int LUACALL wxLua_wxTimeSpan_Hours(lua_State *L)
{
    // long hours
    long hours = (long)wxlua_getnumbertype(L, 1);
    // call Hours
    // allocate a new object using the copy constructor
    wxTimeSpan* returns = new wxTimeSpan(wxTimeSpan::Hours(hours));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_IsEqualTo[] = { &wxluatype_wxTimeSpan, &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_IsEqualTo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_IsEqualTo[1] = {{ wxLua_wxTimeSpan_IsEqualTo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTimeSpan_IsEqualTo }};
//     bool IsEqualTo(const wxTimeSpan& ts) const
static int LUACALL wxLua_wxTimeSpan_IsEqualTo(lua_State *L)
{
    // const wxTimeSpan ts
    const wxTimeSpan * ts = (const wxTimeSpan *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTimeSpan);
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call IsEqualTo
    bool returns = (self->IsEqualTo(*ts));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_IsLongerThan[] = { &wxluatype_wxTimeSpan, &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_IsLongerThan(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_IsLongerThan[1] = {{ wxLua_wxTimeSpan_IsLongerThan, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTimeSpan_IsLongerThan }};
//     bool IsLongerThan(const wxTimeSpan& ts) const
static int LUACALL wxLua_wxTimeSpan_IsLongerThan(lua_State *L)
{
    // const wxTimeSpan ts
    const wxTimeSpan * ts = (const wxTimeSpan *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTimeSpan);
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call IsLongerThan
    bool returns = (self->IsLongerThan(*ts));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_IsNegative[] = { &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_IsNegative(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_IsNegative[1] = {{ wxLua_wxTimeSpan_IsNegative, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_IsNegative }};
//     bool IsNegative() const
static int LUACALL wxLua_wxTimeSpan_IsNegative(lua_State *L)
{
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call IsNegative
    bool returns = (self->IsNegative());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_IsNull[] = { &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_IsNull(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_IsNull[1] = {{ wxLua_wxTimeSpan_IsNull, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_IsNull }};
//     bool IsNull() const
static int LUACALL wxLua_wxTimeSpan_IsNull(lua_State *L)
{
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call IsNull
    bool returns = (self->IsNull());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_IsPositive[] = { &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_IsPositive(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_IsPositive[1] = {{ wxLua_wxTimeSpan_IsPositive, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_IsPositive }};
//     bool IsPositive() const
static int LUACALL wxLua_wxTimeSpan_IsPositive(lua_State *L)
{
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call IsPositive
    bool returns = (self->IsPositive());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_IsShorterThan[] = { &wxluatype_wxTimeSpan, &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_IsShorterThan(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_IsShorterThan[1] = {{ wxLua_wxTimeSpan_IsShorterThan, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTimeSpan_IsShorterThan }};
//     bool IsShorterThan(const wxTimeSpan& ts) const
static int LUACALL wxLua_wxTimeSpan_IsShorterThan(lua_State *L)
{
    // const wxTimeSpan ts
    const wxTimeSpan * ts = (const wxTimeSpan *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTimeSpan);
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call IsShorterThan
    bool returns = (self->IsShorterThan(*ts));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static int LUACALL wxLua_wxTimeSpan_Minute(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Minute[1] = {{ wxLua_wxTimeSpan_Minute, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxTimeSpan  Minute()
static int LUACALL wxLua_wxTimeSpan_Minute(lua_State *L)
{
    // call Minute
    // allocate a new object using the copy constructor
    wxTimeSpan* returns = new wxTimeSpan(wxTimeSpan::Minute());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_Minutes[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTimeSpan_Minutes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Minutes[1] = {{ wxLua_wxTimeSpan_Minutes, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_Minutes }};
//     static wxTimeSpan  Minutes(long min)
static int LUACALL wxLua_wxTimeSpan_Minutes(lua_State *L)
{
    // long min
    long min = (long)wxlua_getnumbertype(L, 1);
    // call Minutes
    // allocate a new object using the copy constructor
    wxTimeSpan* returns = new wxTimeSpan(wxTimeSpan::Minutes(min));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_Multiply[] = { &wxluatype_wxTimeSpan, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTimeSpan_Multiply(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Multiply[1] = {{ wxLua_wxTimeSpan_Multiply, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTimeSpan_Multiply }};
//     wxTimeSpan Multiply(int n) const
static int LUACALL wxLua_wxTimeSpan_Multiply(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call Multiply
    // allocate a new object using the copy constructor
    wxTimeSpan* returns = new wxTimeSpan(self->Multiply(n));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_Neg[] = { &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_Neg(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Neg[1] = {{ wxLua_wxTimeSpan_Neg, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_Neg }};
//     wxTimeSpan& Neg()
static int LUACALL wxLua_wxTimeSpan_Neg(lua_State *L)
{
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call Neg
    wxTimeSpan* returns = &self->Neg();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_Negate[] = { &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_Negate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Negate[1] = {{ wxLua_wxTimeSpan_Negate, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_Negate }};
//     wxTimeSpan Negate() const
static int LUACALL wxLua_wxTimeSpan_Negate(lua_State *L)
{
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call Negate
    // allocate a new object using the copy constructor
    wxTimeSpan* returns = new wxTimeSpan(self->Negate());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static int LUACALL wxLua_wxTimeSpan_Second(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Second[1] = {{ wxLua_wxTimeSpan_Second, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxTimeSpan Second()
static int LUACALL wxLua_wxTimeSpan_Second(lua_State *L)
{
    // call Second
    // allocate a new object using the copy constructor
    wxTimeSpan* returns = new wxTimeSpan(wxTimeSpan::Second());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_Seconds[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTimeSpan_Seconds(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Seconds[1] = {{ wxLua_wxTimeSpan_Seconds, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_Seconds }};
//     static wxTimeSpan Seconds(long sec)
static int LUACALL wxLua_wxTimeSpan_Seconds(lua_State *L)
{
    // long sec
    long sec = (long)wxlua_getnumbertype(L, 1);
    // call Seconds
    // allocate a new object using the copy constructor
    wxTimeSpan* returns = new wxTimeSpan(wxTimeSpan::Seconds(sec));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_Subtract[] = { &wxluatype_wxTimeSpan, &wxluatype_wxTimeSpan, NULL };
static int LUACALL wxLua_wxTimeSpan_Subtract(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Subtract[1] = {{ wxLua_wxTimeSpan_Subtract, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTimeSpan_Subtract }};
//     wxTimeSpan Subtract(const wxTimeSpan& diff) const
static int LUACALL wxLua_wxTimeSpan_Subtract(lua_State *L)
{
    // const wxTimeSpan diff
    const wxTimeSpan * diff = (const wxTimeSpan *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTimeSpan);
    // get this
    wxTimeSpan * self = (wxTimeSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTimeSpan);
    // call Subtract
    // allocate a new object using the copy constructor
    wxTimeSpan* returns = new wxTimeSpan(self->Subtract(*diff));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static int LUACALL wxLua_wxTimeSpan_Week(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Week[1] = {{ wxLua_wxTimeSpan_Week, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxTimeSpan Week()
static int LUACALL wxLua_wxTimeSpan_Week(lua_State *L)
{
    // call Week
    // allocate a new object using the copy constructor
    wxTimeSpan* returns = new wxTimeSpan(wxTimeSpan::Week());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_Weeks[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTimeSpan_Weeks(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_Weeks[1] = {{ wxLua_wxTimeSpan_Weeks, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_Weeks }};
//     static wxTimeSpan Weeks(long weeks)
static int LUACALL wxLua_wxTimeSpan_Weeks(lua_State *L)
{
    // long weeks
    long weeks = (long)wxlua_getnumbertype(L, 1);
    // call Weeks
    // allocate a new object using the copy constructor
    wxTimeSpan* returns = new wxTimeSpan(wxTimeSpan::Weeks(weeks));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_delete[] = { &wxluatype_wxTimeSpan, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTimeSpan_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTimeSpan_constructor1[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTimeSpan_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_constructor1[1] = {{ wxLua_wxTimeSpan_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 4, s_wxluatypeArray_wxLua_wxTimeSpan_constructor1 }};
//     wxTimeSpan(long hours, long minutes = 0, long seconds = 0, long milliseconds = 0)
static int LUACALL wxLua_wxTimeSpan_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long milliseconds = 0
    long milliseconds = (argCount >= 4 ? (long)wxlua_getnumbertype(L, 4) : 0);
    // long seconds = 0
    long seconds = (argCount >= 3 ? (long)wxlua_getnumbertype(L, 3) : 0);
    // long minutes = 0
    long minutes = (argCount >= 2 ? (long)wxlua_getnumbertype(L, 2) : 0);
    // long hours
    long hours = (long)wxlua_getnumbertype(L, 1);
    // call constructor
    wxTimeSpan* returns = new wxTimeSpan(hours, minutes, seconds, milliseconds);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}

static int LUACALL wxLua_wxTimeSpan_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_constructor[1] = {{ wxLua_wxTimeSpan_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTimeSpan()
static int LUACALL wxLua_wxTimeSpan_constructor(lua_State *L)
{
    // call constructor
    wxTimeSpan* returns = new wxTimeSpan();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTimeSpan((wxTimeSpan*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTimeSpan);

    return 1;
}




#if (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTimeSpan_constructor_overload[] =
{
    { wxLua_wxTimeSpan_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 4, s_wxluatypeArray_wxLua_wxTimeSpan_constructor1 },
    { wxLua_wxTimeSpan_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxTimeSpan_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxTimeSpan_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTimeSpan_methods[] = {
    { "Abs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_Abs, 1, NULL },
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_Add, 1, NULL },
    { "Day", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTimeSpan_Day, 1, NULL },
    { "Days", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTimeSpan_Days, 1, NULL },
    { "Format", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_Format, 1, NULL },
    { "GetDays", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_GetDays, 1, NULL },
    { "GetHours", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_GetHours, 1, NULL },

#if (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME) && (wxUSE_LONGLONG)
    { "GetMilliseconds", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_GetMilliseconds, 1, NULL },
#endif // (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME) && (wxUSE_LONGLONG)

    { "GetMinutes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_GetMinutes, 1, NULL },

#if (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME) && (wxUSE_LONGLONG)
    { "GetSeconds", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_GetSeconds, 1, NULL },
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_GetValue, 1, NULL },
#endif // (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME) && (wxUSE_LONGLONG)

    { "GetWeeks", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_GetWeeks, 1, NULL },
    { "Hour", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTimeSpan_Hour, 1, NULL },
    { "Hours", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTimeSpan_Hours, 1, NULL },
    { "IsEqualTo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_IsEqualTo, 1, NULL },
    { "IsLongerThan", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_IsLongerThan, 1, NULL },
    { "IsNegative", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_IsNegative, 1, NULL },
    { "IsNull", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_IsNull, 1, NULL },
    { "IsPositive", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_IsPositive, 1, NULL },
    { "IsShorterThan", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_IsShorterThan, 1, NULL },
    { "Minute", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTimeSpan_Minute, 1, NULL },
    { "Minutes", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTimeSpan_Minutes, 1, NULL },
    { "Multiply", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_Multiply, 1, NULL },
    { "Neg", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_Neg, 1, NULL },
    { "Negate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_Negate, 1, NULL },
    { "Second", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTimeSpan_Second, 1, NULL },
    { "Seconds", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTimeSpan_Seconds, 1, NULL },
    { "Subtract", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTimeSpan_Subtract, 1, NULL },
    { "Week", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTimeSpan_Week, 1, NULL },
    { "Weeks", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxTimeSpan_Weeks, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTimeSpan_delete, 1, NULL },

#if (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME)
    { "wxTimeSpan", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTimeSpan_constructor_overload, s_wxluafunc_wxLua_wxTimeSpan_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxTimeSpan && wxUSE_DATETIME)

    { 0, 0, 0, 0 },
};

int wxTimeSpan_methodCount = sizeof(wxTimeSpan_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTimeSpan && wxUSE_DATETIME


#if wxLUA_USE_wxDateSpan && wxUSE_DATETIME
// ---------------------------------------------------------------------------
// Bind class wxDateSpan
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDateSpan'
int wxluatype_wxDateSpan = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_Add[] = { &wxluatype_wxDateSpan, &wxluatype_wxDateSpan, NULL };
static int LUACALL wxLua_wxDateSpan_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_Add[1] = {{ wxLua_wxDateSpan_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateSpan_Add }};
//     wxDateSpan Add(const wxDateSpan& other) const
static int LUACALL wxLua_wxDateSpan_Add(lua_State *L)
{
    // const wxDateSpan other
    const wxDateSpan * other = (const wxDateSpan *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateSpan);
    // get this
    wxDateSpan * self = (wxDateSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateSpan);
    // call Add
    // allocate a new object using the copy constructor
    wxDateSpan* returns = new wxDateSpan(self->Add(*other));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateSpan((wxDateSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static int LUACALL wxLua_wxDateSpan_Day(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_Day[1] = {{ wxLua_wxDateSpan_Day, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxDateSpan Day()
static int LUACALL wxLua_wxDateSpan_Day(lua_State *L)
{
    // call Day
    // allocate a new object using the copy constructor
    wxDateSpan* returns = new wxDateSpan(wxDateSpan::Day());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateSpan((wxDateSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_Days[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateSpan_Days(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_Days[1] = {{ wxLua_wxDateSpan_Days, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxDateSpan_Days }};
//     static wxDateSpan Days(int days)
static int LUACALL wxLua_wxDateSpan_Days(lua_State *L)
{
    // int days
    int days = (int)wxlua_getnumbertype(L, 1);
    // call Days
    // allocate a new object using the copy constructor
    wxDateSpan* returns = new wxDateSpan(wxDateSpan::Days(days));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateSpan((wxDateSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_GetDays[] = { &wxluatype_wxDateSpan, NULL };
static int LUACALL wxLua_wxDateSpan_GetDays(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_GetDays[1] = {{ wxLua_wxDateSpan_GetDays, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateSpan_GetDays }};
//     int GetDays() const
static int LUACALL wxLua_wxDateSpan_GetDays(lua_State *L)
{
    // get this
    wxDateSpan * self = (wxDateSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateSpan);
    // call GetDays
    int returns = (self->GetDays());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_GetMonths[] = { &wxluatype_wxDateSpan, NULL };
static int LUACALL wxLua_wxDateSpan_GetMonths(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_GetMonths[1] = {{ wxLua_wxDateSpan_GetMonths, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateSpan_GetMonths }};
//     int GetMonths() const
static int LUACALL wxLua_wxDateSpan_GetMonths(lua_State *L)
{
    // get this
    wxDateSpan * self = (wxDateSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateSpan);
    // call GetMonths
    int returns = (self->GetMonths());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_GetTotalDays[] = { &wxluatype_wxDateSpan, NULL };
static int LUACALL wxLua_wxDateSpan_GetTotalDays(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_GetTotalDays[1] = {{ wxLua_wxDateSpan_GetTotalDays, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateSpan_GetTotalDays }};
//     int GetTotalDays() const
static int LUACALL wxLua_wxDateSpan_GetTotalDays(lua_State *L)
{
    // get this
    wxDateSpan * self = (wxDateSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateSpan);
    // call GetTotalDays
    int returns = (self->GetTotalDays());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_GetWeeks[] = { &wxluatype_wxDateSpan, NULL };
static int LUACALL wxLua_wxDateSpan_GetWeeks(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_GetWeeks[1] = {{ wxLua_wxDateSpan_GetWeeks, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateSpan_GetWeeks }};
//     int GetWeeks() const
static int LUACALL wxLua_wxDateSpan_GetWeeks(lua_State *L)
{
    // get this
    wxDateSpan * self = (wxDateSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateSpan);
    // call GetWeeks
    int returns = (self->GetWeeks());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_GetYears[] = { &wxluatype_wxDateSpan, NULL };
static int LUACALL wxLua_wxDateSpan_GetYears(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_GetYears[1] = {{ wxLua_wxDateSpan_GetYears, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateSpan_GetYears }};
//     int GetYears() const
static int LUACALL wxLua_wxDateSpan_GetYears(lua_State *L)
{
    // get this
    wxDateSpan * self = (wxDateSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateSpan);
    // call GetYears
    int returns = (self->GetYears());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static int LUACALL wxLua_wxDateSpan_Month(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_Month[1] = {{ wxLua_wxDateSpan_Month, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxDateSpan  Month()
static int LUACALL wxLua_wxDateSpan_Month(lua_State *L)
{
    // call Month
    // allocate a new object using the copy constructor
    wxDateSpan* returns = new wxDateSpan(wxDateSpan::Month());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateSpan((wxDateSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_Months[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateSpan_Months(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_Months[1] = {{ wxLua_wxDateSpan_Months, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxDateSpan_Months }};
//     static wxDateSpan  Months(int mon)
static int LUACALL wxLua_wxDateSpan_Months(lua_State *L)
{
    // int mon
    int mon = (int)wxlua_getnumbertype(L, 1);
    // call Months
    // allocate a new object using the copy constructor
    wxDateSpan* returns = new wxDateSpan(wxDateSpan::Months(mon));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateSpan((wxDateSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_Multiply[] = { &wxluatype_wxDateSpan, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateSpan_Multiply(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_Multiply[1] = {{ wxLua_wxDateSpan_Multiply, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateSpan_Multiply }};
//     wxDateSpan Multiply(int factor) const
static int LUACALL wxLua_wxDateSpan_Multiply(lua_State *L)
{
    // int factor
    int factor = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDateSpan * self = (wxDateSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateSpan);
    // call Multiply
    // allocate a new object using the copy constructor
    wxDateSpan* returns = new wxDateSpan(self->Multiply(factor));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateSpan((wxDateSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_Neg[] = { &wxluatype_wxDateSpan, NULL };
static int LUACALL wxLua_wxDateSpan_Neg(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_Neg[1] = {{ wxLua_wxDateSpan_Neg, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateSpan_Neg }};
//     wxDateSpan& Neg()
static int LUACALL wxLua_wxDateSpan_Neg(lua_State *L)
{
    // get this
    wxDateSpan * self = (wxDateSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateSpan);
    // call Neg
    wxDateSpan* returns = &self->Neg();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_Negate[] = { &wxluatype_wxDateSpan, NULL };
static int LUACALL wxLua_wxDateSpan_Negate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_Negate[1] = {{ wxLua_wxDateSpan_Negate, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateSpan_Negate }};
//     wxDateSpan Negate() const
static int LUACALL wxLua_wxDateSpan_Negate(lua_State *L)
{
    // get this
    wxDateSpan * self = (wxDateSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateSpan);
    // call Negate
    // allocate a new object using the copy constructor
    wxDateSpan* returns = new wxDateSpan(self->Negate());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateSpan((wxDateSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_SetDays[] = { &wxluatype_wxDateSpan, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateSpan_SetDays(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_SetDays[1] = {{ wxLua_wxDateSpan_SetDays, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateSpan_SetDays }};
//     wxDateSpan& SetDays(int n)
static int LUACALL wxLua_wxDateSpan_SetDays(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDateSpan * self = (wxDateSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateSpan);
    // call SetDays
    wxDateSpan* returns = &self->SetDays(n);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_SetMonths[] = { &wxluatype_wxDateSpan, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateSpan_SetMonths(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_SetMonths[1] = {{ wxLua_wxDateSpan_SetMonths, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateSpan_SetMonths }};
//     wxDateSpan& SetMonths(int n)
static int LUACALL wxLua_wxDateSpan_SetMonths(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDateSpan * self = (wxDateSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateSpan);
    // call SetMonths
    wxDateSpan* returns = &self->SetMonths(n);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_SetWeeks[] = { &wxluatype_wxDateSpan, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateSpan_SetWeeks(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_SetWeeks[1] = {{ wxLua_wxDateSpan_SetWeeks, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateSpan_SetWeeks }};
//     wxDateSpan& SetWeeks(int n)
static int LUACALL wxLua_wxDateSpan_SetWeeks(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDateSpan * self = (wxDateSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateSpan);
    // call SetWeeks
    wxDateSpan* returns = &self->SetWeeks(n);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_SetYears[] = { &wxluatype_wxDateSpan, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateSpan_SetYears(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_SetYears[1] = {{ wxLua_wxDateSpan_SetYears, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateSpan_SetYears }};
//     wxDateSpan& SetYears(int n)
static int LUACALL wxLua_wxDateSpan_SetYears(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDateSpan * self = (wxDateSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateSpan);
    // call SetYears
    wxDateSpan* returns = &self->SetYears(n);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_Subtract[] = { &wxluatype_wxDateSpan, &wxluatype_wxDateSpan, NULL };
static int LUACALL wxLua_wxDateSpan_Subtract(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_Subtract[1] = {{ wxLua_wxDateSpan_Subtract, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateSpan_Subtract }};
//     wxDateSpan Subtract(const wxDateSpan& other) const
static int LUACALL wxLua_wxDateSpan_Subtract(lua_State *L)
{
    // const wxDateSpan other
    const wxDateSpan * other = (const wxDateSpan *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateSpan);
    // get this
    wxDateSpan * self = (wxDateSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateSpan);
    // call Subtract
    // allocate a new object using the copy constructor
    wxDateSpan* returns = new wxDateSpan(self->Subtract(*other));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateSpan((wxDateSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static int LUACALL wxLua_wxDateSpan_Week(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_Week[1] = {{ wxLua_wxDateSpan_Week, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxDateSpan Week()
static int LUACALL wxLua_wxDateSpan_Week(lua_State *L)
{
    // call Week
    // allocate a new object using the copy constructor
    wxDateSpan* returns = new wxDateSpan(wxDateSpan::Week());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateSpan((wxDateSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_Weeks[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateSpan_Weeks(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_Weeks[1] = {{ wxLua_wxDateSpan_Weeks, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxDateSpan_Weeks }};
//     static wxDateSpan Weeks(int weeks)
static int LUACALL wxLua_wxDateSpan_Weeks(lua_State *L)
{
    // int weeks
    int weeks = (int)wxlua_getnumbertype(L, 1);
    // call Weeks
    // allocate a new object using the copy constructor
    wxDateSpan* returns = new wxDateSpan(wxDateSpan::Weeks(weeks));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateSpan((wxDateSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static int LUACALL wxLua_wxDateSpan_Year(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_Year[1] = {{ wxLua_wxDateSpan_Year, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxDateSpan Year()
static int LUACALL wxLua_wxDateSpan_Year(lua_State *L)
{
    // call Year
    // allocate a new object using the copy constructor
    wxDateSpan* returns = new wxDateSpan(wxDateSpan::Year());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateSpan((wxDateSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_Years[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateSpan_Years(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_Years[1] = {{ wxLua_wxDateSpan_Years, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxDateSpan_Years }};
//     static wxDateSpan Years(int years)
static int LUACALL wxLua_wxDateSpan_Years(lua_State *L)
{
    // int years
    int years = (int)wxlua_getnumbertype(L, 1);
    // call Years
    // allocate a new object using the copy constructor
    wxDateSpan* returns = new wxDateSpan(wxDateSpan::Years(years));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateSpan((wxDateSpan*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_delete[] = { &wxluatype_wxDateSpan, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDateSpan_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_op_eq[] = { &wxluatype_wxDateSpan, &wxluatype_wxDateSpan, NULL };
static int LUACALL wxLua_wxDateSpan_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_op_eq[1] = {{ wxLua_wxDateSpan_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateSpan_op_eq }};
//     %operator bool operator==(wxDateSpan& other) const
static int LUACALL wxLua_wxDateSpan_op_eq(lua_State *L)
{
    // wxDateSpan other
    wxDateSpan * other = (wxDateSpan *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateSpan);
    // get this
    wxDateSpan * self = (wxDateSpan *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateSpan);
    // call op_eq
    bool returns = ((*self)==(*other));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateSpan_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateSpan_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateSpan_constructor[1] = {{ wxLua_wxDateSpan_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxDateSpan_constructor }};
//     wxDateSpan(int years = 0, int months = 0, int weeks = 0, int days = 0)
static int LUACALL wxLua_wxDateSpan_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int days = 0
    int days = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // int weeks = 0
    int weeks = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int months = 0
    int months = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // int years = 0
    int years = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxDateSpan* returns = new wxDateSpan(years, months, weeks, days);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateSpan((wxDateSpan*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateSpan);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDateSpan_methods[] = {
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateSpan_Add, 1, NULL },
    { "Day", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDateSpan_Day, 1, NULL },
    { "Days", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDateSpan_Days, 1, NULL },
    { "GetDays", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateSpan_GetDays, 1, NULL },
    { "GetMonths", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateSpan_GetMonths, 1, NULL },
    { "GetTotalDays", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateSpan_GetTotalDays, 1, NULL },
    { "GetWeeks", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateSpan_GetWeeks, 1, NULL },
    { "GetYears", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateSpan_GetYears, 1, NULL },
    { "Month", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDateSpan_Month, 1, NULL },
    { "Months", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDateSpan_Months, 1, NULL },
    { "Multiply", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateSpan_Multiply, 1, NULL },
    { "Neg", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateSpan_Neg, 1, NULL },
    { "Negate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateSpan_Negate, 1, NULL },
    { "SetDays", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateSpan_SetDays, 1, NULL },
    { "SetMonths", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateSpan_SetMonths, 1, NULL },
    { "SetWeeks", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateSpan_SetWeeks, 1, NULL },
    { "SetYears", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateSpan_SetYears, 1, NULL },
    { "Subtract", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateSpan_Subtract, 1, NULL },
    { "Week", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDateSpan_Week, 1, NULL },
    { "Weeks", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDateSpan_Weeks, 1, NULL },
    { "Year", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDateSpan_Year, 1, NULL },
    { "Years", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDateSpan_Years, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDateSpan_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateSpan_op_eq, 1, NULL },
    { "wxDateSpan", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDateSpan_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDateSpan_methodCount = sizeof(wxDateSpan_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDateSpan && wxUSE_DATETIME


#if wxLUA_USE_wxDateTimeHolidayAuthority && wxUSE_DATETIME
// ---------------------------------------------------------------------------
// Bind class wxDateTimeHolidayAuthority
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDateTimeHolidayAuthority'
int wxluatype_wxDateTimeHolidayAuthority = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeHolidayAuthority_AddAuthority[] = { &wxluatype_wxDateTimeHolidayAuthority, NULL };
static int LUACALL wxLua_wxDateTimeHolidayAuthority_AddAuthority(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeHolidayAuthority_AddAuthority[1] = {{ wxLua_wxDateTimeHolidayAuthority_AddAuthority, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxDateTimeHolidayAuthority_AddAuthority }};
//     static void AddAuthority(wxDateTimeHolidayAuthority *auth)
static int LUACALL wxLua_wxDateTimeHolidayAuthority_AddAuthority(lua_State *L)
{
    // wxDateTimeHolidayAuthority auth
    wxDateTimeHolidayAuthority * auth = (wxDateTimeHolidayAuthority *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTimeHolidayAuthority);
    // call AddAuthority
    wxDateTimeHolidayAuthority::AddAuthority(auth);

    return 0;
}

static int LUACALL wxLua_wxDateTimeHolidayAuthority_ClearAllAuthorities(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeHolidayAuthority_ClearAllAuthorities[1] = {{ wxLua_wxDateTimeHolidayAuthority_ClearAllAuthorities, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void ClearAllAuthorities()
static int LUACALL wxLua_wxDateTimeHolidayAuthority_ClearAllAuthorities(lua_State *L)
{
    // call ClearAllAuthorities
    wxDateTimeHolidayAuthority::ClearAllAuthorities();

    return 0;
}


#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateTimeHolidayAuthority && wxUSE_DATETIME)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeHolidayAuthority_GetHolidaysInRange[] = { &wxluatype_wxDateTime, &wxluatype_wxDateTime, &wxluatype_wxDateTimeArray, NULL };
static int LUACALL wxLua_wxDateTimeHolidayAuthority_GetHolidaysInRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeHolidayAuthority_GetHolidaysInRange[1] = {{ wxLua_wxDateTimeHolidayAuthority_GetHolidaysInRange, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxDateTimeHolidayAuthority_GetHolidaysInRange }};
//     static size_t GetHolidaysInRange(const wxDateTime& dtStart, const wxDateTime& dtEnd, wxDateTimeArray& holidays)
static int LUACALL wxLua_wxDateTimeHolidayAuthority_GetHolidaysInRange(lua_State *L)
{
    // wxDateTimeArray holidays
    wxDateTimeArray * holidays = (wxDateTimeArray *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDateTimeArray);
    // const wxDateTime dtEnd
    const wxDateTime * dtEnd = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // const wxDateTime dtStart
    const wxDateTime * dtStart = (const wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call GetHolidaysInRange
    size_t returns = (wxDateTimeHolidayAuthority::GetHolidaysInRange(*dtStart, *dtEnd, *holidays));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeHolidayAuthority_IsHoliday[] = { &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateTimeHolidayAuthority_IsHoliday(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeHolidayAuthority_IsHoliday[1] = {{ wxLua_wxDateTimeHolidayAuthority_IsHoliday, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxDateTimeHolidayAuthority_IsHoliday }};
//     static bool IsHoliday(const wxDateTime& dt)
static int LUACALL wxLua_wxDateTimeHolidayAuthority_IsHoliday(lua_State *L)
{
    // const wxDateTime dt
    const wxDateTime * dt = (const wxDateTime *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateTime);
    // call IsHoliday
    bool returns = (wxDateTimeHolidayAuthority::IsHoliday(*dt));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateTimeHolidayAuthority && wxUSE_DATETIME)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDateTimeHolidayAuthority_methods[] = {
    { "AddAuthority", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDateTimeHolidayAuthority_AddAuthority, 1, NULL },
    { "ClearAllAuthorities", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDateTimeHolidayAuthority_ClearAllAuthorities, 1, NULL },

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateTimeHolidayAuthority && wxUSE_DATETIME)
    { "GetHolidaysInRange", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDateTimeHolidayAuthority_GetHolidaysInRange, 1, NULL },
    { "IsHoliday", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDateTimeHolidayAuthority_IsHoliday, 1, NULL },
#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxDateTimeHolidayAuthority && wxUSE_DATETIME)

    { 0, 0, 0, 0 },
};

int wxDateTimeHolidayAuthority_methodCount = sizeof(wxDateTimeHolidayAuthority_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDateTimeHolidayAuthority && wxUSE_DATETIME


#if wxLUA_USE_wxDateTimeHolidayAuthority && wxUSE_DATETIME
// ---------------------------------------------------------------------------
// Bind class wxDateTimeWorkDays
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDateTimeWorkDays'
int wxluatype_wxDateTimeWorkDays = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateTimeWorkDays_delete[] = { &wxluatype_wxDateTimeWorkDays, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeWorkDays_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDateTimeWorkDays_delete }};

static int LUACALL wxLua_wxDateTimeWorkDays_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateTimeWorkDays_constructor[1] = {{ wxLua_wxDateTimeWorkDays_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDateTimeWorkDays()
static int LUACALL wxLua_wxDateTimeWorkDays_constructor(lua_State *L)
{
    // call constructor
    wxDateTimeWorkDays* returns = new wxDateTimeWorkDays();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTimeWorkDays((wxDateTimeWorkDays*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTimeWorkDays);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDateTimeWorkDays_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDateTimeWorkDays_delete, 1, NULL },
    { "wxDateTimeWorkDays", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDateTimeWorkDays_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDateTimeWorkDays_methodCount = sizeof(wxDateTimeWorkDays_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDateTimeHolidayAuthority && wxUSE_DATETIME


#if wxLUA_USE_wxStopWatch && wxUSE_STOPWATCH
// ---------------------------------------------------------------------------
// Bind class wxStopWatch
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxStopWatch'
int wxluatype_wxStopWatch = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxStopWatch_Pause[] = { &wxluatype_wxStopWatch, NULL };
static int LUACALL wxLua_wxStopWatch_Pause(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStopWatch_Pause[1] = {{ wxLua_wxStopWatch_Pause, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStopWatch_Pause }};
//     void Pause()
static int LUACALL wxLua_wxStopWatch_Pause(lua_State *L)
{
    // get this
    wxStopWatch * self = (wxStopWatch *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStopWatch);
    // call Pause
    self->Pause();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStopWatch_Resume[] = { &wxluatype_wxStopWatch, NULL };
static int LUACALL wxLua_wxStopWatch_Resume(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStopWatch_Resume[1] = {{ wxLua_wxStopWatch_Resume, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStopWatch_Resume }};
//     void Resume()
static int LUACALL wxLua_wxStopWatch_Resume(lua_State *L)
{
    // get this
    wxStopWatch * self = (wxStopWatch *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStopWatch);
    // call Resume
    self->Resume();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStopWatch_Start[] = { &wxluatype_wxStopWatch, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxStopWatch_Start(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStopWatch_Start[1] = {{ wxLua_wxStopWatch_Start, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxStopWatch_Start }};
//     void Start(long t0 = 0) // start the stop watch at the moment t0
static int LUACALL wxLua_wxStopWatch_Start(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long t0 = 0
    long t0 = (argCount >= 2 ? (long)wxlua_getnumbertype(L, 2) : 0);
    // get this
    wxStopWatch * self = (wxStopWatch *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStopWatch);
    // call Start
    self->Start(t0);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStopWatch_Time[] = { &wxluatype_wxStopWatch, NULL };
static int LUACALL wxLua_wxStopWatch_Time(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStopWatch_Time[1] = {{ wxLua_wxStopWatch_Time, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStopWatch_Time }};
//     long Time() const
static int LUACALL wxLua_wxStopWatch_Time(lua_State *L)
{
    // get this
    wxStopWatch * self = (wxStopWatch *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStopWatch);
    // call Time
    long  returns = (self->Time());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStopWatch_delete[] = { &wxluatype_wxStopWatch, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStopWatch_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxStopWatch_delete }};

static int LUACALL wxLua_wxStopWatch_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStopWatch_constructor[1] = {{ wxLua_wxStopWatch_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxStopWatch() // ctor starts the stop watch
static int LUACALL wxLua_wxStopWatch_constructor(lua_State *L)
{
    // call constructor
    wxStopWatch* returns = new wxStopWatch();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxStopWatch((wxStopWatch*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStopWatch);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxStopWatch_methods[] = {
    { "Pause", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStopWatch_Pause, 1, NULL },
    { "Resume", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStopWatch_Resume, 1, NULL },
    { "Start", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStopWatch_Start, 1, NULL },
    { "Time", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStopWatch_Time, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxStopWatch_delete, 1, NULL },
    { "wxStopWatch", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxStopWatch_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxStopWatch_methodCount = sizeof(wxStopWatch_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxStopWatch && wxUSE_STOPWATCH


#if wxUSE_INTL
// ---------------------------------------------------------------------------
// Bind struct wxLanguageInfo
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLanguageInfo'
int wxluatype_wxLanguageInfo = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxLanguageInfo_Get_CanonicalName[] = { &wxluatype_wxLanguageInfo, NULL };
static int LUACALL wxLua_wxLanguageInfo_Get_CanonicalName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLanguageInfo_Get_CanonicalName[1] = {{ wxLua_wxLanguageInfo_Get_CanonicalName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLanguageInfo_Get_CanonicalName }};
//     %member wxString CanonicalName;         // Canonical name, e.g. fr_FR
static int LUACALL wxLua_wxLanguageInfo_Get_CanonicalName(lua_State *L)
{
    // get this
    wxLanguageInfo *self = (wxLanguageInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLanguageInfo);
    // push the result string
    wxlua_pushwxString(L, self->CanonicalName);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLanguageInfo_Get_Description[] = { &wxluatype_wxLanguageInfo, NULL };
static int LUACALL wxLua_wxLanguageInfo_Get_Description(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLanguageInfo_Get_Description[1] = {{ wxLua_wxLanguageInfo_Get_Description, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLanguageInfo_Get_Description }};
//     %member wxString Description;           // human-readable name of the language
static int LUACALL wxLua_wxLanguageInfo_Get_Description(lua_State *L)
{
    // get this
    wxLanguageInfo *self = (wxLanguageInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLanguageInfo);
    // push the result string
    wxlua_pushwxString(L, self->Description);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLanguageInfo_Get_Language[] = { &wxluatype_wxLanguageInfo, NULL };
static int LUACALL wxLua_wxLanguageInfo_Get_Language(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLanguageInfo_Get_Language[1] = {{ wxLua_wxLanguageInfo_Get_Language, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLanguageInfo_Get_Language }};
//     %member int Language;                   // wxLanguage id
static int LUACALL wxLua_wxLanguageInfo_Get_Language(lua_State *L)
{
    // get this
    wxLanguageInfo *self = (wxLanguageInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLanguageInfo);
    // push the result number
    lua_pushnumber(L, self->Language);
    // return the number of values
    return 1;
}


#if ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxUSE_INTL))
static wxLuaArgType s_wxluatypeArray_wxLua_wxLanguageInfo_Get_LayoutDirection[] = { &wxluatype_wxLanguageInfo, NULL };
static int LUACALL wxLua_wxLanguageInfo_Get_LayoutDirection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLanguageInfo_Get_LayoutDirection[1] = {{ wxLua_wxLanguageInfo_Get_LayoutDirection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLanguageInfo_Get_LayoutDirection }};
//     %wxchkver_2_8 %member wxLayoutDirection LayoutDirection;
static int LUACALL wxLua_wxLanguageInfo_Get_LayoutDirection(lua_State *L)
{
    // get this
    wxLanguageInfo *self = (wxLanguageInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLanguageInfo);
    // push the result number
    lua_pushnumber(L, self->LayoutDirection);
    // return the number of values
    return 1;
}

#endif // ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxUSE_INTL))


#if ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxUSE_INTL))
#endif // ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxUSE_INTL))

static wxLuaArgType s_wxluatypeArray_wxLua_wxLanguageInfo_Set_CanonicalName[] = { &wxluatype_wxLanguageInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLanguageInfo_Set_CanonicalName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLanguageInfo_Set_CanonicalName[1] = {{ wxLua_wxLanguageInfo_Set_CanonicalName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxLanguageInfo_Set_CanonicalName }};
//     %member wxString CanonicalName;         // Canonical name, e.g. fr_FR
static int LUACALL wxLua_wxLanguageInfo_Set_CanonicalName(lua_State *L)
{
    // get the string value
    wxString val = wxlua_getwxStringtype(L, 2);
    // get this
    wxLanguageInfo *self = (wxLanguageInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLanguageInfo);
    self->CanonicalName = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLanguageInfo_Set_Description[] = { &wxluatype_wxLanguageInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLanguageInfo_Set_Description(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLanguageInfo_Set_Description[1] = {{ wxLua_wxLanguageInfo_Set_Description, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxLanguageInfo_Set_Description }};
//     %member wxString Description;           // human-readable name of the language
static int LUACALL wxLua_wxLanguageInfo_Set_Description(lua_State *L)
{
    // get the string value
    wxString val = wxlua_getwxStringtype(L, 2);
    // get this
    wxLanguageInfo *self = (wxLanguageInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLanguageInfo);
    self->Description = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLanguageInfo_Set_Language[] = { &wxluatype_wxLanguageInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxLanguageInfo_Set_Language(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLanguageInfo_Set_Language[1] = {{ wxLua_wxLanguageInfo_Set_Language, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxLanguageInfo_Set_Language }};
//     %member int Language;                   // wxLanguage id
static int LUACALL wxLua_wxLanguageInfo_Set_Language(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxLanguageInfo *self = (wxLanguageInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLanguageInfo);
    self->Language = val;
    // return the number of values
    return 0;
}


#if ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxUSE_INTL))
static wxLuaArgType s_wxluatypeArray_wxLua_wxLanguageInfo_Set_LayoutDirection[] = { &wxluatype_wxLanguageInfo, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxLanguageInfo_Set_LayoutDirection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLanguageInfo_Set_LayoutDirection[1] = {{ wxLua_wxLanguageInfo_Set_LayoutDirection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxLanguageInfo_Set_LayoutDirection }};
//     %wxchkver_2_8 %member wxLayoutDirection LayoutDirection;
static int LUACALL wxLua_wxLanguageInfo_Set_LayoutDirection(lua_State *L)
{
    // get the enum value
    wxLayoutDirection val = (wxLayoutDirection)wxlua_getenumtype(L, 2);
    // get this
    wxLanguageInfo *self = (wxLanguageInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLanguageInfo);
    self->LayoutDirection = val;
    // return the number of values
    return 0;
}

#endif // ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxUSE_INTL))

static wxLuaArgType s_wxluatypeArray_wxLua_wxLanguageInfo_delete[] = { &wxluatype_wxLanguageInfo, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLanguageInfo_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxLanguageInfo_delete }};

static int LUACALL wxLua_wxLanguageInfo_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLanguageInfo_constructor[1] = {{ wxLua_wxLanguageInfo_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxLanguageInfo() // you must set all the values by hand
static int LUACALL wxLua_wxLanguageInfo_constructor(lua_State *L)
{
    // call constructor
    wxLanguageInfo* returns = new wxLanguageInfo();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLanguageInfo((wxLanguageInfo*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLanguageInfo);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLanguageInfo_methods[] = {
    { "CanonicalName", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxLanguageInfo_Set_CanonicalName, 1, NULL },
    { "CanonicalName", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxLanguageInfo_Get_CanonicalName, 1, NULL },
    { "Description", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxLanguageInfo_Set_Description, 1, NULL },
    { "Description", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxLanguageInfo_Get_Description, 1, NULL },
    // %member    { "Get_CanonicalName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLanguageInfo_Get_CanonicalName, 1, NULL },
    // %member    { "Get_Description", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLanguageInfo_Get_Description, 1, NULL },
    // %member    { "Get_Language", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLanguageInfo_Get_Language, 1, NULL },

#if ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxUSE_INTL))
    // %member    { "Get_LayoutDirection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLanguageInfo_Get_LayoutDirection, 1, NULL },
#endif // ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxUSE_INTL))

    { "Language", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxLanguageInfo_Set_Language, 1, NULL },
    { "Language", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxLanguageInfo_Get_Language, 1, NULL },

#if ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxUSE_INTL))
    { "LayoutDirection", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxLanguageInfo_Set_LayoutDirection, 1, NULL },
    { "LayoutDirection", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxLanguageInfo_Get_LayoutDirection, 1, NULL },
#endif // ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxUSE_INTL))

    // %member    { "Set_CanonicalName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLanguageInfo_Set_CanonicalName, 1, NULL },
    // %member    { "Set_Description", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLanguageInfo_Set_Description, 1, NULL },
    // %member    { "Set_Language", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLanguageInfo_Set_Language, 1, NULL },

#if ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxUSE_INTL))
    // %member    { "Set_LayoutDirection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLanguageInfo_Set_LayoutDirection, 1, NULL },
#endif // ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxUSE_INTL))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxLanguageInfo_delete, 1, NULL },
    { "wxLanguageInfo", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLanguageInfo_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxLanguageInfo_methodCount = sizeof(wxLanguageInfo_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_INTL


#if wxUSE_INTL
// ---------------------------------------------------------------------------
// Bind class wxLocale
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLocale'
int wxluatype_wxLocale = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_AddCatalog1[] = { &wxluatype_wxLocale, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLocale_AddCatalog1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_AddCatalog1[1] = {{ wxLua_wxLocale_AddCatalog1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxLocale_AddCatalog1 }};
//     bool AddCatalog(const wxString& szDomain, wxLanguage msgIdLanguage, const wxString& msgIdCharset);
static int LUACALL wxLua_wxLocale_AddCatalog1(lua_State *L)
{
    // const wxString msgIdCharset
    const wxString msgIdCharset = wxlua_getwxStringtype(L, 4);
    // wxLanguage msgIdLanguage
    wxLanguage msgIdLanguage = (wxLanguage)wxlua_getenumtype(L, 3);
    // const wxString szDomain
    const wxString szDomain = wxlua_getwxStringtype(L, 2);
    // get this
    wxLocale * self = (wxLocale *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLocale);
    // call AddCatalog
    bool returns = (self->AddCatalog(szDomain, msgIdLanguage, msgIdCharset));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_AddCatalog[] = { &wxluatype_wxLocale, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLocale_AddCatalog(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_AddCatalog[1] = {{ wxLua_wxLocale_AddCatalog, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxLocale_AddCatalog }};
//     bool AddCatalog(const wxString& szDomain);
static int LUACALL wxLua_wxLocale_AddCatalog(lua_State *L)
{
    // const wxString szDomain
    const wxString szDomain = wxlua_getwxStringtype(L, 2);
    // get this
    wxLocale * self = (wxLocale *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLocale);
    // call AddCatalog
    bool returns = (self->AddCatalog(szDomain));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_AddCatalogLookupPathPrefix[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLocale_AddCatalogLookupPathPrefix(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_AddCatalogLookupPathPrefix[1] = {{ wxLua_wxLocale_AddCatalogLookupPathPrefix, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxLocale_AddCatalogLookupPathPrefix }};
//     static void AddCatalogLookupPathPrefix(const wxString& prefix);
static int LUACALL wxLua_wxLocale_AddCatalogLookupPathPrefix(lua_State *L)
{
    // const wxString prefix
    const wxString prefix = wxlua_getwxStringtype(L, 1);
    // call AddCatalogLookupPathPrefix
    wxLocale::AddCatalogLookupPathPrefix(prefix);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_AddLanguage[] = { &wxluatype_wxLanguageInfo, NULL };
static int LUACALL wxLua_wxLocale_AddLanguage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_AddLanguage[1] = {{ wxLua_wxLocale_AddLanguage, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxLocale_AddLanguage }};
//     static void AddLanguage(const wxLanguageInfo& info);
static int LUACALL wxLua_wxLocale_AddLanguage(lua_State *L)
{
    // const wxLanguageInfo info
    const wxLanguageInfo * info = (const wxLanguageInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLanguageInfo);
    // call AddLanguage
    wxLocale::AddLanguage(*info);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_FindLanguageInfo[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLocale_FindLanguageInfo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_FindLanguageInfo[1] = {{ wxLua_wxLocale_FindLanguageInfo, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxLocale_FindLanguageInfo }};
//     static const wxLanguageInfo *FindLanguageInfo(const wxString& locale);
static int LUACALL wxLua_wxLocale_FindLanguageInfo(lua_State *L)
{
    // const wxString locale
    const wxString locale = wxlua_getwxStringtype(L, 1);
    // call FindLanguageInfo
    const wxLanguageInfo* returns = (const wxLanguageInfo*)wxLocale::FindLanguageInfo(locale);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLanguageInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_GetCanonicalName[] = { &wxluatype_wxLocale, NULL };
static int LUACALL wxLua_wxLocale_GetCanonicalName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_GetCanonicalName[1] = {{ wxLua_wxLocale_GetCanonicalName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLocale_GetCanonicalName }};
//     wxString GetCanonicalName() const
static int LUACALL wxLua_wxLocale_GetCanonicalName(lua_State *L)
{
    // get this
    wxLocale * self = (wxLocale *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLocale);
    // call GetCanonicalName
    wxString returns = (self->GetCanonicalName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_GetHeaderValue[] = { &wxluatype_wxLocale, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLocale_GetHeaderValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_GetHeaderValue[1] = {{ wxLua_wxLocale_GetHeaderValue, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxLocale_GetHeaderValue }};
//     wxString GetHeaderValue( const wxString& szHeader, const wxString& szDomain = "" ) const;
static int LUACALL wxLua_wxLocale_GetHeaderValue(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString szDomain = ""
    const wxString szDomain = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString szHeader
    const wxString szHeader = wxlua_getwxStringtype(L, 2);
    // get this
    wxLocale * self = (wxLocale *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLocale);
    // call GetHeaderValue
    wxString returns = (self->GetHeaderValue(szHeader, szDomain));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_GetInfo[] = { &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxLocale_GetInfo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_GetInfo[1] = {{ wxLua_wxLocale_GetInfo, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxLocale_GetInfo }};
//     static wxString GetInfo(wxLocaleInfo index, wxLocaleCategory cat);
static int LUACALL wxLua_wxLocale_GetInfo(lua_State *L)
{
    // wxLocaleCategory cat
    wxLocaleCategory cat = (wxLocaleCategory)wxlua_getenumtype(L, 2);
    // wxLocaleInfo index
    wxLocaleInfo index = (wxLocaleInfo)wxlua_getenumtype(L, 1);
    // call GetInfo
    wxString returns = (wxLocale::GetInfo(index, cat));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_GetLanguage[] = { &wxluatype_wxLocale, NULL };
static int LUACALL wxLua_wxLocale_GetLanguage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_GetLanguage[1] = {{ wxLua_wxLocale_GetLanguage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLocale_GetLanguage }};
//     int GetLanguage() const
static int LUACALL wxLua_wxLocale_GetLanguage(lua_State *L)
{
    // get this
    wxLocale * self = (wxLocale *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLocale);
    // call GetLanguage
    int returns = (self->GetLanguage());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_GetLanguageInfo[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxLocale_GetLanguageInfo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_GetLanguageInfo[1] = {{ wxLua_wxLocale_GetLanguageInfo, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxLocale_GetLanguageInfo }};
//     static const wxLanguageInfo *GetLanguageInfo(int lang);
static int LUACALL wxLua_wxLocale_GetLanguageInfo(lua_State *L)
{
    // int lang
    int lang = (int)wxlua_getnumbertype(L, 1);
    // call GetLanguageInfo
    const wxLanguageInfo* returns = (const wxLanguageInfo*)wxLocale::GetLanguageInfo(lang);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLanguageInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_GetLanguageName[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxLocale_GetLanguageName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_GetLanguageName[1] = {{ wxLua_wxLocale_GetLanguageName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxLocale_GetLanguageName }};
//     static wxString GetLanguageName(int lang);
static int LUACALL wxLua_wxLocale_GetLanguageName(lua_State *L)
{
    // int lang
    int lang = (int)wxlua_getnumbertype(L, 1);
    // call GetLanguageName
    wxString returns = (wxLocale::GetLanguageName(lang));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_GetLocale[] = { &wxluatype_wxLocale, NULL };
static int LUACALL wxLua_wxLocale_GetLocale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_GetLocale[1] = {{ wxLua_wxLocale_GetLocale, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLocale_GetLocale }};
//     wxString GetLocale() const
static int LUACALL wxLua_wxLocale_GetLocale(lua_State *L)
{
    // get this
    wxLocale * self = (wxLocale *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLocale);
    // call GetLocale
    wxString returns = (self->GetLocale());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_GetName[] = { &wxluatype_wxLocale, NULL };
static int LUACALL wxLua_wxLocale_GetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_GetName[1] = {{ wxLua_wxLocale_GetName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLocale_GetName }};
//     const wxString& GetName() const
static int LUACALL wxLua_wxLocale_GetName(lua_State *L)
{
    // get this
    wxLocale * self = (wxLocale *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLocale);
    // call GetName
    wxString returns = (self->GetName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_GetString1[] = { &wxluatype_wxLocale, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLocale_GetString1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_GetString1[1] = {{ wxLua_wxLocale_GetString1, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxLocale_GetString1 }};
//     virtual wxString GetString(const wxString& szOrigString, const wxString& szOrigString2, size_t n, const wxChar* szDomain = NULL) const;
static int LUACALL wxLua_wxLocale_GetString1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxChar szDomain = NULL
    wxString  szDomain = (argCount >= 5 ? wxlua_getwxStringtype(L, 5) : wxString(wxEmptyString));
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 4);
    // const wxString szOrigString2
    const wxString szOrigString2 = wxlua_getwxStringtype(L, 3);
    // const wxString szOrigString
    const wxString szOrigString = wxlua_getwxStringtype(L, 2);
    // get this
    wxLocale * self = (wxLocale *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLocale);
    // call GetString
    wxString returns = (self->GetString(szOrigString, szOrigString2, n, szDomain.IsEmpty() ? NULL : szDomain.c_str()));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_GetString[] = { &wxluatype_wxLocale, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLocale_GetString(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_GetString[1] = {{ wxLua_wxLocale_GetString, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxLocale_GetString }};
//     virtual wxString GetString(const wxString& szOrigString, const wxChar* szDomain = NULL) const;
static int LUACALL wxLua_wxLocale_GetString(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxChar szDomain = NULL
    wxString  szDomain = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString szOrigString
    const wxString szOrigString = wxlua_getwxStringtype(L, 2);
    // get this
    wxLocale * self = (wxLocale *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLocale);
    // call GetString
    wxString returns = (self->GetString(szOrigString, szDomain.IsEmpty() ? NULL : szDomain.c_str()));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_GetSysName[] = { &wxluatype_wxLocale, NULL };
static int LUACALL wxLua_wxLocale_GetSysName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_GetSysName[1] = {{ wxLua_wxLocale_GetSysName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLocale_GetSysName }};
//     wxString GetSysName() const;
static int LUACALL wxLua_wxLocale_GetSysName(lua_State *L)
{
    // get this
    wxLocale * self = (wxLocale *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLocale);
    // call GetSysName
    wxString returns = (self->GetSysName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static int LUACALL wxLua_wxLocale_GetSystemEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_GetSystemEncoding[1] = {{ wxLua_wxLocale_GetSystemEncoding, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxFontEncoding GetSystemEncoding();
static int LUACALL wxLua_wxLocale_GetSystemEncoding(lua_State *L)
{
    // call GetSystemEncoding
    wxFontEncoding returns = (wxLocale::GetSystemEncoding());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static int LUACALL wxLua_wxLocale_GetSystemEncodingName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_GetSystemEncodingName[1] = {{ wxLua_wxLocale_GetSystemEncodingName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxString GetSystemEncodingName();
static int LUACALL wxLua_wxLocale_GetSystemEncodingName(lua_State *L)
{
    // call GetSystemEncodingName
    wxString returns = (wxLocale::GetSystemEncodingName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static int LUACALL wxLua_wxLocale_GetSystemLanguage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_GetSystemLanguage[1] = {{ wxLua_wxLocale_GetSystemLanguage, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static int GetSystemLanguage()
static int LUACALL wxLua_wxLocale_GetSystemLanguage(lua_State *L)
{
    // call GetSystemLanguage
    int returns = (wxLocale::GetSystemLanguage());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_Init1[] = { &wxluatype_wxLocale, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxLocale_Init1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_Init1[1] = {{ wxLua_wxLocale_Init1, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxLocale_Init1 }};
//     bool Init(int language = wxLANGUAGE_DEFAULT, int flags = wxLOCALE_LOAD_DEFAULT | wxLOCALE_CONV_ENCODING);
static int LUACALL wxLua_wxLocale_Init1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxLOCALE_LOAD_DEFAULT | wxLOCALE_CONV_ENCODING
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxLOCALE_LOAD_DEFAULT | wxLOCALE_CONV_ENCODING);
    // int language = wxLANGUAGE_DEFAULT
    int language = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxLANGUAGE_DEFAULT);
    // get this
    wxLocale * self = (wxLocale *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLocale);
    // call Init
    bool returns = (self->Init(language, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_Init[] = { &wxluatype_wxLocale, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxLocale_Init(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_Init[1] = {{ wxLua_wxLocale_Init, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxLocale_Init }};
//     bool Init(const wxString &szName, const wxString &szShort = "", const wxString &szLocale = "", bool bLoadDefault = true, bool bConvertEncoding = false)
static int LUACALL wxLua_wxLocale_Init(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool bConvertEncoding = false
    bool bConvertEncoding = (argCount >= 6 ? wxlua_getbooleantype(L, 6) : false);
    // bool bLoadDefault = true
    bool bLoadDefault = (argCount >= 5 ? wxlua_getbooleantype(L, 5) : true);
    // const wxString szLocale = ""
    const wxString szLocale = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // const wxString szShort = ""
    const wxString szShort = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString szName
    const wxString szName = wxlua_getwxStringtype(L, 2);
    // get this
    wxLocale * self = (wxLocale *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLocale);
    // call Init
    bool returns = (self->Init(szName, szShort, szLocale, bLoadDefault, bConvertEncoding));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,8,0)) && (wxUSE_INTL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_IsAvailable[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxLocale_IsAvailable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_IsAvailable[1] = {{ wxLua_wxLocale_IsAvailable, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxLocale_IsAvailable }};
//     %wxchkver_2_8 static bool IsAvailable(int lang);
static int LUACALL wxLua_wxLocale_IsAvailable(lua_State *L)
{
    // int lang
    int lang = (int)wxlua_getnumbertype(L, 1);
    // call IsAvailable
    bool returns = (wxLocale::IsAvailable(lang));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxUSE_INTL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_IsLoaded[] = { &wxluatype_wxLocale, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLocale_IsLoaded(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_IsLoaded[1] = {{ wxLua_wxLocale_IsLoaded, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxLocale_IsLoaded }};
//     bool IsLoaded(const wxString& szDomain) const;
static int LUACALL wxLua_wxLocale_IsLoaded(lua_State *L)
{
    // const wxString szDomain
    const wxString szDomain = wxlua_getwxStringtype(L, 2);
    // get this
    wxLocale * self = (wxLocale *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLocale);
    // call IsLoaded
    bool returns = (self->IsLoaded(szDomain));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_IsOk[] = { &wxluatype_wxLocale, NULL };
static int LUACALL wxLua_wxLocale_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_IsOk[1] = {{ wxLua_wxLocale_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLocale_IsOk }};
//     bool IsOk() const
static int LUACALL wxLua_wxLocale_IsOk(lua_State *L)
{
    // get this
    wxLocale * self = (wxLocale *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLocale);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_delete[] = { &wxluatype_wxLocale, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxLocale_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_constructor2[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxLocale_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_constructor2[1] = {{ wxLua_wxLocale_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxLocale_constructor2 }};
//     wxLocale(int language, int flags = wxLOCALE_LOAD_DEFAULT | wxLOCALE_CONV_ENCODING)
static int LUACALL wxLua_wxLocale_constructor2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxLOCALE_LOAD_DEFAULT | wxLOCALE_CONV_ENCODING
    int flags = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxLOCALE_LOAD_DEFAULT | wxLOCALE_CONV_ENCODING);
    // int language
    int language = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxLocale* returns = new wxLocale(language, flags);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLocale((wxLocale*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLocale);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocale_constructor1[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxLocale_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_constructor1[1] = {{ wxLua_wxLocale_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxLocale_constructor1 }};
//     wxLocale(const wxString& szName, const wxString& szShort = "", const wxString& szLocale = "", bool bLoadDefault = true, bool bConvertEncoding = false)
static int LUACALL wxLua_wxLocale_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool bConvertEncoding = false
    bool bConvertEncoding = (argCount >= 5 ? wxlua_getbooleantype(L, 5) : false);
    // bool bLoadDefault = true
    bool bLoadDefault = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // const wxString szLocale = ""
    const wxString szLocale = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString szShort = ""
    const wxString szShort = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // const wxString szName
    const wxString szName = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxLocale* returns = new wxLocale(szName, szShort, szLocale, bLoadDefault, bConvertEncoding);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLocale((wxLocale*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLocale);

    return 1;
}

static int LUACALL wxLua_wxLocale_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_constructor[1] = {{ wxLua_wxLocale_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxLocale()
static int LUACALL wxLua_wxLocale_constructor(lua_State *L)
{
    // call constructor
    wxLocale* returns = new wxLocale();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLocale((wxLocale*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLocale);

    return 1;
}




#if (wxUSE_INTL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_AddCatalog_overload[] =
{
    { wxLua_wxLocale_AddCatalog1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxLocale_AddCatalog1 },
    { wxLua_wxLocale_AddCatalog, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxLocale_AddCatalog },
};
static int s_wxluafunc_wxLua_wxLocale_AddCatalog_overload_count = sizeof(s_wxluafunc_wxLua_wxLocale_AddCatalog_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_GetString_overload[] =
{
    { wxLua_wxLocale_GetString1, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxLocale_GetString1 },
    { wxLua_wxLocale_GetString, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxLocale_GetString },
};
static int s_wxluafunc_wxLua_wxLocale_GetString_overload_count = sizeof(s_wxluafunc_wxLua_wxLocale_GetString_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_Init_overload[] =
{
    { wxLua_wxLocale_Init1, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxLocale_Init1 },
    { wxLua_wxLocale_Init, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxLocale_Init },
};
static int s_wxluafunc_wxLua_wxLocale_Init_overload_count = sizeof(s_wxluafunc_wxLua_wxLocale_Init_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocale_constructor_overload[] =
{
    { wxLua_wxLocale_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxLocale_constructor2 },
    { wxLua_wxLocale_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxLocale_constructor1 },
    { wxLua_wxLocale_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxLocale_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxLocale_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxUSE_INTL)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLocale_methods[] = {
#if (wxUSE_INTL)
    { "AddCatalog", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLocale_AddCatalog_overload, s_wxluafunc_wxLua_wxLocale_AddCatalog_overload_count, 0 },
#endif // (wxUSE_INTL)

    { "AddCatalogLookupPathPrefix", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLocale_AddCatalogLookupPathPrefix, 1, NULL },
    { "AddLanguage", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLocale_AddLanguage, 1, NULL },
    { "FindLanguageInfo", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLocale_FindLanguageInfo, 1, NULL },
    { "GetCanonicalName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLocale_GetCanonicalName, 1, NULL },
    { "GetHeaderValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLocale_GetHeaderValue, 1, NULL },
    { "GetInfo", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLocale_GetInfo, 1, NULL },
    { "GetLanguage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLocale_GetLanguage, 1, NULL },
    { "GetLanguageInfo", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLocale_GetLanguageInfo, 1, NULL },
    { "GetLanguageName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLocale_GetLanguageName, 1, NULL },
    { "GetLocale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLocale_GetLocale, 1, NULL },
    { "GetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLocale_GetName, 1, NULL },

#if (wxUSE_INTL)
    { "GetString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLocale_GetString_overload, s_wxluafunc_wxLua_wxLocale_GetString_overload_count, 0 },
#endif // (wxUSE_INTL)

    { "GetSysName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLocale_GetSysName, 1, NULL },
    { "GetSystemEncoding", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLocale_GetSystemEncoding, 1, NULL },
    { "GetSystemEncodingName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLocale_GetSystemEncodingName, 1, NULL },
    { "GetSystemLanguage", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLocale_GetSystemLanguage, 1, NULL },

#if (wxUSE_INTL)
    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLocale_Init_overload, s_wxluafunc_wxLua_wxLocale_Init_overload_count, 0 },
#endif // (wxUSE_INTL)

#if (wxCHECK_VERSION(2,8,0)) && (wxUSE_INTL)
    { "IsAvailable", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLocale_IsAvailable, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxUSE_INTL)

    { "IsLoaded", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLocale_IsLoaded, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLocale_IsOk, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxLocale_delete, 1, NULL },

#if (wxUSE_INTL)
    { "wxLocale", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLocale_constructor_overload, s_wxluafunc_wxLua_wxLocale_constructor_overload_count, 0 },
#endif // (wxUSE_INTL)

    { 0, 0, 0, 0 },
};

int wxLocale_methodCount = sizeof(wxLocale_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_INTL

