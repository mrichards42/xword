// ---------------------------------------------------------------------------
// luapuz_std.cpp was generated by puzbind.lua
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

extern "C" {
#include <lua.h>
#include <lauxlib.h>
#include <lualib.h>
}

#include "../luapuz_functions.hpp"
#include "../luapuz_tracking.hpp"

// ---------------------------------------------------------------------------
// namespace std
// ---------------------------------------------------------------------------

#include "luapuz_std.hpp"

// typedef vector<puz::Square*>
//------------

#include "luapuz_puz_Square.hpp"

void luapuz_checkSquareVector(lua_State * L, int index, std::vector<puz::Square*> * squares)
{
    luaL_checktype(L, index, LUA_TTABLE);

    // Iterate the table
    lua_pushnil(L);  /* first key */
    while (lua_next(L, index) != 0)
    {
        // key is index -2
        // value is index -1
        int number = luapuz_checkuint(L, -2);
        puz::Square * square = luapuz_checkSquare(L, -1);
        squares->push_back(square);

        /* removes 'value'; keeps 'key' for next iteration */
        lua_pop(L, 1);
    }
}

int luapuz_pushSquareVector(lua_State * L, std::vector<puz::Square*> * squares)
{
    // The squares table
    lua_newtable(L);

    int i = 1;
    for (std::vector<puz::Square*>::iterator it = squares->begin();
         it != squares->end();
         ++it)
    {
        // t[number] = text
        luapuz_pushSquare(L, *it);
        lua_rawseti(L, -2, i);
        ++i;
    }

    return 1;
}

