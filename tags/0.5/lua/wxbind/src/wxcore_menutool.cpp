// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxcore_menutool.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxcore_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif



#if wxLUA_USE_wxMenu && wxUSE_MENUS
// ---------------------------------------------------------------------------
// Bind class wxMenu
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMenu'
int wxluatype_wxMenu = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_Append2[] = { &wxluatype_wxMenu, &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenu_Append2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Append2[1] = {{ wxLua_wxMenu_Append2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_Append2 }};
//     wxMenuItem* Append(%ungc wxMenuItem* menuItem)
static int LUACALL wxLua_wxMenu_Append2(lua_State *L)
{
    // wxMenuItem menuItem
    wxMenuItem * menuItem = (wxMenuItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenuItem);
    if (wxluaO_isgcobject(L, menuItem)) wxluaO_undeletegcobject(L, menuItem);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call Append
    wxMenuItem* returns = (wxMenuItem*)self->Append(menuItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_Append1[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxMenu, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenu_Append1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Append1[1] = {{ wxLua_wxMenu_Append1, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxMenu_Append1 }};
//     wxMenuItem* Append(int id, const wxString& item, %ungc wxMenu *subMenu, const wxString& helpString = "")
static int LUACALL wxLua_wxMenu_Append1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString helpString = ""
    const wxString helpString = (argCount >= 5 ? wxlua_getwxStringtype(L, 5) : wxString(wxEmptyString));
    // wxMenu subMenu
    wxMenu * subMenu = (wxMenu *)wxluaT_getuserdatatype(L, 4, wxluatype_wxMenu);
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    if (wxluaO_isgcobject(L, subMenu)) wxluaO_undeletegcobject(L, subMenu);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call Append
    wxMenuItem* returns = (wxMenuItem*)self->Append(id, item, subMenu, helpString);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_Append[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxMenu_Append(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Append[1] = {{ wxLua_wxMenu_Append, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxMenu_Append }};
//     wxMenuItem* Append(int id, const wxString& item, const wxString& helpString = "", wxItemKind kind = wxITEM_NORMAL)
static int LUACALL wxLua_wxMenu_Append(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxItemKind kind = wxITEM_NORMAL
    wxItemKind kind = (argCount >= 5 ? (wxItemKind)wxlua_getenumtype(L, 5) : wxITEM_NORMAL);
    // const wxString helpString = ""
    const wxString helpString = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call Append
    wxMenuItem* returns = (wxMenuItem*)self->Append(id, item, helpString, kind);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_AppendCheckItem[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenu_AppendCheckItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_AppendCheckItem[1] = {{ wxLua_wxMenu_AppendCheckItem, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxMenu_AppendCheckItem }};
//     wxMenuItem* AppendCheckItem(int id, const wxString& item, const wxString& helpString = "")
static int LUACALL wxLua_wxMenu_AppendCheckItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString helpString = ""
    const wxString helpString = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call AppendCheckItem
    wxMenuItem* returns = (wxMenuItem*)self->AppendCheckItem(id, item, helpString);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_AppendRadioItem[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenu_AppendRadioItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_AppendRadioItem[1] = {{ wxLua_wxMenu_AppendRadioItem, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxMenu_AppendRadioItem }};
//     wxMenuItem* AppendRadioItem(int id, const wxString& item, const wxString& helpString = "")
static int LUACALL wxLua_wxMenu_AppendRadioItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString helpString = ""
    const wxString helpString = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call AppendRadioItem
    wxMenuItem* returns = (wxMenuItem*)self->AppendRadioItem(id, item, helpString);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_AppendSeparator[] = { &wxluatype_wxMenu, NULL };
static int LUACALL wxLua_wxMenu_AppendSeparator(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_AppendSeparator[1] = {{ wxLua_wxMenu_AppendSeparator, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenu_AppendSeparator }};
//     wxMenuItem* AppendSeparator()
static int LUACALL wxLua_wxMenu_AppendSeparator(lua_State *L)
{
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call AppendSeparator
    wxMenuItem* returns = (wxMenuItem*)self->AppendSeparator();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_Break[] = { &wxluatype_wxMenu, NULL };
static int LUACALL wxLua_wxMenu_Break(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Break[1] = {{ wxLua_wxMenu_Break, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenu_Break }};
//     void Break()
static int LUACALL wxLua_wxMenu_Break(lua_State *L)
{
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call Break
    self->Break();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_Check[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxMenu_Check(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Check[1] = {{ wxLua_wxMenu_Check, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMenu_Check }};
//     void Check(int id, bool check)
static int LUACALL wxLua_wxMenu_Check(lua_State *L)
{
    // bool check
    bool check = wxlua_getbooleantype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call Check
    self->Check(id, check);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_Delete1[] = { &wxluatype_wxMenu, &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenu_Delete1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Delete1[1] = {{ wxLua_wxMenu_Delete1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_Delete1 }};
//     void Delete(wxMenuItem *item)
static int LUACALL wxLua_wxMenu_Delete1(lua_State *L)
{
    // wxMenuItem item
    wxMenuItem * item = (wxMenuItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenuItem);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call Delete
    self->Delete(item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_Delete[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenu_Delete(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Delete[1] = {{ wxLua_wxMenu_Delete, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_Delete }};
//     void Delete(int id)
static int LUACALL wxLua_wxMenu_Delete(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call Delete
    self->Delete(id);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_Destroy1[] = { &wxluatype_wxMenu, &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenu_Destroy1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Destroy1[1] = {{ wxLua_wxMenu_Destroy1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_Destroy1 }};
//     void Destroy(wxMenuItem *item)
static int LUACALL wxLua_wxMenu_Destroy1(lua_State *L)
{
    // wxMenuItem item
    wxMenuItem * item = (wxMenuItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenuItem);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call Destroy
    self->Destroy(item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_Destroy[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenu_Destroy(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Destroy[1] = {{ wxLua_wxMenu_Destroy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_Destroy }};
//     void Destroy(int id)
static int LUACALL wxLua_wxMenu_Destroy(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call Destroy
    self->Destroy(id);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_Enable[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxMenu_Enable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Enable[1] = {{ wxLua_wxMenu_Enable, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMenu_Enable }};
//     void Enable(int id, bool enable)
static int LUACALL wxLua_wxMenu_Enable(lua_State *L)
{
    // bool enable
    bool enable = wxlua_getbooleantype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call Enable
    self->Enable(id, enable);

    return 0;
}

#define wxLua_wxMenu_FindItem1 wxLua_wxMenu_FindItemById
static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_FindItem1[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenu_FindItem1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_FindItem1[1] = {{ wxLua_wxMenu_FindItem1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_FindItem1 }};
// %override wxLua_wxMenu_FindItemById
//     %rename FindItemById wxMenuItem* FindItem(int id, wxMenu **menu = NULL) const
static int LUACALL wxLua_wxMenu_FindItemById(lua_State *L)
{
    // int id
    int id = (int)wxlua_getintegertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call FindItem
    wxMenu* foundMenu = NULL;
    wxMenuItem *returns = self->FindItem(id, &foundMenu);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);
    if (foundMenu != NULL)
    {
        wxluaT_pushuserdatatype(L, foundMenu, wxluatype_wxMenu);
        return 2;
    }

    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_FindItem[] = { &wxluatype_wxMenu, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenu_FindItem(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_FindItem[1] = {{ wxLua_wxMenu_FindItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_FindItem }};
//     int FindItem(const wxString& itemString) const
static int LUACALL wxLua_wxMenu_FindItem(lua_State *L)
{
    // const wxString itemString
    const wxString itemString = wxlua_getwxStringtype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call FindItem
    int returns = (self->FindItem(itemString));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_FindItemByPosition[] = { &wxluatype_wxMenu, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxMenu_FindItemByPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_FindItemByPosition[1] = {{ wxLua_wxMenu_FindItemByPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_FindItemByPosition }};
//     wxMenuItem* FindItemByPosition(size_t position) const
static int LUACALL wxLua_wxMenu_FindItemByPosition(lua_State *L)
{
    // size_t position
    size_t position = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call FindItemByPosition
    wxMenuItem* returns = (wxMenuItem*)self->FindItemByPosition(position);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_GetHelpString[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenu_GetHelpString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_GetHelpString[1] = {{ wxLua_wxMenu_GetHelpString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_GetHelpString }};
//     wxString GetHelpString(int id) const
static int LUACALL wxLua_wxMenu_GetHelpString(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call GetHelpString
    wxString returns = (self->GetHelpString(id));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_GetLabel[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenu_GetLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_GetLabel[1] = {{ wxLua_wxMenu_GetLabel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_GetLabel }};
//     wxString GetLabel(int id) const
static int LUACALL wxLua_wxMenu_GetLabel(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call GetLabel
    wxString returns = (self->GetLabel(id));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_GetMenuItemCount[] = { &wxluatype_wxMenu, NULL };
static int LUACALL wxLua_wxMenu_GetMenuItemCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_GetMenuItemCount[1] = {{ wxLua_wxMenu_GetMenuItemCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenu_GetMenuItemCount }};
//     size_t GetMenuItemCount() const
static int LUACALL wxLua_wxMenu_GetMenuItemCount(lua_State *L)
{
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call GetMenuItemCount
    size_t returns = (self->GetMenuItemCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_GetMenuItems[] = { &wxluatype_wxMenu, NULL };
static int LUACALL wxLua_wxMenu_GetMenuItems(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_GetMenuItems[1] = {{ wxLua_wxMenu_GetMenuItems, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenu_GetMenuItems }};
//     wxMenuItemList& GetMenuItems() const
static int LUACALL wxLua_wxMenu_GetMenuItems(lua_State *L)
{
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call GetMenuItems
    wxMenuItemList* returns = &self->GetMenuItems();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItemList);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_GetTitle[] = { &wxluatype_wxMenu, NULL };
static int LUACALL wxLua_wxMenu_GetTitle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_GetTitle[1] = {{ wxLua_wxMenu_GetTitle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenu_GetTitle }};
//     wxString GetTitle() const
static int LUACALL wxLua_wxMenu_GetTitle(lua_State *L)
{
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call GetTitle
    wxString returns = (self->GetTitle());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_Insert1[] = { &wxluatype_wxMenu, &wxluatype_TINTEGER, &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenu_Insert1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Insert1[1] = {{ wxLua_wxMenu_Insert1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMenu_Insert1 }};
//     wxMenuItem* Insert(size_t pos, %ungc wxMenuItem *item)
static int LUACALL wxLua_wxMenu_Insert1(lua_State *L)
{
    // wxMenuItem item
    wxMenuItem * item = (wxMenuItem *)wxluaT_getuserdatatype(L, 3, wxluatype_wxMenuItem);
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    if (wxluaO_isgcobject(L, item)) wxluaO_undeletegcobject(L, item);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call Insert
    wxMenuItem* returns = (wxMenuItem*)self->Insert(pos, item);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_Insert[] = { &wxluatype_wxMenu, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxMenu_Insert(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Insert[1] = {{ wxLua_wxMenu_Insert, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxMenu_Insert }};
//     wxMenuItem* Insert(size_t pos, int id, const wxString& item, const wxString& helpString = "", wxItemKind kind = wxITEM_NORMAL)
static int LUACALL wxLua_wxMenu_Insert(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxItemKind kind = wxITEM_NORMAL
    wxItemKind kind = (argCount >= 6 ? (wxItemKind)wxlua_getenumtype(L, 6) : wxITEM_NORMAL);
    // const wxString helpString = ""
    const wxString helpString = (argCount >= 5 ? wxlua_getwxStringtype(L, 5) : wxString(wxEmptyString));
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 4);
    // int id
    int id = (int)wxlua_getnumbertype(L, 3);
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call Insert
    wxMenuItem* returns = (wxMenuItem*)self->Insert(pos, id, item, helpString, kind);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_InsertCheckItem[] = { &wxluatype_wxMenu, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenu_InsertCheckItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_InsertCheckItem[1] = {{ wxLua_wxMenu_InsertCheckItem, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxMenu_InsertCheckItem }};
//     wxMenuItem* InsertCheckItem(size_t pos, int id, const wxString& item, const wxString& helpString = "")
static int LUACALL wxLua_wxMenu_InsertCheckItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString helpString = ""
    const wxString helpString = (argCount >= 5 ? wxlua_getwxStringtype(L, 5) : wxString(wxEmptyString));
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 4);
    // int id
    int id = (int)wxlua_getnumbertype(L, 3);
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call InsertCheckItem
    wxMenuItem* returns = (wxMenuItem*)self->InsertCheckItem(pos, id, item, helpString);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_InsertRadioItem[] = { &wxluatype_wxMenu, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenu_InsertRadioItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_InsertRadioItem[1] = {{ wxLua_wxMenu_InsertRadioItem, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxMenu_InsertRadioItem }};
//     wxMenuItem* InsertRadioItem(size_t pos, int id, const wxString&  item, const wxString& helpString = "")
static int LUACALL wxLua_wxMenu_InsertRadioItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString helpString = ""
    const wxString helpString = (argCount >= 5 ? wxlua_getwxStringtype(L, 5) : wxString(wxEmptyString));
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 4);
    // int id
    int id = (int)wxlua_getnumbertype(L, 3);
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call InsertRadioItem
    wxMenuItem* returns = (wxMenuItem*)self->InsertRadioItem(pos, id, item, helpString);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_InsertSeparator[] = { &wxluatype_wxMenu, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxMenu_InsertSeparator(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_InsertSeparator[1] = {{ wxLua_wxMenu_InsertSeparator, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_InsertSeparator }};
//     wxMenuItem* InsertSeparator(size_t pos)
static int LUACALL wxLua_wxMenu_InsertSeparator(lua_State *L)
{
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call InsertSeparator
    wxMenuItem* returns = (wxMenuItem*)self->InsertSeparator(pos);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_IsChecked[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenu_IsChecked(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_IsChecked[1] = {{ wxLua_wxMenu_IsChecked, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_IsChecked }};
//     bool IsChecked(int id) const
static int LUACALL wxLua_wxMenu_IsChecked(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call IsChecked
    bool returns = (self->IsChecked(id));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_IsEnabled[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenu_IsEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_IsEnabled[1] = {{ wxLua_wxMenu_IsEnabled, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_IsEnabled }};
//     bool IsEnabled(int id) const
static int LUACALL wxLua_wxMenu_IsEnabled(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call IsEnabled
    bool returns = (self->IsEnabled(id));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_Prepend1[] = { &wxluatype_wxMenu, &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenu_Prepend1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Prepend1[1] = {{ wxLua_wxMenu_Prepend1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_Prepend1 }};
//     wxMenuItem* Prepend(%ungc wxMenuItem *item)
static int LUACALL wxLua_wxMenu_Prepend1(lua_State *L)
{
    // wxMenuItem item
    wxMenuItem * item = (wxMenuItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenuItem);
    if (wxluaO_isgcobject(L, item)) wxluaO_undeletegcobject(L, item);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call Prepend
    wxMenuItem* returns = (wxMenuItem*)self->Prepend(item);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_Prepend[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxMenu_Prepend(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Prepend[1] = {{ wxLua_wxMenu_Prepend, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxMenu_Prepend }};
//     wxMenuItem* Prepend(int id, const wxString& item, const wxString& helpString = "", wxItemKind kind = wxITEM_NORMAL)
static int LUACALL wxLua_wxMenu_Prepend(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxItemKind kind = wxITEM_NORMAL
    wxItemKind kind = (argCount >= 5 ? (wxItemKind)wxlua_getenumtype(L, 5) : wxITEM_NORMAL);
    // const wxString helpString = ""
    const wxString helpString = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call Prepend
    wxMenuItem* returns = (wxMenuItem*)self->Prepend(id, item, helpString, kind);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_PrependCheckItem[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenu_PrependCheckItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_PrependCheckItem[1] = {{ wxLua_wxMenu_PrependCheckItem, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxMenu_PrependCheckItem }};
//     wxMenuItem* PrependCheckItem(int id, const wxString&  item, const wxString& helpString = "")
static int LUACALL wxLua_wxMenu_PrependCheckItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString helpString = ""
    const wxString helpString = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call PrependCheckItem
    wxMenuItem* returns = (wxMenuItem*)self->PrependCheckItem(id, item, helpString);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_PrependRadioItem[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenu_PrependRadioItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_PrependRadioItem[1] = {{ wxLua_wxMenu_PrependRadioItem, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxMenu_PrependRadioItem }};
//     wxMenuItem* PrependRadioItem(int id, const wxString&  item, const wxString& helpString = "")
static int LUACALL wxLua_wxMenu_PrependRadioItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString helpString = ""
    const wxString helpString = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call PrependRadioItem
    wxMenuItem* returns = (wxMenuItem*)self->PrependRadioItem(id, item, helpString);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_PrependSeparator[] = { &wxluatype_wxMenu, NULL };
static int LUACALL wxLua_wxMenu_PrependSeparator(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_PrependSeparator[1] = {{ wxLua_wxMenu_PrependSeparator, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenu_PrependSeparator }};
//     wxMenuItem* PrependSeparator()
static int LUACALL wxLua_wxMenu_PrependSeparator(lua_State *L)
{
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call PrependSeparator
    wxMenuItem* returns = (wxMenuItem*)self->PrependSeparator();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_Remove1[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenu_Remove1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Remove1[1] = {{ wxLua_wxMenu_Remove1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_Remove1 }};
//     %gc wxMenuItem* Remove(int id)
static int LUACALL wxLua_wxMenu_Remove1(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call Remove
    wxMenuItem* returns = (wxMenuItem*)self->Remove(id);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_Remove[] = { &wxluatype_wxMenu, &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenu_Remove(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Remove[1] = {{ wxLua_wxMenu_Remove, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_Remove }};
//     %gc wxMenuItem* Remove(wxMenuItem *item)
static int LUACALL wxLua_wxMenu_Remove(lua_State *L)
{
    // wxMenuItem item
    wxMenuItem * item = (wxMenuItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenuItem);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call Remove
    wxMenuItem* returns = (wxMenuItem*)self->Remove(item);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_SetHelpString[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenu_SetHelpString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_SetHelpString[1] = {{ wxLua_wxMenu_SetHelpString, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMenu_SetHelpString }};
//     void SetHelpString(int id, const wxString& helpString)
static int LUACALL wxLua_wxMenu_SetHelpString(lua_State *L)
{
    // const wxString helpString
    const wxString helpString = wxlua_getwxStringtype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call SetHelpString
    self->SetHelpString(id, helpString);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_SetLabel[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenu_SetLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_SetLabel[1] = {{ wxLua_wxMenu_SetLabel, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMenu_SetLabel }};
//     void SetLabel(int id, const wxString& label)
static int LUACALL wxLua_wxMenu_SetLabel(lua_State *L)
{
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call SetLabel
    self->SetLabel(id, label);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_SetTitle[] = { &wxluatype_wxMenu, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenu_SetTitle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_SetTitle[1] = {{ wxLua_wxMenu_SetTitle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_SetTitle }};
//     void SetTitle(const wxString& title)
static int LUACALL wxLua_wxMenu_SetTitle(lua_State *L)
{
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 2);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call SetTitle
    self->SetTitle(title);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_UpdateUI[] = { &wxluatype_wxMenu, &wxluatype_wxEvtHandler, NULL };
static int LUACALL wxLua_wxMenu_UpdateUI(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_UpdateUI[1] = {{ wxLua_wxMenu_UpdateUI, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxMenu_UpdateUI }};
//     void UpdateUI(wxEvtHandler* source = NULL) const
static int LUACALL wxLua_wxMenu_UpdateUI(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxEvtHandler source = NULL
    wxEvtHandler * source = (argCount >= 2 ? (wxEvtHandler *)wxluaT_getuserdatatype(L, 2, wxluatype_wxEvtHandler) : NULL);
    // get this
    wxMenu * self = (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu);
    // call UpdateUI
    self->UpdateUI(source);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_delete[] = { &wxluatype_wxMenu, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxMenu_delete }};

#define wxLua_wxMenu_constructor1 wxLua_wxCreateMenu_constructor
static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_constructor1[] = { &wxluatype_TTABLE, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenu_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_constructor1[1] = {{ wxLua_wxMenu_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 3, s_wxluatypeArray_wxLua_wxMenu_constructor1 }};
// %override wxLua_wxCreateMenu_constructor
// %constructor wxCreateMenu(int table, const wxString& title = "", long style = 0)
static int LUACALL wxLua_wxCreateMenu_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = 0
    long style = (argCount >= 3 ? (long)wxlua_getintegertype(L, 3) : 0);
    // const wxString& title = ""
    wxString title = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxT("")));
    // int table
    if (lua_istable(L, 1))
    {
        // call constructor
        wxMenu *returns = new wxMenu(title, style);

        int idx, count = luaL_getn(L, 1);

        for (idx = 1; idx <= count; ++idx)
        {
            lua_pushnumber(L, idx);
            lua_gettable(L, -2);

            if (lua_istable(L, -1))
            {
                lua_pushnumber(L, 1);
                lua_gettable(L, -2);
                if (lua_isnil(L, -1))
                {
                    returns->AppendSeparator();
                    lua_pop(L, 1);
                }
                else
                {
                    wxString helpText;
                    wxString menuText;
                    wxItemKind kind = wxITEM_NORMAL;

                    int iValue = (int)lua_tonumber(L, -1);
                    lua_pop(L, 1);

                    lua_pushnumber(L, 2);
                    lua_gettable(L, -2);
                    menuText = wxlua_getwxStringtype(L, -1);
                    lua_pop(L, 1);

                    lua_pushnumber(L, 3);
                    lua_gettable(L, -2);
                    if (lua_isstring(L, -1))
                        helpText = wxlua_getwxStringtype(L, -1);
                    lua_pop(L, 1);

                    lua_pushnumber(L, 4);
                    lua_gettable(L, -2);
                    if (lua_isnumber(L, -1))
                        kind = (wxItemKind)wxlua_getenumtype(L, -1);
                    lua_pop(L, 1);

                    returns->Append(iValue, menuText, helpText, kind);
                }
            }
            lua_pop(L, 1);
        }

        // push the constructed class pointer
        wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenu);
        // return the number of parameters
        return 1;
    }
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxMenu_constructor[] = { &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenu_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_constructor[1] = {{ wxLua_wxMenu_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxMenu_constructor }};
//     wxMenu(const wxString& title = "", long style = 0)
static int LUACALL wxLua_wxMenu_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = 0
    long style = (argCount >= 2 ? (long)wxlua_getnumbertype(L, 2) : 0);
    // const wxString title = ""
    const wxString title = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxMenu* returns = new wxMenu(title, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenu);

    return 1;
}




#if (wxLUA_USE_wxMenu && wxUSE_MENUS)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Append_overload[] =
{
    { wxLua_wxMenu_Append2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_Append2 },
    { wxLua_wxMenu_Append1, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxMenu_Append1 },
    { wxLua_wxMenu_Append, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxMenu_Append },
};
static int s_wxluafunc_wxLua_wxMenu_Append_overload_count = sizeof(s_wxluafunc_wxLua_wxMenu_Append_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Delete_overload[] =
{
    { wxLua_wxMenu_Delete1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_Delete1 },
    { wxLua_wxMenu_Delete, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_Delete },
};
static int s_wxluafunc_wxLua_wxMenu_Delete_overload_count = sizeof(s_wxluafunc_wxLua_wxMenu_Delete_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Destroy_overload[] =
{
    { wxLua_wxMenu_Destroy1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_Destroy1 },
    { wxLua_wxMenu_Destroy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_Destroy },
};
static int s_wxluafunc_wxLua_wxMenu_Destroy_overload_count = sizeof(s_wxluafunc_wxLua_wxMenu_Destroy_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_FindItem_overload[] =
{
    { wxLua_wxMenu_FindItem1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_FindItem1 },
    { wxLua_wxMenu_FindItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_FindItem },
};
static int s_wxluafunc_wxLua_wxMenu_FindItem_overload_count = sizeof(s_wxluafunc_wxLua_wxMenu_FindItem_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Insert_overload[] =
{
    { wxLua_wxMenu_Insert1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMenu_Insert1 },
    { wxLua_wxMenu_Insert, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxMenu_Insert },
};
static int s_wxluafunc_wxLua_wxMenu_Insert_overload_count = sizeof(s_wxluafunc_wxLua_wxMenu_Insert_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Prepend_overload[] =
{
    { wxLua_wxMenu_Prepend1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_Prepend1 },
    { wxLua_wxMenu_Prepend, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxMenu_Prepend },
};
static int s_wxluafunc_wxLua_wxMenu_Prepend_overload_count = sizeof(s_wxluafunc_wxLua_wxMenu_Prepend_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_Remove_overload[] =
{
    { wxLua_wxMenu_Remove1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_Remove1 },
    { wxLua_wxMenu_Remove, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenu_Remove },
};
static int s_wxluafunc_wxLua_wxMenu_Remove_overload_count = sizeof(s_wxluafunc_wxLua_wxMenu_Remove_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenu_constructor_overload[] =
{
    { wxLua_wxMenu_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 3, s_wxluatypeArray_wxLua_wxMenu_constructor1 },
    { wxLua_wxMenu_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxMenu_constructor },
};
static int s_wxluafunc_wxLua_wxMenu_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxMenu_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMenu_methods[] = {
#if (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { "Append", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_Append_overload, s_wxluafunc_wxLua_wxMenu_Append_overload_count, 0 },
#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS)

    { "AppendCheckItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_AppendCheckItem, 1, NULL },
    { "AppendRadioItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_AppendRadioItem, 1, NULL },
    { "AppendSeparator", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_AppendSeparator, 1, NULL },
    { "Break", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_Break, 1, NULL },
    { "Check", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_Check, 1, NULL },

#if (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { "Delete", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_Delete_overload, s_wxluafunc_wxLua_wxMenu_Delete_overload_count, 0 },
    { "Destroy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_Destroy_overload, s_wxluafunc_wxLua_wxMenu_Destroy_overload_count, 0 },
#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS)

    { "Enable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_Enable, 1, NULL },

#if (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { "FindItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_FindItem_overload, s_wxluafunc_wxLua_wxMenu_FindItem_overload_count, 0 },
#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS)

    { "FindItemByPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_FindItemByPosition, 1, NULL },
    { "GetHelpString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_GetHelpString, 1, NULL },
    { "GetLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_GetLabel, 1, NULL },
    { "GetMenuItemCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_GetMenuItemCount, 1, NULL },
    { "GetMenuItems", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_GetMenuItems, 1, NULL },
    { "GetTitle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_GetTitle, 1, NULL },

#if (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_Insert_overload, s_wxluafunc_wxLua_wxMenu_Insert_overload_count, 0 },
#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS)

    { "InsertCheckItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_InsertCheckItem, 1, NULL },
    { "InsertRadioItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_InsertRadioItem, 1, NULL },
    { "InsertSeparator", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_InsertSeparator, 1, NULL },
    { "IsChecked", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_IsChecked, 1, NULL },
    { "IsEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_IsEnabled, 1, NULL },

#if (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { "Prepend", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_Prepend_overload, s_wxluafunc_wxLua_wxMenu_Prepend_overload_count, 0 },
#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS)

    { "PrependCheckItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_PrependCheckItem, 1, NULL },
    { "PrependRadioItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_PrependRadioItem, 1, NULL },
    { "PrependSeparator", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_PrependSeparator, 1, NULL },

#if (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { "Remove", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_Remove_overload, s_wxluafunc_wxLua_wxMenu_Remove_overload_count, 0 },
#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS)

    { "SetHelpString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_SetHelpString, 1, NULL },
    { "SetLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_SetLabel, 1, NULL },
    { "SetTitle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_SetTitle, 1, NULL },
    { "UpdateUI", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenu_UpdateUI, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxMenu_delete, 1, NULL },

#if (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { "wxMenu", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMenu_constructor_overload, s_wxluafunc_wxLua_wxMenu_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS)

    { 0, 0, 0, 0 },
};

int wxMenu_methodCount = sizeof(wxMenu_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxMenu && wxUSE_MENUS


#if wxLUA_USE_wxMenu && wxUSE_MENUS
// ---------------------------------------------------------------------------
// Bind class wxMenuBar
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMenuBar'
int wxluatype_wxMenuBar = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_Append[] = { &wxluatype_wxMenuBar, &wxluatype_wxMenu, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenuBar_Append(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_Append[1] = {{ wxLua_wxMenuBar_Append, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMenuBar_Append }};
//     bool Append(%ungc wxMenu *menu, const wxString& title)
static int LUACALL wxLua_wxMenuBar_Append(lua_State *L)
{
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 3);
    // wxMenu menu
    wxMenu * menu = (wxMenu *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenu);
    if (wxluaO_isgcobject(L, menu)) wxluaO_undeletegcobject(L, menu);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call Append
    bool returns = (self->Append(menu, title));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_Check[] = { &wxluatype_wxMenuBar, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxMenuBar_Check(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_Check[1] = {{ wxLua_wxMenuBar_Check, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMenuBar_Check }};
//     void Check(int id, bool check)
static int LUACALL wxLua_wxMenuBar_Check(lua_State *L)
{
    // bool check
    bool check = wxlua_getbooleantype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call Check
    self->Check(id, check);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_Enable[] = { &wxluatype_wxMenuBar, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxMenuBar_Enable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_Enable[1] = {{ wxLua_wxMenuBar_Enable, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMenuBar_Enable }};
//     void Enable(int id, bool enable)
static int LUACALL wxLua_wxMenuBar_Enable(lua_State *L)
{
    // bool enable
    bool enable = wxlua_getbooleantype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call Enable
    self->Enable(id, enable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_EnableTop[] = { &wxluatype_wxMenuBar, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxMenuBar_EnableTop(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_EnableTop[1] = {{ wxLua_wxMenuBar_EnableTop, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMenuBar_EnableTop }};
//     void EnableTop(int pos, bool enable)
static int LUACALL wxLua_wxMenuBar_EnableTop(lua_State *L)
{
    // bool enable
    bool enable = wxlua_getbooleantype(L, 3);
    // int pos
    int pos = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call EnableTop
    self->EnableTop(pos, enable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_FindItem[] = { &wxluatype_wxMenuBar, &wxluatype_TNUMBER, &wxluatype_wxMenu, NULL };
static int LUACALL wxLua_wxMenuBar_FindItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_FindItem[1] = {{ wxLua_wxMenuBar_FindItem, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxMenuBar_FindItem }};
// %override wxLua_wxMenuBar_FindItem
//     wxMenuItem* FindItem(int id, wxMenu **menu = NULL) const
static int LUACALL wxLua_wxMenuBar_FindItem(lua_State *L)
{
    // int id
    int id = (int)wxlua_getintegertype(L, 2);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call FindItem
    wxMenu* foundMenu = NULL;
    wxMenuItem *returns = self->FindItem(id, &foundMenu);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);
    if (foundMenu != NULL)
    {
        wxluaT_pushuserdatatype(L, foundMenu, wxluatype_wxMenu);
        return 2;
    }

    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_FindMenu[] = { &wxluatype_wxMenuBar, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenuBar_FindMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_FindMenu[1] = {{ wxLua_wxMenuBar_FindMenu, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenuBar_FindMenu }};
//     int FindMenu(const wxString& title) const
static int LUACALL wxLua_wxMenuBar_FindMenu(lua_State *L)
{
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 2);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call FindMenu
    int returns = (self->FindMenu(title));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_FindMenuItem[] = { &wxluatype_wxMenuBar, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenuBar_FindMenuItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_FindMenuItem[1] = {{ wxLua_wxMenuBar_FindMenuItem, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMenuBar_FindMenuItem }};
//     int FindMenuItem(const wxString& menuString, const wxString& itemString) const
static int LUACALL wxLua_wxMenuBar_FindMenuItem(lua_State *L)
{
    // const wxString itemString
    const wxString itemString = wxlua_getwxStringtype(L, 3);
    // const wxString menuString
    const wxString menuString = wxlua_getwxStringtype(L, 2);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call FindMenuItem
    int returns = (self->FindMenuItem(menuString, itemString));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_GetHelpString[] = { &wxluatype_wxMenuBar, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenuBar_GetHelpString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_GetHelpString[1] = {{ wxLua_wxMenuBar_GetHelpString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenuBar_GetHelpString }};
//     wxString GetHelpString(int id) const
static int LUACALL wxLua_wxMenuBar_GetHelpString(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call GetHelpString
    wxString returns = (self->GetHelpString(id));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_GetLabel[] = { &wxluatype_wxMenuBar, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenuBar_GetLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_GetLabel[1] = {{ wxLua_wxMenuBar_GetLabel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenuBar_GetLabel }};
//     wxString GetLabel(int id) const
static int LUACALL wxLua_wxMenuBar_GetLabel(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call GetLabel
    wxString returns = (self->GetLabel(id));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_GetLabelTop[] = { &wxluatype_wxMenuBar, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenuBar_GetLabelTop(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_GetLabelTop[1] = {{ wxLua_wxMenuBar_GetLabelTop, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenuBar_GetLabelTop }};
//     wxString GetLabelTop(int pos) const
static int LUACALL wxLua_wxMenuBar_GetLabelTop(lua_State *L)
{
    // int pos
    int pos = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call GetLabelTop
    wxString returns = (self->GetLabelTop(pos));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_GetMenu[] = { &wxluatype_wxMenuBar, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenuBar_GetMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_GetMenu[1] = {{ wxLua_wxMenuBar_GetMenu, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenuBar_GetMenu }};
//     wxMenu* GetMenu(int menuIndex) const
static int LUACALL wxLua_wxMenuBar_GetMenu(lua_State *L)
{
    // int menuIndex
    int menuIndex = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call GetMenu
    wxMenu* returns = (wxMenu*)self->GetMenu(menuIndex);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenu);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_GetMenuCount[] = { &wxluatype_wxMenuBar, NULL };
static int LUACALL wxLua_wxMenuBar_GetMenuCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_GetMenuCount[1] = {{ wxLua_wxMenuBar_GetMenuCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuBar_GetMenuCount }};
//     int GetMenuCount() const
static int LUACALL wxLua_wxMenuBar_GetMenuCount(lua_State *L)
{
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call GetMenuCount
    int returns = (self->GetMenuCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_Insert[] = { &wxluatype_wxMenuBar, &wxluatype_TINTEGER, &wxluatype_wxMenu, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenuBar_Insert(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_Insert[1] = {{ wxLua_wxMenuBar_Insert, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxMenuBar_Insert }};
//     bool Insert(size_t pos, %ungc wxMenu *menu, const wxString& title)
static int LUACALL wxLua_wxMenuBar_Insert(lua_State *L)
{
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 4);
    // wxMenu menu
    wxMenu * menu = (wxMenu *)wxluaT_getuserdatatype(L, 3, wxluatype_wxMenu);
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    if (wxluaO_isgcobject(L, menu)) wxluaO_undeletegcobject(L, menu);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call Insert
    bool returns = (self->Insert(pos, menu, title));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_IsChecked[] = { &wxluatype_wxMenuBar, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenuBar_IsChecked(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_IsChecked[1] = {{ wxLua_wxMenuBar_IsChecked, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenuBar_IsChecked }};
//     bool IsChecked(int id) const
static int LUACALL wxLua_wxMenuBar_IsChecked(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call IsChecked
    bool returns = (self->IsChecked(id));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_IsEnabled[] = { &wxluatype_wxMenuBar, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenuBar_IsEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_IsEnabled[1] = {{ wxLua_wxMenuBar_IsEnabled, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenuBar_IsEnabled }};
//     bool IsEnabled(int id) const
static int LUACALL wxLua_wxMenuBar_IsEnabled(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call IsEnabled
    bool returns = (self->IsEnabled(id));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_Refresh[] = { &wxluatype_wxMenuBar, NULL };
static int LUACALL wxLua_wxMenuBar_Refresh(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_Refresh[1] = {{ wxLua_wxMenuBar_Refresh, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuBar_Refresh }};
//     void Refresh()
static int LUACALL wxLua_wxMenuBar_Refresh(lua_State *L)
{
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call Refresh
    self->Refresh();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_Remove[] = { &wxluatype_wxMenuBar, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxMenuBar_Remove(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_Remove[1] = {{ wxLua_wxMenuBar_Remove, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenuBar_Remove }};
//     %gc wxMenu* Remove(size_t pos)
static int LUACALL wxLua_wxMenuBar_Remove(lua_State *L)
{
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call Remove
    wxMenu* returns = (wxMenu*)self->Remove(pos);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenu);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_Replace[] = { &wxluatype_wxMenuBar, &wxluatype_TINTEGER, &wxluatype_wxMenu, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenuBar_Replace(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_Replace[1] = {{ wxLua_wxMenuBar_Replace, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxMenuBar_Replace }};
//     %gc wxMenu* Replace(size_t pos, %ungc wxMenu *menu, const wxString& title)
static int LUACALL wxLua_wxMenuBar_Replace(lua_State *L)
{
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 4);
    // wxMenu menu
    wxMenu * menu = (wxMenu *)wxluaT_getuserdatatype(L, 3, wxluatype_wxMenu);
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    if (wxluaO_isgcobject(L, menu)) wxluaO_undeletegcobject(L, menu);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call Replace
    wxMenu* returns = (wxMenu*)self->Replace(pos, menu, title);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenu);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_SetHelpString[] = { &wxluatype_wxMenuBar, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenuBar_SetHelpString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_SetHelpString[1] = {{ wxLua_wxMenuBar_SetHelpString, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMenuBar_SetHelpString }};
//     void SetHelpString(int id, const wxString& helpString)
static int LUACALL wxLua_wxMenuBar_SetHelpString(lua_State *L)
{
    // const wxString helpString
    const wxString helpString = wxlua_getwxStringtype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call SetHelpString
    self->SetHelpString(id, helpString);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_SetLabel[] = { &wxluatype_wxMenuBar, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenuBar_SetLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_SetLabel[1] = {{ wxLua_wxMenuBar_SetLabel, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMenuBar_SetLabel }};
//     void SetLabel(int id, const wxString& label)
static int LUACALL wxLua_wxMenuBar_SetLabel(lua_State *L)
{
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call SetLabel
    self->SetLabel(id, label);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_SetLabelTop[] = { &wxluatype_wxMenuBar, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenuBar_SetLabelTop(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_SetLabelTop[1] = {{ wxLua_wxMenuBar_SetLabelTop, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMenuBar_SetLabelTop }};
//     void SetLabelTop(int pos, const wxString& label)
static int LUACALL wxLua_wxMenuBar_SetLabelTop(lua_State *L)
{
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // int pos
    int pos = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call SetLabelTop
    self->SetLabelTop(pos, label);

    return 0;
}


#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_UpdateMenus[] = { &wxluatype_wxMenuBar, NULL };
static int LUACALL wxLua_wxMenuBar_UpdateMenus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_UpdateMenus[1] = {{ wxLua_wxMenuBar_UpdateMenus, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuBar_UpdateMenus }};
//     %wxchkver_2_8 virtual void UpdateMenus()
static int LUACALL wxLua_wxMenuBar_UpdateMenus(lua_State *L)
{
    // get this
    wxMenuBar * self = (wxMenuBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuBar);
    // call UpdateMenus
    self->UpdateMenus();

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuBar_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMenuBar_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuBar_constructor[1] = {{ wxLua_wxMenuBar_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxMenuBar_constructor }};
//     wxMenuBar(long style = 0)
static int LUACALL wxLua_wxMenuBar_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = 0
    long style = (argCount >= 1 ? (long)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxMenuBar* returns = new wxMenuBar(style);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuBar);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMenuBar_methods[] = {
    { "Append", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_Append, 1, NULL },
    { "Check", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_Check, 1, NULL },
    { "Enable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_Enable, 1, NULL },
    { "EnableTop", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_EnableTop, 1, NULL },
    { "FindItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_FindItem, 1, NULL },
    { "FindMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_FindMenu, 1, NULL },
    { "FindMenuItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_FindMenuItem, 1, NULL },
    { "GetHelpString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_GetHelpString, 1, NULL },
    { "GetLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_GetLabel, 1, NULL },
    { "GetLabelTop", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_GetLabelTop, 1, NULL },
    { "GetMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_GetMenu, 1, NULL },
    { "GetMenuCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_GetMenuCount, 1, NULL },
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_Insert, 1, NULL },
    { "IsChecked", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_IsChecked, 1, NULL },
    { "IsEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_IsEnabled, 1, NULL },
    { "Refresh", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_Refresh, 1, NULL },
    { "Remove", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_Remove, 1, NULL },
    { "Replace", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_Replace, 1, NULL },
    { "SetHelpString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_SetHelpString, 1, NULL },
    { "SetLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_SetLabel, 1, NULL },
    { "SetLabelTop", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_SetLabelTop, 1, NULL },

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { "UpdateMenus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuBar_UpdateMenus, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

    { "wxMenuBar", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMenuBar_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxMenuBar_methodCount = sizeof(wxMenuBar_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxMenu && wxUSE_MENUS


#if wxLUA_USE_wxMenu && wxUSE_MENUS
// ---------------------------------------------------------------------------
// Bind class wxMenuItem
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMenuItem'
int wxluatype_wxMenuItem = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_Check[] = { &wxluatype_wxMenuItem, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxMenuItem_Check(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_Check[1] = {{ wxLua_wxMenuItem_Check, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenuItem_Check }};
//     void Check(bool check)
static int LUACALL wxLua_wxMenuItem_Check(lua_State *L)
{
    // bool check
    bool check = wxlua_getbooleantype(L, 2);
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call Check
    self->Check(check);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_Enable[] = { &wxluatype_wxMenuItem, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxMenuItem_Enable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_Enable[1] = {{ wxLua_wxMenuItem_Enable, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenuItem_Enable }};
//     void Enable(bool enable)
static int LUACALL wxLua_wxMenuItem_Enable(lua_State *L)
{
    // bool enable
    bool enable = wxlua_getbooleantype(L, 2);
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call Enable
    self->Enable(enable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_GetHelp[] = { &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenuItem_GetHelp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_GetHelp[1] = {{ wxLua_wxMenuItem_GetHelp, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_GetHelp }};
//     wxString GetHelp() const
static int LUACALL wxLua_wxMenuItem_GetHelp(lua_State *L)
{
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call GetHelp
    wxString returns = (self->GetHelp());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_GetId[] = { &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenuItem_GetId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_GetId[1] = {{ wxLua_wxMenuItem_GetId, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_GetId }};
//     int GetId() const
static int LUACALL wxLua_wxMenuItem_GetId(lua_State *L)
{
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call GetId
    int returns = (self->GetId());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_GetItemLabel[] = { &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenuItem_GetItemLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_GetItemLabel[1] = {{ wxLua_wxMenuItem_GetItemLabel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_GetItemLabel }};
//         wxString GetItemLabel() const
static int LUACALL wxLua_wxMenuItem_GetItemLabel(lua_State *L)
{
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call GetItemLabel
    wxString returns = (self->GetItemLabel());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_GetItemLabelText[] = { &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenuItem_GetItemLabelText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_GetItemLabelText[1] = {{ wxLua_wxMenuItem_GetItemLabelText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_GetItemLabelText }};
//         wxString GetItemLabelText() const 
static int LUACALL wxLua_wxMenuItem_GetItemLabelText(lua_State *L)
{
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call GetItemLabelText
    wxString returns = (self->GetItemLabelText());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxCHECK_VERSION(2,8,0))

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_GetKind[] = { &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenuItem_GetKind(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_GetKind[1] = {{ wxLua_wxMenuItem_GetKind, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_GetKind }};
//     wxItemKind GetKind() const
static int LUACALL wxLua_wxMenuItem_GetKind(lua_State *L)
{
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call GetKind
    wxItemKind returns = (self->GetKind());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_GetLabel[] = { &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenuItem_GetLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_GetLabel[1] = {{ wxLua_wxMenuItem_GetLabel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_GetLabel }};
//     wxString GetLabel() const
static int LUACALL wxLua_wxMenuItem_GetLabel(lua_State *L)
{
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call GetLabel
    wxString returns = (self->GetLabel());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_GetLabelFromText[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenuItem_GetLabelFromText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_GetLabelFromText[1] = {{ wxLua_wxMenuItem_GetLabelFromText, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_GetLabelFromText }};
//     static wxString GetLabelFromText(const wxString& text)
static int LUACALL wxLua_wxMenuItem_GetLabelFromText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 1);
    // call GetLabelFromText
    wxString returns = (wxMenuItem::GetLabelFromText(text));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_GetLabelText[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenuItem_GetLabelText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_GetLabelText[1] = {{ wxLua_wxMenuItem_GetLabelText, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_GetLabelText }};
//         static wxString GetLabelText(const wxString& label)
static int LUACALL wxLua_wxMenuItem_GetLabelText(lua_State *L)
{
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 1);
    // call GetLabelText
    wxString returns = (wxMenuItem::GetLabelText(label));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxCHECK_VERSION(2,8,0))

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_GetMenu[] = { &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenuItem_GetMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_GetMenu[1] = {{ wxLua_wxMenuItem_GetMenu, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_GetMenu }};
//     wxMenu* GetMenu() const
static int LUACALL wxLua_wxMenuItem_GetMenu(lua_State *L)
{
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call GetMenu
    wxMenu* returns = (wxMenu*)self->GetMenu();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenu);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_GetSubMenu[] = { &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenuItem_GetSubMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_GetSubMenu[1] = {{ wxLua_wxMenuItem_GetSubMenu, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_GetSubMenu }};
//     wxMenu* GetSubMenu() const
static int LUACALL wxLua_wxMenuItem_GetSubMenu(lua_State *L)
{
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call GetSubMenu
    wxMenu* returns = (wxMenu*)self->GetSubMenu();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenu);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_GetText[] = { &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenuItem_GetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_GetText[1] = {{ wxLua_wxMenuItem_GetText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_GetText }};
//     wxString GetText() const
static int LUACALL wxLua_wxMenuItem_GetText(lua_State *L)
{
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call GetText
    wxString returns = (self->GetText());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_IsCheckable[] = { &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenuItem_IsCheckable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_IsCheckable[1] = {{ wxLua_wxMenuItem_IsCheckable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_IsCheckable }};
//     bool IsCheckable() const
static int LUACALL wxLua_wxMenuItem_IsCheckable(lua_State *L)
{
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call IsCheckable
    bool returns = (self->IsCheckable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_IsChecked[] = { &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenuItem_IsChecked(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_IsChecked[1] = {{ wxLua_wxMenuItem_IsChecked, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_IsChecked }};
//     bool IsChecked() const
static int LUACALL wxLua_wxMenuItem_IsChecked(lua_State *L)
{
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call IsChecked
    bool returns = (self->IsChecked());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_IsEnabled[] = { &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenuItem_IsEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_IsEnabled[1] = {{ wxLua_wxMenuItem_IsEnabled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_IsEnabled }};
//     bool IsEnabled() const
static int LUACALL wxLua_wxMenuItem_IsEnabled(lua_State *L)
{
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call IsEnabled
    bool returns = (self->IsEnabled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_IsSeparator[] = { &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenuItem_IsSeparator(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_IsSeparator[1] = {{ wxLua_wxMenuItem_IsSeparator, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_IsSeparator }};
//     bool IsSeparator() const
static int LUACALL wxLua_wxMenuItem_IsSeparator(lua_State *L)
{
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call IsSeparator
    bool returns = (self->IsSeparator());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_IsSubMenu[] = { &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxMenuItem_IsSubMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_IsSubMenu[1] = {{ wxLua_wxMenuItem_IsSubMenu, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_IsSubMenu }};
//     bool IsSubMenu() const
static int LUACALL wxLua_wxMenuItem_IsSubMenu(lua_State *L)
{
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call IsSubMenu
    bool returns = (self->IsSubMenu());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_SetBitmap[] = { &wxluatype_wxMenuItem, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxMenuItem_SetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_SetBitmap[1] = {{ wxLua_wxMenuItem_SetBitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenuItem_SetBitmap }};
//     void SetBitmap(const wxBitmap& bmp)
static int LUACALL wxLua_wxMenuItem_SetBitmap(lua_State *L)
{
    // const wxBitmap bmp
    const wxBitmap * bmp = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call SetBitmap
    self->SetBitmap(*bmp);

    return 0;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_SetHelp[] = { &wxluatype_wxMenuItem, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenuItem_SetHelp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_SetHelp[1] = {{ wxLua_wxMenuItem_SetHelp, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenuItem_SetHelp }};
//     void SetHelp(const wxString& helpString) const
static int LUACALL wxLua_wxMenuItem_SetHelp(lua_State *L)
{
    // const wxString helpString
    const wxString helpString = wxlua_getwxStringtype(L, 2);
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call SetHelp
    self->SetHelp(helpString);

    return 0;
}


#if (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_SetItemLabel[] = { &wxluatype_wxMenuItem, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenuItem_SetItemLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_SetItemLabel[1] = {{ wxLua_wxMenuItem_SetItemLabel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenuItem_SetItemLabel }};
//         void SetItemLabel(const wxString& str)
static int LUACALL wxLua_wxMenuItem_SetItemLabel(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 2);
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call SetItemLabel
    self->SetItemLabel(str);

    return 0;
}

#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxCHECK_VERSION(2,8,0))

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_SetSubMenu[] = { &wxluatype_wxMenuItem, &wxluatype_wxMenu, NULL };
static int LUACALL wxLua_wxMenuItem_SetSubMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_SetSubMenu[1] = {{ wxLua_wxMenuItem_SetSubMenu, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenuItem_SetSubMenu }};
//     void SetSubMenu(wxMenu* menu)
static int LUACALL wxLua_wxMenuItem_SetSubMenu(lua_State *L)
{
    // wxMenu menu
    wxMenu * menu = (wxMenu *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenu);
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call SetSubMenu
    self->SetSubMenu(menu);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_SetText[] = { &wxluatype_wxMenuItem, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMenuItem_SetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_SetText[1] = {{ wxLua_wxMenuItem_SetText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenuItem_SetText }};
//     void SetText(const wxString& text)
static int LUACALL wxLua_wxMenuItem_SetText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call SetText
    self->SetText(text);

    return 0;
}


#if ((defined(__WXMSW__)) && (wxLUA_USE_wxMenu && wxUSE_MENUS)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_SetTextColour[] = { &wxluatype_wxMenuItem, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxMenuItem_SetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_SetTextColour[1] = {{ wxLua_wxMenuItem_SetTextColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMenuItem_SetTextColour }};
//     %win void SetTextColour(const wxColour& colour) const
static int LUACALL wxLua_wxMenuItem_SetTextColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxMenuItem * self = (wxMenuItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuItem);
    // call SetTextColour
    self->SetTextColour(*colour);

    return 0;
}

#endif // ((defined(__WXMSW__)) && (wxLUA_USE_wxMenu && wxUSE_MENUS)) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_delete[] = { &wxluatype_wxMenuItem, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxMenuItem_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuItem_constructor[] = { &wxluatype_wxMenu, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_wxMenu, NULL };
static int LUACALL wxLua_wxMenuItem_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuItem_constructor[1] = {{ wxLua_wxMenuItem_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 6, s_wxluatypeArray_wxLua_wxMenuItem_constructor }};
// %override wxLua_wxMenuItem_constructor
// wxMenuItem(wxMenu *parentMenu = NULL, int id = wxID_SEPARATOR, const wxString& text = wxEmptyString, const wxString& help = wxEmptyString, wxItemKind = 0, wxMenu *subMenu = NULL)
static int LUACALL wxLua_wxMenuItem_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxMenu *subMenu = NULL
    wxMenu *subMenu = (argCount >= 6 ? (wxMenu *)wxluaT_getuserdatatype(L, 6, wxluatype_wxMenu) : NULL);
    // bool isCheckable = false
    // This used to be a bool instead of a wxItemKind
    wxItemKind itemkind = (wxItemKind)(argCount >= 5 ? wxlua_getenumtype(L, 5) : wxITEM_NORMAL);
    // const wxString& help = wxEmptyString
    wxString help = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // const wxString& text = wxEmptyString
    wxString text = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // int id = wxID_SEPARATOR
    int id = (argCount >= 2 ? (int)wxlua_getintegertype(L, 2) : wxID_SEPARATOR);
    // wxMenu *parentMenu = NULL
    wxMenu *parentMenu = (argCount >= 1 ? (wxMenu *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenu) : NULL);
    // call constructor
    wxMenuItem *returns = new wxMenuItem(parentMenu, id, text, help, itemkind, subMenu);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);
    // return the number of parameters
    return 1;
}





// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMenuItem_methods[] = {
    { "Check", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_Check, 1, NULL },
    { "Enable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_Enable, 1, NULL },
    { "GetHelp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_GetHelp, 1, NULL },
    { "GetId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_GetId, 1, NULL },

#if (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxCHECK_VERSION(2,8,0))
    { "GetItemLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_GetItemLabel, 1, NULL },
    { "GetItemLabelText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_GetItemLabelText, 1, NULL },
#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxCHECK_VERSION(2,8,0))

    { "GetKind", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_GetKind, 1, NULL },
    { "GetLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_GetLabel, 1, NULL },
    { "GetLabelFromText", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxMenuItem_GetLabelFromText, 1, NULL },

#if (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxCHECK_VERSION(2,8,0))
    { "GetLabelText", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxMenuItem_GetLabelText, 1, NULL },
#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxCHECK_VERSION(2,8,0))

    { "GetMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_GetMenu, 1, NULL },
    { "GetSubMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_GetSubMenu, 1, NULL },
    { "GetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_GetText, 1, NULL },
    { "IsCheckable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_IsCheckable, 1, NULL },
    { "IsChecked", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_IsChecked, 1, NULL },
    { "IsEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_IsEnabled, 1, NULL },
    { "IsSeparator", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_IsSeparator, 1, NULL },
    { "IsSubMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_IsSubMenu, 1, NULL },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { "SetBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_SetBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

    { "SetHelp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_SetHelp, 1, NULL },

#if (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxCHECK_VERSION(2,8,0))
    { "SetItemLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_SetItemLabel, 1, NULL },
#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxCHECK_VERSION(2,8,0))

    { "SetSubMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_SetSubMenu, 1, NULL },
    { "SetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_SetText, 1, NULL },

#if ((defined(__WXMSW__)) && (wxLUA_USE_wxMenu && wxUSE_MENUS)) && (wxLUA_USE_wxColourPenBrush)
    { "SetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuItem_SetTextColour, 1, NULL },
#endif // ((defined(__WXMSW__)) && (wxLUA_USE_wxMenu && wxUSE_MENUS)) && (wxLUA_USE_wxColourPenBrush)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxMenuItem_delete, 1, NULL },
    { "wxMenuItem", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMenuItem_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxMenuItem_methodCount = sizeof(wxMenuItem_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxMenu && wxUSE_MENUS


#if wxLUA_USE_wxMenu && wxUSE_MENUS
// ---------------------------------------------------------------------------
// Bind class wxMenuItemList
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMenuItemList'
int wxluatype_wxMenuItemList = WXLUA_TUNKNOWN;



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMenuItemList_methods[] = {
    { 0, 0, 0, 0 },
};

int wxMenuItemList_methodCount = sizeof(wxMenuItemList_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxMenu && wxUSE_MENUS


#if wxLUA_USE_wxMenu && wxUSE_MENUS
// ---------------------------------------------------------------------------
// Bind class wxMenuEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMenuEvent'
int wxluatype_wxMenuEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuEvent_GetMenu[] = { &wxluatype_wxMenuEvent, NULL };
static int LUACALL wxLua_wxMenuEvent_GetMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuEvent_GetMenu[1] = {{ wxLua_wxMenuEvent_GetMenu, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuEvent_GetMenu }};
//     wxMenu* GetMenu() const
static int LUACALL wxLua_wxMenuEvent_GetMenu(lua_State *L)
{
    // get this
    wxMenuEvent * self = (wxMenuEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuEvent);
    // call GetMenu
    wxMenu* returns = (wxMenu*)self->GetMenu();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenu);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuEvent_GetMenuId[] = { &wxluatype_wxMenuEvent, NULL };
static int LUACALL wxLua_wxMenuEvent_GetMenuId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuEvent_GetMenuId[1] = {{ wxLua_wxMenuEvent_GetMenuId, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuEvent_GetMenuId }};
//     int GetMenuId() const
static int LUACALL wxLua_wxMenuEvent_GetMenuId(lua_State *L)
{
    // get this
    wxMenuEvent * self = (wxMenuEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuEvent);
    // call GetMenuId
    int returns = (self->GetMenuId());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuEvent_IsPopup[] = { &wxluatype_wxMenuEvent, NULL };
static int LUACALL wxLua_wxMenuEvent_IsPopup(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuEvent_IsPopup[1] = {{ wxLua_wxMenuEvent_IsPopup, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMenuEvent_IsPopup }};
//     bool IsPopup() const
static int LUACALL wxLua_wxMenuEvent_IsPopup(lua_State *L)
{
    // get this
    wxMenuEvent * self = (wxMenuEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMenuEvent);
    // call IsPopup
    bool returns = (self->IsPopup());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuEvent_delete[] = { &wxluatype_wxMenuEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxMenuEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxMenuEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxMenu, NULL };
static int LUACALL wxLua_wxMenuEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMenuEvent_constructor[1] = {{ wxLua_wxMenuEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxMenuEvent_constructor }};
//     wxMenuEvent(wxEventType type = wxEVT_NULL, int id = 0, wxMenu* menu = NULL)
static int LUACALL wxLua_wxMenuEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxMenu menu = NULL
    wxMenu * menu = (argCount >= 3 ? (wxMenu *)wxluaT_getuserdatatype(L, 3, wxluatype_wxMenu) : NULL);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType type = wxEVT_NULL
    wxEventType type = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxMenuEvent* returns = new wxMenuEvent(type, id, menu);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuEvent);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMenuEvent_methods[] = {
    { "GetMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuEvent_GetMenu, 1, NULL },
    { "GetMenuId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuEvent_GetMenuId, 1, NULL },
    { "IsPopup", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMenuEvent_IsPopup, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxMenuEvent_delete, 1, NULL },
    { "wxMenuEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMenuEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxMenuEvent_methodCount = sizeof(wxMenuEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxMenu && wxUSE_MENUS


#if wxLUA_USE_wxToolbar
// ---------------------------------------------------------------------------
// Bind class wxToolBarBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxToolBarBase'
int wxluatype_wxToolBarBase = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_AddCheckTool[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxBitmap, &wxluatype_wxBitmap, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxToolBarBase_AddCheckTool(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_AddCheckTool[1] = {{ wxLua_wxToolBarBase_AddCheckTool, WXLUAMETHOD_METHOD, 4, 8, s_wxluatypeArray_wxLua_wxToolBarBase_AddCheckTool }};
//     wxToolBarToolBase *AddCheckTool(int toolid, const wxString& label, const wxBitmap& bitmap, const wxBitmap& bmpDisabled = wxNullBitmap, const wxString& shortHelp = "", const wxString& longHelp = "", wxObject *data = NULL)
static int LUACALL wxLua_wxToolBarBase_AddCheckTool(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject data = NULL
    wxObject * data = (argCount >= 8 ? (wxObject *)wxluaT_getuserdatatype(L, 8, wxluatype_wxObject) : NULL);
    // const wxString longHelp = ""
    const wxString longHelp = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxEmptyString));
    // const wxString shortHelp = ""
    const wxString shortHelp = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxEmptyString));
    // const wxBitmap bmpDisabled = wxNullBitmap
    const wxBitmap * bmpDisabled = (argCount >= 5 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 5, wxluatype_wxBitmap) : &wxNullBitmap);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 4, wxluatype_wxBitmap);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // int toolid
    int toolid = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call AddCheckTool
    wxToolBarToolBase* returns = (wxToolBarToolBase*)self->AddCheckTool(toolid, label, *bitmap, *bmpDisabled, shortHelp, longHelp, data);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarToolBase);

    return 1;
}

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_AddControl[] = { &wxluatype_wxToolBarBase, &wxluatype_wxControl, NULL };
static int LUACALL wxLua_wxToolBarBase_AddControl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_AddControl[1] = {{ wxLua_wxToolBarBase_AddControl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_AddControl }};
//     wxToolBarToolBase* AddControl(wxControl *control)
static int LUACALL wxLua_wxToolBarBase_AddControl(lua_State *L)
{
    // wxControl control
    wxControl * control = (wxControl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxControl);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call AddControl
    wxToolBarToolBase* returns = (wxToolBarToolBase*)self->AddControl(control);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarToolBase);

    return 1;
}


#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_AddRadioTool[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxBitmap, &wxluatype_wxBitmap, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxToolBarBase_AddRadioTool(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_AddRadioTool[1] = {{ wxLua_wxToolBarBase_AddRadioTool, WXLUAMETHOD_METHOD, 4, 8, s_wxluatypeArray_wxLua_wxToolBarBase_AddRadioTool }};
//     wxToolBarToolBase *AddRadioTool(int toolid, const wxString& label, const wxBitmap& bitmap, const wxBitmap& bmpDisabled = wxNullBitmap, const wxString& shortHelp = "", const wxString& longHelp = "", wxObject *data = NULL)
static int LUACALL wxLua_wxToolBarBase_AddRadioTool(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject data = NULL
    wxObject * data = (argCount >= 8 ? (wxObject *)wxluaT_getuserdatatype(L, 8, wxluatype_wxObject) : NULL);
    // const wxString longHelp = ""
    const wxString longHelp = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxEmptyString));
    // const wxString shortHelp = ""
    const wxString shortHelp = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxEmptyString));
    // const wxBitmap bmpDisabled = wxNullBitmap
    const wxBitmap * bmpDisabled = (argCount >= 5 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 5, wxluatype_wxBitmap) : &wxNullBitmap);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 4, wxluatype_wxBitmap);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // int toolid
    int toolid = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call AddRadioTool
    wxToolBarToolBase* returns = (wxToolBarToolBase*)self->AddRadioTool(toolid, label, *bitmap, *bmpDisabled, shortHelp, longHelp, data);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarToolBase);

    return 1;
}

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_AddSeparator[] = { &wxluatype_wxToolBarBase, NULL };
static int LUACALL wxLua_wxToolBarBase_AddSeparator(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_AddSeparator[1] = {{ wxLua_wxToolBarBase_AddSeparator, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarBase_AddSeparator }};
//     wxToolBarToolBase* AddSeparator()
static int LUACALL wxLua_wxToolBarBase_AddSeparator(lua_State *L)
{
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call AddSeparator
    wxToolBarToolBase* returns = (wxToolBarToolBase*)self->AddSeparator();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarToolBase);

    return 1;
}


#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxMenu && wxUSE_MENUS)) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_AddTool1[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxBitmap, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxToolBarBase_AddTool1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_AddTool1[1] = {{ wxLua_wxToolBarBase_AddTool1, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxToolBarBase_AddTool1 }};
//     wxToolBarToolBase* AddTool(int toolId, const wxString& label, const wxBitmap& bitmap1, const wxString& shortHelpString = "", wxItemKind kind = wxITEM_NORMAL)
static int LUACALL wxLua_wxToolBarBase_AddTool1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxItemKind kind = wxITEM_NORMAL
    wxItemKind kind = (argCount >= 6 ? (wxItemKind)wxlua_getenumtype(L, 6) : wxITEM_NORMAL);
    // const wxString shortHelpString = ""
    const wxString shortHelpString = (argCount >= 5 ? wxlua_getwxStringtype(L, 5) : wxString(wxEmptyString));
    // const wxBitmap bitmap1
    const wxBitmap * bitmap1 = (const wxBitmap *)wxluaT_getuserdatatype(L, 4, wxluatype_wxBitmap);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // int toolId
    int toolId = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call AddTool
    wxToolBarToolBase* returns = (wxToolBarToolBase*)self->AddTool(toolId, label, *bitmap1, shortHelpString, kind);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarToolBase);

    return 1;
}

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxMenu && wxUSE_MENUS)) && (wxLUA_USE_wxToolbar)

#if (((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_AddTool[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxBitmap, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxToolBarBase_AddTool(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_AddTool[1] = {{ wxLua_wxToolBarBase_AddTool, WXLUAMETHOD_METHOD, 4, 9, s_wxluatypeArray_wxLua_wxToolBarBase_AddTool }};
//     wxToolBarToolBase* AddTool(int toolId, const wxString& label, const wxBitmap& bitmap1, const wxBitmap& bitmap2 = wxNullBitmap, wxItemKind kind = wxITEM_NORMAL, const wxString& shortHelpString = "", const wxString& longHelpString = "", wxObject* clientData = NULL)
static int LUACALL wxLua_wxToolBarBase_AddTool(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject clientData = NULL
    wxObject * clientData = (argCount >= 9 ? (wxObject *)wxluaT_getuserdatatype(L, 9, wxluatype_wxObject) : NULL);
    // const wxString longHelpString = ""
    const wxString longHelpString = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxEmptyString));
    // const wxString shortHelpString = ""
    const wxString shortHelpString = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxEmptyString));
    // wxItemKind kind = wxITEM_NORMAL
    wxItemKind kind = (argCount >= 6 ? (wxItemKind)wxlua_getenumtype(L, 6) : wxITEM_NORMAL);
    // const wxBitmap bitmap2 = wxNullBitmap
    const wxBitmap * bitmap2 = (argCount >= 5 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 5, wxluatype_wxBitmap) : &wxNullBitmap);
    // const wxBitmap bitmap1
    const wxBitmap * bitmap1 = (const wxBitmap *)wxluaT_getuserdatatype(L, 4, wxluatype_wxBitmap);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // int toolId
    int toolId = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call AddTool
    wxToolBarToolBase* returns = (wxToolBarToolBase*)self->AddTool(toolId, label, *bitmap1, *bitmap2, kind, shortHelpString, longHelpString, clientData);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarToolBase);

    return 1;
}

#endif // (((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_ClearTools[] = { &wxluatype_wxToolBarBase, NULL };
static int LUACALL wxLua_wxToolBarBase_ClearTools(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_ClearTools[1] = {{ wxLua_wxToolBarBase_ClearTools, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarBase_ClearTools }};
//     void ClearTools()
static int LUACALL wxLua_wxToolBarBase_ClearTools(lua_State *L)
{
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call ClearTools
    self->ClearTools();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_DeleteTool[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolBarBase_DeleteTool(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_DeleteTool[1] = {{ wxLua_wxToolBarBase_DeleteTool, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_DeleteTool }};
//     bool DeleteTool(int toolId)
static int LUACALL wxLua_wxToolBarBase_DeleteTool(lua_State *L)
{
    // int toolId
    int toolId = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call DeleteTool
    bool returns = (self->DeleteTool(toolId));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_DeleteToolByPos[] = { &wxluatype_wxToolBarBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxToolBarBase_DeleteToolByPos(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_DeleteToolByPos[1] = {{ wxLua_wxToolBarBase_DeleteToolByPos, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_DeleteToolByPos }};
//     bool DeleteToolByPos(size_t pos)
static int LUACALL wxLua_wxToolBarBase_DeleteToolByPos(lua_State *L)
{
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call DeleteToolByPos
    bool returns = (self->DeleteToolByPos(pos));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_EnableTool[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxToolBarBase_EnableTool(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_EnableTool[1] = {{ wxLua_wxToolBarBase_EnableTool, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxToolBarBase_EnableTool }};
//     void EnableTool(int toolId, const bool enable)
static int LUACALL wxLua_wxToolBarBase_EnableTool(lua_State *L)
{
    // const bool enable
    const bool enable = wxlua_getbooleantype(L, 3);
    // int toolId
    int toolId = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call EnableTool
    self->EnableTool(toolId, enable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_FindById[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolBarBase_FindById(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_FindById[1] = {{ wxLua_wxToolBarBase_FindById, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_FindById }};
//     wxToolBarToolBase* FindById(int id)
static int LUACALL wxLua_wxToolBarBase_FindById(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call FindById
    wxToolBarToolBase* returns = (wxToolBarToolBase*)self->FindById(id);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarToolBase);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_FindControl[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolBarBase_FindControl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_FindControl[1] = {{ wxLua_wxToolBarBase_FindControl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_FindControl }};
//     wxControl* FindControl(int id)
static int LUACALL wxLua_wxToolBarBase_FindControl(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call FindControl
    wxControl* returns = (wxControl*)self->FindControl(id);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxControl);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_FindToolForPosition[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolBarBase_FindToolForPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_FindToolForPosition[1] = {{ wxLua_wxToolBarBase_FindToolForPosition, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxToolBarBase_FindToolForPosition }};
//     wxToolBarToolBase *FindToolForPosition(wxCoord x, wxCoord y) const
static int LUACALL wxLua_wxToolBarBase_FindToolForPosition(lua_State *L)
{
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call FindToolForPosition
    wxToolBarToolBase* returns = (wxToolBarToolBase*)self->FindToolForPosition(x, y);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarToolBase);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_GetMaxCols[] = { &wxluatype_wxToolBarBase, NULL };
static int LUACALL wxLua_wxToolBarBase_GetMaxCols(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_GetMaxCols[1] = {{ wxLua_wxToolBarBase_GetMaxCols, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarBase_GetMaxCols }};
//     int     GetMaxCols()
static int LUACALL wxLua_wxToolBarBase_GetMaxCols(lua_State *L)
{
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call GetMaxCols
    int returns = (self->GetMaxCols());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_GetMaxRows[] = { &wxluatype_wxToolBarBase, NULL };
static int LUACALL wxLua_wxToolBarBase_GetMaxRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_GetMaxRows[1] = {{ wxLua_wxToolBarBase_GetMaxRows, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarBase_GetMaxRows }};
//     int     GetMaxRows()
static int LUACALL wxLua_wxToolBarBase_GetMaxRows(lua_State *L)
{
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call GetMaxRows
    int returns = (self->GetMaxRows());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_GetToolBitmapSize[] = { &wxluatype_wxToolBarBase, NULL };
static int LUACALL wxLua_wxToolBarBase_GetToolBitmapSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_GetToolBitmapSize[1] = {{ wxLua_wxToolBarBase_GetToolBitmapSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarBase_GetToolBitmapSize }};
//     wxSize  GetToolBitmapSize()
static int LUACALL wxLua_wxToolBarBase_GetToolBitmapSize(lua_State *L)
{
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call GetToolBitmapSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetToolBitmapSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)

#if (wxLUA_USE_wxObject) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_GetToolClientData[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolBarBase_GetToolClientData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_GetToolClientData[1] = {{ wxLua_wxToolBarBase_GetToolClientData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_GetToolClientData }};
//     wxObject* GetToolClientData(int toolId) const
static int LUACALL wxLua_wxToolBarBase_GetToolClientData(lua_State *L)
{
    // int toolId
    int toolId = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call GetToolClientData
    wxObject* returns = (wxObject*)self->GetToolClientData(toolId);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxObject);

    return 1;
}

#endif // (wxLUA_USE_wxObject) && (wxLUA_USE_wxToolbar)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_GetToolEnabled[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolBarBase_GetToolEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_GetToolEnabled[1] = {{ wxLua_wxToolBarBase_GetToolEnabled, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_GetToolEnabled }};
//     bool    GetToolEnabled(int toolId) const
static int LUACALL wxLua_wxToolBarBase_GetToolEnabled(lua_State *L)
{
    // int toolId
    int toolId = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call GetToolEnabled
    bool returns = (self->GetToolEnabled(toolId));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_GetToolLongHelp[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolBarBase_GetToolLongHelp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_GetToolLongHelp[1] = {{ wxLua_wxToolBarBase_GetToolLongHelp, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_GetToolLongHelp }};
//     wxString GetToolLongHelp(int toolId) const
static int LUACALL wxLua_wxToolBarBase_GetToolLongHelp(lua_State *L)
{
    // int toolId
    int toolId = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call GetToolLongHelp
    wxString returns = (self->GetToolLongHelp(toolId));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_GetToolMargins[] = { &wxluatype_wxToolBarBase, NULL };
static int LUACALL wxLua_wxToolBarBase_GetToolMargins(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_GetToolMargins[1] = {{ wxLua_wxToolBarBase_GetToolMargins, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarBase_GetToolMargins }};
//     wxSize  GetToolMargins() // GetMargins is deprecated
static int LUACALL wxLua_wxToolBarBase_GetToolMargins(lua_State *L)
{
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call GetToolMargins
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetToolMargins());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_GetToolPacking[] = { &wxluatype_wxToolBarBase, NULL };
static int LUACALL wxLua_wxToolBarBase_GetToolPacking(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_GetToolPacking[1] = {{ wxLua_wxToolBarBase_GetToolPacking, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarBase_GetToolPacking }};
//     int     GetToolPacking()
static int LUACALL wxLua_wxToolBarBase_GetToolPacking(lua_State *L)
{
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call GetToolPacking
    int returns = (self->GetToolPacking());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_GetToolPos[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolBarBase_GetToolPos(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_GetToolPos[1] = {{ wxLua_wxToolBarBase_GetToolPos, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_GetToolPos }};
//     int     GetToolPos(int toolId) const
static int LUACALL wxLua_wxToolBarBase_GetToolPos(lua_State *L)
{
    // int toolId
    int toolId = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call GetToolPos
    int returns = (self->GetToolPos(toolId));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_GetToolSeparation[] = { &wxluatype_wxToolBarBase, NULL };
static int LUACALL wxLua_wxToolBarBase_GetToolSeparation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_GetToolSeparation[1] = {{ wxLua_wxToolBarBase_GetToolSeparation, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarBase_GetToolSeparation }};
//     int     GetToolSeparation() const
static int LUACALL wxLua_wxToolBarBase_GetToolSeparation(lua_State *L)
{
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call GetToolSeparation
    int returns = (self->GetToolSeparation());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_GetToolShortHelp[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolBarBase_GetToolShortHelp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_GetToolShortHelp[1] = {{ wxLua_wxToolBarBase_GetToolShortHelp, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_GetToolShortHelp }};
//     wxString GetToolShortHelp(int toolId) const
static int LUACALL wxLua_wxToolBarBase_GetToolShortHelp(lua_State *L)
{
    // int toolId
    int toolId = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call GetToolShortHelp
    wxString returns = (self->GetToolShortHelp(toolId));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_GetToolSize[] = { &wxluatype_wxToolBarBase, NULL };
static int LUACALL wxLua_wxToolBarBase_GetToolSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_GetToolSize[1] = {{ wxLua_wxToolBarBase_GetToolSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarBase_GetToolSize }};
//     wxSize  GetToolSize()
static int LUACALL wxLua_wxToolBarBase_GetToolSize(lua_State *L)
{
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call GetToolSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetToolSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_GetToolState[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolBarBase_GetToolState(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_GetToolState[1] = {{ wxLua_wxToolBarBase_GetToolState, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_GetToolState }};
//     bool    GetToolState(int id)
static int LUACALL wxLua_wxToolBarBase_GetToolState(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call GetToolState
    bool returns = (self->GetToolState(id));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_InsertControl[] = { &wxluatype_wxToolBarBase, &wxluatype_TINTEGER, &wxluatype_wxControl, NULL };
static int LUACALL wxLua_wxToolBarBase_InsertControl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_InsertControl[1] = {{ wxLua_wxToolBarBase_InsertControl, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxToolBarBase_InsertControl }};
//     wxToolBarToolBase* InsertControl(size_t pos, wxControl *control)
static int LUACALL wxLua_wxToolBarBase_InsertControl(lua_State *L)
{
    // wxControl control
    wxControl * control = (wxControl *)wxluaT_getuserdatatype(L, 3, wxluatype_wxControl);
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call InsertControl
    wxToolBarToolBase* returns = (wxToolBarToolBase*)self->InsertControl(pos, control);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarToolBase);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_InsertSeparator[] = { &wxluatype_wxToolBarBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxToolBarBase_InsertSeparator(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_InsertSeparator[1] = {{ wxLua_wxToolBarBase_InsertSeparator, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_InsertSeparator }};
//     wxToolBarToolBase* InsertSeparator(size_t pos)
static int LUACALL wxLua_wxToolBarBase_InsertSeparator(lua_State *L)
{
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call InsertSeparator
    wxToolBarToolBase* returns = (wxToolBarToolBase*)self->InsertSeparator(pos);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarToolBase);

    return 1;
}


#if (((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_InsertTool1[] = { &wxluatype_wxToolBarBase, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxBitmap, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxToolBarBase_InsertTool1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_InsertTool1[1] = {{ wxLua_wxToolBarBase_InsertTool1, WXLUAMETHOD_METHOD, 5, 10, s_wxluatypeArray_wxLua_wxToolBarBase_InsertTool1 }};
//     wxToolBarToolBase* InsertTool(size_t pos, int toolid, const wxString& label, const wxBitmap& bitmap, const wxBitmap& bmpDisabled = wxNullBitmap, wxItemKind kind = wxITEM_NORMAL, const wxString& shortHelp = "", const wxString& longHelp = "", wxObject *clientData = NULL)
static int LUACALL wxLua_wxToolBarBase_InsertTool1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject clientData = NULL
    wxObject * clientData = (argCount >= 10 ? (wxObject *)wxluaT_getuserdatatype(L, 10, wxluatype_wxObject) : NULL);
    // const wxString longHelp = ""
    const wxString longHelp = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxEmptyString));
    // const wxString shortHelp = ""
    const wxString shortHelp = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxEmptyString));
    // wxItemKind kind = wxITEM_NORMAL
    wxItemKind kind = (argCount >= 7 ? (wxItemKind)wxlua_getenumtype(L, 7) : wxITEM_NORMAL);
    // const wxBitmap bmpDisabled = wxNullBitmap
    const wxBitmap * bmpDisabled = (argCount >= 6 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 6, wxluatype_wxBitmap) : &wxNullBitmap);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 5, wxluatype_wxBitmap);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 4);
    // int toolid
    int toolid = (int)wxlua_getnumbertype(L, 3);
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call InsertTool
    wxToolBarToolBase* returns = (wxToolBarToolBase*)self->InsertTool(pos, toolid, label, *bitmap, *bmpDisabled, kind, shortHelp, longHelp, clientData);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarToolBase);

    return 1;
}

#endif // (((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_InsertTool[] = { &wxluatype_wxToolBarBase, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_wxBitmap, &wxluatype_wxBitmap, &wxluatype_TBOOLEAN, &wxluatype_wxObject, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxToolBarBase_InsertTool(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_InsertTool[1] = {{ wxLua_wxToolBarBase_InsertTool, WXLUAMETHOD_METHOD, 4, 9, s_wxluatypeArray_wxLua_wxToolBarBase_InsertTool }};
//     wxToolBarToolBase* InsertTool(size_t pos, int id, const wxBitmap& bitmap, const wxBitmap& pushedBitmap = wxNullBitmap, bool isToggle = false, wxObject *clientData = NULL, const wxString& shortHelpString = "", const wxString& longHelpString = "")
static int LUACALL wxLua_wxToolBarBase_InsertTool(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString longHelpString = ""
    const wxString longHelpString = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxEmptyString));
    // const wxString shortHelpString = ""
    const wxString shortHelpString = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxEmptyString));
    // wxObject clientData = NULL
    wxObject * clientData = (argCount >= 7 ? (wxObject *)wxluaT_getuserdatatype(L, 7, wxluatype_wxObject) : NULL);
    // bool isToggle = false
    bool isToggle = (argCount >= 6 ? wxlua_getbooleantype(L, 6) : false);
    // const wxBitmap pushedBitmap = wxNullBitmap
    const wxBitmap * pushedBitmap = (argCount >= 5 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 5, wxluatype_wxBitmap) : &wxNullBitmap);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 4, wxluatype_wxBitmap);
    // int id
    int id = (int)wxlua_getnumbertype(L, 3);
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call InsertTool
    wxToolBarToolBase* returns = (wxToolBarToolBase*)self->InsertTool(pos, id, *bitmap, *pushedBitmap, isToggle, clientData, shortHelpString, longHelpString);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarToolBase);

    return 1;
}

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_Realize[] = { &wxluatype_wxToolBarBase, NULL };
static int LUACALL wxLua_wxToolBarBase_Realize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_Realize[1] = {{ wxLua_wxToolBarBase_Realize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarBase_Realize }};
//     bool    Realize()
static int LUACALL wxLua_wxToolBarBase_Realize(lua_State *L)
{
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call Realize
    bool returns = (self->Realize());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_RemoveTool[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolBarBase_RemoveTool(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_RemoveTool[1] = {{ wxLua_wxToolBarBase_RemoveTool, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_RemoveTool }};
//     wxToolBarToolBase* RemoveTool(int id)
static int LUACALL wxLua_wxToolBarBase_RemoveTool(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call RemoveTool
    wxToolBarToolBase* returns = (wxToolBarToolBase*)self->RemoveTool(id);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarToolBase);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_SetMargins1[] = { &wxluatype_wxToolBarBase, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxToolBarBase_SetMargins1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_SetMargins1[1] = {{ wxLua_wxToolBarBase_SetMargins1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_SetMargins1 }};
//     void    SetMargins(const wxSize& size)
static int LUACALL wxLua_wxToolBarBase_SetMargins1(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call SetMargins
    self->SetMargins(*size);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_SetMargins[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolBarBase_SetMargins(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_SetMargins[1] = {{ wxLua_wxToolBarBase_SetMargins, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxToolBarBase_SetMargins }};
//     void    SetMargins(int x, int y)
static int LUACALL wxLua_wxToolBarBase_SetMargins(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call SetMargins
    self->SetMargins(x, y);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_SetMaxRowsCols[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolBarBase_SetMaxRowsCols(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_SetMaxRowsCols[1] = {{ wxLua_wxToolBarBase_SetMaxRowsCols, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxToolBarBase_SetMaxRowsCols }};
//     void    SetMaxRowsCols(int rows, int cols)
static int LUACALL wxLua_wxToolBarBase_SetMaxRowsCols(lua_State *L)
{
    // int cols
    int cols = (int)wxlua_getnumbertype(L, 3);
    // int rows
    int rows = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call SetMaxRowsCols
    self->SetMaxRowsCols(rows, cols);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_SetRows[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolBarBase_SetRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_SetRows[1] = {{ wxLua_wxToolBarBase_SetRows, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_SetRows }};
//     void    SetRows(int nRows)
static int LUACALL wxLua_wxToolBarBase_SetRows(lua_State *L)
{
    // int nRows
    int nRows = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call SetRows
    self->SetRows(nRows);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_SetToggle[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxToolBarBase_SetToggle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_SetToggle[1] = {{ wxLua_wxToolBarBase_SetToggle, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxToolBarBase_SetToggle }};
//     void    SetToggle(int id, bool toggle)
static int LUACALL wxLua_wxToolBarBase_SetToggle(lua_State *L)
{
    // bool toggle
    bool toggle = wxlua_getbooleantype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call SetToggle
    self->SetToggle(id, toggle);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_SetToolBitmapSize[] = { &wxluatype_wxToolBarBase, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxToolBarBase_SetToolBitmapSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_SetToolBitmapSize[1] = {{ wxLua_wxToolBarBase_SetToolBitmapSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_SetToolBitmapSize }};
//     void    SetToolBitmapSize(const wxSize& size)
static int LUACALL wxLua_wxToolBarBase_SetToolBitmapSize(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call SetToolBitmapSize
    self->SetToolBitmapSize(*size);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)

#if (wxLUA_USE_wxObject) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_SetToolClientData[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxToolBarBase_SetToolClientData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_SetToolClientData[1] = {{ wxLua_wxToolBarBase_SetToolClientData, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxToolBarBase_SetToolClientData }};
//     void    SetToolClientData(int id, wxObject* clientData)
static int LUACALL wxLua_wxToolBarBase_SetToolClientData(lua_State *L)
{
    // wxObject clientData
    wxObject * clientData = (wxObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxObject);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call SetToolClientData
    self->SetToolClientData(id, clientData);

    return 0;
}

#endif // (wxLUA_USE_wxObject) && (wxLUA_USE_wxToolbar)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_SetToolLongHelp[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxToolBarBase_SetToolLongHelp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_SetToolLongHelp[1] = {{ wxLua_wxToolBarBase_SetToolLongHelp, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxToolBarBase_SetToolLongHelp }};
//     void    SetToolLongHelp(int toolId, const wxString& helpString)
static int LUACALL wxLua_wxToolBarBase_SetToolLongHelp(lua_State *L)
{
    // const wxString helpString
    const wxString helpString = wxlua_getwxStringtype(L, 3);
    // int toolId
    int toolId = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call SetToolLongHelp
    self->SetToolLongHelp(toolId, helpString);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_SetToolPacking[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolBarBase_SetToolPacking(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_SetToolPacking[1] = {{ wxLua_wxToolBarBase_SetToolPacking, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_SetToolPacking }};
//     void    SetToolPacking(int packing)
static int LUACALL wxLua_wxToolBarBase_SetToolPacking(lua_State *L)
{
    // int packing
    int packing = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call SetToolPacking
    self->SetToolPacking(packing);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_SetToolSeparation[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolBarBase_SetToolSeparation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_SetToolSeparation[1] = {{ wxLua_wxToolBarBase_SetToolSeparation, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_SetToolSeparation }};
//     void    SetToolSeparation(int separation)
static int LUACALL wxLua_wxToolBarBase_SetToolSeparation(lua_State *L)
{
    // int separation
    int separation = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call SetToolSeparation
    self->SetToolSeparation(separation);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_SetToolShortHelp[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxToolBarBase_SetToolShortHelp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_SetToolShortHelp[1] = {{ wxLua_wxToolBarBase_SetToolShortHelp, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxToolBarBase_SetToolShortHelp }};
//     void    SetToolShortHelp(int id, const wxString& helpString)
static int LUACALL wxLua_wxToolBarBase_SetToolShortHelp(lua_State *L)
{
    // const wxString helpString
    const wxString helpString = wxlua_getwxStringtype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call SetToolShortHelp
    self->SetToolShortHelp(id, helpString);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarBase_ToggleTool[] = { &wxluatype_wxToolBarBase, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxToolBarBase_ToggleTool(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_ToggleTool[1] = {{ wxLua_wxToolBarBase_ToggleTool, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxToolBarBase_ToggleTool }};
//     void    ToggleTool(int toolId, const bool toggle)
static int LUACALL wxLua_wxToolBarBase_ToggleTool(lua_State *L)
{
    // const bool toggle
    const bool toggle = wxlua_getbooleantype(L, 3);
    // int toolId
    int toolId = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxToolBarBase * self = (wxToolBarBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarBase);
    // call ToggleTool
    self->ToggleTool(toolId, toggle);

    return 0;
}




#if (((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxMenu && wxUSE_MENUS)) && (wxLUA_USE_wxToolbar))||((((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_AddTool_overload[] =
{

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxMenu && wxUSE_MENUS)) && (wxLUA_USE_wxToolbar)
    { wxLua_wxToolBarBase_AddTool1, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxToolBarBase_AddTool1 },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxMenu && wxUSE_MENUS)) && (wxLUA_USE_wxToolbar)

#if (((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)
    { wxLua_wxToolBarBase_AddTool, WXLUAMETHOD_METHOD, 4, 9, s_wxluatypeArray_wxLua_wxToolBarBase_AddTool },
#endif // (((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)
};
static int s_wxluafunc_wxLua_wxToolBarBase_AddTool_overload_count = sizeof(s_wxluafunc_wxLua_wxToolBarBase_AddTool_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxMenu && wxUSE_MENUS)) && (wxLUA_USE_wxToolbar))||((((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar))

#if ((((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar))||(((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_InsertTool_overload[] =
{

#if (((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)
    { wxLua_wxToolBarBase_InsertTool1, WXLUAMETHOD_METHOD, 5, 10, s_wxluatypeArray_wxLua_wxToolBarBase_InsertTool1 },
#endif // (((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)
    { wxLua_wxToolBarBase_InsertTool, WXLUAMETHOD_METHOD, 4, 9, s_wxluatypeArray_wxLua_wxToolBarBase_InsertTool },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)
};
static int s_wxluafunc_wxLua_wxToolBarBase_InsertTool_overload_count = sizeof(s_wxluafunc_wxLua_wxToolBarBase_InsertTool_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar))||(((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar))

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar))||(wxLUA_USE_wxToolbar)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarBase_SetMargins_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)
    { wxLua_wxToolBarBase_SetMargins1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarBase_SetMargins1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)
    { wxLua_wxToolBarBase_SetMargins, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxToolBarBase_SetMargins },
};
static int s_wxluafunc_wxLua_wxToolBarBase_SetMargins_overload_count = sizeof(s_wxluafunc_wxLua_wxToolBarBase_SetMargins_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar))||(wxLUA_USE_wxToolbar)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxToolBarBase_methods[] = {
#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)
    { "AddCheckTool", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_AddCheckTool, 1, NULL },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)

    { "AddControl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_AddControl, 1, NULL },

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)
    { "AddRadioTool", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_AddRadioTool, 1, NULL },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar)

    { "AddSeparator", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_AddSeparator, 1, NULL },

#if (((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxMenu && wxUSE_MENUS)) && (wxLUA_USE_wxToolbar))||((((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar))
    { "AddTool", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_AddTool_overload, s_wxluafunc_wxLua_wxToolBarBase_AddTool_overload_count, 0 },
#endif // (((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxMenu && wxUSE_MENUS)) && (wxLUA_USE_wxToolbar))||((((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar))

    { "ClearTools", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_ClearTools, 1, NULL },
    { "DeleteTool", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_DeleteTool, 1, NULL },
    { "DeleteToolByPos", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_DeleteToolByPos, 1, NULL },
    { "EnableTool", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_EnableTool, 1, NULL },
    { "FindById", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_FindById, 1, NULL },
    { "FindControl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_FindControl, 1, NULL },
    { "FindToolForPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_FindToolForPosition, 1, NULL },
    { "GetMaxCols", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_GetMaxCols, 1, NULL },
    { "GetMaxRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_GetMaxRows, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)
    { "GetToolBitmapSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_GetToolBitmapSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)

#if (wxLUA_USE_wxObject) && (wxLUA_USE_wxToolbar)
    { "GetToolClientData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_GetToolClientData, 1, NULL },
#endif // (wxLUA_USE_wxObject) && (wxLUA_USE_wxToolbar)

    { "GetToolEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_GetToolEnabled, 1, NULL },
    { "GetToolLongHelp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_GetToolLongHelp, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)
    { "GetToolMargins", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_GetToolMargins, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)

    { "GetToolPacking", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_GetToolPacking, 1, NULL },
    { "GetToolPos", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_GetToolPos, 1, NULL },
    { "GetToolSeparation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_GetToolSeparation, 1, NULL },
    { "GetToolShortHelp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_GetToolShortHelp, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)
    { "GetToolSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_GetToolSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)

    { "GetToolState", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_GetToolState, 1, NULL },
    { "InsertControl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_InsertControl, 1, NULL },
    { "InsertSeparator", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_InsertSeparator, 1, NULL },

#if ((((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar))||(((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar))
    { "InsertTool", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_InsertTool_overload, s_wxluafunc_wxLua_wxToolBarBase_InsertTool_overload_count, 0 },
#endif // ((((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar))||(((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxObject)) && (wxLUA_USE_wxToolbar))

    { "Realize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_Realize, 1, NULL },
    { "RemoveTool", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_RemoveTool, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar))||(wxLUA_USE_wxToolbar)
    { "SetMargins", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_SetMargins_overload, s_wxluafunc_wxLua_wxToolBarBase_SetMargins_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar))||(wxLUA_USE_wxToolbar)

    { "SetMaxRowsCols", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_SetMaxRowsCols, 1, NULL },
    { "SetRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_SetRows, 1, NULL },
    { "SetToggle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_SetToggle, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)
    { "SetToolBitmapSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_SetToolBitmapSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)

#if (wxLUA_USE_wxObject) && (wxLUA_USE_wxToolbar)
    { "SetToolClientData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_SetToolClientData, 1, NULL },
#endif // (wxLUA_USE_wxObject) && (wxLUA_USE_wxToolbar)

    { "SetToolLongHelp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_SetToolLongHelp, 1, NULL },
    { "SetToolPacking", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_SetToolPacking, 1, NULL },
    { "SetToolSeparation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_SetToolSeparation, 1, NULL },
    { "SetToolShortHelp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_SetToolShortHelp, 1, NULL },
    { "ToggleTool", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarBase_ToggleTool, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxToolBarBase_methodCount = sizeof(wxToolBarBase_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxToolbar


#if wxLUA_USE_wxToolbar
// ---------------------------------------------------------------------------
// Bind class wxToolBar
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxToolBar'
int wxluatype_wxToolBar = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBar_Create[] = { &wxluatype_wxToolBar, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxToolBar_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBar_Create[1] = {{ wxLua_wxToolBar_Create, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxToolBar_Create }};
//     bool Create(wxWindow *parent,wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxNO_BORDER | wxTB_HORIZONTAL, const wxString &name = "wxToolBar")
static int LUACALL wxLua_wxToolBar_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxToolBar"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxToolBar")));
    // long style = wxNO_BORDER | wxTB_HORIZONTAL
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxNO_BORDER | wxTB_HORIZONTAL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxToolBar * self = (wxToolBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBar);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBar_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxToolBar_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBar_constructor1[1] = {{ wxLua_wxToolBar_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxToolBar_constructor1 }};
//     wxToolBar(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxNO_BORDER | wxTB_HORIZONTAL, const wxString &name = "wxToolBar")
static int LUACALL wxLua_wxToolBar_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxToolBar"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxToolBar")));
    // long style = wxNO_BORDER | wxTB_HORIZONTAL
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxNO_BORDER | wxTB_HORIZONTAL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxToolBar* returns = new wxToolBar(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBar);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)

static int LUACALL wxLua_wxToolBar_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBar_constructor[1] = {{ wxLua_wxToolBar_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxToolBar()
static int LUACALL wxLua_wxToolBar_constructor(lua_State *L)
{
    // call constructor
    wxToolBar* returns = new wxToolBar();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBar);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar))||(wxLUA_USE_wxToolbar)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBar_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)
    { wxLua_wxToolBar_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxToolBar_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)
    { wxLua_wxToolBar_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxToolBar_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxToolBar_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar))||(wxLUA_USE_wxToolbar)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxToolBar_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBar_Create, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar)

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar))||(wxLUA_USE_wxToolbar)
    { "wxToolBar", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxToolBar_constructor_overload, s_wxluafunc_wxLua_wxToolBar_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxToolbar))||(wxLUA_USE_wxToolbar)

    { 0, 0, 0, 0 },
};

int wxToolBar_methodCount = sizeof(wxToolBar_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxToolbar


#if (wxLUA_USE_wxToolbar) && (!wxCHECK_VERSION(2,6,0))
// ---------------------------------------------------------------------------
// Bind class wxToolBarSimple
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxToolBarSimple'
int wxluatype_wxToolBarSimple = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxToolbar) && (!wxCHECK_VERSION(2,6,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarSimple_Create[] = { &wxluatype_wxToolBarSimple, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxToolBarSimple_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarSimple_Create[1] = {{ wxLua_wxToolBarSimple_Create, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxToolBarSimple_Create }};
//     bool Create(wxWindow *parent,wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxNO_BORDER | wxTB_HORIZONTAL, const wxString &name = wxToolBarNameStr)
static int LUACALL wxLua_wxToolBarSimple_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = wxToolBarNameStr
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxToolBarNameStr));
    // long style = wxNO_BORDER | wxTB_HORIZONTAL
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxNO_BORDER | wxTB_HORIZONTAL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxToolBarSimple * self = (wxToolBarSimple *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarSimple);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarSimple_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxToolBarSimple_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarSimple_constructor1[1] = {{ wxLua_wxToolBarSimple_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxToolBarSimple_constructor1 }};
//     wxToolBarSimple(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxNO_BORDER | wxTB_HORIZONTAL, const wxString &name = wxToolBarNameStr)
static int LUACALL wxLua_wxToolBarSimple_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = wxToolBarNameStr
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxToolBarNameStr));
    // long style = wxNO_BORDER | wxTB_HORIZONTAL
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxNO_BORDER | wxTB_HORIZONTAL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxToolBarSimple* returns = new wxToolBarSimple(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarSimple);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxToolbar) && (!wxCHECK_VERSION(2,6,0)))

static int LUACALL wxLua_wxToolBarSimple_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarSimple_constructor[1] = {{ wxLua_wxToolBarSimple_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxToolBarSimple()
static int LUACALL wxLua_wxToolBarSimple_constructor(lua_State *L)
{
    // call constructor
    wxToolBarSimple* returns = new wxToolBarSimple();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarSimple);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxToolbar) && (!wxCHECK_VERSION(2,6,0))))||((wxLUA_USE_wxToolbar) && (!wxCHECK_VERSION(2,6,0)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarSimple_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxToolbar) && (!wxCHECK_VERSION(2,6,0)))
    { wxLua_wxToolBarSimple_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxToolBarSimple_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxToolbar) && (!wxCHECK_VERSION(2,6,0)))
    { wxLua_wxToolBarSimple_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxToolBarSimple_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxToolBarSimple_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxToolbar) && (!wxCHECK_VERSION(2,6,0))))||((wxLUA_USE_wxToolbar) && (!wxCHECK_VERSION(2,6,0)))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxToolBarSimple_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxToolbar) && (!wxCHECK_VERSION(2,6,0)))
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarSimple_Create, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxToolbar) && (!wxCHECK_VERSION(2,6,0)))

#if ((wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxToolbar) && (!wxCHECK_VERSION(2,6,0))))||((wxLUA_USE_wxToolbar) && (!wxCHECK_VERSION(2,6,0)))
    { "wxToolBarSimple", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxToolBarSimple_constructor_overload, s_wxluafunc_wxLua_wxToolBarSimple_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxToolbar) && (!wxCHECK_VERSION(2,6,0))))||((wxLUA_USE_wxToolbar) && (!wxCHECK_VERSION(2,6,0)))

    { 0, 0, 0, 0 },
};

int wxToolBarSimple_methodCount = sizeof(wxToolBarSimple_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxToolbar) && (!wxCHECK_VERSION(2,6,0))


#if wxLUA_USE_wxToolbar
// ---------------------------------------------------------------------------
// Bind class wxToolBarToolBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxToolBarToolBase'
int wxluatype_wxToolBarToolBase = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_Attach[] = { &wxluatype_wxToolBarToolBase, &wxluatype_wxToolBarBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_Attach(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_Attach[1] = {{ wxLua_wxToolBarToolBase_Attach, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarToolBase_Attach }};
//     void    Attach(wxToolBarBase *tbar)
static int LUACALL wxLua_wxToolBarToolBase_Attach(lua_State *L)
{
    // wxToolBarBase tbar
    wxToolBarBase * tbar = (wxToolBarBase *)wxluaT_getuserdatatype(L, 2, wxluatype_wxToolBarBase);
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call Attach
    self->Attach(tbar);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_CanBeToggled[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_CanBeToggled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_CanBeToggled[1] = {{ wxLua_wxToolBarToolBase_CanBeToggled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_CanBeToggled }};
//     bool    CanBeToggled()
static int LUACALL wxLua_wxToolBarToolBase_CanBeToggled(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call CanBeToggled
    bool returns = (self->CanBeToggled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_Detach[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_Detach(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_Detach[1] = {{ wxLua_wxToolBarToolBase_Detach, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_Detach }};
//     void    Detach()
static int LUACALL wxLua_wxToolBarToolBase_Detach(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call Detach
    self->Detach();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_Enable[] = { &wxluatype_wxToolBarToolBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxToolBarToolBase_Enable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_Enable[1] = {{ wxLua_wxToolBarToolBase_Enable, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarToolBase_Enable }};
//     bool    Enable(bool enable)
static int LUACALL wxLua_wxToolBarToolBase_Enable(lua_State *L)
{
    // bool enable
    bool enable = wxlua_getbooleantype(L, 2);
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call Enable
    bool returns = (self->Enable(enable));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_GetBitmap[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_GetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_GetBitmap[1] = {{ wxLua_wxToolBarToolBase_GetBitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_GetBitmap }};
//     wxBitmap GetBitmap()
static int LUACALL wxLua_wxToolBarToolBase_GetBitmap(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call GetBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetBitmap());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)

#if (wxLUA_USE_wxObject) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_GetClientData[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_GetClientData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_GetClientData[1] = {{ wxLua_wxToolBarToolBase_GetClientData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_GetClientData }};
//     wxObject *GetClientData()
static int LUACALL wxLua_wxToolBarToolBase_GetClientData(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call GetClientData
    wxObject* returns = (wxObject*)self->GetClientData();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxObject);

    return 1;
}

#endif // (wxLUA_USE_wxObject) && (wxLUA_USE_wxToolbar)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_GetControl[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_GetControl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_GetControl[1] = {{ wxLua_wxToolBarToolBase_GetControl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_GetControl }};
//     wxControl *GetControl()
static int LUACALL wxLua_wxToolBarToolBase_GetControl(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call GetControl
    wxControl* returns = (wxControl*)self->GetControl();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxControl);

    return 1;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_GetDisabledBitmap[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_GetDisabledBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_GetDisabledBitmap[1] = {{ wxLua_wxToolBarToolBase_GetDisabledBitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_GetDisabledBitmap }};
//     wxBitmap GetDisabledBitmap()
static int LUACALL wxLua_wxToolBarToolBase_GetDisabledBitmap(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call GetDisabledBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetDisabledBitmap());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_GetId[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_GetId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_GetId[1] = {{ wxLua_wxToolBarToolBase_GetId, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_GetId }};
//     int     GetId()
static int LUACALL wxLua_wxToolBarToolBase_GetId(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call GetId
    int returns = (self->GetId());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_GetKind[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_GetKind(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_GetKind[1] = {{ wxLua_wxToolBarToolBase_GetKind, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_GetKind }};
//     wxItemKind GetKind() const
static int LUACALL wxLua_wxToolBarToolBase_GetKind(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call GetKind
    wxItemKind returns = (self->GetKind());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxToolbar)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_GetLabel[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_GetLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_GetLabel[1] = {{ wxLua_wxToolBarToolBase_GetLabel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_GetLabel }};
//     wxString GetLabel()
static int LUACALL wxLua_wxToolBarToolBase_GetLabel(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call GetLabel
    wxString returns = (self->GetLabel());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_GetLongHelp[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_GetLongHelp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_GetLongHelp[1] = {{ wxLua_wxToolBarToolBase_GetLongHelp, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_GetLongHelp }};
//     wxString GetLongHelp()
static int LUACALL wxLua_wxToolBarToolBase_GetLongHelp(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call GetLongHelp
    wxString returns = (self->GetLongHelp());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_GetNormalBitmap[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_GetNormalBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_GetNormalBitmap[1] = {{ wxLua_wxToolBarToolBase_GetNormalBitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_GetNormalBitmap }};
//     wxBitmap GetNormalBitmap()
static int LUACALL wxLua_wxToolBarToolBase_GetNormalBitmap(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call GetNormalBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetNormalBitmap());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_GetShortHelp[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_GetShortHelp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_GetShortHelp[1] = {{ wxLua_wxToolBarToolBase_GetShortHelp, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_GetShortHelp }};
//     wxString GetShortHelp()
static int LUACALL wxLua_wxToolBarToolBase_GetShortHelp(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call GetShortHelp
    wxString returns = (self->GetShortHelp());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_GetStyle[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_GetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_GetStyle[1] = {{ wxLua_wxToolBarToolBase_GetStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_GetStyle }};
//     int     GetStyle()
static int LUACALL wxLua_wxToolBarToolBase_GetStyle(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call GetStyle
    int returns = (self->GetStyle());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_GetToolBar[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_GetToolBar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_GetToolBar[1] = {{ wxLua_wxToolBarToolBase_GetToolBar, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_GetToolBar }};
//     wxToolBarBase *GetToolBar()
static int LUACALL wxLua_wxToolBarToolBase_GetToolBar(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call GetToolBar
    wxToolBarBase* returns = (wxToolBarBase*)self->GetToolBar();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarBase);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_IsButton[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_IsButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_IsButton[1] = {{ wxLua_wxToolBarToolBase_IsButton, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_IsButton }};
//     int     IsButton()
static int LUACALL wxLua_wxToolBarToolBase_IsButton(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call IsButton
    int returns = (self->IsButton());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_IsControl[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_IsControl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_IsControl[1] = {{ wxLua_wxToolBarToolBase_IsControl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_IsControl }};
//     int     IsControl()
static int LUACALL wxLua_wxToolBarToolBase_IsControl(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call IsControl
    int returns = (self->IsControl());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_IsEnabled[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_IsEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_IsEnabled[1] = {{ wxLua_wxToolBarToolBase_IsEnabled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_IsEnabled }};
//     bool    IsEnabled()
static int LUACALL wxLua_wxToolBarToolBase_IsEnabled(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call IsEnabled
    bool returns = (self->IsEnabled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_IsSeparator[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_IsSeparator(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_IsSeparator[1] = {{ wxLua_wxToolBarToolBase_IsSeparator, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_IsSeparator }};
//     int     IsSeparator()
static int LUACALL wxLua_wxToolBarToolBase_IsSeparator(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call IsSeparator
    int returns = (self->IsSeparator());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_IsToggled[] = { &wxluatype_wxToolBarToolBase, NULL };
static int LUACALL wxLua_wxToolBarToolBase_IsToggled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_IsToggled[1] = {{ wxLua_wxToolBarToolBase_IsToggled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolBarToolBase_IsToggled }};
//     bool    IsToggled()
static int LUACALL wxLua_wxToolBarToolBase_IsToggled(lua_State *L)
{
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call IsToggled
    bool returns = (self->IsToggled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxObject) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_SetClientData[] = { &wxluatype_wxToolBarToolBase, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxToolBarToolBase_SetClientData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_SetClientData[1] = {{ wxLua_wxToolBarToolBase_SetClientData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarToolBase_SetClientData }};
//     void    SetClientData(wxObject* clientData)
static int LUACALL wxLua_wxToolBarToolBase_SetClientData(lua_State *L)
{
    // wxObject clientData
    wxObject * clientData = (wxObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxObject);
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call SetClientData
    self->SetClientData(clientData);

    return 0;
}

#endif // (wxLUA_USE_wxObject) && (wxLUA_USE_wxToolbar)

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_SetDisabledBitmap[] = { &wxluatype_wxToolBarToolBase, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxToolBarToolBase_SetDisabledBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_SetDisabledBitmap[1] = {{ wxLua_wxToolBarToolBase_SetDisabledBitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarToolBase_SetDisabledBitmap }};
//     void    SetDisabledBitmap(const wxBitmap& bmp)
static int LUACALL wxLua_wxToolBarToolBase_SetDisabledBitmap(lua_State *L)
{
    // const wxBitmap bmp
    const wxBitmap * bmp = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call SetDisabledBitmap
    self->SetDisabledBitmap(*bmp);

    return 0;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_SetLabel[] = { &wxluatype_wxToolBarToolBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxToolBarToolBase_SetLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_SetLabel[1] = {{ wxLua_wxToolBarToolBase_SetLabel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarToolBase_SetLabel }};
//     void    SetLabel(const wxString& label)
static int LUACALL wxLua_wxToolBarToolBase_SetLabel(lua_State *L)
{
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call SetLabel
    self->SetLabel(label);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_SetLongHelp[] = { &wxluatype_wxToolBarToolBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxToolBarToolBase_SetLongHelp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_SetLongHelp[1] = {{ wxLua_wxToolBarToolBase_SetLongHelp, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarToolBase_SetLongHelp }};
//     bool    SetLongHelp(const wxString& help)
static int LUACALL wxLua_wxToolBarToolBase_SetLongHelp(lua_State *L)
{
    // const wxString help
    const wxString help = wxlua_getwxStringtype(L, 2);
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call SetLongHelp
    bool returns = (self->SetLongHelp(help));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_SetNormalBitmap[] = { &wxluatype_wxToolBarToolBase, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxToolBarToolBase_SetNormalBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_SetNormalBitmap[1] = {{ wxLua_wxToolBarToolBase_SetNormalBitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarToolBase_SetNormalBitmap }};
//     void    SetNormalBitmap(const wxBitmap& bmp)
static int LUACALL wxLua_wxToolBarToolBase_SetNormalBitmap(lua_State *L)
{
    // const wxBitmap bmp
    const wxBitmap * bmp = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call SetNormalBitmap
    self->SetNormalBitmap(*bmp);

    return 0;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_SetShortHelp[] = { &wxluatype_wxToolBarToolBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxToolBarToolBase_SetShortHelp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_SetShortHelp[1] = {{ wxLua_wxToolBarToolBase_SetShortHelp, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarToolBase_SetShortHelp }};
//     bool    SetShortHelp(const wxString& help)
static int LUACALL wxLua_wxToolBarToolBase_SetShortHelp(lua_State *L)
{
    // const wxString help
    const wxString help = wxlua_getwxStringtype(L, 2);
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call SetShortHelp
    bool returns = (self->SetShortHelp(help));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_SetToggle[] = { &wxluatype_wxToolBarToolBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxToolBarToolBase_SetToggle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_SetToggle[1] = {{ wxLua_wxToolBarToolBase_SetToggle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarToolBase_SetToggle }};
//     bool    SetToggle(bool toggle)
static int LUACALL wxLua_wxToolBarToolBase_SetToggle(lua_State *L)
{
    // bool toggle
    bool toggle = wxlua_getbooleantype(L, 2);
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call SetToggle
    bool returns = (self->SetToggle(toggle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolBarToolBase_Toggle[] = { &wxluatype_wxToolBarToolBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxToolBarToolBase_Toggle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolBarToolBase_Toggle[1] = {{ wxLua_wxToolBarToolBase_Toggle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolBarToolBase_Toggle }};
//     bool    Toggle(bool toggle)
static int LUACALL wxLua_wxToolBarToolBase_Toggle(lua_State *L)
{
    // bool toggle
    bool toggle = wxlua_getbooleantype(L, 2);
    // get this
    wxToolBarToolBase * self = (wxToolBarToolBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolBarToolBase);
    // call Toggle
    bool returns = (self->Toggle(toggle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxToolBarToolBase_methods[] = {
    { "Attach", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_Attach, 1, NULL },
    { "CanBeToggled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_CanBeToggled, 1, NULL },
    { "Detach", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_Detach, 1, NULL },
    { "Enable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_Enable, 1, NULL },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)
    { "GetBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_GetBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)

#if (wxLUA_USE_wxObject) && (wxLUA_USE_wxToolbar)
    { "GetClientData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_GetClientData, 1, NULL },
#endif // (wxLUA_USE_wxObject) && (wxLUA_USE_wxToolbar)

    { "GetControl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_GetControl, 1, NULL },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)
    { "GetDisabledBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_GetDisabledBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)

    { "GetId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_GetId, 1, NULL },

#if (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxToolbar)
    { "GetKind", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_GetKind, 1, NULL },
#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxToolbar)

    { "GetLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_GetLabel, 1, NULL },
    { "GetLongHelp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_GetLongHelp, 1, NULL },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)
    { "GetNormalBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_GetNormalBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)

    { "GetShortHelp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_GetShortHelp, 1, NULL },
    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_GetStyle, 1, NULL },
    { "GetToolBar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_GetToolBar, 1, NULL },
    { "IsButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_IsButton, 1, NULL },
    { "IsControl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_IsControl, 1, NULL },
    { "IsEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_IsEnabled, 1, NULL },
    { "IsSeparator", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_IsSeparator, 1, NULL },
    { "IsToggled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_IsToggled, 1, NULL },

#if (wxLUA_USE_wxObject) && (wxLUA_USE_wxToolbar)
    { "SetClientData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_SetClientData, 1, NULL },
#endif // (wxLUA_USE_wxObject) && (wxLUA_USE_wxToolbar)

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)
    { "SetDisabledBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_SetDisabledBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)

    { "SetLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_SetLabel, 1, NULL },
    { "SetLongHelp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_SetLongHelp, 1, NULL },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)
    { "SetNormalBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_SetNormalBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxToolbar)

    { "SetShortHelp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_SetShortHelp, 1, NULL },
    { "SetToggle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_SetToggle, 1, NULL },
    { "Toggle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolBarToolBase_Toggle, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxToolBarToolBase_methodCount = sizeof(wxToolBarToolBase_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxToolbar


#if wxLUA_USE_wxToolbar
// ---------------------------------------------------------------------------
// Bind class wxToolBarTool
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxToolBarTool'
int wxluatype_wxToolBarTool = WXLUA_TUNKNOWN;



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxToolBarTool_methods[] = {
    { 0, 0, 0, 0 },
};

int wxToolBarTool_methodCount = sizeof(wxToolBarTool_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxToolbar


#if wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL
// ---------------------------------------------------------------------------
// Bind class wxAcceleratorTable
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAcceleratorTable'
int wxluatype_wxAcceleratorTable = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAcceleratorTable_Ok[] = { &wxluatype_wxAcceleratorTable, NULL };
static int LUACALL wxLua_wxAcceleratorTable_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorTable_Ok[1] = {{ wxLua_wxAcceleratorTable_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAcceleratorTable_Ok }};
//     bool Ok() const
static int LUACALL wxLua_wxAcceleratorTable_Ok(lua_State *L)
{
    // get this
    wxAcceleratorTable * self = (wxAcceleratorTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAcceleratorTable);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAcceleratorTable_delete[] = { &wxluatype_wxAcceleratorTable, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorTable_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAcceleratorTable_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxAcceleratorTable_constructor1[] = { &wxluatype_wxAcceleratorTable, NULL };
static int LUACALL wxLua_wxAcceleratorTable_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorTable_constructor1[1] = {{ wxLua_wxAcceleratorTable_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAcceleratorTable_constructor1 }};
//     wxAcceleratorTable(const wxAcceleratorTable& accel)
static int LUACALL wxLua_wxAcceleratorTable_constructor1(lua_State *L)
{
    // const wxAcceleratorTable accel
    const wxAcceleratorTable * accel = (const wxAcceleratorTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAcceleratorTable);
    // call constructor
    wxAcceleratorTable* returns = new wxAcceleratorTable(*accel);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAcceleratorTable);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAcceleratorTable_constructor[] = { &wxluatype_TTABLE, NULL };
static int LUACALL wxLua_wxAcceleratorTable_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorTable_constructor[1] = {{ wxLua_wxAcceleratorTable_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAcceleratorTable_constructor }};
// %override wxLua_wxAcceleratorTable_constructor
// wxAcceleratorTable(int n, wxAcceleratorEntry* entries)
static int LUACALL wxLua_wxAcceleratorTable_constructor(lua_State *L)
{
    wxAcceleratorEntry *pItems  = NULL;
    int                 nItems  = 0;
    if (lua_istable(L, 1))
    {
        nItems = luaL_getn(L, 1);
        if (nItems > 0)
            pItems = new wxAcceleratorEntry[nItems];

        if (pItems != NULL)
        {
            int idx, idxMax = nItems;
            nItems = 0;
            for (idx = 1; idx <= idxMax; ++idx)
            {
                lua_pushnumber(L, idx);
                lua_gettable(L, -2);

                int  iFlags  = 0;
                int  keyCode = 0;
                int  cmd     = 0;
                bool fValid  = false;

                if (lua_istable(L, -1))
                {
                    lua_pushnumber(L, 1);
                    lua_gettable(L, -2);
                    iFlags = (int)lua_tonumber(L, -1);
                    lua_pop(L, 1);

                    lua_pushnumber(L, 2);
                    lua_gettable(L, -2);
                    keyCode = (int)lua_tonumber(L, -1);
                    lua_pop(L, 1);

                    lua_pushnumber(L, 3);
                    lua_gettable(L, -2);
                    cmd = (int)lua_tonumber(L, -1);
                    lua_pop(L, 1);

                    fValid = true;
                }
                else
                if (lua_isuserdata(L, -1))
                {
                    wxAcceleratorEntry *pEntry = (wxAcceleratorEntry *)wxluaT_getuserdatatype(L, -1, wxluatype_wxAcceleratorEntry);
                    if (pEntry != NULL)
                    {
                        iFlags  = pEntry->GetFlags();
                        keyCode = pEntry->GetKeyCode();
                        cmd     = pEntry->GetCommand();

                        fValid = true;
                    }
                }
                lua_pop(L, 1);

                if (fValid)
                {
                    pItems[nItems].Set(iFlags, keyCode, cmd);
                    ++nItems;
                }
            }
        }
    }

    // call constructor
    if (pItems != NULL)
    {
        wxAcceleratorTable *returns = NULL;
        if (nItems > 0)
            returns = new wxAcceleratorTable(nItems, pItems);

        delete[] pItems;

        if (returns != NULL)
        {
		    wxluaO_addgcobject(L, returns);
            // push the constructed class pointer
            wxluaT_pushuserdatatype(L, returns, wxluatype_wxAcceleratorTable);
            // return the number of parameters
            return 1;
        }
    }
    return 0;
}





#if (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorTable_constructor_overload[] =
{
    { wxLua_wxAcceleratorTable_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAcceleratorTable_constructor1 },
    { wxLua_wxAcceleratorTable_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAcceleratorTable_constructor },
};
static int s_wxluafunc_wxLua_wxAcceleratorTable_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxAcceleratorTable_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAcceleratorTable_methods[] = {
    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAcceleratorTable_Ok, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAcceleratorTable_delete, 1, NULL },

#if (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL)
    { "wxAcceleratorTable", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAcceleratorTable_constructor_overload, s_wxluafunc_wxLua_wxAcceleratorTable_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL)

    { 0, 0, 0, 0 },
};

int wxAcceleratorTable_methodCount = sizeof(wxAcceleratorTable_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL


#if wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL
// ---------------------------------------------------------------------------
// Bind class wxAcceleratorEntry
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAcceleratorEntry'
int wxluatype_wxAcceleratorEntry = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAcceleratorEntry_Create[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAcceleratorEntry_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorEntry_Create[1] = {{ wxLua_wxAcceleratorEntry_Create, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxAcceleratorEntry_Create }};
//         static %gc wxAcceleratorEntry *Create(const wxString& str)
static int LUACALL wxLua_wxAcceleratorEntry_Create(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 1);
    // call Create
    wxAcceleratorEntry* returns = (wxAcceleratorEntry*)wxAcceleratorEntry::Create(str);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAcceleratorEntry(returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAcceleratorEntry);

    return 1;
}

#endif // ((wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL)

#if (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxAcceleratorEntry_FromString[] = { &wxluatype_wxAcceleratorEntry, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAcceleratorEntry_FromString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorEntry_FromString[1] = {{ wxLua_wxAcceleratorEntry_FromString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAcceleratorEntry_FromString }};
//         bool FromString(const wxString& str)
static int LUACALL wxLua_wxAcceleratorEntry_FromString(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 2);
    // get this
    wxAcceleratorEntry * self = (wxAcceleratorEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAcceleratorEntry);
    // call FromString
    bool returns = (self->FromString(str));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))

static wxLuaArgType s_wxluatypeArray_wxLua_wxAcceleratorEntry_GetCommand[] = { &wxluatype_wxAcceleratorEntry, NULL };
static int LUACALL wxLua_wxAcceleratorEntry_GetCommand(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorEntry_GetCommand[1] = {{ wxLua_wxAcceleratorEntry_GetCommand, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAcceleratorEntry_GetCommand }};
//     int GetCommand() const
static int LUACALL wxLua_wxAcceleratorEntry_GetCommand(lua_State *L)
{
    // get this
    wxAcceleratorEntry * self = (wxAcceleratorEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAcceleratorEntry);
    // call GetCommand
    int returns = (self->GetCommand());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAcceleratorEntry_GetFlags[] = { &wxluatype_wxAcceleratorEntry, NULL };
static int LUACALL wxLua_wxAcceleratorEntry_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorEntry_GetFlags[1] = {{ wxLua_wxAcceleratorEntry_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAcceleratorEntry_GetFlags }};
//     int GetFlags() const
static int LUACALL wxLua_wxAcceleratorEntry_GetFlags(lua_State *L)
{
    // get this
    wxAcceleratorEntry * self = (wxAcceleratorEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAcceleratorEntry);
    // call GetFlags
    int returns = (self->GetFlags());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAcceleratorEntry_GetKeyCode[] = { &wxluatype_wxAcceleratorEntry, NULL };
static int LUACALL wxLua_wxAcceleratorEntry_GetKeyCode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorEntry_GetKeyCode[1] = {{ wxLua_wxAcceleratorEntry_GetKeyCode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAcceleratorEntry_GetKeyCode }};
//     int GetKeyCode() const
static int LUACALL wxLua_wxAcceleratorEntry_GetKeyCode(lua_State *L)
{
    // get this
    wxAcceleratorEntry * self = (wxAcceleratorEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAcceleratorEntry);
    // call GetKeyCode
    int returns = (self->GetKeyCode());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAcceleratorEntry_GetMenuItem[] = { &wxluatype_wxAcceleratorEntry, NULL };
static int LUACALL wxLua_wxAcceleratorEntry_GetMenuItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorEntry_GetMenuItem[1] = {{ wxLua_wxAcceleratorEntry_GetMenuItem, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAcceleratorEntry_GetMenuItem }};
//         wxMenuItem *GetMenuItem() const
static int LUACALL wxLua_wxAcceleratorEntry_GetMenuItem(lua_State *L)
{
    // get this
    wxAcceleratorEntry * self = (wxAcceleratorEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAcceleratorEntry);
    // call GetMenuItem
    wxMenuItem* returns = (wxMenuItem*)self->GetMenuItem();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuItem);

    return 1;
}

#endif // ((wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

#if (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxAcceleratorEntry_IsOk[] = { &wxluatype_wxAcceleratorEntry, NULL };
static int LUACALL wxLua_wxAcceleratorEntry_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorEntry_IsOk[1] = {{ wxLua_wxAcceleratorEntry_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAcceleratorEntry_IsOk }};
//         bool IsOk() const
static int LUACALL wxLua_wxAcceleratorEntry_IsOk(lua_State *L)
{
    // get this
    wxAcceleratorEntry * self = (wxAcceleratorEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAcceleratorEntry);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAcceleratorEntry_Set[] = { &wxluatype_wxAcceleratorEntry, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxAcceleratorEntry_Set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorEntry_Set[1] = {{ wxLua_wxAcceleratorEntry_Set, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxAcceleratorEntry_Set }};
//     void Set(int flags, int keyCode, int Cmd, wxMenuItem *item = NULL)
static int LUACALL wxLua_wxAcceleratorEntry_Set(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxMenuItem item = NULL
    wxMenuItem * item = (argCount >= 5 ? (wxMenuItem *)wxluaT_getuserdatatype(L, 5, wxluatype_wxMenuItem) : NULL);
    // int Cmd
    int Cmd = (int)wxlua_getnumbertype(L, 4);
    // int keyCode
    int keyCode = (int)wxlua_getnumbertype(L, 3);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAcceleratorEntry * self = (wxAcceleratorEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAcceleratorEntry);
    // call Set
    self->Set(flags, keyCode, Cmd, item);

    return 0;
}

#endif // (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

#if (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxAcceleratorEntry_ToString[] = { &wxluatype_wxAcceleratorEntry, NULL };
static int LUACALL wxLua_wxAcceleratorEntry_ToString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorEntry_ToString[1] = {{ wxLua_wxAcceleratorEntry_ToString, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAcceleratorEntry_ToString }};
//         wxString ToString() const
static int LUACALL wxLua_wxAcceleratorEntry_ToString(lua_State *L)
{
    // get this
    wxAcceleratorEntry * self = (wxAcceleratorEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAcceleratorEntry);
    // call ToString
    wxString returns = (self->ToString());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))

static wxLuaArgType s_wxluatypeArray_wxLua_wxAcceleratorEntry_delete[] = { &wxluatype_wxAcceleratorEntry, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorEntry_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAcceleratorEntry_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxAcceleratorEntry_constructor1[] = { &wxluatype_wxAcceleratorEntry, NULL };
static int LUACALL wxLua_wxAcceleratorEntry_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorEntry_constructor1[1] = {{ wxLua_wxAcceleratorEntry_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAcceleratorEntry_constructor1 }};
//     wxAcceleratorEntry(const wxAcceleratorEntry& entry)
static int LUACALL wxLua_wxAcceleratorEntry_constructor1(lua_State *L)
{
    // const wxAcceleratorEntry entry
    const wxAcceleratorEntry * entry = (const wxAcceleratorEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAcceleratorEntry);
    // call constructor
    wxAcceleratorEntry* returns = new wxAcceleratorEntry(*entry);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAcceleratorEntry((wxAcceleratorEntry*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAcceleratorEntry);

    return 1;
}


#if (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAcceleratorEntry_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxMenuItem, NULL };
static int LUACALL wxLua_wxAcceleratorEntry_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorEntry_constructor[1] = {{ wxLua_wxAcceleratorEntry_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxAcceleratorEntry_constructor }};
//     wxAcceleratorEntry(int flags = 0, int keyCode = 0, int cmd = 0, wxMenuItem *item = NULL)
static int LUACALL wxLua_wxAcceleratorEntry_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxMenuItem item = NULL
    wxMenuItem * item = (argCount >= 4 ? (wxMenuItem *)wxluaT_getuserdatatype(L, 4, wxluatype_wxMenuItem) : NULL);
    // int cmd = 0
    int cmd = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int keyCode = 0
    int keyCode = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // int flags = 0
    int flags = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxAcceleratorEntry* returns = new wxAcceleratorEntry(flags, keyCode, cmd, item);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAcceleratorEntry((wxAcceleratorEntry*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAcceleratorEntry);

    return 1;
}

#endif // (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxLUA_USE_wxMenu && wxUSE_MENUS)



#if (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL)||((wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxLUA_USE_wxMenu && wxUSE_MENUS))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAcceleratorEntry_constructor_overload[] =
{
    { wxLua_wxAcceleratorEntry_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAcceleratorEntry_constructor1 },

#if (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { wxLua_wxAcceleratorEntry_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxAcceleratorEntry_constructor },
#endif // (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
};
static int s_wxluafunc_wxLua_wxAcceleratorEntry_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxAcceleratorEntry_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL)||((wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxLUA_USE_wxMenu && wxUSE_MENUS))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAcceleratorEntry_methods[] = {
#if ((wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL)
    { "Create", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxAcceleratorEntry_Create, 1, NULL },
#endif // ((wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL)

#if (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))
    { "FromString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAcceleratorEntry_FromString, 1, NULL },
#endif // (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))

    { "GetCommand", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAcceleratorEntry_GetCommand, 1, NULL },
    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAcceleratorEntry_GetFlags, 1, NULL },
    { "GetKeyCode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAcceleratorEntry_GetKeyCode, 1, NULL },

#if ((wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { "GetMenuItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAcceleratorEntry_GetMenuItem, 1, NULL },
#endif // ((wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

#if (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAcceleratorEntry_IsOk, 1, NULL },
#endif // (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { "Set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAcceleratorEntry_Set, 1, NULL },
#endif // (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

#if (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))
    { "ToString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAcceleratorEntry_ToString, 1, NULL },
#endif // (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxCHECK_VERSION(2,8,0))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAcceleratorEntry_delete, 1, NULL },

#if (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL)||((wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxLUA_USE_wxMenu && wxUSE_MENUS))
    { "wxAcceleratorEntry", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAcceleratorEntry_constructor_overload, s_wxluafunc_wxLua_wxAcceleratorEntry_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL)||((wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL) && (wxLUA_USE_wxMenu && wxUSE_MENUS))

    { 0, 0, 0, 0 },
};

int wxAcceleratorEntry_methodCount = sizeof(wxAcceleratorEntry_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL

