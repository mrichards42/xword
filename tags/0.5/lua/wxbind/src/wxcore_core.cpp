// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxcore_core.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxcore_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif



#if (wxLUA_USE_wxLog && wxUSE_LOG) && (wxUSE_LOGGUI)
// ---------------------------------------------------------------------------
// Bind class wxLogGui
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLogGui'
int wxluatype_wxLogGui = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxLogGui_delete[] = { &wxluatype_wxLogGui, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogGui_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxLogGui_delete }};

static int LUACALL wxLua_wxLogGui_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogGui_constructor[1] = {{ wxLua_wxLogGui_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxLogGui()
static int LUACALL wxLua_wxLogGui_constructor(lua_State *L)
{
    // call constructor
    wxLogGui* returns = new wxLogGui();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLogGui((wxLogGui*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLogGui);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLogGui_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxLogGui_delete, 1, NULL },
    { "wxLogGui", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLogGui_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxLogGui_methodCount = sizeof(wxLogGui_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxLog && wxUSE_LOG) && (wxUSE_LOGGUI)


#if (wxLUA_USE_wxLog && wxUSE_LOG) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
// ---------------------------------------------------------------------------
// Bind class wxLogTextCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLogTextCtrl'
int wxluatype_wxLogTextCtrl = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxLogTextCtrl_delete[] = { &wxluatype_wxLogTextCtrl, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogTextCtrl_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxLogTextCtrl_delete }};


#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && ((wxLUA_USE_wxLog && wxUSE_LOG) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))
static wxLuaArgType s_wxluatypeArray_wxLua_wxLogTextCtrl_constructor[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxLogTextCtrl_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogTextCtrl_constructor[1] = {{ wxLua_wxLogTextCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxLogTextCtrl_constructor }};
//     wxLogTextCtrl(wxTextCtrl* textCtrl);
static int LUACALL wxLua_wxLogTextCtrl_constructor(lua_State *L)
{
    // wxTextCtrl textCtrl
    wxTextCtrl * textCtrl = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call constructor
    wxLogTextCtrl* returns = new wxLogTextCtrl(textCtrl);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLogTextCtrl((wxLogTextCtrl*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLogTextCtrl);

    return 1;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && ((wxLUA_USE_wxLog && wxUSE_LOG) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLogTextCtrl_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxLogTextCtrl_delete, 1, NULL },

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && ((wxLUA_USE_wxLog && wxUSE_LOG) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))
    { "wxLogTextCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLogTextCtrl_constructor, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && ((wxLUA_USE_wxLog && wxUSE_LOG) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))

    { 0, 0, 0, 0 },
};

int wxLogTextCtrl_methodCount = sizeof(wxLogTextCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxLog && wxUSE_LOG) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)


#if (wxLUA_USE_wxLog && wxUSE_LOG) && (wxLUA_USE_wxLogWindow && wxUSE_LOGWINDOW)
// ---------------------------------------------------------------------------
// Bind class wxLogWindow
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLogWindow'
int wxluatype_wxLogWindow = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxFrame) && ((wxLUA_USE_wxLog && wxUSE_LOG) && (wxLUA_USE_wxLogWindow && wxUSE_LOGWINDOW))
static wxLuaArgType s_wxluatypeArray_wxLua_wxLogWindow_GetFrame[] = { &wxluatype_wxLogWindow, NULL };
static int LUACALL wxLua_wxLogWindow_GetFrame(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogWindow_GetFrame[1] = {{ wxLua_wxLogWindow_GetFrame, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLogWindow_GetFrame }};
//     wxFrame* GetFrame() const
static int LUACALL wxLua_wxLogWindow_GetFrame(lua_State *L)
{
    // get this
    wxLogWindow * self = (wxLogWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLogWindow);
    // call GetFrame
    wxFrame* returns = (wxFrame*)self->GetFrame();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFrame);

    return 1;
}

#endif // (wxLUA_USE_wxFrame) && ((wxLUA_USE_wxLog && wxUSE_LOG) && (wxLUA_USE_wxLogWindow && wxUSE_LOGWINDOW))

static wxLuaArgType s_wxluatypeArray_wxLua_wxLogWindow_Show[] = { &wxluatype_wxLogWindow, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxLogWindow_Show(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogWindow_Show[1] = {{ wxLua_wxLogWindow_Show, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxLogWindow_Show }};
//     void Show(bool show = true)
static int LUACALL wxLua_wxLogWindow_Show(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool show = true
    bool show = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxLogWindow * self = (wxLogWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLogWindow);
    // call Show
    self->Show(show);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLogWindow_delete[] = { &wxluatype_wxLogWindow, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogWindow_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxLogWindow_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxLogWindow_constructor[] = { &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxLogWindow_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogWindow_constructor[1] = {{ wxLua_wxLogWindow_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 4, s_wxluatypeArray_wxLua_wxLogWindow_constructor }};
//     wxLogWindow(wxWindow *pParent, const wxString& szTitle, bool bShow = true, bool bPassToOld = true);
static int LUACALL wxLua_wxLogWindow_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool bPassToOld = true
    bool bPassToOld = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // bool bShow = true
    bool bShow = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxString szTitle
    const wxString szTitle = wxlua_getwxStringtype(L, 2);
    // wxWindow pParent
    wxWindow * pParent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxLogWindow* returns = new wxLogWindow(pParent, szTitle, bShow, bPassToOld);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLogWindow((wxLogWindow*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLogWindow);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLogWindow_methods[] = {
#if (wxLUA_USE_wxFrame) && ((wxLUA_USE_wxLog && wxUSE_LOG) && (wxLUA_USE_wxLogWindow && wxUSE_LOGWINDOW))
    { "GetFrame", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLogWindow_GetFrame, 1, NULL },
#endif // (wxLUA_USE_wxFrame) && ((wxLUA_USE_wxLog && wxUSE_LOG) && (wxLUA_USE_wxLogWindow && wxUSE_LOGWINDOW))

    { "Show", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLogWindow_Show, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxLogWindow_delete, 1, NULL },
    { "wxLogWindow", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLogWindow_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxLogWindow_methodCount = sizeof(wxLogWindow_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxLog && wxUSE_LOG) && (wxLUA_USE_wxLogWindow && wxUSE_LOGWINDOW)


#if wxLUA_USE_wxSystemSettings
// ---------------------------------------------------------------------------
// Bind class wxSystemSettings
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSystemSettings'
int wxluatype_wxSystemSettings = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxSystemSettings)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSystemSettings_GetColour[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSystemSettings_GetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSystemSettings_GetColour[1] = {{ wxLua_wxSystemSettings_GetColour, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxSystemSettings_GetColour }};
//     static wxColour GetColour(wxSystemColour index)
static int LUACALL wxLua_wxSystemSettings_GetColour(lua_State *L)
{
    // wxSystemColour index
    wxSystemColour index = (wxSystemColour)wxlua_getenumtype(L, 1);
    // call GetColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(wxSystemSettings::GetColour(index));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxSystemSettings)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxSystemSettings)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSystemSettings_GetFont[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSystemSettings_GetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSystemSettings_GetFont[1] = {{ wxLua_wxSystemSettings_GetFont, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxSystemSettings_GetFont }};
//     static wxFont   GetFont(wxSystemFont index)
static int LUACALL wxLua_wxSystemSettings_GetFont(lua_State *L)
{
    // wxSystemFont index
    wxSystemFont index = (wxSystemFont)wxlua_getenumtype(L, 1);
    // call GetFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(wxSystemSettings::GetFont(index));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxFont*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxSystemSettings)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSystemSettings_GetMetric[] = { &wxluatype_TINTEGER, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxSystemSettings_GetMetric(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSystemSettings_GetMetric[1] = {{ wxLua_wxSystemSettings_GetMetric, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxSystemSettings_GetMetric }};
//     static int      GetMetric(wxSystemMetric index, wxWindow* win = NULL)
static int LUACALL wxLua_wxSystemSettings_GetMetric(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindow win = NULL
    wxWindow * win = (argCount >= 2 ? (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow) : NULL);
    // wxSystemMetric index
    wxSystemMetric index = (wxSystemMetric)wxlua_getenumtype(L, 1);
    // call GetMetric
    int returns = (wxSystemSettings::GetMetric(index, win));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static int LUACALL wxLua_wxSystemSettings_GetScreenType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSystemSettings_GetScreenType[1] = {{ wxLua_wxSystemSettings_GetScreenType, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxSystemScreenType GetScreenType()
static int LUACALL wxLua_wxSystemSettings_GetScreenType(lua_State *L)
{
    // call GetScreenType
    wxSystemScreenType returns = (wxSystemSettings::GetScreenType());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSystemSettings_HasFeature[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSystemSettings_HasFeature(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSystemSettings_HasFeature[1] = {{ wxLua_wxSystemSettings_HasFeature, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxSystemSettings_HasFeature }};
//     static bool     HasFeature(wxSystemFeature index)
static int LUACALL wxLua_wxSystemSettings_HasFeature(lua_State *L)
{
    // wxSystemFeature index
    wxSystemFeature index = (wxSystemFeature)wxlua_getenumtype(L, 1);
    // call HasFeature
    bool returns = (wxSystemSettings::HasFeature(index));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSystemSettings_SetScreenType[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSystemSettings_SetScreenType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSystemSettings_SetScreenType[1] = {{ wxLua_wxSystemSettings_SetScreenType, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxSystemSettings_SetScreenType }};
//     static void     SetScreenType( wxSystemScreenType screen )
static int LUACALL wxLua_wxSystemSettings_SetScreenType(lua_State *L)
{
    // wxSystemScreenType screen
    wxSystemScreenType screen = (wxSystemScreenType)wxlua_getenumtype(L, 1);
    // call SetScreenType
    wxSystemSettings::SetScreenType(screen);

    return 0;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSystemSettings_methods[] = {
#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxSystemSettings)
    { "GetColour", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSystemSettings_GetColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxSystemSettings)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxSystemSettings)
    { "GetFont", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSystemSettings_GetFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxSystemSettings)

    { "GetMetric", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSystemSettings_GetMetric, 1, NULL },
    { "GetScreenType", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSystemSettings_GetScreenType, 1, NULL },
    { "HasFeature", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSystemSettings_HasFeature, 1, NULL },
    { "SetScreenType", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSystemSettings_SetScreenType, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxSystemSettings_methodCount = sizeof(wxSystemSettings_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSystemSettings


#if wxLUA_USE_wxValidator && wxUSE_VALIDATORS
// ---------------------------------------------------------------------------
// Bind class wxValidator
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxValidator'
int wxluatype_wxValidator = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxValidator_GetWindow[] = { &wxluatype_wxValidator, NULL };
static int LUACALL wxLua_wxValidator_GetWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxValidator_GetWindow[1] = {{ wxLua_wxValidator_GetWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxValidator_GetWindow }};
//     wxWindow* GetWindow() const
static int LUACALL wxLua_wxValidator_GetWindow(lua_State *L)
{
    // get this
    wxValidator * self = (wxValidator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxValidator);
    // call GetWindow
    wxWindow* returns = (wxWindow*)self->GetWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static int LUACALL wxLua_wxValidator_IsSilent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxValidator_IsSilent[1] = {{ wxLua_wxValidator_IsSilent, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static bool IsSilent()
static int LUACALL wxLua_wxValidator_IsSilent(lua_State *L)
{
    // call IsSilent
    bool returns = (wxValidator::IsSilent());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxValidator_SetBellOnError[] = { &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxValidator_SetBellOnError(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxValidator_SetBellOnError[1] = {{ wxLua_wxValidator_SetBellOnError, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxValidator_SetBellOnError }};
//     static void SetBellOnError(bool doIt = true)
static int LUACALL wxLua_wxValidator_SetBellOnError(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool doIt = true
    bool doIt = (argCount >= 1 ? wxlua_getbooleantype(L, 1) : true);
    // call SetBellOnError
    wxValidator::SetBellOnError(doIt);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxValidator_SetWindow[] = { &wxluatype_wxValidator, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxValidator_SetWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxValidator_SetWindow[1] = {{ wxLua_wxValidator_SetWindow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxValidator_SetWindow }};
//     void SetWindow(wxWindow* window)
static int LUACALL wxLua_wxValidator_SetWindow(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxValidator * self = (wxValidator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxValidator);
    // call SetWindow
    self->SetWindow(window);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxValidator_TransferFromWindow[] = { &wxluatype_wxValidator, NULL };
static int LUACALL wxLua_wxValidator_TransferFromWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxValidator_TransferFromWindow[1] = {{ wxLua_wxValidator_TransferFromWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxValidator_TransferFromWindow }};
//     virtual bool TransferFromWindow()
static int LUACALL wxLua_wxValidator_TransferFromWindow(lua_State *L)
{
    // get this
    wxValidator * self = (wxValidator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxValidator);
    // call TransferFromWindow
    bool returns = (self->TransferFromWindow());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxValidator_TransferToWindow[] = { &wxluatype_wxValidator, NULL };
static int LUACALL wxLua_wxValidator_TransferToWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxValidator_TransferToWindow[1] = {{ wxLua_wxValidator_TransferToWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxValidator_TransferToWindow }};
//     virtual bool TransferToWindow()
static int LUACALL wxLua_wxValidator_TransferToWindow(lua_State *L)
{
    // get this
    wxValidator * self = (wxValidator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxValidator);
    // call TransferToWindow
    bool returns = (self->TransferToWindow());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxValidator_Validate[] = { &wxluatype_wxValidator, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxValidator_Validate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxValidator_Validate[1] = {{ wxLua_wxValidator_Validate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxValidator_Validate }};
//     virtual bool Validate(wxWindow* parent)
static int LUACALL wxLua_wxValidator_Validate(lua_State *L)
{
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxValidator * self = (wxValidator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxValidator);
    // call Validate
    bool returns = (self->Validate(parent));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxValidator_methods[] = {
    { "GetWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxValidator_GetWindow, 1, NULL },
    { "IsSilent", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxValidator_IsSilent, 1, NULL },
    { "SetBellOnError", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxValidator_SetBellOnError, 1, NULL },
    { "SetWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxValidator_SetWindow, 1, NULL },
    { "TransferFromWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxValidator_TransferFromWindow, 1, NULL },
    { "TransferToWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxValidator_TransferToWindow, 1, NULL },
    { "Validate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxValidator_Validate, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxValidator_methodCount = sizeof(wxValidator_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxValidator && wxUSE_VALIDATORS


#if (wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxTextValidator)
// ---------------------------------------------------------------------------
// Bind class wxTextValidator
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextValidator'
int wxluatype_wxTextValidator = WXLUA_TUNKNOWN;

#if ((wxCHECK_VERSION(2,6,0)) && ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxTextValidator))) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextValidator_GetExcludes[] = { &wxluatype_wxTextValidator, NULL };
static int LUACALL wxLua_wxTextValidator_GetExcludes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextValidator_GetExcludes[1] = {{ wxLua_wxTextValidator_GetExcludes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextValidator_GetExcludes }};
//     %wxchkver_2_6 wxArrayString& GetExcludes()
static int LUACALL wxLua_wxTextValidator_GetExcludes(lua_State *L)
{
    // get this
    wxTextValidator * self = (wxTextValidator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextValidator);
    // call GetExcludes
    wxArrayString* returns = &self->GetExcludes();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextValidator_GetIncludes[] = { &wxluatype_wxTextValidator, NULL };
static int LUACALL wxLua_wxTextValidator_GetIncludes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextValidator_GetIncludes[1] = {{ wxLua_wxTextValidator_GetIncludes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextValidator_GetIncludes }};
//     %wxchkver_2_6 wxArrayString& GetIncludes()
static int LUACALL wxLua_wxTextValidator_GetIncludes(lua_State *L)
{
    // get this
    wxTextValidator * self = (wxTextValidator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextValidator);
    // call GetIncludes
    wxArrayString* returns = &self->GetIncludes();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,6,0)) && ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxTextValidator))) && (wxLUA_USE_wxArrayString)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextValidator_GetStyle[] = { &wxluatype_wxTextValidator, NULL };
static int LUACALL wxLua_wxTextValidator_GetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextValidator_GetStyle[1] = {{ wxLua_wxTextValidator_GetStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextValidator_GetStyle }};
//     long GetStyle() const
static int LUACALL wxLua_wxTextValidator_GetStyle(lua_State *L)
{
    // get this
    wxTextValidator * self = (wxTextValidator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextValidator);
    // call GetStyle
    long  returns = (self->GetStyle());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if ((wxCHECK_VERSION(2,6,0)) && ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxTextValidator))) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextValidator_SetExcludes[] = { &wxluatype_wxTextValidator, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxTextValidator_SetExcludes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextValidator_SetExcludes[1] = {{ wxLua_wxTextValidator_SetExcludes, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextValidator_SetExcludes }};
//     %wxchkver_2_6 void SetExcludes(const wxArrayString& excludes)
static int LUACALL wxLua_wxTextValidator_SetExcludes(lua_State *L)
{
    // const wxArrayString excludes
    wxLuaSmartwxArrayString excludes = wxlua_getwxArrayString(L, 2);
    // get this
    wxTextValidator * self = (wxTextValidator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextValidator);
    // call SetExcludes
    self->SetExcludes(excludes);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextValidator_SetIncludes[] = { &wxluatype_wxTextValidator, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxTextValidator_SetIncludes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextValidator_SetIncludes[1] = {{ wxLua_wxTextValidator_SetIncludes, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextValidator_SetIncludes }};
//     %wxchkver_2_6 void SetIncludes(const wxArrayString& includes)
static int LUACALL wxLua_wxTextValidator_SetIncludes(lua_State *L)
{
    // const wxArrayString includes
    wxLuaSmartwxArrayString includes = wxlua_getwxArrayString(L, 2);
    // get this
    wxTextValidator * self = (wxTextValidator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextValidator);
    // call SetIncludes
    self->SetIncludes(includes);

    return 0;
}

#endif // ((wxCHECK_VERSION(2,6,0)) && ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxTextValidator))) && (wxLUA_USE_wxArrayString)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextValidator_SetStyle[] = { &wxluatype_wxTextValidator, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextValidator_SetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextValidator_SetStyle[1] = {{ wxLua_wxTextValidator_SetStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextValidator_SetStyle }};
//     void SetStyle(long style)
static int LUACALL wxLua_wxTextValidator_SetStyle(lua_State *L)
{
    // long style
    long style = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxTextValidator * self = (wxTextValidator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextValidator);
    // call SetStyle
    self->SetStyle(style);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextValidator_delete[] = { &wxluatype_wxTextValidator, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextValidator_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTextValidator_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextValidator_constructor[] = { &wxluatype_TNUMBER, &wxluatype_wxLuaObject, NULL };
static int LUACALL wxLua_wxTextValidator_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextValidator_constructor[1] = {{ wxLua_wxTextValidator_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxTextValidator_constructor }};
// %override wxLua_wxTextValidator_constructor
// wxTextValidator(long style = wxFILTER_NONE, wxString *valPtr = NULL)
static int LUACALL wxLua_wxTextValidator_constructor(lua_State *L)
{
    wxTextValidator *returns;
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = wxFILTER_NONE
    long style = (argCount >= 1 ? (long)wxlua_getintegertype(L, 1) : wxFILTER_NONE);

    // call constructor
    if (argCount >= 2)
    {
        wxLuaObject *valPtr = (wxLuaObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxLuaObject);
        returns = new wxTextValidator(style, valPtr->GetStringPtr());
    }
    else
        returns = new wxTextValidator(style);

    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextValidator);
    // return the number of parameters
    return 1;
}





// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextValidator_methods[] = {
#if ((wxCHECK_VERSION(2,6,0)) && ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxTextValidator))) && (wxLUA_USE_wxArrayString)
    { "GetExcludes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextValidator_GetExcludes, 1, NULL },
    { "GetIncludes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextValidator_GetIncludes, 1, NULL },
#endif // ((wxCHECK_VERSION(2,6,0)) && ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxTextValidator))) && (wxLUA_USE_wxArrayString)

    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextValidator_GetStyle, 1, NULL },

#if ((wxCHECK_VERSION(2,6,0)) && ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxTextValidator))) && (wxLUA_USE_wxArrayString)
    { "SetExcludes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextValidator_SetExcludes, 1, NULL },
    { "SetIncludes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextValidator_SetIncludes, 1, NULL },
#endif // ((wxCHECK_VERSION(2,6,0)) && ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxTextValidator))) && (wxLUA_USE_wxArrayString)

    { "SetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextValidator_SetStyle, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTextValidator_delete, 1, NULL },
    { "wxTextValidator", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTextValidator_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTextValidator_methodCount = sizeof(wxTextValidator_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxTextValidator)


#if (wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxGenericValidator)
// ---------------------------------------------------------------------------
// Bind class wxGenericValidator
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGenericValidator'
int wxluatype_wxGenericValidator = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericValidator_delete[] = { &wxluatype_wxGenericValidator, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericValidator_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGenericValidator_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericValidatorArrayInt_constructor[] = { &wxluatype_wxLuaObject, NULL };
static int LUACALL wxLua_wxGenericValidatorArrayInt_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericValidatorArrayInt_constructor[1] = {{ wxLua_wxGenericValidatorArrayInt_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxGenericValidatorArrayInt_constructor }};
// %override wxLua_wxGenericValidatorArrayInt_constructor
// %constructor wxGenericValidatorArrayInt(wxLuaObject *valPtr)
static int LUACALL wxLua_wxGenericValidatorArrayInt_constructor(lua_State *L)
{
    // wxLuaObject *valPtr
    wxLuaObject *valPtr = (wxLuaObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLuaObject);
    // call constructor
    wxGenericValidator *returns = new wxGenericValidator(valPtr->GetArrayPtr());
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGenericValidator);
    // return the number of parameters
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericValidatorBool_constructor[] = { &wxluatype_wxLuaObject, NULL };
static int LUACALL wxLua_wxGenericValidatorBool_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericValidatorBool_constructor[1] = {{ wxLua_wxGenericValidatorBool_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxGenericValidatorBool_constructor }};
// %override wxLua_wxGenericValidatorBool_constructor
// %constructor wxGenericValidatorBool(wxLuaObject *boolPtr)
static int LUACALL wxLua_wxGenericValidatorBool_constructor(lua_State *L)
{
    // wxLuaObject *boolPtr
    wxLuaObject *boolPtr = (wxLuaObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLuaObject);
    // call constructor
    wxGenericValidator *returns = new wxGenericValidator(boolPtr->GetBoolPtr());
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGenericValidator);
    // return the number of parameters
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericValidatorInt_constructor[] = { &wxluatype_wxLuaObject, NULL };
static int LUACALL wxLua_wxGenericValidatorInt_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericValidatorInt_constructor[1] = {{ wxLua_wxGenericValidatorInt_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxGenericValidatorInt_constructor }};
// %override wxLua_wxGenericValidatorInt_constructor
// %constructor wxGenericValidatorInt(wxLuaObject *valPtr)
static int LUACALL wxLua_wxGenericValidatorInt_constructor(lua_State *L)
{
    // wxLuaObject *valPtr
    wxLuaObject *valPtr = (wxLuaObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLuaObject);
    // call constructor
    wxGenericValidator *returns = new wxGenericValidator(valPtr->GetIntPtr());
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGenericValidator);
    // return the number of parameters
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericValidatorString_constructor[] = { &wxluatype_wxLuaObject, NULL };
static int LUACALL wxLua_wxGenericValidatorString_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericValidatorString_constructor[1] = {{ wxLua_wxGenericValidatorString_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxGenericValidatorString_constructor }};
// %override wxLua_wxGenericValidatorString_constructor
// %constructor wxGenericValidatorString(wxLuaObject *valPtr)
static int LUACALL wxLua_wxGenericValidatorString_constructor(lua_State *L)
{
    // wxLuaObject *valPtr
    wxLuaObject *valPtr = (wxLuaObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLuaObject);
    // call constructor
    wxGenericValidator *returns = new wxGenericValidator(valPtr->GetStringPtr());
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGenericValidator);
    // return the number of parameters
    return 1;
}





// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGenericValidator_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGenericValidator_delete, 1, NULL },
    { "wxGenericValidatorArrayInt", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGenericValidatorArrayInt_constructor, 1, NULL },
    { "wxGenericValidatorBool", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGenericValidatorBool_constructor, 1, NULL },
    { "wxGenericValidatorInt", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGenericValidatorInt_constructor, 1, NULL },
    { "wxGenericValidatorString", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGenericValidatorString_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGenericValidator_methodCount = sizeof(wxGenericValidator_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxGenericValidator)


#if wxUSE_STREAMS && wxUSE_FILESYSTEM
// ---------------------------------------------------------------------------
// Bind class wxMemoryFSHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMemoryFSHandler'
int wxluatype_wxMemoryFSHandler = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxBitmap) && ((wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxUSE_IMAGE))
static wxLuaArgType s_wxluatypeArray_wxLua_wxMemoryFSHandler_AddFile2[] = { &wxluatype_TSTRING, &wxluatype_wxBitmap, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMemoryFSHandler_AddFile2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMemoryFSHandler_AddFile2[1] = {{ wxLua_wxMemoryFSHandler_AddFile2, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxMemoryFSHandler_AddFile2 }};
//     static void AddFile(const wxString& filename, const wxBitmap& bitmap, long type);
static int LUACALL wxLua_wxMemoryFSHandler_AddFile2(lua_State *L)
{
    // long type
    long type = (long)wxlua_getnumbertype(L, 3);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 1);
    // call AddFile
    wxMemoryFSHandler::AddFile(filename, *bitmap, type);

    return 0;
}

#endif // (wxLUA_USE_wxBitmap) && ((wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxUSE_IMAGE))

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && ((wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxUSE_IMAGE))
static wxLuaArgType s_wxluatypeArray_wxLua_wxMemoryFSHandler_AddFile1[] = { &wxluatype_TSTRING, &wxluatype_wxImage, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMemoryFSHandler_AddFile1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMemoryFSHandler_AddFile1[1] = {{ wxLua_wxMemoryFSHandler_AddFile1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxMemoryFSHandler_AddFile1 }};
//     static void AddFile(const wxString& filename, const wxImage& image, long type);
static int LUACALL wxLua_wxMemoryFSHandler_AddFile1(lua_State *L)
{
    // long type
    long type = (long)wxlua_getnumbertype(L, 3);
    // const wxImage image
    const wxImage * image = (const wxImage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImage);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 1);
    // call AddFile
    wxMemoryFSHandler::AddFile(filename, *image, type);

    return 0;
}

#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && ((wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxUSE_IMAGE))

static wxLuaArgType s_wxluatypeArray_wxLua_wxMemoryFSHandler_AddFile[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMemoryFSHandler_AddFile(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMemoryFSHandler_AddFile[1] = {{ wxLua_wxMemoryFSHandler_AddFile, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxMemoryFSHandler_AddFile }};
//     static void AddFile(const wxString& filename, const wxString& textdata);
static int LUACALL wxLua_wxMemoryFSHandler_AddFile(lua_State *L)
{
    // const wxString textdata
    const wxString textdata = wxlua_getwxStringtype(L, 2);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 1);
    // call AddFile
    wxMemoryFSHandler::AddFile(filename, textdata);

    return 0;
}


#if (wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxCHECK_VERSION(2,8,5))
static wxLuaArgType s_wxluatypeArray_wxLua_wxMemoryFSHandler_AddFileWithMimeType[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMemoryFSHandler_AddFileWithMimeType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMemoryFSHandler_AddFileWithMimeType[1] = {{ wxLua_wxMemoryFSHandler_AddFileWithMimeType, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxMemoryFSHandler_AddFileWithMimeType }};
//     static void AddFileWithMimeType(const wxString& filename, const wxString& textdata, const wxString& mimetype);
static int LUACALL wxLua_wxMemoryFSHandler_AddFileWithMimeType(lua_State *L)
{
    // const wxString mimetype
    const wxString mimetype = wxlua_getwxStringtype(L, 3);
    // const wxString textdata
    const wxString textdata = wxlua_getwxStringtype(L, 2);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 1);
    // call AddFileWithMimeType
    wxMemoryFSHandler::AddFileWithMimeType(filename, textdata, mimetype);

    return 0;
}

#endif // (wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxCHECK_VERSION(2,8,5))

static wxLuaArgType s_wxluatypeArray_wxLua_wxMemoryFSHandler_RemoveFile[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMemoryFSHandler_RemoveFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMemoryFSHandler_RemoveFile[1] = {{ wxLua_wxMemoryFSHandler_RemoveFile, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxMemoryFSHandler_RemoveFile }};
//     static void RemoveFile(const wxString& filename);
static int LUACALL wxLua_wxMemoryFSHandler_RemoveFile(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 1);
    // call RemoveFile
    wxMemoryFSHandler::RemoveFile(filename);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMemoryFSHandler_delete[] = { &wxluatype_wxMemoryFSHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMemoryFSHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxMemoryFSHandler_delete }};

static int LUACALL wxLua_wxMemoryFSHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMemoryFSHandler_constructor[1] = {{ wxLua_wxMemoryFSHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxMemoryFSHandler()
static int LUACALL wxLua_wxMemoryFSHandler_constructor(lua_State *L)
{
    // call constructor
    wxMemoryFSHandler* returns = new wxMemoryFSHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMemoryFSHandler);

    return 1;
}




#if ((wxLUA_USE_wxBitmap) && ((wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxUSE_IMAGE)))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && ((wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxUSE_IMAGE)))||(wxUSE_STREAMS && wxUSE_FILESYSTEM)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMemoryFSHandler_AddFile_overload[] =
{

#if (wxLUA_USE_wxBitmap) && ((wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxUSE_IMAGE))
    { wxLua_wxMemoryFSHandler_AddFile2, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxMemoryFSHandler_AddFile2 },
#endif // (wxLUA_USE_wxBitmap) && ((wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxUSE_IMAGE))

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && ((wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxUSE_IMAGE))
    { wxLua_wxMemoryFSHandler_AddFile1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxMemoryFSHandler_AddFile1 },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && ((wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxUSE_IMAGE))
    { wxLua_wxMemoryFSHandler_AddFile, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxMemoryFSHandler_AddFile },
};
static int s_wxluafunc_wxLua_wxMemoryFSHandler_AddFile_overload_count = sizeof(s_wxluafunc_wxLua_wxMemoryFSHandler_AddFile_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxBitmap) && ((wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxUSE_IMAGE)))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && ((wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxUSE_IMAGE)))||(wxUSE_STREAMS && wxUSE_FILESYSTEM)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMemoryFSHandler_methods[] = {
#if ((wxLUA_USE_wxBitmap) && ((wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxUSE_IMAGE)))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && ((wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxUSE_IMAGE)))||(wxUSE_STREAMS && wxUSE_FILESYSTEM)
    { "AddFile", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxMemoryFSHandler_AddFile_overload, s_wxluafunc_wxLua_wxMemoryFSHandler_AddFile_overload_count, 0 },
#endif // ((wxLUA_USE_wxBitmap) && ((wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxUSE_IMAGE)))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && ((wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxUSE_IMAGE)))||(wxUSE_STREAMS && wxUSE_FILESYSTEM)

#if (wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxCHECK_VERSION(2,8,5))
    { "AddFileWithMimeType", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxMemoryFSHandler_AddFileWithMimeType, 1, NULL },
#endif // (wxUSE_STREAMS && wxUSE_FILESYSTEM) && (wxCHECK_VERSION(2,8,5))

    { "RemoveFile", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxMemoryFSHandler_RemoveFile, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxMemoryFSHandler_delete, 1, NULL },
    { "wxMemoryFSHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMemoryFSHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxMemoryFSHandler_methodCount = sizeof(wxMemoryFSHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_STREAMS && wxUSE_FILESYSTEM

