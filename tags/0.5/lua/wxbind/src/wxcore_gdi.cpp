// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxcore_gdi.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxcore_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif



#if wxLUA_USE_wxPointSizeRect
// ---------------------------------------------------------------------------
// Bind class wxPoint
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPoint'
int wxluatype_wxPoint = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_GetX[] = { &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxPoint_GetX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_GetX[1] = {{ wxLua_wxPoint_GetX, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPoint_GetX }};
//     %rename X %member_func int x // GetX() and SetX(int x)
static int LUACALL wxLua_wxPoint_GetX(lua_State *L)
{
    // get this
    wxPoint *self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // push the result number
    lua_pushnumber(L, self->x);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_GetXY[] = { &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxPoint_GetXY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_GetXY[1] = {{ wxLua_wxPoint_GetXY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPoint_GetXY }};
// %override wxLua_wxPoint_GetXY
// int GetXY()
static int LUACALL wxLua_wxPoint_GetXY(lua_State *L)
{
    // get this
    wxPoint *self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // push the result number
    lua_pushnumber(L, self->x);
    lua_pushnumber(L, self->y);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_GetY[] = { &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxPoint_GetY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_GetY[1] = {{ wxLua_wxPoint_GetY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPoint_GetY }};
//     %rename Y %member_func int y // GetY() and SetY(int y)
static int LUACALL wxLua_wxPoint_GetY(lua_State *L)
{
    // get this
    wxPoint *self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // push the result number
    lua_pushnumber(L, self->y);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_Set[] = { &wxluatype_wxPoint, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPoint_Set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_Set[1] = {{ wxLua_wxPoint_Set, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxPoint_Set }};
// %override wxLua_wxPoint_Set
// void Set(int x, int y)
static int LUACALL wxLua_wxPoint_Set(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxPoint *self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    self->x = x;
    self->y = y;
    // return the number of parameters
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_SetX[] = { &wxluatype_wxPoint, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPoint_SetX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_SetX[1] = {{ wxLua_wxPoint_SetX, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_SetX }};
//     %rename X %member_func int x // GetX() and SetX(int x)
static int LUACALL wxLua_wxPoint_SetX(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxPoint *self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    self->x = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_SetY[] = { &wxluatype_wxPoint, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPoint_SetY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_SetY[1] = {{ wxLua_wxPoint_SetY, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_SetY }};
//     %rename Y %member_func int y // GetY() and SetY(int y)
static int LUACALL wxLua_wxPoint_SetY(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxPoint *self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    self->y = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_delete[] = { &wxluatype_wxPoint, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxPoint_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_op_add1[] = { &wxluatype_wxPoint, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxPoint_op_add1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_op_add1[1] = {{ wxLua_wxPoint_op_add1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_add1 }};
//     %operator wxPoint operator+(const wxSize& s) const //{ return wxPoint(x + s.GetWidth(), y + s.GetHeight()); }
static int LUACALL wxLua_wxPoint_op_add1(lua_State *L)
{
    // const wxSize s
    const wxSize * s = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxPoint * self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call op_add
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint((*self)+(*s));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_op_add[] = { &wxluatype_wxPoint, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxPoint_op_add(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_op_add[1] = {{ wxLua_wxPoint_op_add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_add }};
//     %operator wxPoint operator+(const wxPoint& p) const //{ return wxPoint(x + p.x, y + p.y); }
static int LUACALL wxLua_wxPoint_op_add(lua_State *L)
{
    // const wxPoint p
    const wxPoint * p = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxPoint * self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call op_add
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint((*self)+(*p));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_op_eq[] = { &wxluatype_wxPoint, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxPoint_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_op_eq[1] = {{ wxLua_wxPoint_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_eq }};
//     %operator bool operator==(const wxPoint& p) const //{ return x == p.x && y == p.y; }
static int LUACALL wxLua_wxPoint_op_eq(lua_State *L)
{
    // const wxPoint p
    const wxPoint * p = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxPoint * self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call op_eq
    bool returns = ((*self)==(*p));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_op_iadd1[] = { &wxluatype_wxPoint, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxPoint_op_iadd1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_op_iadd1[1] = {{ wxLua_wxPoint_op_iadd1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_iadd1 }};
//     %operator wxPoint& operator+=(const wxSize& s) //{ x += s.GetWidth(); y += s.GetHeight(); return *this; }
static int LUACALL wxLua_wxPoint_op_iadd1(lua_State *L)
{
    // const wxSize s
    const wxSize * s = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxPoint * self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call op_iadd
    (*self)+=(*s);
    wxPoint* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_op_iadd[] = { &wxluatype_wxPoint, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxPoint_op_iadd(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_op_iadd[1] = {{ wxLua_wxPoint_op_iadd, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_iadd }};
//     %operator wxPoint& operator+=(const wxPoint& p) //{ x += p.x; y += p.y; return *this; }
static int LUACALL wxLua_wxPoint_op_iadd(lua_State *L)
{
    // const wxPoint p
    const wxPoint * p = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxPoint * self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call op_iadd
    (*self)+=(*p);
    wxPoint* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_op_isub1[] = { &wxluatype_wxPoint, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxPoint_op_isub1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_op_isub1[1] = {{ wxLua_wxPoint_op_isub1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_isub1 }};
//     %operator wxPoint& operator-=(const wxSize& s) //{ x -= s.GetWidth(); y -= s.GetHeight(); return *this; }
static int LUACALL wxLua_wxPoint_op_isub1(lua_State *L)
{
    // const wxSize s
    const wxSize * s = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxPoint * self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call op_isub
    (*self)-=(*s);
    wxPoint* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_op_isub[] = { &wxluatype_wxPoint, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxPoint_op_isub(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_op_isub[1] = {{ wxLua_wxPoint_op_isub, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_isub }};
//     %operator wxPoint& operator-=(const wxPoint& p) //{ x -= p.x; y -= p.y; return *this; }
static int LUACALL wxLua_wxPoint_op_isub(lua_State *L)
{
    // const wxPoint p
    const wxPoint * p = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxPoint * self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call op_isub
    (*self)-=(*p);
    wxPoint* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_op_ne[] = { &wxluatype_wxPoint, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxPoint_op_ne(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_op_ne[1] = {{ wxLua_wxPoint_op_ne, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_ne }};
//     %operator bool operator!=(const wxPoint& p) const //{ return !(*this == p); }
static int LUACALL wxLua_wxPoint_op_ne(lua_State *L)
{
    // const wxPoint p
    const wxPoint * p = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxPoint * self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call op_ne
    bool returns = ((*self)!=(*p));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_op_neg[] = { &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxPoint_op_neg(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_op_neg[1] = {{ wxLua_wxPoint_op_neg, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPoint_op_neg }};
//     %operator wxPoint operator-() const //{ return wxPoint(-x, -y); }
static int LUACALL wxLua_wxPoint_op_neg(lua_State *L)
{
    // get this
    wxPoint * self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call op_neg
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(-(*self));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_op_set[] = { &wxluatype_wxPoint, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxPoint_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_op_set[1] = {{ wxLua_wxPoint_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_set }};
//     %operator wxPoint& operator=(const wxPoint& p) const
static int LUACALL wxLua_wxPoint_op_set(lua_State *L)
{
    // const wxPoint p
    const wxPoint * p = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxPoint * self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call op_set
    (*self)=(*p);
    wxPoint* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_op_sub1[] = { &wxluatype_wxPoint, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxPoint_op_sub1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_op_sub1[1] = {{ wxLua_wxPoint_op_sub1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_sub1 }};
//     %operator wxPoint operator-(const wxSize& s) const //{ return wxPoint(x - s.GetWidth(), y - s.GetHeight()); }
static int LUACALL wxLua_wxPoint_op_sub1(lua_State *L)
{
    // const wxSize s
    const wxSize * s = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxPoint * self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call op_sub
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint((*self)-(*s));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_op_sub[] = { &wxluatype_wxPoint, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxPoint_op_sub(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_op_sub[1] = {{ wxLua_wxPoint_op_sub, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_sub }};
//     %operator wxPoint operator-(const wxPoint& p) const //{ return wxPoint(x - p.x, y - p.y); }
static int LUACALL wxLua_wxPoint_op_sub(lua_State *L)
{
    // const wxPoint p
    const wxPoint * p = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxPoint * self = (wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call op_sub
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint((*self)-(*p));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_constructor1[] = { &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxPoint_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_constructor1[1] = {{ wxLua_wxPoint_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxPoint_constructor1 }};
//     wxPoint(const wxPoint& pt)
static int LUACALL wxLua_wxPoint_constructor1(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call constructor
    wxPoint* returns = new wxPoint(*pt);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPoint_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPoint_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_constructor[1] = {{ wxLua_wxPoint_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxPoint_constructor }};
//     wxPoint(int x = 0, int y = 0)
static int LUACALL wxLua_wxPoint_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int y = 0
    int y = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // int x = 0
    int x = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxPoint* returns = new wxPoint(x, y);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}




#if (wxLUA_USE_wxPointSizeRect)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_op_add_overload[] =
{
    { wxLua_wxPoint_op_add1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_add1 },
    { wxLua_wxPoint_op_add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_add },
};
static int s_wxluafunc_wxLua_wxPoint_op_add_overload_count = sizeof(s_wxluafunc_wxLua_wxPoint_op_add_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_op_iadd_overload[] =
{
    { wxLua_wxPoint_op_iadd1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_iadd1 },
    { wxLua_wxPoint_op_iadd, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_iadd },
};
static int s_wxluafunc_wxLua_wxPoint_op_iadd_overload_count = sizeof(s_wxluafunc_wxLua_wxPoint_op_iadd_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_op_isub_overload[] =
{
    { wxLua_wxPoint_op_isub1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_isub1 },
    { wxLua_wxPoint_op_isub, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_isub },
};
static int s_wxluafunc_wxLua_wxPoint_op_isub_overload_count = sizeof(s_wxluafunc_wxLua_wxPoint_op_isub_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_op_sub_overload[] =
{
    { wxLua_wxPoint_op_sub1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_sub1 },
    { wxLua_wxPoint_op_sub, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPoint_op_sub },
};
static int s_wxluafunc_wxLua_wxPoint_op_sub_overload_count = sizeof(s_wxluafunc_wxLua_wxPoint_op_sub_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPoint_constructor_overload[] =
{
    { wxLua_wxPoint_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxPoint_constructor1 },
    { wxLua_wxPoint_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxPoint_constructor },
};
static int s_wxluafunc_wxLua_wxPoint_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxPoint_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxPointSizeRect)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPoint_methods[] = {
    { "GetX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPoint_GetX, 1, NULL },
    { "GetXY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPoint_GetXY, 1, NULL },
    { "GetY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPoint_GetY, 1, NULL },
    { "Set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPoint_Set, 1, NULL },
    { "SetX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPoint_SetX, 1, NULL },
    { "SetY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPoint_SetY, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxPoint_delete, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect)
    { "op_add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPoint_op_add_overload, s_wxluafunc_wxLua_wxPoint_op_add_overload_count, 0 },
#endif // (wxLUA_USE_wxPointSizeRect)

    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPoint_op_eq, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect)
    { "op_iadd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPoint_op_iadd_overload, s_wxluafunc_wxLua_wxPoint_op_iadd_overload_count, 0 },
    { "op_isub", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPoint_op_isub_overload, s_wxluafunc_wxLua_wxPoint_op_isub_overload_count, 0 },
#endif // (wxLUA_USE_wxPointSizeRect)

    { "op_ne", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPoint_op_ne, 1, NULL },
    { "op_neg", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPoint_op_neg, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPoint_op_set, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect)
    { "op_sub", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPoint_op_sub_overload, s_wxluafunc_wxLua_wxPoint_op_sub_overload_count, 0 },
    { "wxPoint", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxPoint_constructor_overload, s_wxluafunc_wxLua_wxPoint_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxPointSizeRect)

    { "x", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxPoint_SetX, 1, NULL },
    { "x", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxPoint_GetX, 1, NULL },
    { "y", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxPoint_SetY, 1, NULL },
    { "y", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxPoint_GetY, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxPoint_methodCount = sizeof(wxPoint_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxPointSizeRect


#if wxLUA_USE_wxPointSizeRect
// ---------------------------------------------------------------------------
// Bind class wxSize
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSize'
int wxluatype_wxSize = WXLUA_TUNKNOWN;

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_DecBy[] = { &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSize_DecBy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_DecBy[1] = {{ wxLua_wxSize_DecBy, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSize_DecBy }};
//     %wxchkver_2_8 void DecBy(int dx, int dy)
static int LUACALL wxLua_wxSize_DecBy(lua_State *L)
{
    // int dy
    int dy = (int)wxlua_getnumbertype(L, 3);
    // int dx
    int dx = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call DecBy
    self->DecBy(dx, dy);

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_DecTo[] = { &wxluatype_wxSize, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSize_DecTo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_DecTo[1] = {{ wxLua_wxSize_DecTo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSize_DecTo }};
//     void DecTo(const wxSize& sz)
static int LUACALL wxLua_wxSize_DecTo(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call DecTo
    self->DecTo(*sz);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_GetHeight[] = { &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSize_GetHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_GetHeight[1] = {{ wxLua_wxSize_GetHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSize_GetHeight }};
//     int GetHeight() const
static int LUACALL wxLua_wxSize_GetHeight(lua_State *L)
{
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call GetHeight
    int returns = (self->GetHeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_GetWidth[] = { &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSize_GetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_GetWidth[1] = {{ wxLua_wxSize_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSize_GetWidth }};
//     int GetWidth() const
static int LUACALL wxLua_wxSize_GetWidth(lua_State *L)
{
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call GetWidth
    int returns = (self->GetWidth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_IncBy[] = { &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSize_IncBy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_IncBy[1] = {{ wxLua_wxSize_IncBy, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSize_IncBy }};
//     %wxchkver_2_8 void IncBy(int dx, int dy)
static int LUACALL wxLua_wxSize_IncBy(lua_State *L)
{
    // int dy
    int dy = (int)wxlua_getnumbertype(L, 3);
    // int dx
    int dx = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call IncBy
    self->IncBy(dx, dy);

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_IncTo[] = { &wxluatype_wxSize, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSize_IncTo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_IncTo[1] = {{ wxLua_wxSize_IncTo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSize_IncTo }};
//     void IncTo(const wxSize& sz)
static int LUACALL wxLua_wxSize_IncTo(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call IncTo
    self->IncTo(*sz);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_IsFullySpecified[] = { &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSize_IsFullySpecified(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_IsFullySpecified[1] = {{ wxLua_wxSize_IsFullySpecified, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSize_IsFullySpecified }};
//     bool IsFullySpecified() const
static int LUACALL wxLua_wxSize_IsFullySpecified(lua_State *L)
{
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call IsFullySpecified
    bool returns = (self->IsFullySpecified());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_Scale[] = { &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSize_Scale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_Scale[1] = {{ wxLua_wxSize_Scale, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSize_Scale }};
//     %wxchkver_2_8 wxSize& Scale(float xscale, float yscale)
static int LUACALL wxLua_wxSize_Scale(lua_State *L)
{
    // float yscale
    float yscale = (float)wxlua_getnumbertype(L, 3);
    // float xscale
    float xscale = (float)wxlua_getnumbertype(L, 2);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call Scale
    wxSize* returns = &self->Scale(xscale, yscale);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_Set[] = { &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSize_Set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_Set[1] = {{ wxLua_wxSize_Set, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSize_Set }};
//     void Set(int width, int height)
static int LUACALL wxLua_wxSize_Set(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call Set
    self->Set(width, height);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_SetDefaults[] = { &wxluatype_wxSize, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSize_SetDefaults(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_SetDefaults[1] = {{ wxLua_wxSize_SetDefaults, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSize_SetDefaults }};
//     void SetDefaults(const wxSize& size)
static int LUACALL wxLua_wxSize_SetDefaults(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call SetDefaults
    self->SetDefaults(*size);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_SetHeight[] = { &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSize_SetHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_SetHeight[1] = {{ wxLua_wxSize_SetHeight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSize_SetHeight }};
//     void SetHeight(int height)
static int LUACALL wxLua_wxSize_SetHeight(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call SetHeight
    self->SetHeight(height);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_SetWidth[] = { &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSize_SetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_SetWidth[1] = {{ wxLua_wxSize_SetWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSize_SetWidth }};
//     void SetWidth(int width)
static int LUACALL wxLua_wxSize_SetWidth(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call SetWidth
    self->SetWidth(width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_delete[] = { &wxluatype_wxSize, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSize_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_op_add[] = { &wxluatype_wxSize, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSize_op_add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_op_add[1] = {{ wxLua_wxSize_op_add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSize_op_add }};
//     %operator wxSize operator+(const wxSize& sz) const //{ return wxSize(x + sz.x, y + sz.y); }
static int LUACALL wxLua_wxSize_op_add(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call op_add
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize((*self)+(*sz));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_op_div[] = { &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSize_op_div(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_op_div[1] = {{ wxLua_wxSize_op_div, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSize_op_div }};
//     %operator wxSize operator/(int i) const //{ return wxSize(x / i, y / i); }
static int LUACALL wxLua_wxSize_op_div(lua_State *L)
{
    // int i
    int i = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call op_div
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize((*self)/(i));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_op_eq[] = { &wxluatype_wxSize, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSize_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_op_eq[1] = {{ wxLua_wxSize_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSize_op_eq }};
//     %operator bool operator==(const wxSize& sz) const //{ return x == sz.x && y == sz.y; }
static int LUACALL wxLua_wxSize_op_eq(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call op_eq
    bool returns = ((*self)==(*sz));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_op_iadd[] = { &wxluatype_wxSize, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSize_op_iadd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_op_iadd[1] = {{ wxLua_wxSize_op_iadd, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSize_op_iadd }};
//     %operator wxSize& operator+=(const wxSize& sz) //{ x += sz.x; y += sz.y; return *this; }
static int LUACALL wxLua_wxSize_op_iadd(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call op_iadd
    (*self)+=(*sz);
    wxSize* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_op_idiv[] = { &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSize_op_idiv(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_op_idiv[1] = {{ wxLua_wxSize_op_idiv, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSize_op_idiv }};
//     %operator wxSize& operator/=(const int i)      //{ x /= i; y /= i; return *this; }
static int LUACALL wxLua_wxSize_op_idiv(lua_State *L)
{
    // const int i
    const int i = (const int)wxlua_getnumbertype(L, 2);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call op_idiv
    (*self)/=(i);
    wxSize* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_op_imul[] = { &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSize_op_imul(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_op_imul[1] = {{ wxLua_wxSize_op_imul, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSize_op_imul }};
//     %operator wxSize& operator*=(const int i)      //{ x *= i; y *= i; return *this; }
static int LUACALL wxLua_wxSize_op_imul(lua_State *L)
{
    // const int i
    const int i = (const int)wxlua_getnumbertype(L, 2);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call op_imul
    (*self)*=(i);
    wxSize* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_op_isub[] = { &wxluatype_wxSize, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSize_op_isub(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_op_isub[1] = {{ wxLua_wxSize_op_isub, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSize_op_isub }};
//     %operator wxSize& operator-=(const wxSize& sz) //{ x -= sz.x; y -= sz.y; return *this; }
static int LUACALL wxLua_wxSize_op_isub(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call op_isub
    (*self)-=(*sz);
    wxSize* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_op_mul[] = { &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSize_op_mul(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_op_mul[1] = {{ wxLua_wxSize_op_mul, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSize_op_mul }};
//     %operator wxSize operator*(int i) const //{ return wxSize(x * i, y * i); }
static int LUACALL wxLua_wxSize_op_mul(lua_State *L)
{
    // int i
    int i = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call op_mul
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize((*self)*(i));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_op_ne[] = { &wxluatype_wxSize, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSize_op_ne(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_op_ne[1] = {{ wxLua_wxSize_op_ne, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSize_op_ne }};
//     %operator bool operator!=(const wxSize& sz) const //{ return x != sz.x || y != sz.y; }
static int LUACALL wxLua_wxSize_op_ne(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call op_ne
    bool returns = ((*self)!=(*sz));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_op_set[] = { &wxluatype_wxSize, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSize_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_op_set[1] = {{ wxLua_wxSize_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSize_op_set }};
//     %operator wxSize& operator=(const wxSize& s) const
static int LUACALL wxLua_wxSize_op_set(lua_State *L)
{
    // const wxSize s
    const wxSize * s = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call op_set
    (*self)=(*s);
    wxSize* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_op_sub[] = { &wxluatype_wxSize, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSize_op_sub(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_op_sub[1] = {{ wxLua_wxSize_op_sub, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSize_op_sub }};
//     %operator wxSize operator-(const wxSize& sz) const //{ return wxSize(x - sz.x, y - sz.y); }
static int LUACALL wxLua_wxSize_op_sub(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxSize * self = (wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call op_sub
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize((*self)-(*sz));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_constructor1[] = { &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSize_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_constructor1[1] = {{ wxLua_wxSize_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxSize_constructor1 }};
//     wxSize(const wxSize& size)
static int LUACALL wxLua_wxSize_constructor1(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call constructor
    wxSize* returns = new wxSize(*size);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSize_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSize_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_constructor[1] = {{ wxLua_wxSize_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxSize_constructor }};
//     wxSize(int width = 0, int height = 0)
static int LUACALL wxLua_wxSize_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int height = 0
    int height = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // int width = 0
    int width = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxSize* returns = new wxSize(width, height);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}




#if (wxLUA_USE_wxPointSizeRect)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSize_constructor_overload[] =
{
    { wxLua_wxSize_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxSize_constructor1 },
    { wxLua_wxSize_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxSize_constructor },
};
static int s_wxluafunc_wxLua_wxSize_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxSize_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxPointSizeRect)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSize_methods[] = {
#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)
    { "DecBy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_DecBy, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)

    { "DecTo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_DecTo, 1, NULL },
    { "GetHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_GetHeight, 1, NULL },
    { "GetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_GetWidth, 1, NULL },

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)
    { "IncBy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_IncBy, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)

    { "IncTo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_IncTo, 1, NULL },
    { "IsFullySpecified", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_IsFullySpecified, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)
    { "Scale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_Scale, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)

    { "Set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_Set, 1, NULL },
    { "SetDefaults", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_SetDefaults, 1, NULL },
    { "SetHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_SetHeight, 1, NULL },
    { "SetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_SetWidth, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSize_delete, 1, NULL },
    { "op_add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_op_add, 1, NULL },
    { "op_div", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_op_div, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_op_eq, 1, NULL },
    { "op_iadd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_op_iadd, 1, NULL },
    { "op_idiv", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_op_idiv, 1, NULL },
    { "op_imul", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_op_imul, 1, NULL },
    { "op_isub", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_op_isub, 1, NULL },
    { "op_mul", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_op_mul, 1, NULL },
    { "op_ne", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_op_ne, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_op_set, 1, NULL },
    { "op_sub", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSize_op_sub, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect)
    { "wxSize", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSize_constructor_overload, s_wxluafunc_wxLua_wxSize_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxPointSizeRect)

    { 0, 0, 0, 0 },
};

int wxSize_methodCount = sizeof(wxSize_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxPointSizeRect


#if wxLUA_USE_wxPointSizeRect
// ---------------------------------------------------------------------------
// Bind class wxRect
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRect'
int wxluatype_wxRect = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_CentreIn[] = { &wxluatype_wxRect, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRect_CentreIn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_CentreIn[1] = {{ wxLua_wxRect_CentreIn, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRect_CentreIn }};
//         wxRect CentreIn(const wxRect& r, int dir = wxBOTH) const // CenterIn
static int LUACALL wxLua_wxRect_CentreIn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int dir = wxBOTH
    int dir = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxBOTH);
    // const wxRect r
    const wxRect * r = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call CentreIn
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->CentreIn(*r, dir));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_Contains2[] = { &wxluatype_wxRect, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_Contains2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_Contains2[1] = {{ wxLua_wxRect_Contains2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_Contains2 }};
//         bool Contains(const wxRect& rect) const
static int LUACALL wxLua_wxRect_Contains2(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call Contains
    bool returns = (self->Contains(*rect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_Contains1[] = { &wxluatype_wxRect, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRect_Contains1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_Contains1[1] = {{ wxLua_wxRect_Contains1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_Contains1 }};
//         bool Contains(const wxPoint& pt) const
static int LUACALL wxLua_wxRect_Contains1(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call Contains
    bool returns = (self->Contains(*pt));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_Contains[] = { &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRect_Contains(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_Contains[1] = {{ wxLua_wxRect_Contains, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRect_Contains }};
//         bool Contains(wxCoord dx, wxCoord dy) const
static int LUACALL wxLua_wxRect_Contains(lua_State *L)
{
    // wxCoord dy
    wxCoord dy = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord dx
    wxCoord dx = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call Contains
    bool returns = (self->Contains(dx, dy));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0))

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_Deflate[] = { &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRect_Deflate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_Deflate[1] = {{ wxLua_wxRect_Deflate, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRect_Deflate }};
//     wxRect  Deflate(wxCoord dx, wxCoord dy) const //wxRect& Deflate(wxCoord dx, wxCoord dy)
static int LUACALL wxLua_wxRect_Deflate(lua_State *L)
{
    // wxCoord dy
    wxCoord dy = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord dx
    wxCoord dx = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call Deflate
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->Deflate(dx, dy));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_GetBottom[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_GetBottom(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_GetBottom[1] = {{ wxLua_wxRect_GetBottom, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRect_GetBottom }};
//     int     GetBottom()
static int LUACALL wxLua_wxRect_GetBottom(lua_State *L)
{
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call GetBottom
    int returns = (self->GetBottom());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_GetBottomLeft[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_GetBottomLeft(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_GetBottomLeft[1] = {{ wxLua_wxRect_GetBottomLeft, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRect_GetBottomLeft }};
//     %wxchkver_2_8 wxPoint GetBottomLeft() const // GetLeftBottom
static int LUACALL wxLua_wxRect_GetBottomLeft(lua_State *L)
{
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call GetBottomLeft
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetBottomLeft());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_GetBottomRight[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_GetBottomRight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_GetBottomRight[1] = {{ wxLua_wxRect_GetBottomRight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRect_GetBottomRight }};
//     wxPoint GetBottomRight() const              // GetRightBottom
static int LUACALL wxLua_wxRect_GetBottomRight(lua_State *L)
{
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call GetBottomRight
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetBottomRight());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_GetHeight[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_GetHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_GetHeight[1] = {{ wxLua_wxRect_GetHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRect_GetHeight }};
//     int     GetHeight()
static int LUACALL wxLua_wxRect_GetHeight(lua_State *L)
{
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call GetHeight
    int returns = (self->GetHeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_GetLeft[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_GetLeft(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_GetLeft[1] = {{ wxLua_wxRect_GetLeft, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRect_GetLeft }};
//     int     GetLeft()
static int LUACALL wxLua_wxRect_GetLeft(lua_State *L)
{
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call GetLeft
    int returns = (self->GetLeft());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_GetPosition[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_GetPosition[1] = {{ wxLua_wxRect_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRect_GetPosition }};
//     wxPoint GetPosition()
static int LUACALL wxLua_wxRect_GetPosition(lua_State *L)
{
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_GetRight[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_GetRight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_GetRight[1] = {{ wxLua_wxRect_GetRight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRect_GetRight }};
//     int     GetRight()
static int LUACALL wxLua_wxRect_GetRight(lua_State *L)
{
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call GetRight
    int returns = (self->GetRight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_GetSize[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_GetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_GetSize[1] = {{ wxLua_wxRect_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRect_GetSize }};
//     wxSize  GetSize()
static int LUACALL wxLua_wxRect_GetSize(lua_State *L)
{
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call GetSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_GetTop[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_GetTop(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_GetTop[1] = {{ wxLua_wxRect_GetTop, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRect_GetTop }};
//     int     GetTop()
static int LUACALL wxLua_wxRect_GetTop(lua_State *L)
{
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call GetTop
    int returns = (self->GetTop());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_GetTopLeft[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_GetTopLeft(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_GetTopLeft[1] = {{ wxLua_wxRect_GetTopLeft, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRect_GetTopLeft }};
//     wxPoint GetTopLeft() const                  // GetLeftTop
static int LUACALL wxLua_wxRect_GetTopLeft(lua_State *L)
{
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call GetTopLeft
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetTopLeft());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}


#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_GetTopRight[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_GetTopRight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_GetTopRight[1] = {{ wxLua_wxRect_GetTopRight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRect_GetTopRight }};
//     %wxchkver_2_8 wxPoint GetTopRight() const   // GetRightTop
static int LUACALL wxLua_wxRect_GetTopRight(lua_State *L)
{
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call GetTopRight
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetTopRight());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_GetWidth[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_GetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_GetWidth[1] = {{ wxLua_wxRect_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRect_GetWidth }};
//     int     GetWidth()
static int LUACALL wxLua_wxRect_GetWidth(lua_State *L)
{
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call GetWidth
    int returns = (self->GetWidth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_GetX[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_GetX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_GetX[1] = {{ wxLua_wxRect_GetX, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRect_GetX }};
//     int     GetX()
static int LUACALL wxLua_wxRect_GetX(lua_State *L)
{
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call GetX
    int returns = (self->GetX());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_GetY[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_GetY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_GetY[1] = {{ wxLua_wxRect_GetY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRect_GetY }};
//     int     GetY()
static int LUACALL wxLua_wxRect_GetY(lua_State *L)
{
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call GetY
    int returns = (self->GetY());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_Inflate[] = { &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRect_Inflate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_Inflate[1] = {{ wxLua_wxRect_Inflate, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRect_Inflate }};
//     wxRect  Inflate(wxCoord dx, wxCoord dy) const //wxRect& Inflate(wxCoord dx, wxCoord dy)
static int LUACALL wxLua_wxRect_Inflate(lua_State *L)
{
    // wxCoord dy
    wxCoord dy = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord dx
    wxCoord dx = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call Inflate
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->Inflate(dx, dy));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}


#if ((defined(WXWIN_COMPATIBILITY_2_6) && WXWIN_COMPATIBILITY_2_6)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_Inside[] = { &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRect_Inside(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_Inside[1] = {{ wxLua_wxRect_Inside, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRect_Inside }};
//     %wxcompat_2_6 bool    Inside(wxCoord cx, wxCoord cy)
static int LUACALL wxLua_wxRect_Inside(lua_State *L)
{
    // wxCoord cy
    wxCoord cy = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord cx
    wxCoord cx = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call Inside
    bool returns = (self->Inside(cx, cy));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((defined(WXWIN_COMPATIBILITY_2_6) && WXWIN_COMPATIBILITY_2_6)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_Intersects[] = { &wxluatype_wxRect, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_Intersects(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_Intersects[1] = {{ wxLua_wxRect_Intersects, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_Intersects }};
//     bool    Intersects(const wxRect& rect) const
static int LUACALL wxLua_wxRect_Intersects(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call Intersects
    bool returns = (self->Intersects(*rect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_IsEmpty[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_IsEmpty[1] = {{ wxLua_wxRect_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRect_IsEmpty }};
//     bool    IsEmpty() const
static int LUACALL wxLua_wxRect_IsEmpty(lua_State *L)
{
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_Offset[] = { &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRect_Offset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_Offset[1] = {{ wxLua_wxRect_Offset, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRect_Offset }};
//     void    Offset(wxCoord dx, wxCoord dy)  //void Offset(const wxPoint& pt)
static int LUACALL wxLua_wxRect_Offset(lua_State *L)
{
    // wxCoord dy
    wxCoord dy = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord dx
    wxCoord dx = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call Offset
    self->Offset(dx, dy);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_SetBottom[] = { &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRect_SetBottom(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_SetBottom[1] = {{ wxLua_wxRect_SetBottom, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_SetBottom }};
//     void    SetBottom(int bottom)
static int LUACALL wxLua_wxRect_SetBottom(lua_State *L)
{
    // int bottom
    int bottom = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call SetBottom
    self->SetBottom(bottom);

    return 0;
}


#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_SetBottomLeft[] = { &wxluatype_wxRect, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRect_SetBottomLeft(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_SetBottomLeft[1] = {{ wxLua_wxRect_SetBottomLeft, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_SetBottomLeft }};
//     %wxchkver_2_8 void    SetBottomLeft(const wxPoint &p)   // SetLeftBottom
static int LUACALL wxLua_wxRect_SetBottomLeft(lua_State *L)
{
    // const wxPoint p
    const wxPoint * p = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call SetBottomLeft
    self->SetBottomLeft(*p);

    return 0;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_SetBottomRight[] = { &wxluatype_wxRect, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRect_SetBottomRight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_SetBottomRight[1] = {{ wxLua_wxRect_SetBottomRight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_SetBottomRight }};
//     void    SetBottomRight(const wxPoint &p)                // SetRightBottom
static int LUACALL wxLua_wxRect_SetBottomRight(lua_State *L)
{
    // const wxPoint p
    const wxPoint * p = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call SetBottomRight
    self->SetBottomRight(*p);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_SetHeight[] = { &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRect_SetHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_SetHeight[1] = {{ wxLua_wxRect_SetHeight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_SetHeight }};
//     void    SetHeight(int height)
static int LUACALL wxLua_wxRect_SetHeight(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call SetHeight
    self->SetHeight(height);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_SetLeft[] = { &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRect_SetLeft(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_SetLeft[1] = {{ wxLua_wxRect_SetLeft, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_SetLeft }};
//     void    SetLeft(int left)
static int LUACALL wxLua_wxRect_SetLeft(lua_State *L)
{
    // int left
    int left = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call SetLeft
    self->SetLeft(left);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_SetPosition[] = { &wxluatype_wxRect, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRect_SetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_SetPosition[1] = {{ wxLua_wxRect_SetPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_SetPosition }};
//     void    SetPosition(const wxPoint &p)
static int LUACALL wxLua_wxRect_SetPosition(lua_State *L)
{
    // const wxPoint p
    const wxPoint * p = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call SetPosition
    self->SetPosition(*p);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_SetRight[] = { &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRect_SetRight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_SetRight[1] = {{ wxLua_wxRect_SetRight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_SetRight }};
//     void    SetRight(int right)
static int LUACALL wxLua_wxRect_SetRight(lua_State *L)
{
    // int right
    int right = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call SetRight
    self->SetRight(right);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_SetSize[] = { &wxluatype_wxRect, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxRect_SetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_SetSize[1] = {{ wxLua_wxRect_SetSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_SetSize }};
//     void    SetSize(const wxSize &s)
static int LUACALL wxLua_wxRect_SetSize(lua_State *L)
{
    // const wxSize s
    const wxSize * s = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call SetSize
    self->SetSize(*s);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_SetTop[] = { &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRect_SetTop(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_SetTop[1] = {{ wxLua_wxRect_SetTop, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_SetTop }};
//     void    SetTop(int top)
static int LUACALL wxLua_wxRect_SetTop(lua_State *L)
{
    // int top
    int top = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call SetTop
    self->SetTop(top);

    return 0;
}


#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_SetTopRight[] = { &wxluatype_wxRect, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRect_SetTopRight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_SetTopRight[1] = {{ wxLua_wxRect_SetTopRight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_SetTopRight }};
//     %wxchkver_2_8 void    SetTopRight(const wxPoint &p)     // SetRightTop
static int LUACALL wxLua_wxRect_SetTopRight(lua_State *L)
{
    // const wxPoint p
    const wxPoint * p = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call SetTopRight
    self->SetTopRight(*p);

    return 0;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_SetWidth[] = { &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRect_SetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_SetWidth[1] = {{ wxLua_wxRect_SetWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_SetWidth }};
//     void    SetWidth(int width)
static int LUACALL wxLua_wxRect_SetWidth(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call SetWidth
    self->SetWidth(width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_SetX[] = { &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRect_SetX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_SetX[1] = {{ wxLua_wxRect_SetX, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_SetX }};
//     void    SetX(int X)
static int LUACALL wxLua_wxRect_SetX(lua_State *L)
{
    // int X
    int X = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call SetX
    self->SetX(X);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_SetY[] = { &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRect_SetY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_SetY[1] = {{ wxLua_wxRect_SetY, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_SetY }};
//     void    SetY(int Y)
static int LUACALL wxLua_wxRect_SetY(lua_State *L)
{
    // int Y
    int Y = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call SetY
    self->SetY(Y);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_Union[] = { &wxluatype_wxRect, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_Union(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_Union[1] = {{ wxLua_wxRect_Union, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_Union }};
//     wxRect  Union(const wxRect& rect) const //wxRect& Union(const wxRect& rect);
static int LUACALL wxLua_wxRect_Union(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call Union
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->Union(*rect));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_delete[] = { &wxluatype_wxRect, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRect_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_op_add[] = { &wxluatype_wxRect, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_op_add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_op_add[1] = {{ wxLua_wxRect_op_add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_op_add }};
//     %operator wxRect operator+(const wxRect& rect) const
static int LUACALL wxLua_wxRect_op_add(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call op_add
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect((*self)+(*rect));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_op_eq[] = { &wxluatype_wxRect, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_op_eq[1] = {{ wxLua_wxRect_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_op_eq }};
//     %operator bool operator==(const wxRect& rect) const
static int LUACALL wxLua_wxRect_op_eq(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call op_eq
    bool returns = ((*self)==(*rect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_op_iadd[] = { &wxluatype_wxRect, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_op_iadd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_op_iadd[1] = {{ wxLua_wxRect_op_iadd, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_op_iadd }};
//     %operator wxRect& operator+=(const wxRect& rect)
static int LUACALL wxLua_wxRect_op_iadd(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call op_iadd
    (*self)+=(*rect);
    wxRect* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_op_set[] = { &wxluatype_wxRect, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_op_set[1] = {{ wxLua_wxRect_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_op_set }};
//     %operator wxRect& operator=(const wxRect& r) const
static int LUACALL wxLua_wxRect_op_set(lua_State *L)
{
    // const wxRect r
    const wxRect * r = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRect * self = (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call op_set
    (*self)=(*r);
    wxRect* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_constructor4[] = { &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxRect_constructor4(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_constructor4[1] = {{ wxLua_wxRect_constructor4, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRect_constructor4 }};
//     wxRect(const wxSize& size)
static int LUACALL wxLua_wxRect_constructor4(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call constructor
    wxRect* returns = new wxRect(*size);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_constructor3[] = { &wxluatype_wxPoint, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxRect_constructor3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_constructor3[1] = {{ wxLua_wxRect_constructor3, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxRect_constructor3 }};
//     wxRect(const wxPoint& pos, const wxSize& size)
static int LUACALL wxLua_wxRect_constructor3(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call constructor
    wxRect* returns = new wxRect(*pos, *size);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_constructor2[] = { &wxluatype_wxPoint, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRect_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_constructor2[1] = {{ wxLua_wxRect_constructor2, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxRect_constructor2 }};
//     wxRect(const wxPoint& topLeft, const wxPoint& bottomRight)
static int LUACALL wxLua_wxRect_constructor2(lua_State *L)
{
    // const wxPoint bottomRight
    const wxPoint * bottomRight = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // const wxPoint topLeft
    const wxPoint * topLeft = (const wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call constructor
    wxRect* returns = new wxRect(*topLeft, *bottomRight);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_constructor1[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRect_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_constructor1[1] = {{ wxLua_wxRect_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRect_constructor1 }};
//     wxRect(const wxRect& rect)
static int LUACALL wxLua_wxRect_constructor1(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call constructor
    wxRect* returns = new wxRect(*rect);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRect_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRect_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_constructor[1] = {{ wxLua_wxRect_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxRect_constructor }};
//     wxRect(int x = 0, int y = 0, int w = 0, int h = 0)
static int LUACALL wxLua_wxRect_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int h = 0
    int h = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // int w = 0
    int w = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int y = 0
    int y = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // int x = 0
    int x = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxRect* returns = new wxRect(x, y, w, h);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0))))||((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_Contains_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxRect_Contains2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_Contains2 },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxRect_Contains1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRect_Contains1 },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0))
    { wxLua_wxRect_Contains, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRect_Contains },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0))
};
static int s_wxluafunc_wxLua_wxRect_Contains_overload_count = sizeof(s_wxluafunc_wxLua_wxRect_Contains_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0))))||((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxPointSizeRect)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRect_constructor_overload[] =
{
    { wxLua_wxRect_constructor4, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRect_constructor4 },
    { wxLua_wxRect_constructor3, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxRect_constructor3 },
    { wxLua_wxRect_constructor2, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxRect_constructor2 },
    { wxLua_wxRect_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRect_constructor1 },
    { wxLua_wxRect_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxRect_constructor },
};
static int s_wxluafunc_wxLua_wxRect_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRect_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxPointSizeRect)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRect_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0)))
    { "CentreIn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_CentreIn, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0)))

#if ((wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0))))||((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0)))
    { "Contains", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_Contains_overload, s_wxluafunc_wxLua_wxRect_Contains_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0))))||((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0)))

    { "Deflate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_Deflate, 1, NULL },
    { "GetBottom", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_GetBottom, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)
    { "GetBottomLeft", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_GetBottomLeft, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)

    { "GetBottomRight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_GetBottomRight, 1, NULL },
    { "GetHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_GetHeight, 1, NULL },
    { "GetLeft", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_GetLeft, 1, NULL },
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_GetPosition, 1, NULL },
    { "GetRight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_GetRight, 1, NULL },
    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_GetSize, 1, NULL },
    { "GetTop", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_GetTop, 1, NULL },
    { "GetTopLeft", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_GetTopLeft, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)
    { "GetTopRight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_GetTopRight, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)

    { "GetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_GetWidth, 1, NULL },
    { "GetX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_GetX, 1, NULL },
    { "GetY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_GetY, 1, NULL },
    { "Inflate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_Inflate, 1, NULL },

#if ((defined(WXWIN_COMPATIBILITY_2_6) && WXWIN_COMPATIBILITY_2_6)) && (wxLUA_USE_wxPointSizeRect)
    { "Inside", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_Inside, 1, NULL },
#endif // ((defined(WXWIN_COMPATIBILITY_2_6) && WXWIN_COMPATIBILITY_2_6)) && (wxLUA_USE_wxPointSizeRect)

    { "Intersects", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_Intersects, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_IsEmpty, 1, NULL },
    { "Offset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_Offset, 1, NULL },
    { "SetBottom", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_SetBottom, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)
    { "SetBottomLeft", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_SetBottomLeft, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)

    { "SetBottomRight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_SetBottomRight, 1, NULL },
    { "SetHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_SetHeight, 1, NULL },
    { "SetLeft", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_SetLeft, 1, NULL },
    { "SetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_SetPosition, 1, NULL },
    { "SetRight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_SetRight, 1, NULL },
    { "SetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_SetSize, 1, NULL },
    { "SetTop", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_SetTop, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)
    { "SetTopRight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_SetTopRight, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxPointSizeRect)

    { "SetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_SetWidth, 1, NULL },
    { "SetX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_SetX, 1, NULL },
    { "SetY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_SetY, 1, NULL },
    { "Union", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_Union, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRect_delete, 1, NULL },
    { "op_add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_op_add, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_op_eq, 1, NULL },
    { "op_iadd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_op_iadd, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRect_op_set, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect)
    { "wxRect", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRect_constructor_overload, s_wxluafunc_wxLua_wxRect_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxPointSizeRect)

    { 0, 0, 0, 0 },
};

int wxRect_methodCount = sizeof(wxRect_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxPointSizeRect

// ---------------------------------------------------------------------------
// Bind class wxGDIObject
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGDIObject'
int wxluatype_wxGDIObject = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGDIObject_IsNull[] = { &wxluatype_wxGDIObject, NULL };
static int LUACALL wxLua_wxGDIObject_IsNull(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGDIObject_IsNull[1] = {{ wxLua_wxGDIObject_IsNull, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGDIObject_IsNull }};
//     bool IsNull()
static int LUACALL wxLua_wxGDIObject_IsNull(lua_State *L)
{
    // get this
    wxGDIObject * self = (wxGDIObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGDIObject);
    // call IsNull
    bool returns = (self->IsNull());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGDIObject_delete[] = { &wxluatype_wxGDIObject, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGDIObject_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGDIObject_delete }};



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGDIObject_methods[] = {
    { "IsNull", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGDIObject_IsNull, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGDIObject_delete, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxGDIObject_methodCount = sizeof(wxGDIObject_methods)/sizeof(wxLuaBindMethod) - 1;



#if wxLUA_USE_wxRegion
// ---------------------------------------------------------------------------
// Bind class wxRegion
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRegion'
int wxluatype_wxRegion = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Clear[] = { &wxluatype_wxRegion, NULL };
static int LUACALL wxLua_wxRegion_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Clear[1] = {{ wxLua_wxRegion_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRegion_Clear }};
//     void Clear()
static int LUACALL wxLua_wxRegion_Clear(lua_State *L)
{
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Clear
    self->Clear();

    return 0;
}


#if (wxLUA_USE_wxRegion) && ((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE )))
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Combine2[] = { &wxluatype_wxRegion, &wxluatype_wxRegion, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRegion_Combine2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Combine2[1] = {{ wxLua_wxRegion_Combine2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRegion_Combine2 }};
//     bool Combine(const wxRegion& region, wxRegionOp op)
static int LUACALL wxLua_wxRegion_Combine2(lua_State *L)
{
    // wxRegionOp op
    wxRegionOp op = (wxRegionOp)wxlua_getenumtype(L, 3);
    // const wxRegion region
    const wxRegion * region = (const wxRegion *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRegion);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Combine
    bool returns = (self->Combine(*region, op));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRegion) && ((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE )))

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE )))
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Combine1[] = { &wxluatype_wxRegion, &wxluatype_wxRect, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRegion_Combine1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Combine1[1] = {{ wxLua_wxRegion_Combine1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRegion_Combine1 }};
//     bool Combine(const wxRect& rect, wxRegionOp op);
static int LUACALL wxLua_wxRegion_Combine1(lua_State *L)
{
    // wxRegionOp op
    wxRegionOp op = (wxRegionOp)wxlua_getenumtype(L, 3);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Combine
    bool returns = (self->Combine(*rect, op));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE )))

#if (wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE ))
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Combine[] = { &wxluatype_wxRegion, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRegion_Combine(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Combine[1] = {{ wxLua_wxRegion_Combine, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxRegion_Combine }};
//     bool Combine(wxCoord x, wxCoord y, wxCoord w, wxCoord h, wxRegionOp op);
static int LUACALL wxLua_wxRegion_Combine(lua_State *L)
{
    // wxRegionOp op
    wxRegionOp op = (wxRegionOp)wxlua_getenumtype(L, 6);
    // wxCoord h
    wxCoord h = (wxCoord)wxlua_getnumbertype(L, 5);
    // wxCoord w
    wxCoord w = (wxCoord)wxlua_getnumbertype(L, 4);
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Combine
    bool returns = (self->Combine(x, y, w, h, op));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE ))

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Contains3[] = { &wxluatype_wxRegion, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRegion_Contains3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Contains3[1] = {{ wxLua_wxRegion_Contains3, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRegion_Contains3 }};
//     wxRegionContain Contains(long x, long y, long w, long h)
static int LUACALL wxLua_wxRegion_Contains3(lua_State *L)
{
    // long h
    long h = (long)wxlua_getnumbertype(L, 5);
    // long w
    long w = (long)wxlua_getnumbertype(L, 4);
    // long y
    long y = (long)wxlua_getnumbertype(L, 3);
    // long x
    long x = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Contains
    wxRegionContain returns = (self->Contains(x, y, w, h));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Contains2[] = { &wxluatype_wxRegion, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRegion_Contains2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Contains2[1] = {{ wxLua_wxRegion_Contains2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Contains2 }};
//     wxRegionContain Contains(const wxRect& rect)
static int LUACALL wxLua_wxRegion_Contains2(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Contains
    wxRegionContain returns = (self->Contains(*rect));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Contains1[] = { &wxluatype_wxRegion, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRegion_Contains1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Contains1[1] = {{ wxLua_wxRegion_Contains1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Contains1 }};
//     wxRegionContain Contains(const wxPoint& pt)
static int LUACALL wxLua_wxRegion_Contains1(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Contains
    wxRegionContain returns = (self->Contains(*pt));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Contains[] = { &wxluatype_wxRegion, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRegion_Contains(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Contains[1] = {{ wxLua_wxRegion_Contains, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRegion_Contains }};
//     wxRegionContain Contains(long x, long y)
static int LUACALL wxLua_wxRegion_Contains(lua_State *L)
{
    // long y
    long y = (long)wxlua_getnumbertype(L, 3);
    // long x
    long x = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Contains
    wxRegionContain returns = (self->Contains(x, y));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_ConvertToBitmap[] = { &wxluatype_wxRegion, NULL };
static int LUACALL wxLua_wxRegion_ConvertToBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_ConvertToBitmap[1] = {{ wxLua_wxRegion_ConvertToBitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRegion_ConvertToBitmap }};
//     wxBitmap ConvertToBitmap() const
static int LUACALL wxLua_wxRegion_ConvertToBitmap(lua_State *L)
{
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call ConvertToBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->ConvertToBitmap());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_GetBox[] = { &wxluatype_wxRegion, NULL };
static int LUACALL wxLua_wxRegion_GetBox(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_GetBox[1] = {{ wxLua_wxRegion_GetBox, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRegion_GetBox }};
//     wxRect GetBox() const
static int LUACALL wxLua_wxRegion_GetBox(lua_State *L)
{
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call GetBox
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetBox());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_GetBoxXYWH[] = { &wxluatype_wxRegion, NULL };
static int LUACALL wxLua_wxRegion_GetBoxXYWH(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_GetBoxXYWH[1] = {{ wxLua_wxRegion_GetBoxXYWH, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRegion_GetBoxXYWH }};
// %override wxLua_wxRegion_GetBoxXYWH
// %rename GetBoxCoords void GetBox(int &x, int &y, int &width, int &height)
static int LUACALL wxLua_wxRegion_GetBoxXYWH(lua_State *L)
{
    int height;
    int width;
    int y;
    int x;
    // get this
    wxRegion *self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call GetBox
    self->GetBox(x, y, width, height);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    lua_pushnumber(L, width);
    lua_pushnumber(L, height);
    // return the number of parameters
    return 4;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Intersect2[] = { &wxluatype_wxRegion, &wxluatype_wxRegion, NULL };
static int LUACALL wxLua_wxRegion_Intersect2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Intersect2[1] = {{ wxLua_wxRegion_Intersect2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Intersect2 }};
//     bool Intersect(const wxRegion& region)
static int LUACALL wxLua_wxRegion_Intersect2(lua_State *L)
{
    // const wxRegion region
    const wxRegion * region = (const wxRegion *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRegion);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Intersect
    bool returns = (self->Intersect(*region));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Intersect1[] = { &wxluatype_wxRegion, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRegion_Intersect1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Intersect1[1] = {{ wxLua_wxRegion_Intersect1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Intersect1 }};
//     bool Intersect(const wxRect& rect)
static int LUACALL wxLua_wxRegion_Intersect1(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Intersect
    bool returns = (self->Intersect(*rect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Intersect[] = { &wxluatype_wxRegion, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRegion_Intersect(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Intersect[1] = {{ wxLua_wxRegion_Intersect, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRegion_Intersect }};
//     bool Intersect(long x, long y, long width, long height)
static int LUACALL wxLua_wxRegion_Intersect(lua_State *L)
{
    // long height
    long height = (long)wxlua_getnumbertype(L, 5);
    // long width
    long width = (long)wxlua_getnumbertype(L, 4);
    // long y
    long y = (long)wxlua_getnumbertype(L, 3);
    // long x
    long x = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Intersect
    bool returns = (self->Intersect(x, y, width, height));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_IsEmpty[] = { &wxluatype_wxRegion, NULL };
static int LUACALL wxLua_wxRegion_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_IsEmpty[1] = {{ wxLua_wxRegion_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRegion_IsEmpty }};
//     bool IsEmpty() const
static int LUACALL wxLua_wxRegion_IsEmpty(lua_State *L)
{
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxRegion)) && (wxLUA_USE_wxRegion)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_IsEqual[] = { &wxluatype_wxRegion, &wxluatype_wxRegion, NULL };
static int LUACALL wxLua_wxRegion_IsEqual(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_IsEqual[1] = {{ wxLua_wxRegion_IsEqual, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_IsEqual }};
//     %wxchkver_2_8 bool IsEqual(const wxRegion& region) const
static int LUACALL wxLua_wxRegion_IsEqual(lua_State *L)
{
    // const wxRegion region
    const wxRegion * region = (const wxRegion *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRegion);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call IsEqual
    bool returns = (self->IsEqual(*region));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxRegion)) && (wxLUA_USE_wxRegion)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Offset[] = { &wxluatype_wxRegion, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRegion_Offset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Offset[1] = {{ wxLua_wxRegion_Offset, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRegion_Offset }};
//     bool Offset(wxCoord x, wxCoord y)
static int LUACALL wxLua_wxRegion_Offset(lua_State *L)
{
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Offset
    bool returns = (self->Offset(x, y));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxRegion)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Ok[] = { &wxluatype_wxRegion, NULL };
static int LUACALL wxLua_wxRegion_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Ok[1] = {{ wxLua_wxRegion_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRegion_Ok }};
//     %wxchkver_2_8 bool Ok() const
static int LUACALL wxLua_wxRegion_Ok(lua_State *L)
{
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxRegion)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Subtract2[] = { &wxluatype_wxRegion, &wxluatype_wxRegion, NULL };
static int LUACALL wxLua_wxRegion_Subtract2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Subtract2[1] = {{ wxLua_wxRegion_Subtract2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Subtract2 }};
//     bool Subtract(const wxRegion& region)
static int LUACALL wxLua_wxRegion_Subtract2(lua_State *L)
{
    // const wxRegion region
    const wxRegion * region = (const wxRegion *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRegion);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Subtract
    bool returns = (self->Subtract(*region));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Subtract1[] = { &wxluatype_wxRegion, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRegion_Subtract1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Subtract1[1] = {{ wxLua_wxRegion_Subtract1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Subtract1 }};
//     bool Subtract(const wxRect& rect)
static int LUACALL wxLua_wxRegion_Subtract1(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Subtract
    bool returns = (self->Subtract(*rect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Subtract[] = { &wxluatype_wxRegion, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRegion_Subtract(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Subtract[1] = {{ wxLua_wxRegion_Subtract, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRegion_Subtract }};
//     bool Subtract(long x, long y, long width, long height)
static int LUACALL wxLua_wxRegion_Subtract(lua_State *L)
{
    // long height
    long height = (long)wxlua_getnumbertype(L, 5);
    // long width
    long width = (long)wxlua_getnumbertype(L, 4);
    // long y
    long y = (long)wxlua_getnumbertype(L, 3);
    // long x
    long x = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Subtract
    bool returns = (self->Subtract(x, y, width, height));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Union4[] = { &wxluatype_wxRegion, &wxluatype_wxBitmap, &wxluatype_wxColour, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRegion_Union4(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Union4[1] = {{ wxLua_wxRegion_Union4, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRegion_Union4 }};
//     bool Union(const wxBitmap& bmp, const wxColour& transColour, int tolerance = 0)
static int LUACALL wxLua_wxRegion_Union4(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int tolerance = 0
    int tolerance = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // const wxColour transColour
    const wxColour * transColour = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // const wxBitmap bmp
    const wxBitmap * bmp = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Union
    bool returns = (self->Union(*bmp, *transColour, tolerance));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Union3[] = { &wxluatype_wxRegion, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxRegion_Union3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Union3[1] = {{ wxLua_wxRegion_Union3, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Union3 }};
//     bool Union(const wxBitmap& bmp)
static int LUACALL wxLua_wxRegion_Union3(lua_State *L)
{
    // const wxBitmap bmp
    const wxBitmap * bmp = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Union
    bool returns = (self->Union(*bmp));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Union2[] = { &wxluatype_wxRegion, &wxluatype_wxRegion, NULL };
static int LUACALL wxLua_wxRegion_Union2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Union2[1] = {{ wxLua_wxRegion_Union2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Union2 }};
//     bool Union(const wxRegion& region)
static int LUACALL wxLua_wxRegion_Union2(lua_State *L)
{
    // const wxRegion region
    const wxRegion * region = (const wxRegion *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRegion);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Union
    bool returns = (self->Union(*region));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Union1[] = { &wxluatype_wxRegion, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRegion_Union1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Union1[1] = {{ wxLua_wxRegion_Union1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Union1 }};
//     bool Union(const wxRect& rect)
static int LUACALL wxLua_wxRegion_Union1(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Union
    bool returns = (self->Union(*rect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Union[] = { &wxluatype_wxRegion, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRegion_Union(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Union[1] = {{ wxLua_wxRegion_Union, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRegion_Union }};
//     bool Union(long x, long y, long width, long height)
static int LUACALL wxLua_wxRegion_Union(lua_State *L)
{
    // long height
    long height = (long)wxlua_getnumbertype(L, 5);
    // long width
    long width = (long)wxlua_getnumbertype(L, 4);
    // long y
    long y = (long)wxlua_getnumbertype(L, 3);
    // long x
    long x = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Union
    bool returns = (self->Union(x, y, width, height));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Xor2[] = { &wxluatype_wxRegion, &wxluatype_wxRegion, NULL };
static int LUACALL wxLua_wxRegion_Xor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Xor2[1] = {{ wxLua_wxRegion_Xor2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Xor2 }};
//     bool Xor(const wxRegion& region)
static int LUACALL wxLua_wxRegion_Xor2(lua_State *L)
{
    // const wxRegion region
    const wxRegion * region = (const wxRegion *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRegion);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Xor
    bool returns = (self->Xor(*region));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Xor1[] = { &wxluatype_wxRegion, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRegion_Xor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Xor1[1] = {{ wxLua_wxRegion_Xor1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Xor1 }};
//     bool Xor(const wxRect& rect)
static int LUACALL wxLua_wxRegion_Xor1(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Xor
    bool returns = (self->Xor(*rect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_Xor[] = { &wxluatype_wxRegion, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRegion_Xor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Xor[1] = {{ wxLua_wxRegion_Xor, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRegion_Xor }};
//     bool Xor(long x, long y, long width, long height)
static int LUACALL wxLua_wxRegion_Xor(lua_State *L)
{
    // long height
    long height = (long)wxlua_getnumbertype(L, 5);
    // long width
    long width = (long)wxlua_getnumbertype(L, 4);
    // long y
    long y = (long)wxlua_getnumbertype(L, 3);
    // long x
    long x = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call Xor
    bool returns = (self->Xor(x, y, width, height));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_delete[] = { &wxluatype_wxRegion, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRegion_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_op_set[] = { &wxluatype_wxRegion, &wxluatype_wxRegion, NULL };
static int LUACALL wxLua_wxRegion_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_op_set[1] = {{ wxLua_wxRegion_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_op_set }};
//     %operator wxRegion& operator=(const wxRegion& r) const
static int LUACALL wxLua_wxRegion_op_set(lua_State *L)
{
    // const wxRegion r
    const wxRegion * r = (const wxRegion *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRegion);
    // get this
    wxRegion * self = (wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call op_set
    (*self)=(*r);
    wxRegion* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRegion);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_constructor3[] = { &wxluatype_wxRegion, NULL };
static int LUACALL wxLua_wxRegion_constructor3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_constructor3[1] = {{ wxLua_wxRegion_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRegion_constructor3 }};
//     wxRegion(const wxRegion& region)
static int LUACALL wxLua_wxRegion_constructor3(lua_State *L)
{
    // const wxRegion region
    const wxRegion * region = (const wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call constructor
    wxRegion* returns = new wxRegion(*region);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRegion);

    return 1;
}


#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_constructor2[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRegion_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_constructor2[1] = {{ wxLua_wxRegion_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRegion_constructor2 }};
//     wxRegion(const wxRect& rect)
static int LUACALL wxLua_wxRegion_constructor2(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect);
    // call constructor
    wxRegion* returns = new wxRegion(*rect);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRegion);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_constructor1[] = { &wxluatype_wxPoint, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRegion_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_constructor1[1] = {{ wxLua_wxRegion_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxRegion_constructor1 }};
//     wxRegion(const wxPoint& topLeft, const wxPoint& bottomRight)
static int LUACALL wxLua_wxRegion_constructor1(lua_State *L)
{
    // const wxPoint bottomRight
    const wxPoint * bottomRight = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // const wxPoint topLeft
    const wxPoint * topLeft = (const wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call constructor
    wxRegion* returns = new wxRegion(*topLeft, *bottomRight);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRegion);

    return 1;
}

#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegion_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRegion_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_constructor[1] = {{ wxLua_wxRegion_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxRegion_constructor }};
//     wxRegion(long x = 0, long y = 0, long width = 0, long height = 0)
static int LUACALL wxLua_wxRegion_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long height = 0
    long height = (argCount >= 4 ? (long)wxlua_getnumbertype(L, 4) : 0);
    // long width = 0
    long width = (argCount >= 3 ? (long)wxlua_getnumbertype(L, 3) : 0);
    // long y = 0
    long y = (argCount >= 2 ? (long)wxlua_getnumbertype(L, 2) : 0);
    // long x = 0
    long x = (argCount >= 1 ? (long)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxRegion* returns = new wxRegion(x, y, width, height);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRegion);

    return 1;
}




#if ((wxLUA_USE_wxRegion) && ((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE ))))||((wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE ))))||((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE )))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Combine_overload[] =
{

#if (wxLUA_USE_wxRegion) && ((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE )))
    { wxLua_wxRegion_Combine2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRegion_Combine2 },
#endif // (wxLUA_USE_wxRegion) && ((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE )))

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE )))
    { wxLua_wxRegion_Combine1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRegion_Combine1 },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE )))

#if (wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE ))
    { wxLua_wxRegion_Combine, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxRegion_Combine },
#endif // (wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE ))
};
static int s_wxluafunc_wxLua_wxRegion_Combine_overload_count = sizeof(s_wxluafunc_wxLua_wxRegion_Combine_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxRegion) && ((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE ))))||((wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE ))))||((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE )))

#if (wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Contains_overload[] =
{
    { wxLua_wxRegion_Contains3, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRegion_Contains3 },

#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRegion_Contains2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Contains2 },
#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRegion_Contains1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Contains1 },
#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRegion_Contains, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRegion_Contains },
};
static int s_wxluafunc_wxLua_wxRegion_Contains_overload_count = sizeof(s_wxluafunc_wxLua_wxRegion_Contains_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Intersect_overload[] =
{
    { wxLua_wxRegion_Intersect2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Intersect2 },

#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRegion_Intersect1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Intersect1 },
#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRegion_Intersect, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRegion_Intersect },
};
static int s_wxluafunc_wxLua_wxRegion_Intersect_overload_count = sizeof(s_wxluafunc_wxLua_wxRegion_Intersect_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Subtract_overload[] =
{
    { wxLua_wxRegion_Subtract2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Subtract2 },

#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRegion_Subtract1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Subtract1 },
#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRegion_Subtract, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRegion_Subtract },
};
static int s_wxluafunc_wxLua_wxRegion_Subtract_overload_count = sizeof(s_wxluafunc_wxLua_wxRegion_Subtract_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))

#if (((wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap))||(wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Union_overload[] =
{

#if ((wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush)
    { wxLua_wxRegion_Union4, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRegion_Union4 },
#endif // ((wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap)
    { wxLua_wxRegion_Union3, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Union3 },
#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap)
    { wxLua_wxRegion_Union2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Union2 },

#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRegion_Union1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Union1 },
#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRegion_Union, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRegion_Union },
};
static int s_wxluafunc_wxLua_wxRegion_Union_overload_count = sizeof(s_wxluafunc_wxLua_wxRegion_Union_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap))||(wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))

#if (wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_Xor_overload[] =
{
    { wxLua_wxRegion_Xor2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Xor2 },

#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRegion_Xor1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRegion_Xor1 },
#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRegion_Xor, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRegion_Xor },
};
static int s_wxluafunc_wxLua_wxRegion_Xor_overload_count = sizeof(s_wxluafunc_wxLua_wxRegion_Xor_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegion_constructor_overload[] =
{
    { wxLua_wxRegion_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRegion_constructor3 },

#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRegion_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRegion_constructor2 },
#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRegion_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxRegion_constructor1 },
#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRegion_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxRegion_constructor },
};
static int s_wxluafunc_wxLua_wxRegion_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRegion_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRegion_methods[] = {
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegion_Clear, 1, NULL },

#if ((wxLUA_USE_wxRegion) && ((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE ))))||((wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE ))))||((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE )))
    { "Combine", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegion_Combine_overload, s_wxluafunc_wxLua_wxRegion_Combine_overload_count, 0 },
#endif // ((wxLUA_USE_wxRegion) && ((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE ))))||((wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE ))))||((wxLUA_USE_wxRegion) && (defined (wxHAS_REGION_COMBINE )))

#if (wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))
    { "Contains", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegion_Contains_overload, s_wxluafunc_wxLua_wxRegion_Contains_overload_count, 0 },
#endif // (wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))

#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap)
    { "ConvertToBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegion_ConvertToBitmap, 1, NULL },
#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
    { "GetBox", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegion_GetBox, 1, NULL },
#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)

    { "GetBoxXYWH", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegion_GetBoxXYWH, 1, NULL },

#if (wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))
    { "Intersect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegion_Intersect_overload, s_wxluafunc_wxLua_wxRegion_Intersect_overload_count, 0 },
#endif // (wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))

    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegion_IsEmpty, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxRegion)) && (wxLUA_USE_wxRegion)
    { "IsEqual", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegion_IsEqual, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxRegion)) && (wxLUA_USE_wxRegion)

    { "Offset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegion_Offset, 1, NULL },

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxRegion)
    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegion_Ok, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxRegion)

#if (wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))
    { "Subtract", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegion_Subtract_overload, s_wxluafunc_wxLua_wxRegion_Subtract_overload_count, 0 },
#endif // (wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))

#if (((wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap))||(wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))
    { "Union", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegion_Union_overload, s_wxluafunc_wxLua_wxRegion_Union_overload_count, 0 },
#endif // (((wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxBitmap))||(wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))

#if (wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))
    { "Xor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegion_Xor_overload, s_wxluafunc_wxLua_wxRegion_Xor_overload_count, 0 },
#endif // (wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRegion_delete, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegion_op_set, 1, NULL },

#if (wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))
    { "wxRegion", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRegion_constructor_overload, s_wxluafunc_wxLua_wxRegion_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRegion)||((wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect))

    { 0, 0, 0, 0 },
};

int wxRegion_methodCount = sizeof(wxRegion_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRegion


#if wxLUA_USE_wxRegion
// ---------------------------------------------------------------------------
// Bind class wxRegionIterator
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRegionIterator'
int wxluatype_wxRegionIterator = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegionIterator_GetHeight[] = { &wxluatype_wxRegionIterator, NULL };
static int LUACALL wxLua_wxRegionIterator_GetHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegionIterator_GetHeight[1] = {{ wxLua_wxRegionIterator_GetHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRegionIterator_GetHeight }};
//     long GetHeight()    // long GetH()
static int LUACALL wxLua_wxRegionIterator_GetHeight(lua_State *L)
{
    // get this
    wxRegionIterator * self = (wxRegionIterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegionIterator);
    // call GetHeight
    long  returns = (self->GetHeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegionIterator_GetRect[] = { &wxluatype_wxRegionIterator, NULL };
static int LUACALL wxLua_wxRegionIterator_GetRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegionIterator_GetRect[1] = {{ wxLua_wxRegionIterator_GetRect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRegionIterator_GetRect }};
//     wxRect GetRect()
static int LUACALL wxLua_wxRegionIterator_GetRect(lua_State *L)
{
    // get this
    wxRegionIterator * self = (wxRegionIterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegionIterator);
    // call GetRect
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetRect());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegionIterator_GetWidth[] = { &wxluatype_wxRegionIterator, NULL };
static int LUACALL wxLua_wxRegionIterator_GetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegionIterator_GetWidth[1] = {{ wxLua_wxRegionIterator_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRegionIterator_GetWidth }};
//     long GetWidth()     // long GetW()
static int LUACALL wxLua_wxRegionIterator_GetWidth(lua_State *L)
{
    // get this
    wxRegionIterator * self = (wxRegionIterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegionIterator);
    // call GetWidth
    long  returns = (self->GetWidth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegionIterator_GetX[] = { &wxluatype_wxRegionIterator, NULL };
static int LUACALL wxLua_wxRegionIterator_GetX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegionIterator_GetX[1] = {{ wxLua_wxRegionIterator_GetX, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRegionIterator_GetX }};
//     long GetX()
static int LUACALL wxLua_wxRegionIterator_GetX(lua_State *L)
{
    // get this
    wxRegionIterator * self = (wxRegionIterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegionIterator);
    // call GetX
    long  returns = (self->GetX());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegionIterator_GetY[] = { &wxluatype_wxRegionIterator, NULL };
static int LUACALL wxLua_wxRegionIterator_GetY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegionIterator_GetY[1] = {{ wxLua_wxRegionIterator_GetY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRegionIterator_GetY }};
//     long GetY()
static int LUACALL wxLua_wxRegionIterator_GetY(lua_State *L)
{
    // get this
    wxRegionIterator * self = (wxRegionIterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegionIterator);
    // call GetY
    long  returns = (self->GetY());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegionIterator_HaveRects[] = { &wxluatype_wxRegionIterator, NULL };
static int LUACALL wxLua_wxRegionIterator_HaveRects(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegionIterator_HaveRects[1] = {{ wxLua_wxRegionIterator_HaveRects, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRegionIterator_HaveRects }};
//     bool HaveRects()
static int LUACALL wxLua_wxRegionIterator_HaveRects(lua_State *L)
{
    // get this
    wxRegionIterator * self = (wxRegionIterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegionIterator);
    // call HaveRects
    bool returns = (self->HaveRects());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegionIterator_Next[] = { &wxluatype_wxRegionIterator, NULL };
static int LUACALL wxLua_wxRegionIterator_Next(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegionIterator_Next[1] = {{ wxLua_wxRegionIterator_Next, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRegionIterator_Next }};
// %override wxLua_wxRegionIterator_Next
// void Next()
static int LUACALL wxLua_wxRegionIterator_Next(lua_State *L)
{
    // get this
    wxRegionIterator *self = (wxRegionIterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegionIterator);
    // call Next
    (*self)++;
    // return the number of parameters
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRegionIterator_Reset[] = { &wxluatype_wxRegionIterator, NULL };
static int LUACALL wxLua_wxRegionIterator_Reset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegionIterator_Reset[1] = {{ wxLua_wxRegionIterator_Reset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRegionIterator_Reset }};
//     void Reset()
static int LUACALL wxLua_wxRegionIterator_Reset(lua_State *L)
{
    // get this
    wxRegionIterator * self = (wxRegionIterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegionIterator);
    // call Reset
    self->Reset();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegionIterator_delete[] = { &wxluatype_wxRegionIterator, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegionIterator_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRegionIterator_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegionIterator_constructor[] = { &wxluatype_wxRegion, NULL };
static int LUACALL wxLua_wxRegionIterator_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegionIterator_constructor[1] = {{ wxLua_wxRegionIterator_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRegionIterator_constructor }};
//     wxRegionIterator(const wxRegion& region)
static int LUACALL wxLua_wxRegionIterator_constructor(lua_State *L)
{
    // const wxRegion region
    const wxRegion * region = (const wxRegion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegion);
    // call constructor
    wxRegionIterator* returns = new wxRegionIterator(*region);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRegionIterator);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRegionIterator_methods[] = {
    { "GetHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegionIterator_GetHeight, 1, NULL },

#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)
    { "GetRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegionIterator_GetRect, 1, NULL },
#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxPointSizeRect)

    { "GetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegionIterator_GetWidth, 1, NULL },
    { "GetX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegionIterator_GetX, 1, NULL },
    { "GetY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegionIterator_GetY, 1, NULL },
    { "HaveRects", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegionIterator_HaveRects, 1, NULL },
    { "Next", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegionIterator_Next, 1, NULL },
    { "Reset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegionIterator_Reset, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRegionIterator_delete, 1, NULL },
    { "wxRegionIterator", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRegionIterator_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRegionIterator_methodCount = sizeof(wxRegionIterator_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRegion


#if wxLUA_USE_wxFont
// ---------------------------------------------------------------------------
// Bind class wxFont
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFont'
int wxluatype_wxFont = WXLUA_TUNKNOWN;

#if (wxUSE_INTL) && (wxLUA_USE_wxFont)
static int LUACALL wxLua_wxFont_GetDefaultEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_GetDefaultEncoding[1] = {{ wxLua_wxFont_GetDefaultEncoding, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxFontEncoding GetDefaultEncoding()
static int LUACALL wxLua_wxFont_GetDefaultEncoding(lua_State *L)
{
    // call GetDefaultEncoding
    wxFontEncoding returns = (wxFont::GetDefaultEncoding());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxUSE_INTL) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_GetFaceName[] = { &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFont_GetFaceName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_GetFaceName[1] = {{ wxLua_wxFont_GetFaceName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFont_GetFaceName }};
//     wxString GetFaceName() const
static int LUACALL wxLua_wxFont_GetFaceName(lua_State *L)
{
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call GetFaceName
    wxString returns = (self->GetFaceName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_GetFamily[] = { &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFont_GetFamily(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_GetFamily[1] = {{ wxLua_wxFont_GetFamily, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFont_GetFamily }};
//     int      GetFamily() const
static int LUACALL wxLua_wxFont_GetFamily(lua_State *L)
{
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call GetFamily
    int returns = (self->GetFamily());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_GetNativeFontInfoDesc[] = { &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFont_GetNativeFontInfoDesc(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_GetNativeFontInfoDesc[1] = {{ wxLua_wxFont_GetNativeFontInfoDesc, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFont_GetNativeFontInfoDesc }};
//     wxString GetNativeFontInfoDesc() const
static int LUACALL wxLua_wxFont_GetNativeFontInfoDesc(lua_State *L)
{
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call GetNativeFontInfoDesc
    wxString returns = (self->GetNativeFontInfoDesc());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_GetPointSize[] = { &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFont_GetPointSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_GetPointSize[1] = {{ wxLua_wxFont_GetPointSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFont_GetPointSize }};
//     int      GetPointSize() const
static int LUACALL wxLua_wxFont_GetPointSize(lua_State *L)
{
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call GetPointSize
    int returns = (self->GetPointSize());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_GetStyle[] = { &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFont_GetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_GetStyle[1] = {{ wxLua_wxFont_GetStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFont_GetStyle }};
//     int      GetStyle() const
static int LUACALL wxLua_wxFont_GetStyle(lua_State *L)
{
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call GetStyle
    int returns = (self->GetStyle());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_GetUnderlined[] = { &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFont_GetUnderlined(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_GetUnderlined[1] = {{ wxLua_wxFont_GetUnderlined, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFont_GetUnderlined }};
//     bool     GetUnderlined() const
static int LUACALL wxLua_wxFont_GetUnderlined(lua_State *L)
{
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call GetUnderlined
    bool returns = (self->GetUnderlined());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_GetWeight[] = { &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFont_GetWeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_GetWeight[1] = {{ wxLua_wxFont_GetWeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFont_GetWeight }};
//     int      GetWeight() const
static int LUACALL wxLua_wxFont_GetWeight(lua_State *L)
{
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call GetWeight
    int returns = (self->GetWeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_IsFixedWidth[] = { &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFont_IsFixedWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_IsFixedWidth[1] = {{ wxLua_wxFont_IsFixedWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFont_IsFixedWidth }};
//     bool IsFixedWidth() const
static int LUACALL wxLua_wxFont_IsFixedWidth(lua_State *L)
{
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call IsFixedWidth
    bool returns = (self->IsFixedWidth());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxUSE_INTL) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_New3[] = { &wxluatype_wxSize, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFont_New3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_New3[1] = {{ wxLua_wxFont_New3, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 5, s_wxluatypeArray_wxLua_wxFont_New3 }};
//     static %gc wxFont* New(const wxSize& pixelSize, wxFontFamily family, int flags = wxFONTFLAG_DEFAULT, const wxString& faceName = "", wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
static int LUACALL wxLua_wxFont_New3(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    wxFontEncoding encoding = (argCount >= 5 ? (wxFontEncoding)wxlua_getenumtype(L, 5) : wxFONTENCODING_DEFAULT);
    // const wxString faceName = ""
    const wxString faceName = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // int flags = wxFONTFLAG_DEFAULT
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxFONTFLAG_DEFAULT);
    // wxFontFamily family
    wxFontFamily family = (wxFontFamily)wxlua_getenumtype(L, 2);
    // const wxSize pixelSize
    const wxSize * pixelSize = (const wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call New
    wxFont* returns = (wxFont*)wxFont::New(*pixelSize, family, flags, faceName, encoding);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_New2[] = { &wxluatype_wxSize, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TBOOLEAN, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFont_New2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_New2[1] = {{ wxLua_wxFont_New2, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 4, 7, s_wxluatypeArray_wxLua_wxFont_New2 }};
//     static %gc wxFont* New(const wxSize& pixelSize, wxFontFamily family, int style, wxFontWeight weight, const bool underline = false, const wxString& faceName = "", wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
static int LUACALL wxLua_wxFont_New2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    wxFontEncoding encoding = (argCount >= 7 ? (wxFontEncoding)wxlua_getenumtype(L, 7) : wxFONTENCODING_DEFAULT);
    // const wxString faceName = ""
    const wxString faceName = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxEmptyString));
    // const bool underline = false
    const bool underline = (argCount >= 5 ? wxlua_getbooleantype(L, 5) : false);
    // wxFontWeight weight
    wxFontWeight weight = (wxFontWeight)wxlua_getenumtype(L, 4);
    // int style
    int style = (int)wxlua_getnumbertype(L, 3);
    // wxFontFamily family
    wxFontFamily family = (wxFontFamily)wxlua_getenumtype(L, 2);
    // const wxSize pixelSize
    const wxSize * pixelSize = (const wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call New
    wxFont* returns = (wxFont*)wxFont::New(*pixelSize, family, style, weight, underline, faceName, encoding);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // ((wxUSE_INTL) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxPointSizeRect)

#if (wxUSE_INTL) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_New1[] = { &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFont_New1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_New1[1] = {{ wxLua_wxFont_New1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 5, s_wxluatypeArray_wxLua_wxFont_New1 }};
//     static %gc wxFont* New(int pointSize, wxFontFamily family, int flags = wxFONTFLAG_DEFAULT, const wxString& faceName = "", wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
static int LUACALL wxLua_wxFont_New1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    wxFontEncoding encoding = (argCount >= 5 ? (wxFontEncoding)wxlua_getenumtype(L, 5) : wxFONTENCODING_DEFAULT);
    // const wxString faceName = ""
    const wxString faceName = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // int flags = wxFONTFLAG_DEFAULT
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxFONTFLAG_DEFAULT);
    // wxFontFamily family
    wxFontFamily family = (wxFontFamily)wxlua_getenumtype(L, 2);
    // int pointSize
    int pointSize = (int)wxlua_getnumbertype(L, 1);
    // call New
    wxFont* returns = (wxFont*)wxFont::New(pointSize, family, flags, faceName, encoding);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_New[] = { &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TBOOLEAN, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFont_New(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_New[1] = {{ wxLua_wxFont_New, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 4, 7, s_wxluatypeArray_wxLua_wxFont_New }};
//     static %gc wxFont* New(int pointSize, wxFontFamily family, int style, wxFontWeight weight, const bool underline = false, const wxString& faceName = "", wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
static int LUACALL wxLua_wxFont_New(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    wxFontEncoding encoding = (argCount >= 7 ? (wxFontEncoding)wxlua_getenumtype(L, 7) : wxFONTENCODING_DEFAULT);
    // const wxString faceName = ""
    const wxString faceName = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxEmptyString));
    // const bool underline = false
    const bool underline = (argCount >= 5 ? wxlua_getbooleantype(L, 5) : false);
    // wxFontWeight weight
    wxFontWeight weight = (wxFontWeight)wxlua_getenumtype(L, 4);
    // int style
    int style = (int)wxlua_getnumbertype(L, 3);
    // wxFontFamily family
    wxFontFamily family = (wxFontFamily)wxlua_getenumtype(L, 2);
    // int pointSize
    int pointSize = (int)wxlua_getnumbertype(L, 1);
    // call New
    wxFont* returns = (wxFont*)wxFont::New(pointSize, family, style, weight, underline, faceName, encoding);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxUSE_INTL) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_Ok[] = { &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFont_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_Ok[1] = {{ wxLua_wxFont_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFont_Ok }};
//     bool Ok()
static int LUACALL wxLua_wxFont_Ok(lua_State *L)
{
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxUSE_INTL) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_SetDefaultEncoding[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFont_SetDefaultEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_SetDefaultEncoding[1] = {{ wxLua_wxFont_SetDefaultEncoding, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFont_SetDefaultEncoding }};
//     static void SetDefaultEncoding(wxFontEncoding encoding)
static int LUACALL wxLua_wxFont_SetDefaultEncoding(lua_State *L)
{
    // wxFontEncoding encoding
    wxFontEncoding encoding = (wxFontEncoding)wxlua_getenumtype(L, 1);
    // call SetDefaultEncoding
    wxFont::SetDefaultEncoding(encoding);

    return 0;
}

#endif // (wxUSE_INTL) && (wxLUA_USE_wxFont)

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_SetFaceName[] = { &wxluatype_wxFont, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFont_SetFaceName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_SetFaceName[1] = {{ wxLua_wxFont_SetFaceName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFont_SetFaceName }};
//     %not_overload %wxchkver_2_8 bool SetFaceName(const wxString& faceName)
static int LUACALL wxLua_wxFont_SetFaceName(lua_State *L)
{
    // const wxString faceName
    const wxString faceName = wxlua_getwxStringtype(L, 2);
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call SetFaceName
    bool returns = (self->SetFaceName(faceName));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_SetFaceName[] = { &wxluatype_wxFont, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFont_SetFaceName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_SetFaceName[1] = {{ wxLua_wxFont_SetFaceName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFont_SetFaceName }};
//     %not_overload !%wxchkver_2_8 void SetFaceName(const wxString& faceName)
static int LUACALL wxLua_wxFont_SetFaceName(lua_State *L)
{
    // const wxString faceName
    const wxString faceName = wxlua_getwxStringtype(L, 2);
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call SetFaceName
    self->SetFaceName(faceName);

    return 0;
}

#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_SetFamily[] = { &wxluatype_wxFont, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFont_SetFamily(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_SetFamily[1] = {{ wxLua_wxFont_SetFamily, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFont_SetFamily }};
//     void     SetFamily(int family)
static int LUACALL wxLua_wxFont_SetFamily(lua_State *L)
{
    // int family
    int family = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call SetFamily
    self->SetFamily(family);

    return 0;
}


#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_SetNativeFontInfo[] = { &wxluatype_wxFont, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFont_SetNativeFontInfo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_SetNativeFontInfo[1] = {{ wxLua_wxFont_SetNativeFontInfo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFont_SetNativeFontInfo }};
//     %not_overload %wxchkver_2_8 bool SetNativeFontInfo(const wxString& info)
static int LUACALL wxLua_wxFont_SetNativeFontInfo(lua_State *L)
{
    // const wxString info
    const wxString info = wxlua_getwxStringtype(L, 2);
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call SetNativeFontInfo
    bool returns = (self->SetNativeFontInfo(info));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_SetNativeFontInfo[] = { &wxluatype_wxFont, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFont_SetNativeFontInfo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_SetNativeFontInfo[1] = {{ wxLua_wxFont_SetNativeFontInfo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFont_SetNativeFontInfo }};
//     %not_overload !%wxchkver_2_8 void SetNativeFontInfo(const wxString& info)
static int LUACALL wxLua_wxFont_SetNativeFontInfo(lua_State *L)
{
    // const wxString info
    const wxString info = wxlua_getwxStringtype(L, 2);
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call SetNativeFontInfo
    self->SetNativeFontInfo(info);

    return 0;
}

#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_SetNativeFontInfoUserDesc[] = { &wxluatype_wxFont, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFont_SetNativeFontInfoUserDesc(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_SetNativeFontInfoUserDesc[1] = {{ wxLua_wxFont_SetNativeFontInfoUserDesc, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFont_SetNativeFontInfoUserDesc }};
//     %wxchkver_2_8 bool SetNativeFontInfoUserDesc(const wxString& info)
static int LUACALL wxLua_wxFont_SetNativeFontInfoUserDesc(lua_State *L)
{
    // const wxString info
    const wxString info = wxlua_getwxStringtype(L, 2);
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call SetNativeFontInfoUserDesc
    bool returns = (self->SetNativeFontInfoUserDesc(info));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_SetPointSize[] = { &wxluatype_wxFont, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFont_SetPointSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_SetPointSize[1] = {{ wxLua_wxFont_SetPointSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFont_SetPointSize }};
//     void     SetPointSize(int pointSize)
static int LUACALL wxLua_wxFont_SetPointSize(lua_State *L)
{
    // int pointSize
    int pointSize = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call SetPointSize
    self->SetPointSize(pointSize);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_SetStyle[] = { &wxluatype_wxFont, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFont_SetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_SetStyle[1] = {{ wxLua_wxFont_SetStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFont_SetStyle }};
//     void     SetStyle(int style)
static int LUACALL wxLua_wxFont_SetStyle(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call SetStyle
    self->SetStyle(style);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_SetUnderlined[] = { &wxluatype_wxFont, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxFont_SetUnderlined(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_SetUnderlined[1] = {{ wxLua_wxFont_SetUnderlined, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFont_SetUnderlined }};
//     void     SetUnderlined(const bool underlined)
static int LUACALL wxLua_wxFont_SetUnderlined(lua_State *L)
{
    // const bool underlined
    const bool underlined = wxlua_getbooleantype(L, 2);
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call SetUnderlined
    self->SetUnderlined(underlined);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_SetWeight[] = { &wxluatype_wxFont, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFont_SetWeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_SetWeight[1] = {{ wxLua_wxFont_SetWeight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFont_SetWeight }};
//     void     SetWeight(int weight)
static int LUACALL wxLua_wxFont_SetWeight(lua_State *L)
{
    // int weight
    int weight = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call SetWeight
    self->SetWeight(weight);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_delete[] = { &wxluatype_wxFont, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFont_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_op_eq[] = { &wxluatype_wxFont, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFont_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_op_eq[1] = {{ wxLua_wxFont_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFont_op_eq }};
//     %operator bool operator == (const wxFont& font) const
static int LUACALL wxLua_wxFont_op_eq(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call op_eq
    bool returns = ((*self)==(*font));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_op_set[] = { &wxluatype_wxFont, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFont_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_op_set[1] = {{ wxLua_wxFont_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFont_op_set }};
//     %operator wxFont& operator=(const wxFont& f) const
static int LUACALL wxLua_wxFont_op_set(lua_State *L)
{
    // const wxFont f
    const wxFont * f = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxFont * self = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call op_set
    (*self)=(*f);
    wxFont* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_constructor1[] = { &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFont_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_constructor1[1] = {{ wxLua_wxFont_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFont_constructor1 }};
//     wxFont(const wxFont& font)
static int LUACALL wxLua_wxFont_constructor1(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call constructor
    wxFont* returns = new wxFont(*font);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}


#if (wxUSE_INTL) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFont_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFont_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_constructor[1] = {{ wxLua_wxFont_constructor, WXLUAMETHOD_CONSTRUCTOR, 4, 7, s_wxluatypeArray_wxLua_wxFont_constructor }};
//     wxFont(int pointSize, int family, int style, int weight, const bool underline = false, const wxString& faceName = "", wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
static int LUACALL wxLua_wxFont_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    wxFontEncoding encoding = (argCount >= 7 ? (wxFontEncoding)wxlua_getenumtype(L, 7) : wxFONTENCODING_DEFAULT);
    // const wxString faceName = ""
    const wxString faceName = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxEmptyString));
    // const bool underline = false
    const bool underline = (argCount >= 5 ? wxlua_getbooleantype(L, 5) : false);
    // int weight
    int weight = (int)wxlua_getnumbertype(L, 4);
    // int style
    int style = (int)wxlua_getnumbertype(L, 3);
    // int family
    int family = (int)wxlua_getnumbertype(L, 2);
    // int pointSize
    int pointSize = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxFont* returns = new wxFont(pointSize, family, style, weight, underline, faceName, encoding);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxUSE_INTL) && (wxLUA_USE_wxFont)



#if (((wxUSE_INTL) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxPointSizeRect))||((wxUSE_INTL) && (wxLUA_USE_wxFont))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_New_overload[] =
{

#if ((wxUSE_INTL) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxFont_New3, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 5, s_wxluatypeArray_wxLua_wxFont_New3 },
#endif // ((wxUSE_INTL) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxPointSizeRect)

#if ((wxUSE_INTL) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxFont_New2, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 4, 7, s_wxluatypeArray_wxLua_wxFont_New2 },
#endif // ((wxUSE_INTL) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxPointSizeRect)

#if (wxUSE_INTL) && (wxLUA_USE_wxFont)
    { wxLua_wxFont_New1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 5, s_wxluatypeArray_wxLua_wxFont_New1 },
#endif // (wxUSE_INTL) && (wxLUA_USE_wxFont)

#if (wxUSE_INTL) && (wxLUA_USE_wxFont)
    { wxLua_wxFont_New, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 4, 7, s_wxluatypeArray_wxLua_wxFont_New },
#endif // (wxUSE_INTL) && (wxLUA_USE_wxFont)
};
static int s_wxluafunc_wxLua_wxFont_New_overload_count = sizeof(s_wxluafunc_wxLua_wxFont_New_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxUSE_INTL) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxPointSizeRect))||((wxUSE_INTL) && (wxLUA_USE_wxFont))

#if (wxLUA_USE_wxFont)||((wxUSE_INTL) && (wxLUA_USE_wxFont))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFont_constructor_overload[] =
{
    { wxLua_wxFont_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFont_constructor1 },

#if (wxUSE_INTL) && (wxLUA_USE_wxFont)
    { wxLua_wxFont_constructor, WXLUAMETHOD_CONSTRUCTOR, 4, 7, s_wxluatypeArray_wxLua_wxFont_constructor },
#endif // (wxUSE_INTL) && (wxLUA_USE_wxFont)
};
static int s_wxluafunc_wxLua_wxFont_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxFont_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxFont)||((wxUSE_INTL) && (wxLUA_USE_wxFont))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFont_methods[] = {
#if (wxUSE_INTL) && (wxLUA_USE_wxFont)
    { "GetDefaultEncoding", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFont_GetDefaultEncoding, 1, NULL },
#endif // (wxUSE_INTL) && (wxLUA_USE_wxFont)

    { "GetFaceName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_GetFaceName, 1, NULL },
    { "GetFamily", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_GetFamily, 1, NULL },
    { "GetNativeFontInfoDesc", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_GetNativeFontInfoDesc, 1, NULL },
    { "GetPointSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_GetPointSize, 1, NULL },
    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_GetStyle, 1, NULL },
    { "GetUnderlined", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_GetUnderlined, 1, NULL },
    { "GetWeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_GetWeight, 1, NULL },
    { "IsFixedWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_IsFixedWidth, 1, NULL },

#if (((wxUSE_INTL) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxPointSizeRect))||((wxUSE_INTL) && (wxLUA_USE_wxFont))
    { "New", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFont_New_overload, s_wxluafunc_wxLua_wxFont_New_overload_count, 0 },
#endif // (((wxUSE_INTL) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxPointSizeRect))||((wxUSE_INTL) && (wxLUA_USE_wxFont))

    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_Ok, 1, NULL },

#if (wxUSE_INTL) && (wxLUA_USE_wxFont)
    { "SetDefaultEncoding", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFont_SetDefaultEncoding, 1, NULL },
#endif // (wxUSE_INTL) && (wxLUA_USE_wxFont)

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
    { "SetFaceName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_SetFaceName, 1, NULL },
#elif (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
    { "SetFaceName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_SetFaceName, 1, NULL },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
    { "SetFamily", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_SetFamily, 1, NULL },

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
    { "SetNativeFontInfo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_SetNativeFontInfo, 1, NULL },
#elif (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
    { "SetNativeFontInfo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_SetNativeFontInfo, 1, NULL },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
    { "SetNativeFontInfoUserDesc", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_SetNativeFontInfoUserDesc, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)

    { "SetPointSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_SetPointSize, 1, NULL },
    { "SetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_SetStyle, 1, NULL },
    { "SetUnderlined", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_SetUnderlined, 1, NULL },
    { "SetWeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_SetWeight, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFont_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_op_eq, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFont_op_set, 1, NULL },

#if (wxLUA_USE_wxFont)||((wxUSE_INTL) && (wxLUA_USE_wxFont))
    { "wxFont", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFont_constructor_overload, s_wxluafunc_wxLua_wxFont_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxFont)||((wxUSE_INTL) && (wxLUA_USE_wxFont))

    { 0, 0, 0, 0 },
};

int wxFont_methodCount = sizeof(wxFont_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxFont


#if wxLUA_USE_wxFont
// ---------------------------------------------------------------------------
// Bind class wxNativeFontInfo
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxNativeFontInfo'
int wxluatype_wxNativeFontInfo = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_FromString[] = { &wxluatype_wxNativeFontInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxNativeFontInfo_FromString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_FromString[1] = {{ wxLua_wxNativeFontInfo_FromString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNativeFontInfo_FromString }};
//     bool FromString(const wxString& s);
static int LUACALL wxLua_wxNativeFontInfo_FromString(lua_State *L)
{
    // const wxString s
    const wxString s = wxlua_getwxStringtype(L, 2);
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call FromString
    bool returns = (self->FromString(s));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_FromUserString[] = { &wxluatype_wxNativeFontInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxNativeFontInfo_FromUserString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_FromUserString[1] = {{ wxLua_wxNativeFontInfo_FromUserString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNativeFontInfo_FromUserString }};
//     bool FromUserString(const wxString& s)
static int LUACALL wxLua_wxNativeFontInfo_FromUserString(lua_State *L)
{
    // const wxString s
    const wxString s = wxlua_getwxStringtype(L, 2);
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call FromUserString
    bool returns = (self->FromUserString(s));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxUSE_INTL) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_GetEncoding[] = { &wxluatype_wxNativeFontInfo, NULL };
static int LUACALL wxLua_wxNativeFontInfo_GetEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_GetEncoding[1] = {{ wxLua_wxNativeFontInfo_GetEncoding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNativeFontInfo_GetEncoding }};
//     wxFontEncoding GetEncoding() const
static int LUACALL wxLua_wxNativeFontInfo_GetEncoding(lua_State *L)
{
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call GetEncoding
    wxFontEncoding returns = (self->GetEncoding());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxUSE_INTL) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_GetFaceName[] = { &wxluatype_wxNativeFontInfo, NULL };
static int LUACALL wxLua_wxNativeFontInfo_GetFaceName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_GetFaceName[1] = {{ wxLua_wxNativeFontInfo_GetFaceName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNativeFontInfo_GetFaceName }};
//     wxString GetFaceName() const
static int LUACALL wxLua_wxNativeFontInfo_GetFaceName(lua_State *L)
{
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call GetFaceName
    wxString returns = (self->GetFaceName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_GetFamily[] = { &wxluatype_wxNativeFontInfo, NULL };
static int LUACALL wxLua_wxNativeFontInfo_GetFamily(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_GetFamily[1] = {{ wxLua_wxNativeFontInfo_GetFamily, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNativeFontInfo_GetFamily }};
//     wxFontFamily GetFamily() const
static int LUACALL wxLua_wxNativeFontInfo_GetFamily(lua_State *L)
{
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call GetFamily
    wxFontFamily returns = (self->GetFamily());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && ((defined(__WXMSW__)) && (wxLUA_USE_wxFont))
static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_GetPixelSize[] = { &wxluatype_wxNativeFontInfo, NULL };
static int LUACALL wxLua_wxNativeFontInfo_GetPixelSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_GetPixelSize[1] = {{ wxLua_wxNativeFontInfo_GetPixelSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNativeFontInfo_GetPixelSize }};
//     %msw wxSize GetPixelSize() const // FIXME wxWidgets has undefined symbol in gtk/mac
static int LUACALL wxLua_wxNativeFontInfo_GetPixelSize(lua_State *L)
{
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call GetPixelSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetPixelSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((defined(__WXMSW__)) && (wxLUA_USE_wxFont))

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_GetPointSize[] = { &wxluatype_wxNativeFontInfo, NULL };
static int LUACALL wxLua_wxNativeFontInfo_GetPointSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_GetPointSize[1] = {{ wxLua_wxNativeFontInfo_GetPointSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNativeFontInfo_GetPointSize }};
//     int GetPointSize() const
static int LUACALL wxLua_wxNativeFontInfo_GetPointSize(lua_State *L)
{
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call GetPointSize
    int returns = (self->GetPointSize());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_GetStyle[] = { &wxluatype_wxNativeFontInfo, NULL };
static int LUACALL wxLua_wxNativeFontInfo_GetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_GetStyle[1] = {{ wxLua_wxNativeFontInfo_GetStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNativeFontInfo_GetStyle }};
//     wxFontStyle GetStyle() const
static int LUACALL wxLua_wxNativeFontInfo_GetStyle(lua_State *L)
{
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call GetStyle
    wxFontStyle returns = (self->GetStyle());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_GetUnderlined[] = { &wxluatype_wxNativeFontInfo, NULL };
static int LUACALL wxLua_wxNativeFontInfo_GetUnderlined(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_GetUnderlined[1] = {{ wxLua_wxNativeFontInfo_GetUnderlined, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNativeFontInfo_GetUnderlined }};
//     bool GetUnderlined() const
static int LUACALL wxLua_wxNativeFontInfo_GetUnderlined(lua_State *L)
{
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call GetUnderlined
    bool returns = (self->GetUnderlined());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_GetWeight[] = { &wxluatype_wxNativeFontInfo, NULL };
static int LUACALL wxLua_wxNativeFontInfo_GetWeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_GetWeight[1] = {{ wxLua_wxNativeFontInfo_GetWeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNativeFontInfo_GetWeight }};
//     wxFontWeight GetWeight() const
static int LUACALL wxLua_wxNativeFontInfo_GetWeight(lua_State *L)
{
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call GetWeight
    wxFontWeight returns = (self->GetWeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxUSE_INTL) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_SetEncoding[] = { &wxluatype_wxNativeFontInfo, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxNativeFontInfo_SetEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_SetEncoding[1] = {{ wxLua_wxNativeFontInfo_SetEncoding, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNativeFontInfo_SetEncoding }};
//     void SetEncoding(wxFontEncoding encoding)
static int LUACALL wxLua_wxNativeFontInfo_SetEncoding(lua_State *L)
{
    // wxFontEncoding encoding
    wxFontEncoding encoding = (wxFontEncoding)wxlua_getenumtype(L, 2);
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call SetEncoding
    self->SetEncoding(encoding);

    return 0;
}

#endif // (wxUSE_INTL) && (wxLUA_USE_wxFont)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_SetFaceName2[] = { &wxluatype_wxNativeFontInfo, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxNativeFontInfo_SetFaceName2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_SetFaceName2[1] = {{ wxLua_wxNativeFontInfo_SetFaceName2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNativeFontInfo_SetFaceName2 }};
//     %wxchkver_2_8 void SetFaceName(const wxArrayString& facenames)
static int LUACALL wxLua_wxNativeFontInfo_SetFaceName2(lua_State *L)
{
    // const wxArrayString facenames
    wxLuaSmartwxArrayString facenames = wxlua_getwxArrayString(L, 2);
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call SetFaceName
    self->SetFaceName(facenames);

    return 0;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxArrayString)

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_SetFaceName1[] = { &wxluatype_wxNativeFontInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxNativeFontInfo_SetFaceName1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_SetFaceName1[1] = {{ wxLua_wxNativeFontInfo_SetFaceName1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNativeFontInfo_SetFaceName1 }};
//     !%wxchkver_2_8 void SetFaceName(const wxString& facename)
static int LUACALL wxLua_wxNativeFontInfo_SetFaceName1(lua_State *L)
{
    // const wxString facename
    const wxString facename = wxlua_getwxStringtype(L, 2);
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call SetFaceName
    self->SetFaceName(facename);

    return 0;
}

#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_SetFaceName[] = { &wxluatype_wxNativeFontInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxNativeFontInfo_SetFaceName(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_SetFaceName[1] = {{ wxLua_wxNativeFontInfo_SetFaceName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNativeFontInfo_SetFaceName }};
//     %wxchkver_2_8 bool SetFaceName(const wxString& facename)
static int LUACALL wxLua_wxNativeFontInfo_SetFaceName(lua_State *L)
{
    // const wxString facename
    const wxString facename = wxlua_getwxStringtype(L, 2);
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call SetFaceName
    bool returns = (self->SetFaceName(facename));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_SetFamily[] = { &wxluatype_wxNativeFontInfo, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxNativeFontInfo_SetFamily(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_SetFamily[1] = {{ wxLua_wxNativeFontInfo_SetFamily, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNativeFontInfo_SetFamily }};
//     void SetFamily(wxFontFamily family)
static int LUACALL wxLua_wxNativeFontInfo_SetFamily(lua_State *L)
{
    // wxFontFamily family
    wxFontFamily family = (wxFontFamily)wxlua_getenumtype(L, 2);
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call SetFamily
    self->SetFamily(family);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && ((defined(__WXMSW__)) && (wxLUA_USE_wxFont))
static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_SetPixelSize[] = { &wxluatype_wxNativeFontInfo, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxNativeFontInfo_SetPixelSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_SetPixelSize[1] = {{ wxLua_wxNativeFontInfo_SetPixelSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNativeFontInfo_SetPixelSize }};
//     %msw void SetPixelSize(const wxSize& pixelSize)
static int LUACALL wxLua_wxNativeFontInfo_SetPixelSize(lua_State *L)
{
    // const wxSize pixelSize
    const wxSize * pixelSize = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call SetPixelSize
    self->SetPixelSize(*pixelSize);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((defined(__WXMSW__)) && (wxLUA_USE_wxFont))

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_SetPointSize[] = { &wxluatype_wxNativeFontInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxNativeFontInfo_SetPointSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_SetPointSize[1] = {{ wxLua_wxNativeFontInfo_SetPointSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNativeFontInfo_SetPointSize }};
//     void SetPointSize(int pointsize)
static int LUACALL wxLua_wxNativeFontInfo_SetPointSize(lua_State *L)
{
    // int pointsize
    int pointsize = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call SetPointSize
    self->SetPointSize(pointsize);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_SetStyle[] = { &wxluatype_wxNativeFontInfo, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxNativeFontInfo_SetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_SetStyle[1] = {{ wxLua_wxNativeFontInfo_SetStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNativeFontInfo_SetStyle }};
//     void SetStyle(wxFontStyle style)
static int LUACALL wxLua_wxNativeFontInfo_SetStyle(lua_State *L)
{
    // wxFontStyle style
    wxFontStyle style = (wxFontStyle)wxlua_getenumtype(L, 2);
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call SetStyle
    self->SetStyle(style);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_SetUnderlined[] = { &wxluatype_wxNativeFontInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxNativeFontInfo_SetUnderlined(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_SetUnderlined[1] = {{ wxLua_wxNativeFontInfo_SetUnderlined, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNativeFontInfo_SetUnderlined }};
//     void SetUnderlined(bool underlined)
static int LUACALL wxLua_wxNativeFontInfo_SetUnderlined(lua_State *L)
{
    // bool underlined
    bool underlined = wxlua_getbooleantype(L, 2);
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call SetUnderlined
    self->SetUnderlined(underlined);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_SetWeight[] = { &wxluatype_wxNativeFontInfo, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxNativeFontInfo_SetWeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_SetWeight[1] = {{ wxLua_wxNativeFontInfo_SetWeight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNativeFontInfo_SetWeight }};
//     void SetWeight(wxFontWeight weight)
static int LUACALL wxLua_wxNativeFontInfo_SetWeight(lua_State *L)
{
    // wxFontWeight weight
    wxFontWeight weight = (wxFontWeight)wxlua_getenumtype(L, 2);
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call SetWeight
    self->SetWeight(weight);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_ToString[] = { &wxluatype_wxNativeFontInfo, NULL };
static int LUACALL wxLua_wxNativeFontInfo_ToString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_ToString[1] = {{ wxLua_wxNativeFontInfo_ToString, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNativeFontInfo_ToString }};
//     wxString ToString() const
static int LUACALL wxLua_wxNativeFontInfo_ToString(lua_State *L)
{
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call ToString
    wxString returns = (self->ToString());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_ToUserString[] = { &wxluatype_wxNativeFontInfo, NULL };
static int LUACALL wxLua_wxNativeFontInfo_ToUserString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_ToUserString[1] = {{ wxLua_wxNativeFontInfo_ToUserString, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNativeFontInfo_ToUserString }};
//     wxString ToUserString() const
static int LUACALL wxLua_wxNativeFontInfo_ToUserString(lua_State *L)
{
    // get this
    wxNativeFontInfo * self = (wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call ToUserString
    wxString returns = (self->ToUserString());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_delete[] = { &wxluatype_wxNativeFontInfo, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxNativeFontInfo_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxNativeFontInfo_constructor1[] = { &wxluatype_wxNativeFontInfo, NULL };
static int LUACALL wxLua_wxNativeFontInfo_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_constructor1[1] = {{ wxLua_wxNativeFontInfo_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxNativeFontInfo_constructor1 }};
//     wxNativeFontInfo(const wxNativeFontInfo& info)
static int LUACALL wxLua_wxNativeFontInfo_constructor1(lua_State *L)
{
    // const wxNativeFontInfo info
    const wxNativeFontInfo * info = (const wxNativeFontInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNativeFontInfo);
    // call constructor
    wxNativeFontInfo* returns = new wxNativeFontInfo(*info);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxNativeFontInfo((wxNativeFontInfo*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNativeFontInfo);

    return 1;
}

static int LUACALL wxLua_wxNativeFontInfo_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_constructor[1] = {{ wxLua_wxNativeFontInfo_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxNativeFontInfo()
static int LUACALL wxLua_wxNativeFontInfo_constructor(lua_State *L)
{
    // call constructor
    wxNativeFontInfo* returns = new wxNativeFontInfo();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxNativeFontInfo((wxNativeFontInfo*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNativeFontInfo);

    return 1;
}




#if (((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxArrayString))||((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont))||((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_SetFaceName_overload[] =
{

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxArrayString)
    { wxLua_wxNativeFontInfo_SetFaceName2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNativeFontInfo_SetFaceName2 },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxArrayString)

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
    { wxLua_wxNativeFontInfo_SetFaceName1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNativeFontInfo_SetFaceName1 },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
    { wxLua_wxNativeFontInfo_SetFaceName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNativeFontInfo_SetFaceName },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)
};
static int s_wxluafunc_wxLua_wxNativeFontInfo_SetFaceName_overload_count = sizeof(s_wxluafunc_wxLua_wxNativeFontInfo_SetFaceName_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxArrayString))||((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont))||((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont))

#if (wxLUA_USE_wxFont)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNativeFontInfo_constructor_overload[] =
{
    { wxLua_wxNativeFontInfo_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxNativeFontInfo_constructor1 },
    { wxLua_wxNativeFontInfo_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxNativeFontInfo_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxNativeFontInfo_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxFont)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxNativeFontInfo_methods[] = {
    { "FromString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_FromString, 1, NULL },
    { "FromUserString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_FromUserString, 1, NULL },

#if (wxUSE_INTL) && (wxLUA_USE_wxFont)
    { "GetEncoding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_GetEncoding, 1, NULL },
#endif // (wxUSE_INTL) && (wxLUA_USE_wxFont)

    { "GetFaceName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_GetFaceName, 1, NULL },
    { "GetFamily", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_GetFamily, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && ((defined(__WXMSW__)) && (wxLUA_USE_wxFont))
    { "GetPixelSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_GetPixelSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((defined(__WXMSW__)) && (wxLUA_USE_wxFont))

    { "GetPointSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_GetPointSize, 1, NULL },
    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_GetStyle, 1, NULL },
    { "GetUnderlined", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_GetUnderlined, 1, NULL },
    { "GetWeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_GetWeight, 1, NULL },

#if (wxUSE_INTL) && (wxLUA_USE_wxFont)
    { "SetEncoding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_SetEncoding, 1, NULL },
#endif // (wxUSE_INTL) && (wxLUA_USE_wxFont)

#if (((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxArrayString))||((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont))||((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont))
    { "SetFaceName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_SetFaceName_overload, s_wxluafunc_wxLua_wxNativeFontInfo_SetFaceName_overload_count, 0 },
#endif // (((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxArrayString))||((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont))||((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFont))

    { "SetFamily", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_SetFamily, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && ((defined(__WXMSW__)) && (wxLUA_USE_wxFont))
    { "SetPixelSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_SetPixelSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((defined(__WXMSW__)) && (wxLUA_USE_wxFont))

    { "SetPointSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_SetPointSize, 1, NULL },
    { "SetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_SetStyle, 1, NULL },
    { "SetUnderlined", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_SetUnderlined, 1, NULL },
    { "SetWeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_SetWeight, 1, NULL },
    { "ToString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_ToString, 1, NULL },
    { "ToUserString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNativeFontInfo_ToUserString, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxNativeFontInfo_delete, 1, NULL },

#if (wxLUA_USE_wxFont)
    { "wxNativeFontInfo", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxNativeFontInfo_constructor_overload, s_wxluafunc_wxLua_wxNativeFontInfo_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxFont)

    { 0, 0, 0, 0 },
};

int wxNativeFontInfo_methodCount = sizeof(wxNativeFontInfo_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxFont


#if wxLUA_USE_wxFontEnumerator
// ---------------------------------------------------------------------------
// Bind class wxFontEnumerator
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFontEnumerator'
int wxluatype_wxFontEnumerator = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontEnumerator_EnumerateEncodings[] = { &wxluatype_wxFontEnumerator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFontEnumerator_EnumerateEncodings(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontEnumerator_EnumerateEncodings[1] = {{ wxLua_wxFontEnumerator_EnumerateEncodings, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxFontEnumerator_EnumerateEncodings }};
//     virtual bool EnumerateEncodings( const wxString &font = "" )
static int LUACALL wxLua_wxFontEnumerator_EnumerateEncodings(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString font = ""
    const wxString font = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // get this
    wxFontEnumerator * self = (wxFontEnumerator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontEnumerator);
    // call EnumerateEncodings
    bool returns = (self->EnumerateEncodings(font));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxUSE_INTL) && (wxLUA_USE_wxFontEnumerator)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontEnumerator_EnumerateFacenames[] = { &wxluatype_wxFontEnumerator, &wxluatype_TINTEGER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxFontEnumerator_EnumerateFacenames(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontEnumerator_EnumerateFacenames[1] = {{ wxLua_wxFontEnumerator_EnumerateFacenames, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxFontEnumerator_EnumerateFacenames }};
//     virtual bool EnumerateFacenames( wxFontEncoding encoding = wxFONTENCODING_SYSTEM, bool fixedWidthOnly = false)
static int LUACALL wxLua_wxFontEnumerator_EnumerateFacenames(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool fixedWidthOnly = false
    bool fixedWidthOnly = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // wxFontEncoding encoding = wxFONTENCODING_SYSTEM
    wxFontEncoding encoding = (argCount >= 2 ? (wxFontEncoding)wxlua_getenumtype(L, 2) : wxFONTENCODING_SYSTEM);
    // get this
    wxFontEnumerator * self = (wxFontEnumerator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontEnumerator);
    // call EnumerateFacenames
    bool returns = (self->EnumerateFacenames(encoding, fixedWidthOnly));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxUSE_INTL) && (wxLUA_USE_wxFontEnumerator)

#if (wxLUA_USE_wxArrayString) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator))
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontEnumerator_GetEncodings1[] = { &wxluatype_wxFontEnumerator, NULL };
static int LUACALL wxLua_wxFontEnumerator_GetEncodings1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontEnumerator_GetEncodings1[1] = {{ wxLua_wxFontEnumerator_GetEncodings1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFontEnumerator_GetEncodings1 }};
//     !%wxchkver_2_8 wxArrayString* GetEncodings()
static int LUACALL wxLua_wxFontEnumerator_GetEncodings1(lua_State *L)
{
    // get this
    wxFontEnumerator * self = (wxFontEnumerator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontEnumerator);
    // call GetEncodings
    wxArrayString* returns = (wxArrayString*)self->GetEncodings();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

#endif // (wxLUA_USE_wxArrayString) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator))

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontEnumerator_GetEncodings[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFontEnumerator_GetEncodings(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontEnumerator_GetEncodings[1] = {{ wxLua_wxFontEnumerator_GetEncodings, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxFontEnumerator_GetEncodings }};
//     %wxchkver_2_8 static wxArrayString GetEncodings(const wxString& facename = "")
static int LUACALL wxLua_wxFontEnumerator_GetEncodings(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString facename = ""
    const wxString facename = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call GetEncodings
    // allocate a new object using the copy constructor
    wxArrayString* returns = new wxArrayString(wxFontEnumerator::GetEncodings(facename));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxArrayString((wxArrayString*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)) && (wxLUA_USE_wxArrayString)

#if (wxLUA_USE_wxArrayString) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator))
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontEnumerator_GetFacenames1[] = { &wxluatype_wxFontEnumerator, NULL };
static int LUACALL wxLua_wxFontEnumerator_GetFacenames1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontEnumerator_GetFacenames1[1] = {{ wxLua_wxFontEnumerator_GetFacenames1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFontEnumerator_GetFacenames1 }};
//     !%wxchkver_2_8 wxArrayString* GetFacenames()
static int LUACALL wxLua_wxFontEnumerator_GetFacenames1(lua_State *L)
{
    // get this
    wxFontEnumerator * self = (wxFontEnumerator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontEnumerator);
    // call GetFacenames
    wxArrayString* returns = (wxArrayString*)self->GetFacenames();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

#endif // (wxLUA_USE_wxArrayString) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator))

#if ((wxUSE_INTL) && (wxLUA_USE_wxArrayString)) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator))
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontEnumerator_GetFacenames[] = { &wxluatype_TINTEGER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxFontEnumerator_GetFacenames(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontEnumerator_GetFacenames[1] = {{ wxLua_wxFontEnumerator_GetFacenames, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 2, s_wxluatypeArray_wxLua_wxFontEnumerator_GetFacenames }};
//     %wxchkver_2_8 static wxArrayString GetFacenames(wxFontEncoding encoding = wxFONTENCODING_SYSTEM, bool fixedWidthOnly = false)
static int LUACALL wxLua_wxFontEnumerator_GetFacenames(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool fixedWidthOnly = false
    bool fixedWidthOnly = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // wxFontEncoding encoding = wxFONTENCODING_SYSTEM
    wxFontEncoding encoding = (argCount >= 1 ? (wxFontEncoding)wxlua_getenumtype(L, 1) : wxFONTENCODING_SYSTEM);
    // call GetFacenames
    // allocate a new object using the copy constructor
    wxArrayString* returns = new wxArrayString(wxFontEnumerator::GetFacenames(encoding, fixedWidthOnly));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxArrayString((wxArrayString*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

#endif // ((wxUSE_INTL) && (wxLUA_USE_wxArrayString)) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator))

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontEnumerator_delete[] = { &wxluatype_wxFontEnumerator, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontEnumerator_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFontEnumerator_delete }};

static int LUACALL wxLua_wxFontEnumerator_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontEnumerator_constructor[1] = {{ wxLua_wxFontEnumerator_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxFontEnumerator()
static int LUACALL wxLua_wxFontEnumerator_constructor(lua_State *L)
{
    // call constructor
    wxFontEnumerator* returns = new wxFontEnumerator();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFontEnumerator((wxFontEnumerator*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFontEnumerator);

    return 1;
}




#if ((wxLUA_USE_wxArrayString) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)))||(((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)) && (wxLUA_USE_wxArrayString))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontEnumerator_GetEncodings_overload[] =
{

#if (wxLUA_USE_wxArrayString) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator))
    { wxLua_wxFontEnumerator_GetEncodings1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFontEnumerator_GetEncodings1 },
#endif // (wxLUA_USE_wxArrayString) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator))

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)) && (wxLUA_USE_wxArrayString)
    { wxLua_wxFontEnumerator_GetEncodings, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxFontEnumerator_GetEncodings },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)) && (wxLUA_USE_wxArrayString)
};
static int s_wxluafunc_wxLua_wxFontEnumerator_GetEncodings_overload_count = sizeof(s_wxluafunc_wxLua_wxFontEnumerator_GetEncodings_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxArrayString) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)))||(((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)) && (wxLUA_USE_wxArrayString))

#if ((wxLUA_USE_wxArrayString) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)))||(((wxUSE_INTL) && (wxLUA_USE_wxArrayString)) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontEnumerator_GetFacenames_overload[] =
{

#if (wxLUA_USE_wxArrayString) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator))
    { wxLua_wxFontEnumerator_GetFacenames1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFontEnumerator_GetFacenames1 },
#endif // (wxLUA_USE_wxArrayString) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator))

#if ((wxUSE_INTL) && (wxLUA_USE_wxArrayString)) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator))
    { wxLua_wxFontEnumerator_GetFacenames, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 2, s_wxluatypeArray_wxLua_wxFontEnumerator_GetFacenames },
#endif // ((wxUSE_INTL) && (wxLUA_USE_wxArrayString)) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator))
};
static int s_wxluafunc_wxLua_wxFontEnumerator_GetFacenames_overload_count = sizeof(s_wxluafunc_wxLua_wxFontEnumerator_GetFacenames_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxArrayString) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)))||(((wxUSE_INTL) && (wxLUA_USE_wxArrayString)) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFontEnumerator_methods[] = {
    { "EnumerateEncodings", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontEnumerator_EnumerateEncodings, 1, NULL },

#if (wxUSE_INTL) && (wxLUA_USE_wxFontEnumerator)
    { "EnumerateFacenames", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontEnumerator_EnumerateFacenames, 1, NULL },
#endif // (wxUSE_INTL) && (wxLUA_USE_wxFontEnumerator)

#if ((wxLUA_USE_wxArrayString) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)))||(((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)) && (wxLUA_USE_wxArrayString))
    { "GetEncodings", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFontEnumerator_GetEncodings_overload, s_wxluafunc_wxLua_wxFontEnumerator_GetEncodings_overload_count, 0 },
#endif // ((wxLUA_USE_wxArrayString) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)))||(((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)) && (wxLUA_USE_wxArrayString))

#if ((wxLUA_USE_wxArrayString) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)))||(((wxUSE_INTL) && (wxLUA_USE_wxArrayString)) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)))
    { "GetFacenames", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFontEnumerator_GetFacenames_overload, s_wxluafunc_wxLua_wxFontEnumerator_GetFacenames_overload_count, 0 },
#endif // ((wxLUA_USE_wxArrayString) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)))||(((wxUSE_INTL) && (wxLUA_USE_wxArrayString)) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontEnumerator)))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFontEnumerator_delete, 1, NULL },
    { "wxFontEnumerator", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFontEnumerator_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxFontEnumerator_methodCount = sizeof(wxFontEnumerator_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxFontEnumerator


#if wxLUA_USE_wxFontList
// ---------------------------------------------------------------------------
// Bind class wxFontList
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFontList'
int wxluatype_wxFontList = WXLUA_TUNKNOWN;

#if ((wxUSE_INTL) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxFontList)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontList_FindOrCreateFont[] = { &wxluatype_wxFontList, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFontList_FindOrCreateFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontList_FindOrCreateFont[1] = {{ wxLua_wxFontList_FindOrCreateFont, WXLUAMETHOD_METHOD, 5, 8, s_wxluatypeArray_wxLua_wxFontList_FindOrCreateFont }};
//     wxFont* FindOrCreateFont(int pointSize, int family, int style, int weight, bool underline = false, const wxString &faceName = "", wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
static int LUACALL wxLua_wxFontList_FindOrCreateFont(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    wxFontEncoding encoding = (argCount >= 8 ? (wxFontEncoding)wxlua_getenumtype(L, 8) : wxFONTENCODING_DEFAULT);
    // const wxString faceName = ""
    const wxString faceName = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxEmptyString));
    // bool underline = false
    bool underline = (argCount >= 6 ? wxlua_getbooleantype(L, 6) : false);
    // int weight
    int weight = (int)wxlua_getnumbertype(L, 5);
    // int style
    int style = (int)wxlua_getnumbertype(L, 4);
    // int family
    int family = (int)wxlua_getnumbertype(L, 3);
    // int pointSize
    int pointSize = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxFontList * self = (wxFontList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontList);
    // call FindOrCreateFont
    wxFont* returns = (wxFont*)self->FindOrCreateFont(pointSize, family, style, weight, underline, faceName, encoding);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // ((wxUSE_INTL) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxFontList)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFontList_methods[] = {
#if ((wxUSE_INTL) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxFontList)
    { "FindOrCreateFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontList_FindOrCreateFont, 1, NULL },
#endif // ((wxUSE_INTL) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxFontList)

    { 0, 0, 0, 0 },
};

int wxFontList_methodCount = sizeof(wxFontList_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxFontList


#if wxLUA_USE_wxFontMapper
// ---------------------------------------------------------------------------
// Bind class wxFontMapper
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFontMapper'
int wxluatype_wxFontMapper = WXLUA_TUNKNOWN;

#if (wxUSE_INTL) && (wxLUA_USE_wxFontMapper)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontMapper_CharsetToEncoding[] = { &wxluatype_wxFontMapper, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxFontMapper_CharsetToEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontMapper_CharsetToEncoding[1] = {{ wxLua_wxFontMapper_CharsetToEncoding, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFontMapper_CharsetToEncoding }};
//     wxFontEncoding CharsetToEncoding(const wxString &charset, bool interactive = true)
static int LUACALL wxLua_wxFontMapper_CharsetToEncoding(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool interactive = true
    bool interactive = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxString charset
    const wxString charset = wxlua_getwxStringtype(L, 2);
    // get this
    wxFontMapper * self = (wxFontMapper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontMapper);
    // call CharsetToEncoding
    wxFontEncoding returns = (self->CharsetToEncoding(charset, interactive));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxUSE_INTL) && (wxLUA_USE_wxFontMapper)

static int LUACALL wxLua_wxFontMapper_Get(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontMapper_Get[1] = {{ wxLua_wxFontMapper_Get, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxFontMapper *Get()
static int LUACALL wxLua_wxFontMapper_Get(lua_State *L)
{
    // call Get
    wxFontMapper* returns = (wxFontMapper*)wxFontMapper::Get();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFontMapper);

    return 1;
}


#if (wxUSE_INTL) && (wxLUA_USE_wxFontMapper)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontMapper_GetAltForEncoding[] = { &wxluatype_wxFontMapper, &wxluatype_TINTEGER, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxFontMapper_GetAltForEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontMapper_GetAltForEncoding[1] = {{ wxLua_wxFontMapper_GetAltForEncoding, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxFontMapper_GetAltForEncoding }};
// %override wxLua_wxFontMapper_GetAltForEncoding
// bool GetAltForEncoding(wxFontEncoding encoding, wxFontEncoding *altEncoding, const wxString &faceName = wxEmptyString, bool interactive = true)
static int LUACALL wxLua_wxFontMapper_GetAltForEncoding(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool interactive = true
    bool interactive = (argCount >= 5 ? wxlua_getbooleantype(L, 4) : true);
    // const wxString &faceName = wxEmptyString
    wxString faceName = (argCount >= 4 ? wxlua_getwxStringtype(L, 3) : wxString(wxT("")));
    // wxFontEncoding *altEncoding
    wxFontEncoding altEncoding;
    // wxFontEncoding encoding
    wxFontEncoding encoding = (wxFontEncoding)wxlua_getenumtype(L, 2);
    // get this
    wxFontMapper *self = (wxFontMapper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontMapper);
    // call GetAltForEncoding
    bool returns = self->GetAltForEncoding(encoding, &altEncoding, faceName, interactive);
    // push the result number
    lua_pushboolean(L, returns);
    // push the result encoding
    lua_pushnumber(L, altEncoding);
    // return the number of parameters
    return 2;
}


#endif // (wxUSE_INTL) && (wxLUA_USE_wxFontMapper)

static int LUACALL wxLua_wxFontMapper_GetDefaultConfigPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontMapper_GetDefaultConfigPath[1] = {{ wxLua_wxFontMapper_GetDefaultConfigPath, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxString GetDefaultConfigPath()
static int LUACALL wxLua_wxFontMapper_GetDefaultConfigPath(lua_State *L)
{
    // call GetDefaultConfigPath
    wxString returns = (wxFontMapper::GetDefaultConfigPath());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxUSE_INTL) && (wxLUA_USE_wxFontMapper)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontMapper_GetEncoding[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFontMapper_GetEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontMapper_GetEncoding[1] = {{ wxLua_wxFontMapper_GetEncoding, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFontMapper_GetEncoding }};
//     static wxFontEncoding GetEncoding(size_t n)
static int LUACALL wxLua_wxFontMapper_GetEncoding(lua_State *L)
{
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 1);
    // call GetEncoding
    wxFontEncoding returns = (wxFontMapper::GetEncoding(n));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontMapper_GetEncodingDescription[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFontMapper_GetEncodingDescription(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontMapper_GetEncodingDescription[1] = {{ wxLua_wxFontMapper_GetEncodingDescription, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFontMapper_GetEncodingDescription }};
//     static wxString GetEncodingDescription(wxFontEncoding encoding)
static int LUACALL wxLua_wxFontMapper_GetEncodingDescription(lua_State *L)
{
    // wxFontEncoding encoding
    wxFontEncoding encoding = (wxFontEncoding)wxlua_getenumtype(L, 1);
    // call GetEncodingDescription
    wxString returns = (wxFontMapper::GetEncodingDescription(encoding));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontMapper_GetEncodingFromName[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFontMapper_GetEncodingFromName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontMapper_GetEncodingFromName[1] = {{ wxLua_wxFontMapper_GetEncodingFromName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFontMapper_GetEncodingFromName }};
//     static wxFontEncoding GetEncodingFromName(const wxString& encoding)
static int LUACALL wxLua_wxFontMapper_GetEncodingFromName(lua_State *L)
{
    // const wxString encoding
    const wxString encoding = wxlua_getwxStringtype(L, 1);
    // call GetEncodingFromName
    wxFontEncoding returns = (wxFontMapper::GetEncodingFromName(encoding));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontMapper_GetEncodingName[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFontMapper_GetEncodingName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontMapper_GetEncodingName[1] = {{ wxLua_wxFontMapper_GetEncodingName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFontMapper_GetEncodingName }};
//     static wxString GetEncodingName(wxFontEncoding encoding)
static int LUACALL wxLua_wxFontMapper_GetEncodingName(lua_State *L)
{
    // wxFontEncoding encoding
    wxFontEncoding encoding = (wxFontEncoding)wxlua_getenumtype(L, 1);
    // call GetEncodingName
    wxString returns = (wxFontMapper::GetEncodingName(encoding));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // (wxUSE_INTL) && (wxLUA_USE_wxFontMapper)

static int LUACALL wxLua_wxFontMapper_GetSupportedEncodingsCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontMapper_GetSupportedEncodingsCount[1] = {{ wxLua_wxFontMapper_GetSupportedEncodingsCount, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static size_t GetSupportedEncodingsCount()
static int LUACALL wxLua_wxFontMapper_GetSupportedEncodingsCount(lua_State *L)
{
    // call GetSupportedEncodingsCount
    size_t returns = (wxFontMapper::GetSupportedEncodingsCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxUSE_INTL) && (wxLUA_USE_wxFontMapper)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontMapper_IsEncodingAvailable[] = { &wxluatype_wxFontMapper, &wxluatype_TINTEGER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFontMapper_IsEncodingAvailable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontMapper_IsEncodingAvailable[1] = {{ wxLua_wxFontMapper_IsEncodingAvailable, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFontMapper_IsEncodingAvailable }};
//     bool IsEncodingAvailable(wxFontEncoding encoding, const wxString &facename = "")
static int LUACALL wxLua_wxFontMapper_IsEncodingAvailable(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString facename = ""
    const wxString facename = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // wxFontEncoding encoding
    wxFontEncoding encoding = (wxFontEncoding)wxlua_getenumtype(L, 2);
    // get this
    wxFontMapper * self = (wxFontMapper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontMapper);
    // call IsEncodingAvailable
    bool returns = (self->IsEncodingAvailable(encoding, facename));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxUSE_INTL) && (wxLUA_USE_wxFontMapper)

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontMapper)
static int LUACALL wxLua_wxFontMapper_Reset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontMapper_Reset[1] = {{ wxLua_wxFontMapper_Reset, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     %wxchkver_2_8 static void Reset()
static int LUACALL wxLua_wxFontMapper_Reset(lua_State *L)
{
    // call Reset
    wxFontMapper::Reset();

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontMapper)

#if (wxLUA_USE_wxConfig && wxUSE_CONFIG) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontMapper))
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontMapper_SetConfig[] = { &wxluatype_wxFontMapper, &wxluatype_wxConfigBase, NULL };
static int LUACALL wxLua_wxFontMapper_SetConfig(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontMapper_SetConfig[1] = {{ wxLua_wxFontMapper_SetConfig, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxFontMapper_SetConfig }};
//     !%wxchkver_2_8 void SetConfig(wxConfigBase *config = NULL)
static int LUACALL wxLua_wxFontMapper_SetConfig(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxConfigBase config = NULL
    wxConfigBase * config = (argCount >= 2 ? (wxConfigBase *)wxluaT_getuserdatatype(L, 2, wxluatype_wxConfigBase) : NULL);
    // get this
    wxFontMapper * self = (wxFontMapper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontMapper);
    // call SetConfig
    self->SetConfig(config);

    return 0;
}

#endif // (wxLUA_USE_wxConfig && wxUSE_CONFIG) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontMapper))

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontMapper_SetConfigPath[] = { &wxluatype_wxFontMapper, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFontMapper_SetConfigPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontMapper_SetConfigPath[1] = {{ wxLua_wxFontMapper_SetConfigPath, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFontMapper_SetConfigPath }};
//     void SetConfigPath(const wxString &prefix)
static int LUACALL wxLua_wxFontMapper_SetConfigPath(lua_State *L)
{
    // const wxString prefix
    const wxString prefix = wxlua_getwxStringtype(L, 2);
    // get this
    wxFontMapper * self = (wxFontMapper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontMapper);
    // call SetConfigPath
    self->SetConfigPath(prefix);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontMapper_SetDialogParent[] = { &wxluatype_wxFontMapper, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxFontMapper_SetDialogParent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontMapper_SetDialogParent[1] = {{ wxLua_wxFontMapper_SetDialogParent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFontMapper_SetDialogParent }};
//     void SetDialogParent(wxWindow *parent)
static int LUACALL wxLua_wxFontMapper_SetDialogParent(lua_State *L)
{
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxFontMapper * self = (wxFontMapper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontMapper);
    // call SetDialogParent
    self->SetDialogParent(parent);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontMapper_SetDialogTitle[] = { &wxluatype_wxFontMapper, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFontMapper_SetDialogTitle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontMapper_SetDialogTitle[1] = {{ wxLua_wxFontMapper_SetDialogTitle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFontMapper_SetDialogTitle }};
//     void SetDialogTitle(const wxString &title)
static int LUACALL wxLua_wxFontMapper_SetDialogTitle(lua_State *L)
{
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 2);
    // get this
    wxFontMapper * self = (wxFontMapper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontMapper);
    // call SetDialogTitle
    self->SetDialogTitle(title);

    return 0;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFontMapper_methods[] = {
#if (wxUSE_INTL) && (wxLUA_USE_wxFontMapper)
    { "CharsetToEncoding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontMapper_CharsetToEncoding, 1, NULL },
#endif // (wxUSE_INTL) && (wxLUA_USE_wxFontMapper)

    { "Get", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFontMapper_Get, 1, NULL },

#if (wxUSE_INTL) && (wxLUA_USE_wxFontMapper)
    { "GetAltForEncoding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontMapper_GetAltForEncoding, 1, NULL },
#endif // (wxUSE_INTL) && (wxLUA_USE_wxFontMapper)

    { "GetDefaultConfigPath", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFontMapper_GetDefaultConfigPath, 1, NULL },

#if (wxUSE_INTL) && (wxLUA_USE_wxFontMapper)
    { "GetEncoding", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFontMapper_GetEncoding, 1, NULL },
    { "GetEncodingDescription", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFontMapper_GetEncodingDescription, 1, NULL },
    { "GetEncodingFromName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFontMapper_GetEncodingFromName, 1, NULL },
    { "GetEncodingName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFontMapper_GetEncodingName, 1, NULL },
#endif // (wxUSE_INTL) && (wxLUA_USE_wxFontMapper)

    { "GetSupportedEncodingsCount", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFontMapper_GetSupportedEncodingsCount, 1, NULL },

#if (wxUSE_INTL) && (wxLUA_USE_wxFontMapper)
    { "IsEncodingAvailable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontMapper_IsEncodingAvailable, 1, NULL },
#endif // (wxUSE_INTL) && (wxLUA_USE_wxFontMapper)

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontMapper)
    { "Reset", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFontMapper_Reset, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontMapper)

#if (wxLUA_USE_wxConfig && wxUSE_CONFIG) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontMapper))
    { "SetConfig", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontMapper_SetConfig, 1, NULL },
#endif // (wxLUA_USE_wxConfig && wxUSE_CONFIG) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFontMapper))

    { "SetConfigPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontMapper_SetConfigPath, 1, NULL },
    { "SetDialogParent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontMapper_SetDialogParent, 1, NULL },
    { "SetDialogTitle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontMapper_SetDialogTitle, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxFontMapper_methodCount = sizeof(wxFontMapper_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxFontMapper


#if wxLUA_USE_wxColourPenBrush
// ---------------------------------------------------------------------------
// Bind class wxColour
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxColour'
int wxluatype_wxColour = WXLUA_TUNKNOWN;

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_Alpha[] = { &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxColour_Alpha(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_Alpha[1] = {{ wxLua_wxColour_Alpha, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxColour_Alpha }};
//     %wxchkver_2_8 unsigned char Alpha() const
static int LUACALL wxLua_wxColour_Alpha(lua_State *L)
{
    // get this
    wxColour * self = (wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call Alpha
    unsigned char returns = (self->Alpha());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_Blue[] = { &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxColour_Blue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_Blue[1] = {{ wxLua_wxColour_Blue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxColour_Blue }};
//     unsigned char Blue() const
static int LUACALL wxLua_wxColour_Blue(lua_State *L)
{
    // get this
    wxColour * self = (wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call Blue
    unsigned char returns = (self->Blue());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_GetAsString[] = { &wxluatype_wxColour, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxColour_GetAsString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_GetAsString[1] = {{ wxLua_wxColour_GetAsString, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxColour_GetAsString }};
//     %wxchkver_2_8 virtual wxString GetAsString(long flags = wxC2S_NAME | wxC2S_CSS_SYNTAX) const
static int LUACALL wxLua_wxColour_GetAsString(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long flags = wxC2S_NAME | wxC2S_CSS_SYNTAX
    long flags = (argCount >= 2 ? (long)wxlua_getnumbertype(L, 2) : wxC2S_NAME | wxC2S_CSS_SYNTAX);
    // get this
    wxColour * self = (wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call GetAsString
    wxString returns = (self->GetAsString(flags));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)

#if (!defined(__WXMAC__)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_GetPixel[] = { &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxColour_GetPixel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_GetPixel[1] = {{ wxLua_wxColour_GetPixel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxColour_GetPixel }};
//     !%mac long GetPixel() const
static int LUACALL wxLua_wxColour_GetPixel(lua_State *L)
{
    // get this
    wxColour * self = (wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call GetPixel
    long  returns = (self->GetPixel());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (!defined(__WXMAC__)) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_Green[] = { &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxColour_Green(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_Green[1] = {{ wxLua_wxColour_Green, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxColour_Green }};
//     unsigned char Green() const
static int LUACALL wxLua_wxColour_Green(lua_State *L)
{
    // get this
    wxColour * self = (wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call Green
    unsigned char returns = (self->Green());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_Ok[] = { &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxColour_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_Ok[1] = {{ wxLua_wxColour_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxColour_Ok }};
//     bool Ok() const
static int LUACALL wxLua_wxColour_Ok(lua_State *L)
{
    // get this
    wxColour * self = (wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_Red[] = { &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxColour_Red(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_Red[1] = {{ wxLua_wxColour_Red, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxColour_Red }};
//     unsigned char Red() const
static int LUACALL wxLua_wxColour_Red(lua_State *L)
{
    // get this
    wxColour * self = (wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call Red
    unsigned char returns = (self->Red());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_Set3[] = { &wxluatype_wxColour, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxColour_Set3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_Set3[1] = {{ wxLua_wxColour_Set3, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxColour_Set3 }};
//         void Set(unsigned long colRGB)
static int LUACALL wxLua_wxColour_Set3(lua_State *L)
{
    // unsigned long colRGB
    unsigned long colRGB = (unsigned long)wxlua_getuintegertype(L, 2);
    // get this
    wxColour * self = (wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call Set
    self->Set(colRGB);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_Set2[] = { &wxluatype_wxColour, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxColour_Set2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_Set2[1] = {{ wxLua_wxColour_Set2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxColour_Set2 }};
//         bool Set(const wxString &str)
static int LUACALL wxLua_wxColour_Set2(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 2);
    // get this
    wxColour * self = (wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call Set
    bool returns = (self->Set(str));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_Set1[] = { &wxluatype_wxColour, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxColour_Set1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_Set1[1] = {{ wxLua_wxColour_Set1, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxColour_Set1 }};
//         void Set(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha = wxALPHA_OPAQUE)
static int LUACALL wxLua_wxColour_Set1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // unsigned char alpha = wxALPHA_OPAQUE
    unsigned char alpha = (argCount >= 5 ? (unsigned char)wxlua_getuintegertype(L, 5) : wxALPHA_OPAQUE);
    // unsigned char blue
    unsigned char blue = (unsigned char)wxlua_getuintegertype(L, 4);
    // unsigned char green
    unsigned char green = (unsigned char)wxlua_getuintegertype(L, 3);
    // unsigned char red
    unsigned char red = (unsigned char)wxlua_getuintegertype(L, 2);
    // get this
    wxColour * self = (wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call Set
    self->Set(red, green, blue, alpha);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0))

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_Set[] = { &wxluatype_wxColour, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxColour_Set(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_Set[1] = {{ wxLua_wxColour_Set, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxColour_Set }};
//     !%wxchkver_2_8 void Set(unsigned char red, unsigned char green, unsigned char blue)
static int LUACALL wxLua_wxColour_Set(lua_State *L)
{
    // unsigned char blue
    unsigned char blue = (unsigned char)wxlua_getuintegertype(L, 4);
    // unsigned char green
    unsigned char green = (unsigned char)wxlua_getuintegertype(L, 3);
    // unsigned char red
    unsigned char red = (unsigned char)wxlua_getuintegertype(L, 2);
    // get this
    wxColour * self = (wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call Set
    self->Set(red, green, blue);

    return 0;
}

#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_delete[] = { &wxluatype_wxColour, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxColour_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_op_eq[] = { &wxluatype_wxColour, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxColour_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_op_eq[1] = {{ wxLua_wxColour_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxColour_op_eq }};
//     %operator bool operator == (const wxColour& c) const
static int LUACALL wxLua_wxColour_op_eq(lua_State *L)
{
    // const wxColour c
    const wxColour * c = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxColour * self = (wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call op_eq
    bool returns = ((*self)==(*c));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_op_set[] = { &wxluatype_wxColour, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxColour_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_op_set[1] = {{ wxLua_wxColour_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxColour_op_set }};
//     %operator wxColour& operator=(const wxColour& c) const
static int LUACALL wxLua_wxColour_op_set(lua_State *L)
{
    // const wxColour c
    const wxColour * c = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxColour * self = (wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call op_set
    (*self)=(*c);
    wxColour* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_constructor3[] = { &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxColour_constructor3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_constructor3[1] = {{ wxLua_wxColour_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxColour_constructor3 }};
//     wxColour(const wxColour& colour)
static int LUACALL wxLua_wxColour_constructor3(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call constructor
    wxColour* returns = new wxColour(*colour);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_constructor2[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxColour_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_constructor2[1] = {{ wxLua_wxColour_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxColour_constructor2 }};
//     wxColour(const wxString& colourName)
static int LUACALL wxLua_wxColour_constructor2(lua_State *L)
{
    // const wxString colourName
    const wxString colourName = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxColour* returns = new wxColour(colourName);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush))
static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_constructor1[] = { &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxColour_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_constructor1[1] = {{ wxLua_wxColour_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 4, s_wxluatypeArray_wxLua_wxColour_constructor1 }};
//     %wxchkver_2_8 wxColour(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha = wxALPHA_OPAQUE)
static int LUACALL wxLua_wxColour_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // unsigned char alpha = wxALPHA_OPAQUE
    unsigned char alpha = (argCount >= 4 ? (unsigned char)wxlua_getuintegertype(L, 4) : wxALPHA_OPAQUE);
    // unsigned char blue
    unsigned char blue = (unsigned char)wxlua_getuintegertype(L, 3);
    // unsigned char green
    unsigned char green = (unsigned char)wxlua_getuintegertype(L, 2);
    // unsigned char red
    unsigned char red = (unsigned char)wxlua_getuintegertype(L, 1);
    // call constructor
    wxColour* returns = new wxColour(red, green, blue, alpha);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush))

#if (wxLUA_USE_wxColourPenBrush) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush))
static wxLuaArgType s_wxluatypeArray_wxLua_wxColour_constructor[] = { &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxColour_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_constructor[1] = {{ wxLua_wxColour_constructor, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxColour_constructor }};
//     !%wxchkver_2_8 wxColour(unsigned char red, unsigned char green, unsigned char blue)
static int LUACALL wxLua_wxColour_constructor(lua_State *L)
{
    // unsigned char blue
    unsigned char blue = (unsigned char)wxlua_getuintegertype(L, 3);
    // unsigned char green
    unsigned char green = (unsigned char)wxlua_getuintegertype(L, 2);
    // unsigned char red
    unsigned char red = (unsigned char)wxlua_getuintegertype(L, 1);
    // call constructor
    wxColour* returns = new wxColour(red, green, blue);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush))



#if ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))||((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_Set_overload[] =
{

#if (wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0))
    { wxLua_wxColour_Set3, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxColour_Set3 },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0))
    { wxLua_wxColour_Set2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxColour_Set2 },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0))
    { wxLua_wxColour_Set1, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxColour_Set1 },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0))

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)
    { wxLua_wxColour_Set, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxColour_Set },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)
};
static int s_wxluafunc_wxLua_wxColour_Set_overload_count = sizeof(s_wxluafunc_wxLua_wxColour_Set_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))||((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush))

#if (wxLUA_USE_wxColourPenBrush)||((wxLUA_USE_wxColourPenBrush) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)))||((wxLUA_USE_wxColourPenBrush) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColour_constructor_overload[] =
{
    { wxLua_wxColour_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxColour_constructor3 },
    { wxLua_wxColour_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxColour_constructor2 },

#if (wxLUA_USE_wxColourPenBrush) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush))
    { wxLua_wxColour_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 4, s_wxluatypeArray_wxLua_wxColour_constructor1 },
#endif // (wxLUA_USE_wxColourPenBrush) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush))

#if (wxLUA_USE_wxColourPenBrush) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush))
    { wxLua_wxColour_constructor, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxColour_constructor },
#endif // (wxLUA_USE_wxColourPenBrush) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush))
};
static int s_wxluafunc_wxLua_wxColour_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxColour_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxColourPenBrush)||((wxLUA_USE_wxColourPenBrush) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)))||((wxLUA_USE_wxColourPenBrush) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxColour_methods[] = {
#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)
    { "Alpha", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColour_Alpha, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)

    { "Blue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColour_Blue, 1, NULL },

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)
    { "GetAsString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColour_GetAsString, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)

#if (!defined(__WXMAC__)) && (wxLUA_USE_wxColourPenBrush)
    { "GetPixel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColour_GetPixel, 1, NULL },
#endif // (!defined(__WXMAC__)) && (wxLUA_USE_wxColourPenBrush)

    { "Green", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColour_Green, 1, NULL },
    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColour_Ok, 1, NULL },
    { "Red", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColour_Red, 1, NULL },

#if ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))||((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush))
    { "Set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColour_Set_overload, s_wxluafunc_wxLua_wxColour_Set_overload_count, 0 },
#endif // ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))||((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxColour_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColour_op_eq, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColour_op_set, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush)||((wxLUA_USE_wxColourPenBrush) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)))||((wxLUA_USE_wxColourPenBrush) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)))
    { "wxColour", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxColour_constructor_overload, s_wxluafunc_wxLua_wxColour_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxColourPenBrush)||((wxLUA_USE_wxColourPenBrush) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)))||((wxLUA_USE_wxColourPenBrush) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxColourPenBrush)))

    { 0, 0, 0, 0 },
};

int wxColour_methodCount = sizeof(wxColour_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxColourPenBrush


#if wxLUA_USE_wxColourPenBrush
// ---------------------------------------------------------------------------
// Bind class wxColourDatabase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxColourDatabase'
int wxluatype_wxColourDatabase = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxColourDatabase_AddColour[] = { &wxluatype_wxColourDatabase, &wxluatype_TSTRING, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxColourDatabase_AddColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourDatabase_AddColour[1] = {{ wxLua_wxColourDatabase_AddColour, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxColourDatabase_AddColour }};
//     void AddColour(const wxString& name, const wxColour& colour)
static int LUACALL wxLua_wxColourDatabase_AddColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxColourDatabase * self = (wxColourDatabase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourDatabase);
    // call AddColour
    self->AddColour(name, *colour);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxColourDatabase_Find[] = { &wxluatype_wxColourDatabase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxColourDatabase_Find(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourDatabase_Find[1] = {{ wxLua_wxColourDatabase_Find, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxColourDatabase_Find }};
//     wxColour Find(const wxString& name) const
static int LUACALL wxLua_wxColourDatabase_Find(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxColourDatabase * self = (wxColourDatabase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourDatabase);
    // call Find
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->Find(name));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxColourDatabase_FindName[] = { &wxluatype_wxColourDatabase, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxColourDatabase_FindName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourDatabase_FindName[1] = {{ wxLua_wxColourDatabase_FindName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxColourDatabase_FindName }};
//     wxString FindName(const wxColour& colour) const
static int LUACALL wxLua_wxColourDatabase_FindName(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxColourDatabase * self = (wxColourDatabase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourDatabase);
    // call FindName
    wxString returns = (self->FindName(*colour));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxColourDatabase_delete[] = { &wxluatype_wxColourDatabase, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourDatabase_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxColourDatabase_delete }};

static int LUACALL wxLua_wxColourDatabase_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourDatabase_constructor[1] = {{ wxLua_wxColourDatabase_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxColourDatabase()
static int LUACALL wxLua_wxColourDatabase_constructor(lua_State *L)
{
    // call constructor
    wxColourDatabase* returns = new wxColourDatabase();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxColourDatabase((wxColourDatabase*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColourDatabase);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxColourDatabase_methods[] = {
    { "AddColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColourDatabase_AddColour, 1, NULL },
    { "Find", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColourDatabase_Find, 1, NULL },
    { "FindName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColourDatabase_FindName, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxColourDatabase_delete, 1, NULL },
    { "wxColourDatabase", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxColourDatabase_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxColourDatabase_methodCount = sizeof(wxColourDatabase_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxColourPenBrush


#if wxLUA_USE_wxColourPenBrush
// ---------------------------------------------------------------------------
// Bind class wxPen
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPen'
int wxluatype_wxPen = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_GetCap[] = { &wxluatype_wxPen, NULL };
static int LUACALL wxLua_wxPen_GetCap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_GetCap[1] = {{ wxLua_wxPen_GetCap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPen_GetCap }};
//     int GetCap() const
static int LUACALL wxLua_wxPen_GetCap(lua_State *L)
{
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call GetCap
    int returns = (self->GetCap());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_GetColour[] = { &wxluatype_wxPen, NULL };
static int LUACALL wxLua_wxPen_GetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_GetColour[1] = {{ wxLua_wxPen_GetColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPen_GetColour }};
//     wxColour GetColour() const // not wxColur& so we allocate a new one
static int LUACALL wxLua_wxPen_GetColour(lua_State *L)
{
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call GetColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_GetJoin[] = { &wxluatype_wxPen, NULL };
static int LUACALL wxLua_wxPen_GetJoin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_GetJoin[1] = {{ wxLua_wxPen_GetJoin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPen_GetJoin }};
//     int GetJoin() const
static int LUACALL wxLua_wxPen_GetJoin(lua_State *L)
{
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call GetJoin
    int returns = (self->GetJoin());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxColourPenBrush))
static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_GetStipple[] = { &wxluatype_wxPen, NULL };
static int LUACALL wxLua_wxPen_GetStipple(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_GetStipple[1] = {{ wxLua_wxPen_GetStipple, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPen_GetStipple }};
//     %win wxBitmap* GetStipple() const
static int LUACALL wxLua_wxPen_GetStipple(lua_State *L)
{
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call GetStipple
    wxBitmap* returns = (wxBitmap*)self->GetStipple();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxColourPenBrush))

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_GetStyle[] = { &wxluatype_wxPen, NULL };
static int LUACALL wxLua_wxPen_GetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_GetStyle[1] = {{ wxLua_wxPen_GetStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPen_GetStyle }};
//     int GetStyle() const
static int LUACALL wxLua_wxPen_GetStyle(lua_State *L)
{
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call GetStyle
    int returns = (self->GetStyle());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_GetWidth[] = { &wxluatype_wxPen, NULL };
static int LUACALL wxLua_wxPen_GetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_GetWidth[1] = {{ wxLua_wxPen_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPen_GetWidth }};
//     int GetWidth() const
static int LUACALL wxLua_wxPen_GetWidth(lua_State *L)
{
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call GetWidth
    int returns = (self->GetWidth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_Ok[] = { &wxluatype_wxPen, NULL };
static int LUACALL wxLua_wxPen_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_Ok[1] = {{ wxLua_wxPen_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPen_Ok }};
//     bool Ok() const
static int LUACALL wxLua_wxPen_Ok(lua_State *L)
{
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_SetCap[] = { &wxluatype_wxPen, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPen_SetCap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_SetCap[1] = {{ wxLua_wxPen_SetCap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPen_SetCap }};
//     void SetCap(int capStyle)
static int LUACALL wxLua_wxPen_SetCap(lua_State *L)
{
    // int capStyle
    int capStyle = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call SetCap
    self->SetCap(capStyle);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_SetColour2[] = { &wxluatype_wxPen, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxPen_SetColour2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_SetColour2[1] = {{ wxLua_wxPen_SetColour2, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxPen_SetColour2 }};
//     void SetColour(unsigned char red, unsigned char green, unsigned char blue)
static int LUACALL wxLua_wxPen_SetColour2(lua_State *L)
{
    // unsigned char blue
    unsigned char blue = (unsigned char)wxlua_getuintegertype(L, 4);
    // unsigned char green
    unsigned char green = (unsigned char)wxlua_getuintegertype(L, 3);
    // unsigned char red
    unsigned char red = (unsigned char)wxlua_getuintegertype(L, 2);
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call SetColour
    self->SetColour(red, green, blue);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_SetColour1[] = { &wxluatype_wxPen, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxPen_SetColour1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_SetColour1[1] = {{ wxLua_wxPen_SetColour1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPen_SetColour1 }};
//     void SetColour(const wxString& colourName)
static int LUACALL wxLua_wxPen_SetColour1(lua_State *L)
{
    // const wxString colourName
    const wxString colourName = wxlua_getwxStringtype(L, 2);
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call SetColour
    self->SetColour(colourName);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_SetColour[] = { &wxluatype_wxPen, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxPen_SetColour(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_SetColour[1] = {{ wxLua_wxPen_SetColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPen_SetColour }};
//     void SetColour(wxColour& colour)
static int LUACALL wxLua_wxPen_SetColour(lua_State *L)
{
    // wxColour colour
    wxColour * colour = (wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call SetColour
    self->SetColour(*colour);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_SetJoin[] = { &wxluatype_wxPen, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPen_SetJoin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_SetJoin[1] = {{ wxLua_wxPen_SetJoin, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPen_SetJoin }};
//     void SetJoin(int join_style)
static int LUACALL wxLua_wxPen_SetJoin(lua_State *L)
{
    // int join_style
    int join_style = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call SetJoin
    self->SetJoin(join_style);

    return 0;
}


#if (wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxColourPenBrush))
static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_SetStipple[] = { &wxluatype_wxPen, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxPen_SetStipple(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_SetStipple[1] = {{ wxLua_wxPen_SetStipple, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPen_SetStipple }};
//     %win void SetStipple(const wxBitmap& stipple)
static int LUACALL wxLua_wxPen_SetStipple(lua_State *L)
{
    // const wxBitmap stipple
    const wxBitmap * stipple = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call SetStipple
    self->SetStipple(*stipple);

    return 0;
}

#endif // (wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxColourPenBrush))

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_SetStyle[] = { &wxluatype_wxPen, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPen_SetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_SetStyle[1] = {{ wxLua_wxPen_SetStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPen_SetStyle }};
//     void SetStyle(int style)
static int LUACALL wxLua_wxPen_SetStyle(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call SetStyle
    self->SetStyle(style);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_SetWidth[] = { &wxluatype_wxPen, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPen_SetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_SetWidth[1] = {{ wxLua_wxPen_SetWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPen_SetWidth }};
//     void SetWidth(int width)
static int LUACALL wxLua_wxPen_SetWidth(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call SetWidth
    self->SetWidth(width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_delete[] = { &wxluatype_wxPen, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxPen_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_op_eq[] = { &wxluatype_wxPen, &wxluatype_wxPen, NULL };
static int LUACALL wxLua_wxPen_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_op_eq[1] = {{ wxLua_wxPen_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPen_op_eq }};
//     %operator bool operator == (const wxPen& p) const
static int LUACALL wxLua_wxPen_op_eq(lua_State *L)
{
    // const wxPen p
    const wxPen * p = (const wxPen *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPen);
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call op_eq
    bool returns = ((*self)==(*p));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_op_set[] = { &wxluatype_wxPen, &wxluatype_wxPen, NULL };
static int LUACALL wxLua_wxPen_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_op_set[1] = {{ wxLua_wxPen_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPen_op_set }};
//     %operator wxPen& operator=(const wxPen& p) const
static int LUACALL wxLua_wxPen_op_set(lua_State *L)
{
    // const wxPen p
    const wxPen * p = (const wxPen *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPen);
    // get this
    wxPen * self = (wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call op_set
    (*self)=(*p);
    wxPen* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPen);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_constructor4[] = { &wxluatype_wxPen, NULL };
static int LUACALL wxLua_wxPen_constructor4(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_constructor4[1] = {{ wxLua_wxPen_constructor4, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxPen_constructor4 }};
//     wxPen(const wxPen& pen)
static int LUACALL wxLua_wxPen_constructor4(lua_State *L)
{
    // const wxPen pen
    const wxPen * pen = (const wxPen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPen);
    // call constructor
    wxPen* returns = new wxPen(*pen);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPen);

    return 1;
}


#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)) && ((defined(__WXMSW__)) && (wxLUA_USE_wxColourPenBrush))
static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_constructor3[] = { &wxluatype_wxBitmap, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPen_constructor3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_constructor3[1] = {{ wxLua_wxPen_constructor3, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxPen_constructor3 }};
//     %win wxPen(const wxBitmap& stipple, int width)
static int LUACALL wxLua_wxPen_constructor3(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // const wxBitmap stipple
    const wxBitmap * stipple = (const wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call constructor
    wxPen* returns = new wxPen(*stipple, width);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPen);

    return 1;
}

#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)) && ((defined(__WXMSW__)) && (wxLUA_USE_wxColourPenBrush))

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_constructor2[] = { &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPen_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_constructor2[1] = {{ wxLua_wxPen_constructor2, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxPen_constructor2 }};
//     wxPen(const wxString& colourName, int width, int style)
static int LUACALL wxLua_wxPen_constructor2(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // const wxString colourName
    const wxString colourName = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxPen* returns = new wxPen(colourName, width, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPen);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPen_constructor1[] = { &wxluatype_wxColour, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPen_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_constructor1[1] = {{ wxLua_wxPen_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxPen_constructor1 }};
//     wxPen(const wxColour& colour, int width, int style)
static int LUACALL wxLua_wxPen_constructor1(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call constructor
    wxPen* returns = new wxPen(*colour, width, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPen);

    return 1;
}

static int LUACALL wxLua_wxPen_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_constructor[1] = {{ wxLua_wxPen_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxPen()
static int LUACALL wxLua_wxPen_constructor(lua_State *L)
{
    // call constructor
    wxPen* returns = new wxPen();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPen);

    return 1;
}




#if (wxLUA_USE_wxColourPenBrush)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_SetColour_overload[] =
{
    { wxLua_wxPen_SetColour2, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxPen_SetColour2 },
    { wxLua_wxPen_SetColour1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPen_SetColour1 },
    { wxLua_wxPen_SetColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPen_SetColour },
};
static int s_wxluafunc_wxLua_wxPen_SetColour_overload_count = sizeof(s_wxluafunc_wxLua_wxPen_SetColour_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxColourPenBrush)||(((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)) && ((defined(__WXMSW__)) && (wxLUA_USE_wxColourPenBrush)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPen_constructor_overload[] =
{
    { wxLua_wxPen_constructor4, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxPen_constructor4 },

#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)) && ((defined(__WXMSW__)) && (wxLUA_USE_wxColourPenBrush))
    { wxLua_wxPen_constructor3, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxPen_constructor3 },
#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)) && ((defined(__WXMSW__)) && (wxLUA_USE_wxColourPenBrush))
    { wxLua_wxPen_constructor2, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxPen_constructor2 },
    { wxLua_wxPen_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxPen_constructor1 },
    { wxLua_wxPen_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxPen_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxPen_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxColourPenBrush)||(((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)) && ((defined(__WXMSW__)) && (wxLUA_USE_wxColourPenBrush)))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPen_methods[] = {
    { "GetCap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPen_GetCap, 1, NULL },
    { "GetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPen_GetColour, 1, NULL },
    { "GetJoin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPen_GetJoin, 1, NULL },

#if (wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxColourPenBrush))
    { "GetStipple", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPen_GetStipple, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxColourPenBrush))

    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPen_GetStyle, 1, NULL },
    { "GetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPen_GetWidth, 1, NULL },
    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPen_Ok, 1, NULL },
    { "SetCap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPen_SetCap, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush)
    { "SetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPen_SetColour_overload, s_wxluafunc_wxLua_wxPen_SetColour_overload_count, 0 },
#endif // (wxLUA_USE_wxColourPenBrush)

    { "SetJoin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPen_SetJoin, 1, NULL },

#if (wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxColourPenBrush))
    { "SetStipple", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPen_SetStipple, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxColourPenBrush))

    { "SetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPen_SetStyle, 1, NULL },
    { "SetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPen_SetWidth, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxPen_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPen_op_eq, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPen_op_set, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush)||(((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)) && ((defined(__WXMSW__)) && (wxLUA_USE_wxColourPenBrush)))
    { "wxPen", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxPen_constructor_overload, s_wxluafunc_wxLua_wxPen_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxColourPenBrush)||(((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)) && ((defined(__WXMSW__)) && (wxLUA_USE_wxColourPenBrush)))

    { 0, 0, 0, 0 },
};

int wxPen_methodCount = sizeof(wxPen_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxColourPenBrush


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxPenList)
// ---------------------------------------------------------------------------
// Bind class wxPenList
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPenList'
int wxluatype_wxPenList = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxPenList)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxPenList_FindOrCreatePen[] = { &wxluatype_wxPenList, &wxluatype_wxColour, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPenList_FindOrCreatePen(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPenList_FindOrCreatePen[1] = {{ wxLua_wxPenList_FindOrCreatePen, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxPenList_FindOrCreatePen }};
//     wxPen* FindOrCreatePen(const wxColour& colour, int width, int style)
static int LUACALL wxLua_wxPenList_FindOrCreatePen(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 4);
    // int width
    int width = (int)wxlua_getnumbertype(L, 3);
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxPenList * self = (wxPenList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPenList);
    // call FindOrCreatePen
    wxPen* returns = (wxPen*)self->FindOrCreatePen(*colour, width, style);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPen);

    return 1;
}

#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxPenList)) && (wxLUA_USE_wxColourPenBrush)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPenList_methods[] = {
#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxPenList)) && (wxLUA_USE_wxColourPenBrush)
    { "FindOrCreatePen", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPenList_FindOrCreatePen, 1, NULL },
#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxPenList)) && (wxLUA_USE_wxColourPenBrush)

    { 0, 0, 0, 0 },
};

int wxPenList_methodCount = sizeof(wxPenList_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxPenList)


#if wxLUA_USE_wxColourPenBrush
// ---------------------------------------------------------------------------
// Bind class wxBrush
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxBrush'
int wxluatype_wxBrush = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_GetColour[] = { &wxluatype_wxBrush, NULL };
static int LUACALL wxLua_wxBrush_GetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_GetColour[1] = {{ wxLua_wxBrush_GetColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBrush_GetColour }};
//     wxColour GetColour() const
static int LUACALL wxLua_wxBrush_GetColour(lua_State *L)
{
    // get this
    wxBrush * self = (wxBrush *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBrush);
    // call GetColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_GetStipple[] = { &wxluatype_wxBrush, NULL };
static int LUACALL wxLua_wxBrush_GetStipple(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_GetStipple[1] = {{ wxLua_wxBrush_GetStipple, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBrush_GetStipple }};
//     wxBitmap* GetStipple() const
static int LUACALL wxLua_wxBrush_GetStipple(lua_State *L)
{
    // get this
    wxBrush * self = (wxBrush *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBrush);
    // call GetStipple
    wxBitmap* returns = (wxBitmap*)self->GetStipple();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_GetStyle[] = { &wxluatype_wxBrush, NULL };
static int LUACALL wxLua_wxBrush_GetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_GetStyle[1] = {{ wxLua_wxBrush_GetStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBrush_GetStyle }};
//     int GetStyle() const
static int LUACALL wxLua_wxBrush_GetStyle(lua_State *L)
{
    // get this
    wxBrush * self = (wxBrush *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBrush);
    // call GetStyle
    int returns = (self->GetStyle());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_IsHatch[] = { &wxluatype_wxBrush, NULL };
static int LUACALL wxLua_wxBrush_IsHatch(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_IsHatch[1] = {{ wxLua_wxBrush_IsHatch, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBrush_IsHatch }};
//     bool IsHatch() const
static int LUACALL wxLua_wxBrush_IsHatch(lua_State *L)
{
    // get this
    wxBrush * self = (wxBrush *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBrush);
    // call IsHatch
    bool returns = (self->IsHatch());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_Ok[] = { &wxluatype_wxBrush, NULL };
static int LUACALL wxLua_wxBrush_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_Ok[1] = {{ wxLua_wxBrush_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBrush_Ok }};
//     bool Ok() const
static int LUACALL wxLua_wxBrush_Ok(lua_State *L)
{
    // get this
    wxBrush * self = (wxBrush *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBrush);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_SetColour2[] = { &wxluatype_wxBrush, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxBrush_SetColour2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_SetColour2[1] = {{ wxLua_wxBrush_SetColour2, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxBrush_SetColour2 }};
//     void SetColour(const unsigned char red, const unsigned char green, const unsigned char blue)
static int LUACALL wxLua_wxBrush_SetColour2(lua_State *L)
{
    // const unsigned char blue
    const unsigned char blue = (const unsigned char)wxlua_getuintegertype(L, 4);
    // const unsigned char green
    const unsigned char green = (const unsigned char)wxlua_getuintegertype(L, 3);
    // const unsigned char red
    const unsigned char red = (const unsigned char)wxlua_getuintegertype(L, 2);
    // get this
    wxBrush * self = (wxBrush *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBrush);
    // call SetColour
    self->SetColour(red, green, blue);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_SetColour1[] = { &wxluatype_wxBrush, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxBrush_SetColour1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_SetColour1[1] = {{ wxLua_wxBrush_SetColour1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBrush_SetColour1 }};
//     void SetColour(const wxString& colourName)
static int LUACALL wxLua_wxBrush_SetColour1(lua_State *L)
{
    // const wxString colourName
    const wxString colourName = wxlua_getwxStringtype(L, 2);
    // get this
    wxBrush * self = (wxBrush *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBrush);
    // call SetColour
    self->SetColour(colourName);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_SetColour[] = { &wxluatype_wxBrush, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxBrush_SetColour(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_SetColour[1] = {{ wxLua_wxBrush_SetColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBrush_SetColour }};
//     void SetColour(wxColour& colour)
static int LUACALL wxLua_wxBrush_SetColour(lua_State *L)
{
    // wxColour colour
    wxColour * colour = (wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxBrush * self = (wxBrush *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBrush);
    // call SetColour
    self->SetColour(*colour);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_SetStipple[] = { &wxluatype_wxBrush, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBrush_SetStipple(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_SetStipple[1] = {{ wxLua_wxBrush_SetStipple, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBrush_SetStipple }};
//     void SetStipple(const wxBitmap& bitmap)
static int LUACALL wxLua_wxBrush_SetStipple(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxBrush * self = (wxBrush *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBrush);
    // call SetStipple
    self->SetStipple(*bitmap);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_SetStyle[] = { &wxluatype_wxBrush, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBrush_SetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_SetStyle[1] = {{ wxLua_wxBrush_SetStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBrush_SetStyle }};
//     void SetStyle(int style)
static int LUACALL wxLua_wxBrush_SetStyle(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxBrush * self = (wxBrush *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBrush);
    // call SetStyle
    self->SetStyle(style);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_delete[] = { &wxluatype_wxBrush, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxBrush_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_op_eq[] = { &wxluatype_wxBrush, &wxluatype_wxBrush, NULL };
static int LUACALL wxLua_wxBrush_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_op_eq[1] = {{ wxLua_wxBrush_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBrush_op_eq }};
//     %operator bool operator == (const wxBrush& b) const
static int LUACALL wxLua_wxBrush_op_eq(lua_State *L)
{
    // const wxBrush b
    const wxBrush * b = (const wxBrush *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBrush);
    // get this
    wxBrush * self = (wxBrush *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBrush);
    // call op_eq
    bool returns = ((*self)==(*b));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_op_set[] = { &wxluatype_wxBrush, &wxluatype_wxBrush, NULL };
static int LUACALL wxLua_wxBrush_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_op_set[1] = {{ wxLua_wxBrush_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBrush_op_set }};
//     %operator wxBrush& operator=(const wxBrush& b) const
static int LUACALL wxLua_wxBrush_op_set(lua_State *L)
{
    // const wxBrush b
    const wxBrush * b = (const wxBrush *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBrush);
    // get this
    wxBrush * self = (wxBrush *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBrush);
    // call op_set
    (*self)=(*b);
    wxBrush* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBrush);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_constructor4[] = { &wxluatype_wxBrush, NULL };
static int LUACALL wxLua_wxBrush_constructor4(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_constructor4[1] = {{ wxLua_wxBrush_constructor4, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxBrush_constructor4 }};
//     wxBrush(const wxBrush& brush)
static int LUACALL wxLua_wxBrush_constructor4(lua_State *L)
{
    // const wxBrush brush
    const wxBrush * brush = (const wxBrush *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBrush);
    // call constructor
    wxBrush* returns = new wxBrush(*brush);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBrush);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_constructor3[] = { &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBrush_constructor3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_constructor3[1] = {{ wxLua_wxBrush_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxBrush_constructor3 }};
//     wxBrush(const wxBitmap& stippleBitmap)
static int LUACALL wxLua_wxBrush_constructor3(lua_State *L)
{
    // const wxBitmap stippleBitmap
    const wxBitmap * stippleBitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call constructor
    wxBrush* returns = new wxBrush(*stippleBitmap);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBrush);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_constructor2[] = { &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBrush_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_constructor2[1] = {{ wxLua_wxBrush_constructor2, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxBrush_constructor2 }};
//     wxBrush(const wxString& colourName, int style)
static int LUACALL wxLua_wxBrush_constructor2(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 2);
    // const wxString colourName
    const wxString colourName = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxBrush* returns = new wxBrush(colourName, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBrush);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBrush_constructor1[] = { &wxluatype_wxColour, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBrush_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_constructor1[1] = {{ wxLua_wxBrush_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxBrush_constructor1 }};
//     wxBrush(const wxColour& colour, int style)
static int LUACALL wxLua_wxBrush_constructor1(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 2);
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call constructor
    wxBrush* returns = new wxBrush(*colour, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBrush);

    return 1;
}

static int LUACALL wxLua_wxBrush_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_constructor[1] = {{ wxLua_wxBrush_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxBrush()
static int LUACALL wxLua_wxBrush_constructor(lua_State *L)
{
    // call constructor
    wxBrush* returns = new wxBrush();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBrush);

    return 1;
}




#if (wxLUA_USE_wxColourPenBrush)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_SetColour_overload[] =
{
    { wxLua_wxBrush_SetColour2, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxBrush_SetColour2 },
    { wxLua_wxBrush_SetColour1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBrush_SetColour1 },
    { wxLua_wxBrush_SetColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBrush_SetColour },
};
static int s_wxluafunc_wxLua_wxBrush_SetColour_overload_count = sizeof(s_wxluafunc_wxLua_wxBrush_SetColour_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxColourPenBrush)||((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrush_constructor_overload[] =
{
    { wxLua_wxBrush_constructor4, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxBrush_constructor4 },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)
    { wxLua_wxBrush_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxBrush_constructor3 },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)
    { wxLua_wxBrush_constructor2, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxBrush_constructor2 },
    { wxLua_wxBrush_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxBrush_constructor1 },
    { wxLua_wxBrush_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxBrush_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxBrush_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxColourPenBrush)||((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxBrush_methods[] = {
    { "GetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBrush_GetColour, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)
    { "GetStipple", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBrush_GetStipple, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)

    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBrush_GetStyle, 1, NULL },
    { "IsHatch", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBrush_IsHatch, 1, NULL },
    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBrush_Ok, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush)
    { "SetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBrush_SetColour_overload, s_wxluafunc_wxLua_wxBrush_SetColour_overload_count, 0 },
#endif // (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)
    { "SetStipple", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBrush_SetStipple, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)

    { "SetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBrush_SetStyle, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxBrush_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBrush_op_eq, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBrush_op_set, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush)||((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap))
    { "wxBrush", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxBrush_constructor_overload, s_wxluafunc_wxLua_wxBrush_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxColourPenBrush)||((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap))

    { 0, 0, 0, 0 },
};

int wxBrush_methodCount = sizeof(wxBrush_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxColourPenBrush


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBrushList)
// ---------------------------------------------------------------------------
// Bind class wxBrushList
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxBrushList'
int wxluatype_wxBrushList = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBrushList))
static wxLuaArgType s_wxluatypeArray_wxLua_wxBrushList_FindOrCreateBrush[] = { &wxluatype_wxBrushList, &wxluatype_wxColour, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBrushList_FindOrCreateBrush(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBrushList_FindOrCreateBrush[1] = {{ wxLua_wxBrushList_FindOrCreateBrush, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxBrushList_FindOrCreateBrush }};
//     wxBrush* FindOrCreateBrush(const wxColour& colour, int style)
static int LUACALL wxLua_wxBrushList_FindOrCreateBrush(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 3);
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxBrushList * self = (wxBrushList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBrushList);
    // call FindOrCreateBrush
    wxBrush* returns = (wxBrush*)self->FindOrCreateBrush(*colour, style);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBrush);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBrushList))



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxBrushList_methods[] = {
#if (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBrushList))
    { "FindOrCreateBrush", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBrushList_FindOrCreateBrush, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBrushList))

    { 0, 0, 0, 0 },
};

int wxBrushList_methodCount = sizeof(wxBrushList_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBrushList)


#if (wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxStockGDI
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxStockGDI'
int wxluatype_wxStockGDI = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxStockGDI_GetBrush[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxStockGDI_GetBrush(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStockGDI_GetBrush[1] = {{ wxLua_wxStockGDI_GetBrush, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxStockGDI_GetBrush }};
//     static const wxBrush* GetBrush(wxStockGDI::Item item)
static int LUACALL wxLua_wxStockGDI_GetBrush(lua_State *L)
{
    // wxStockGDI::Item item
    wxStockGDI::Item item = (wxStockGDI::Item)wxlua_getenumtype(L, 1);
    // call GetBrush
    const wxBrush* returns = (const wxBrush*)wxStockGDI::GetBrush(item);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBrush);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStockGDI_GetColour[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxStockGDI_GetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStockGDI_GetColour[1] = {{ wxLua_wxStockGDI_GetColour, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxStockGDI_GetColour }};
//     static const wxColour* GetColour(wxStockGDI::Item item)
static int LUACALL wxLua_wxStockGDI_GetColour(lua_State *L)
{
    // wxStockGDI::Item item
    wxStockGDI::Item item = (wxStockGDI::Item)wxlua_getenumtype(L, 1);
    // call GetColour
    const wxColour* returns = (const wxColour*)wxStockGDI::GetColour(item);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxCursor) && ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxStockGDI_GetCursor[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxStockGDI_GetCursor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStockGDI_GetCursor[1] = {{ wxLua_wxStockGDI_GetCursor, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxStockGDI_GetCursor }};
//     static const wxCursor* GetCursor(wxStockGDI::Item item)
static int LUACALL wxLua_wxStockGDI_GetCursor(lua_State *L)
{
    // wxStockGDI::Item item
    wxStockGDI::Item item = (wxStockGDI::Item)wxlua_getenumtype(L, 1);
    // call GetCursor
    const wxCursor* returns = (const wxCursor*)wxStockGDI::GetCursor(item);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCursor);

    return 1;
}

#endif // (wxLUA_USE_wxCursor) && ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxFont) && ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxStockGDI_GetFont[] = { &wxluatype_wxStockGDI, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxStockGDI_GetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStockGDI_GetFont[1] = {{ wxLua_wxStockGDI_GetFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxStockGDI_GetFont }};
//     virtual const wxFont* GetFont(wxStockGDI::Item item)
static int LUACALL wxLua_wxStockGDI_GetFont(lua_State *L)
{
    // wxStockGDI::Item item
    wxStockGDI::Item item = (wxStockGDI::Item)wxlua_getenumtype(L, 2);
    // get this
    wxStockGDI * self = (wxStockGDI *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStockGDI);
    // call GetFont
    const wxFont* returns = (const wxFont*)self->GetFont(item);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxStockGDI_GetPen[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxStockGDI_GetPen(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStockGDI_GetPen[1] = {{ wxLua_wxStockGDI_GetPen, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxStockGDI_GetPen }};
//     static const wxPen* GetPen(wxStockGDI::Item item)
static int LUACALL wxLua_wxStockGDI_GetPen(lua_State *L)
{
    // wxStockGDI::Item item
    wxStockGDI::Item item = (wxStockGDI::Item)wxlua_getenumtype(L, 1);
    // call GetPen
    const wxPen* returns = (const wxPen*)wxStockGDI::GetPen(item);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPen);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))

static int LUACALL wxLua_wxStockGDI_instance(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStockGDI_instance[1] = {{ wxLua_wxStockGDI_instance, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxStockGDI& instance()
static int LUACALL wxLua_wxStockGDI_instance(lua_State *L)
{
    // call instance
    wxStockGDI* returns = &wxStockGDI::instance();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStockGDI);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxStockGDI_methods[] = {
#if (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))
    { "GetBrush", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxStockGDI_GetBrush, 1, NULL },
    { "GetColour", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxStockGDI_GetColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxCursor) && ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))
    { "GetCursor", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxStockGDI_GetCursor, 1, NULL },
#endif // (wxLUA_USE_wxCursor) && ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxFont) && ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))
    { "GetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStockGDI_GetFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))
    { "GetPen", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxStockGDI_GetPen, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0)))

    { "instance", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxStockGDI_instance, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxStockGDI_methodCount = sizeof(wxStockGDI_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxStockGDI_enums[] = {
#if (wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0))
        { "BRUSH_BLACK", wxStockGDI::BRUSH_BLACK },
        { "BRUSH_BLUE", wxStockGDI::BRUSH_BLUE },
        { "BRUSH_CYAN", wxStockGDI::BRUSH_CYAN },
        { "BRUSH_GREEN", wxStockGDI::BRUSH_GREEN },
        { "BRUSH_GREY", wxStockGDI::BRUSH_GREY },
        { "BRUSH_LIGHTGREY", wxStockGDI::BRUSH_LIGHTGREY },
        { "BRUSH_MEDIUMGREY", wxStockGDI::BRUSH_MEDIUMGREY },
        { "BRUSH_RED", wxStockGDI::BRUSH_RED },
        { "BRUSH_TRANSPARENT", wxStockGDI::BRUSH_TRANSPARENT },
        { "BRUSH_WHITE", wxStockGDI::BRUSH_WHITE },
        { "COLOUR_BLACK", wxStockGDI::COLOUR_BLACK },
        { "COLOUR_BLUE", wxStockGDI::COLOUR_BLUE },
        { "COLOUR_CYAN", wxStockGDI::COLOUR_CYAN },
        { "COLOUR_GREEN", wxStockGDI::COLOUR_GREEN },
        { "COLOUR_LIGHTGREY", wxStockGDI::COLOUR_LIGHTGREY },
        { "COLOUR_RED", wxStockGDI::COLOUR_RED },
        { "COLOUR_WHITE", wxStockGDI::COLOUR_WHITE },
        { "CURSOR_CROSS", wxStockGDI::CURSOR_CROSS },
        { "CURSOR_HOURGLASS", wxStockGDI::CURSOR_HOURGLASS },
        { "CURSOR_STANDARD", wxStockGDI::CURSOR_STANDARD },
        { "FONT_ITALIC", wxStockGDI::FONT_ITALIC },
        { "FONT_NORMAL", wxStockGDI::FONT_NORMAL },
        { "FONT_SMALL", wxStockGDI::FONT_SMALL },
        { "FONT_SWISS", wxStockGDI::FONT_SWISS },
        { "ITEMCOUNT", wxStockGDI::ITEMCOUNT },
        { "PEN_BLACK", wxStockGDI::PEN_BLACK },
        { "PEN_BLACKDASHED", wxStockGDI::PEN_BLACKDASHED },
        { "PEN_CYAN", wxStockGDI::PEN_CYAN },
        { "PEN_GREEN", wxStockGDI::PEN_GREEN },
        { "PEN_GREY", wxStockGDI::PEN_GREY },
        { "PEN_LIGHTGREY", wxStockGDI::PEN_LIGHTGREY },
        { "PEN_MEDIUMGREY", wxStockGDI::PEN_MEDIUMGREY },
        { "PEN_RED", wxStockGDI::PEN_RED },
        { "PEN_TRANSPARENT", wxStockGDI::PEN_TRANSPARENT },
        { "PEN_WHITE", wxStockGDI::PEN_WHITE },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0))

    { NULL, 0, },
};
int wxStockGDI_enumCount = sizeof(wxStockGDI_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // (wxLUA_USE_wxColourPenBrush) && (wxCHECK_VERSION(2,8,0))


#if wxLUA_USE_wxPalette && wxUSE_PALETTE
// ---------------------------------------------------------------------------
// Bind class wxPalette
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPalette'
int wxluatype_wxPalette = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxPalette_Create[] = { &wxluatype_wxPalette, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxPalette_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPalette_Create[1] = {{ wxLua_wxPalette_Create, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxPalette_Create }};
// %override wxLua_wxPalette_Create
// bool Create(int n, const unsigned char* red, const unsigned char* green, const unsigned char* blue)
static int LUACALL wxLua_wxPalette_Create(lua_State *L)
{
    // const unsigned char* blue
    size_t blue_len = 0;
    const unsigned char *blue = (unsigned char *)lua_tolstring(L, 5, &blue_len);
    // const unsigned char* green
    size_t green_len = 0;
    const unsigned char *green = (unsigned char *)lua_tolstring(L, 4, &green_len);
    // const unsigned char* red
    size_t red_len = 0;
    const unsigned char *red = (unsigned char *)lua_tolstring(L, 3, &red_len);
    // int n
    int n = (int)wxlua_getintegertype(L, 2);
    size_t nn = (size_t)n;
    if ((nn > blue_len)||(nn > green_len)||(nn > red_len))
        wxlua_argerrormsg(L, wxT("Invalid palette lengths for wxPalette constructor."));
    // get this
    wxPalette *self = (wxPalette *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPalette);
    // call Create
    bool returns = self->Create(n, red, green, blue);
    // push the result number
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxPalette_GetColoursCount[] = { &wxluatype_wxPalette, NULL };
static int LUACALL wxLua_wxPalette_GetColoursCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPalette_GetColoursCount[1] = {{ wxLua_wxPalette_GetColoursCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPalette_GetColoursCount }};
//     int GetColoursCount() const
static int LUACALL wxLua_wxPalette_GetColoursCount(lua_State *L)
{
    // get this
    wxPalette * self = (wxPalette *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPalette);
    // call GetColoursCount
    int returns = (self->GetColoursCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPalette_GetPixel[] = { &wxluatype_wxPalette, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxPalette_GetPixel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPalette_GetPixel[1] = {{ wxLua_wxPalette_GetPixel, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxPalette_GetPixel }};
//     int GetPixel(unsigned char red, unsigned char green, unsigned char blue) const
static int LUACALL wxLua_wxPalette_GetPixel(lua_State *L)
{
    // unsigned char blue
    unsigned char blue = (unsigned char)wxlua_getuintegertype(L, 4);
    // unsigned char green
    unsigned char green = (unsigned char)wxlua_getuintegertype(L, 3);
    // unsigned char red
    unsigned char red = (unsigned char)wxlua_getuintegertype(L, 2);
    // get this
    wxPalette * self = (wxPalette *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPalette);
    // call GetPixel
    int returns = (self->GetPixel(red, green, blue));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPalette_GetRGB[] = { &wxluatype_wxPalette, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPalette_GetRGB(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPalette_GetRGB[1] = {{ wxLua_wxPalette_GetRGB, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPalette_GetRGB }};
// %override wxLua_wxPalette_GetRGB
// bool GetRGB(int pixel, unsigned char* red, unsigned char* green, unsigned char* blue) const
static int LUACALL wxLua_wxPalette_GetRGB(lua_State *L)
{
    // int pixel
    int pixel = (int)wxlua_getintegertype(L, 2);
    // get this
    wxPalette *self = (wxPalette *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPalette);
    // call GetRGB
    unsigned char red = 0, green = 0, blue = 0;
    bool returns = self->GetRGB(pixel, &red, &green, &blue);
    // push the result number
    lua_pushboolean(L, returns);
    lua_pushnumber(L, red);
    lua_pushnumber(L, green);
    lua_pushnumber(L, blue);
    // return the number of parameters
    return 4;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxPalette_Ok[] = { &wxluatype_wxPalette, NULL };
static int LUACALL wxLua_wxPalette_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPalette_Ok[1] = {{ wxLua_wxPalette_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPalette_Ok }};
//     bool Ok() const
static int LUACALL wxLua_wxPalette_Ok(lua_State *L)
{
    // get this
    wxPalette * self = (wxPalette *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPalette);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPalette_delete[] = { &wxluatype_wxPalette, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPalette_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxPalette_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxPalette_constructor1[] = { &wxluatype_wxPalette, NULL };
static int LUACALL wxLua_wxPalette_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPalette_constructor1[1] = {{ wxLua_wxPalette_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxPalette_constructor1 }};
//     wxPalette(const wxPalette& palette)
static int LUACALL wxLua_wxPalette_constructor1(lua_State *L)
{
    // const wxPalette palette
    const wxPalette * palette = (const wxPalette *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPalette);
    // call constructor
    wxPalette* returns = new wxPalette(*palette);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPalette);

    return 1;
}

static int LUACALL wxLua_wxPalette_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPalette_constructor[1] = {{ wxLua_wxPalette_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxPalette()
static int LUACALL wxLua_wxPalette_constructor(lua_State *L)
{
    // call constructor
    wxPalette* returns = new wxPalette();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPalette);

    return 1;
}




#if (wxLUA_USE_wxPalette && wxUSE_PALETTE)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPalette_constructor_overload[] =
{
    { wxLua_wxPalette_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxPalette_constructor1 },
    { wxLua_wxPalette_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxPalette_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxPalette_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxPalette && wxUSE_PALETTE)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPalette_methods[] = {
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPalette_Create, 1, NULL },
    { "GetColoursCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPalette_GetColoursCount, 1, NULL },
    { "GetPixel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPalette_GetPixel, 1, NULL },
    { "GetRGB", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPalette_GetRGB, 1, NULL },
    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPalette_Ok, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxPalette_delete, 1, NULL },

#if (wxLUA_USE_wxPalette && wxUSE_PALETTE)
    { "wxPalette", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxPalette_constructor_overload, s_wxluafunc_wxLua_wxPalette_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxPalette && wxUSE_PALETTE)

    { 0, 0, 0, 0 },
};

int wxPalette_methodCount = sizeof(wxPalette_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxPalette && wxUSE_PALETTE


#if wxLUA_USE_wxIcon
// ---------------------------------------------------------------------------
// Bind class wxIcon
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxIcon'
int wxluatype_wxIcon = WXLUA_TUNKNOWN;

#if ((defined(__WXMSW__) || defined(__WXMAC__) || wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxIcon)) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxIcon_CopyFromBitmap[] = { &wxluatype_wxIcon, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxIcon_CopyFromBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIcon_CopyFromBitmap[1] = {{ wxLua_wxIcon_CopyFromBitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIcon_CopyFromBitmap }};
//     %win|%mac|%wxchkver_2_6 void CopyFromBitmap(const wxBitmap& bmp)
static int LUACALL wxLua_wxIcon_CopyFromBitmap(lua_State *L)
{
    // const wxBitmap bmp
    const wxBitmap * bmp = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxIcon * self = (wxIcon *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIcon);
    // call CopyFromBitmap
    self->CopyFromBitmap(*bmp);

    return 0;
}

#endif // ((defined(__WXMSW__) || defined(__WXMAC__) || wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxIcon)) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxIcon_GetDepth[] = { &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxIcon_GetDepth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIcon_GetDepth[1] = {{ wxLua_wxIcon_GetDepth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIcon_GetDepth }};
//     int     GetDepth()
static int LUACALL wxLua_wxIcon_GetDepth(lua_State *L)
{
    // get this
    wxIcon * self = (wxIcon *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIcon);
    // call GetDepth
    int returns = (self->GetDepth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIcon_GetHeight[] = { &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxIcon_GetHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIcon_GetHeight[1] = {{ wxLua_wxIcon_GetHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIcon_GetHeight }};
//     int     GetHeight()
static int LUACALL wxLua_wxIcon_GetHeight(lua_State *L)
{
    // get this
    wxIcon * self = (wxIcon *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIcon);
    // call GetHeight
    int returns = (self->GetHeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIcon_GetWidth[] = { &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxIcon_GetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIcon_GetWidth[1] = {{ wxLua_wxIcon_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIcon_GetWidth }};
//     int     GetWidth()
static int LUACALL wxLua_wxIcon_GetWidth(lua_State *L)
{
    // get this
    wxIcon * self = (wxIcon *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIcon);
    // call GetWidth
    int returns = (self->GetWidth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIcon_LoadFile[] = { &wxluatype_wxIcon, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxIcon_LoadFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIcon_LoadFile[1] = {{ wxLua_wxIcon_LoadFile, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxIcon_LoadFile }};
//     bool    LoadFile(const wxString& name, wxBitmapType flags)
static int LUACALL wxLua_wxIcon_LoadFile(lua_State *L)
{
    // wxBitmapType flags
    wxBitmapType flags = (wxBitmapType)wxlua_getenumtype(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxIcon * self = (wxIcon *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIcon);
    // call LoadFile
    bool returns = (self->LoadFile(name, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIcon_Ok[] = { &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxIcon_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIcon_Ok[1] = {{ wxLua_wxIcon_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIcon_Ok }};
//     bool    Ok()
static int LUACALL wxLua_wxIcon_Ok(lua_State *L)
{
    // get this
    wxIcon * self = (wxIcon *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIcon);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIcon_SetDepth[] = { &wxluatype_wxIcon, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIcon_SetDepth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIcon_SetDepth[1] = {{ wxLua_wxIcon_SetDepth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIcon_SetDepth }};
//     void    SetDepth(int d)
static int LUACALL wxLua_wxIcon_SetDepth(lua_State *L)
{
    // int d
    int d = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxIcon * self = (wxIcon *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIcon);
    // call SetDepth
    self->SetDepth(d);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIcon_SetHeight[] = { &wxluatype_wxIcon, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIcon_SetHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIcon_SetHeight[1] = {{ wxLua_wxIcon_SetHeight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIcon_SetHeight }};
//     void    SetHeight(int h)
static int LUACALL wxLua_wxIcon_SetHeight(lua_State *L)
{
    // int h
    int h = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxIcon * self = (wxIcon *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIcon);
    // call SetHeight
    self->SetHeight(h);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIcon_SetWidth[] = { &wxluatype_wxIcon, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIcon_SetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIcon_SetWidth[1] = {{ wxLua_wxIcon_SetWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIcon_SetWidth }};
//     void    SetWidth(int w)
static int LUACALL wxLua_wxIcon_SetWidth(lua_State *L)
{
    // int w
    int w = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxIcon * self = (wxIcon *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIcon);
    // call SetWidth
    self->SetWidth(w);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIcon_delete[] = { &wxluatype_wxIcon, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIcon_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxIcon_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxIcon_op_set[] = { &wxluatype_wxIcon, &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxIcon_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIcon_op_set[1] = {{ wxLua_wxIcon_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIcon_op_set }};
//     %operator wxIcon& operator=(const wxIcon& i) const
static int LUACALL wxLua_wxIcon_op_set(lua_State *L)
{
    // const wxIcon i
    const wxIcon * i = (const wxIcon *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIcon);
    // get this
    wxIcon * self = (wxIcon *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIcon);
    // call op_set
    (*self)=(*i);
    wxIcon* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIcon_constructor1[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIcon_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIcon_constructor1[1] = {{ wxLua_wxIcon_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 4, s_wxluatypeArray_wxLua_wxIcon_constructor1 }};
//     wxIcon(const wxString& name, wxBitmapType type, int desiredWidth = -1, int desiredHeight = -1)
static int LUACALL wxLua_wxIcon_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int desiredHeight = -1
    int desiredHeight = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // int desiredWidth = -1
    int desiredWidth = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : -1);
    // wxBitmapType type
    wxBitmapType type = (wxBitmapType)wxlua_getenumtype(L, 2);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxIcon* returns = new wxIcon(name, type, desiredWidth, desiredHeight);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

static int LUACALL wxLua_wxIcon_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIcon_constructor[1] = {{ wxLua_wxIcon_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxIcon()
static int LUACALL wxLua_wxIcon_constructor(lua_State *L)
{
    // call constructor
    wxIcon* returns = new wxIcon();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}




#if (wxLUA_USE_wxIcon)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIcon_constructor_overload[] =
{
    { wxLua_wxIcon_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 4, s_wxluatypeArray_wxLua_wxIcon_constructor1 },
    { wxLua_wxIcon_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxIcon_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxIcon_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxIcon)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxIcon_methods[] = {
#if ((defined(__WXMSW__) || defined(__WXMAC__) || wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxIcon)) && (wxLUA_USE_wxBitmap)
    { "CopyFromBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIcon_CopyFromBitmap, 1, NULL },
#endif // ((defined(__WXMSW__) || defined(__WXMAC__) || wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxIcon)) && (wxLUA_USE_wxBitmap)

    { "GetDepth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIcon_GetDepth, 1, NULL },
    { "GetHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIcon_GetHeight, 1, NULL },
    { "GetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIcon_GetWidth, 1, NULL },
    { "LoadFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIcon_LoadFile, 1, NULL },
    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIcon_Ok, 1, NULL },
    { "SetDepth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIcon_SetDepth, 1, NULL },
    { "SetHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIcon_SetHeight, 1, NULL },
    { "SetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIcon_SetWidth, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxIcon_delete, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIcon_op_set, 1, NULL },

#if (wxLUA_USE_wxIcon)
    { "wxIcon", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxIcon_constructor_overload, s_wxluafunc_wxLua_wxIcon_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxIcon)

    { 0, 0, 0, 0 },
};

int wxIcon_methodCount = sizeof(wxIcon_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxIcon


#if wxLUA_USE_wxIcon
// ---------------------------------------------------------------------------
// Bind class wxIconBundle
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxIconBundle'
int wxluatype_wxIconBundle = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxIconBundle_AddIcon1[] = { &wxluatype_wxIconBundle, &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxIconBundle_AddIcon1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconBundle_AddIcon1[1] = {{ wxLua_wxIconBundle_AddIcon1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIconBundle_AddIcon1 }};
//     void AddIcon( const wxIcon& icon );
static int LUACALL wxLua_wxIconBundle_AddIcon1(lua_State *L)
{
    // const wxIcon icon
    const wxIcon * icon = (const wxIcon *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIcon);
    // get this
    wxIconBundle * self = (wxIconBundle *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIconBundle);
    // call AddIcon
    self->AddIcon(*icon);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIconBundle_AddIcon[] = { &wxluatype_wxIconBundle, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIconBundle_AddIcon(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconBundle_AddIcon[1] = {{ wxLua_wxIconBundle_AddIcon, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxIconBundle_AddIcon }};
//     void AddIcon( const wxString& file, long type )
static int LUACALL wxLua_wxIconBundle_AddIcon(lua_State *L)
{
    // long type
    long type = (long)wxlua_getnumbertype(L, 3);
    // const wxString file
    const wxString file = wxlua_getwxStringtype(L, 2);
    // get this
    wxIconBundle * self = (wxIconBundle *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIconBundle);
    // call AddIcon
    self->AddIcon(file, type);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIconBundle_GetIcon1[] = { &wxluatype_wxIconBundle, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIconBundle_GetIcon1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconBundle_GetIcon1[1] = {{ wxLua_wxIconBundle_GetIcon1, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxIconBundle_GetIcon1 }};
//     const wxIcon& GetIcon( int size = wxDefaultCoord ) const
static int LUACALL wxLua_wxIconBundle_GetIcon1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int size = wxDefaultCoord
    int size = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxDefaultCoord);
    // get this
    wxIconBundle * self = (wxIconBundle *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIconBundle);
    // call GetIcon
    const wxIcon* returns = &self->GetIcon(size);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}


#if (wxLUA_USE_wxIcon) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxIconBundle_GetIcon[] = { &wxluatype_wxIconBundle, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxIconBundle_GetIcon(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconBundle_GetIcon[1] = {{ wxLua_wxIconBundle_GetIcon, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIconBundle_GetIcon }};
//     const wxIcon& GetIcon( const wxSize& size ) const;
static int LUACALL wxLua_wxIconBundle_GetIcon(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxIconBundle * self = (wxIconBundle *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIconBundle);
    // call GetIcon
    const wxIcon* returns = &self->GetIcon(*size);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // (wxLUA_USE_wxIcon) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxIconBundle_delete[] = { &wxluatype_wxIconBundle, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconBundle_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxIconBundle_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxIconBundle_constructor3[] = { &wxluatype_wxIconBundle, NULL };
static int LUACALL wxLua_wxIconBundle_constructor3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconBundle_constructor3[1] = {{ wxLua_wxIconBundle_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxIconBundle_constructor3 }};
//     wxIconBundle( const wxIconBundle& ic )
static int LUACALL wxLua_wxIconBundle_constructor3(lua_State *L)
{
    // const wxIconBundle ic
    const wxIconBundle * ic = (const wxIconBundle *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIconBundle);
    // call constructor
    wxIconBundle* returns = new wxIconBundle(*ic);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxIconBundle((wxIconBundle*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIconBundle);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIconBundle_constructor2[] = { &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxIconBundle_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconBundle_constructor2[1] = {{ wxLua_wxIconBundle_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxIconBundle_constructor2 }};
//     wxIconBundle( const wxIcon& icon )
static int LUACALL wxLua_wxIconBundle_constructor2(lua_State *L)
{
    // const wxIcon icon
    const wxIcon * icon = (const wxIcon *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIcon);
    // call constructor
    wxIconBundle* returns = new wxIconBundle(*icon);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxIconBundle((wxIconBundle*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIconBundle);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIconBundle_constructor1[] = { &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIconBundle_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconBundle_constructor1[1] = {{ wxLua_wxIconBundle_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxIconBundle_constructor1 }};
//     wxIconBundle( const wxString& file, long type )
static int LUACALL wxLua_wxIconBundle_constructor1(lua_State *L)
{
    // long type
    long type = (long)wxlua_getnumbertype(L, 2);
    // const wxString file
    const wxString file = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxIconBundle* returns = new wxIconBundle(file, type);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxIconBundle((wxIconBundle*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIconBundle);

    return 1;
}

static int LUACALL wxLua_wxIconBundle_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconBundle_constructor[1] = {{ wxLua_wxIconBundle_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxIconBundle()
static int LUACALL wxLua_wxIconBundle_constructor(lua_State *L)
{
    // call constructor
    wxIconBundle* returns = new wxIconBundle();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxIconBundle((wxIconBundle*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIconBundle);

    return 1;
}




#if (wxLUA_USE_wxIcon)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconBundle_AddIcon_overload[] =
{
    { wxLua_wxIconBundle_AddIcon1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIconBundle_AddIcon1 },
    { wxLua_wxIconBundle_AddIcon, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxIconBundle_AddIcon },
};
static int s_wxluafunc_wxLua_wxIconBundle_AddIcon_overload_count = sizeof(s_wxluafunc_wxLua_wxIconBundle_AddIcon_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxIcon)

#if (wxLUA_USE_wxIcon)||((wxLUA_USE_wxIcon) && (wxLUA_USE_wxPointSizeRect))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconBundle_GetIcon_overload[] =
{
    { wxLua_wxIconBundle_GetIcon1, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxIconBundle_GetIcon1 },

#if (wxLUA_USE_wxIcon) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxIconBundle_GetIcon, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIconBundle_GetIcon },
#endif // (wxLUA_USE_wxIcon) && (wxLUA_USE_wxPointSizeRect)
};
static int s_wxluafunc_wxLua_wxIconBundle_GetIcon_overload_count = sizeof(s_wxluafunc_wxLua_wxIconBundle_GetIcon_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxIcon)||((wxLUA_USE_wxIcon) && (wxLUA_USE_wxPointSizeRect))

#if (wxLUA_USE_wxIcon)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconBundle_constructor_overload[] =
{
    { wxLua_wxIconBundle_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxIconBundle_constructor3 },
    { wxLua_wxIconBundle_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxIconBundle_constructor2 },
    { wxLua_wxIconBundle_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxIconBundle_constructor1 },
    { wxLua_wxIconBundle_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxIconBundle_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxIconBundle_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxIcon)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxIconBundle_methods[] = {
#if (wxLUA_USE_wxIcon)
    { "AddIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIconBundle_AddIcon_overload, s_wxluafunc_wxLua_wxIconBundle_AddIcon_overload_count, 0 },
#endif // (wxLUA_USE_wxIcon)

#if (wxLUA_USE_wxIcon)||((wxLUA_USE_wxIcon) && (wxLUA_USE_wxPointSizeRect))
    { "GetIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIconBundle_GetIcon_overload, s_wxluafunc_wxLua_wxIconBundle_GetIcon_overload_count, 0 },
#endif // (wxLUA_USE_wxIcon)||((wxLUA_USE_wxIcon) && (wxLUA_USE_wxPointSizeRect))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxIconBundle_delete, 1, NULL },

#if (wxLUA_USE_wxIcon)
    { "wxIconBundle", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxIconBundle_constructor_overload, s_wxluafunc_wxLua_wxIconBundle_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxIcon)

    { 0, 0, 0, 0 },
};

int wxIconBundle_methodCount = sizeof(wxIconBundle_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxIcon


#if wxLUA_USE_wxBitmap
// ---------------------------------------------------------------------------
// Bind class wxBitmap
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxBitmap'
int wxluatype_wxBitmap = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_ConvertToImage[] = { &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmap_ConvertToImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_ConvertToImage[1] = {{ wxLua_wxBitmap_ConvertToImage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmap_ConvertToImage }};
//     wxImage ConvertToImage()
static int LUACALL wxLua_wxBitmap_ConvertToImage(lua_State *L)
{
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call ConvertToImage
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->ConvertToImage());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxImage*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxIcon) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_CopyFromIcon[] = { &wxluatype_wxBitmap, &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxBitmap_CopyFromIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_CopyFromIcon[1] = {{ wxLua_wxBitmap_CopyFromIcon, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmap_CopyFromIcon }};
//     bool CopyFromIcon(const wxIcon& icon)
static int LUACALL wxLua_wxBitmap_CopyFromIcon(lua_State *L)
{
    // const wxIcon icon
    const wxIcon * icon = (const wxIcon *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIcon);
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call CopyFromIcon
    bool returns = (self->CopyFromIcon(*icon));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxIcon) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_Create[] = { &wxluatype_wxBitmap, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBitmap_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_Create[1] = {{ wxLua_wxBitmap_Create, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxBitmap_Create }};
//     virtual bool Create(int width, int height, int depth = -1)
static int LUACALL wxLua_wxBitmap_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int depth = -1
    int depth = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call Create
    bool returns = (self->Create(width, height, depth));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_GetDepth[] = { &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmap_GetDepth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_GetDepth[1] = {{ wxLua_wxBitmap_GetDepth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmap_GetDepth }};
//     int GetDepth() const
static int LUACALL wxLua_wxBitmap_GetDepth(lua_State *L)
{
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call GetDepth
    int returns = (self->GetDepth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_GetHeight[] = { &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmap_GetHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_GetHeight[1] = {{ wxLua_wxBitmap_GetHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmap_GetHeight }};
//     int GetHeight() const
static int LUACALL wxLua_wxBitmap_GetHeight(lua_State *L)
{
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call GetHeight
    int returns = (self->GetHeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_GetMask[] = { &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmap_GetMask(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_GetMask[1] = {{ wxLua_wxBitmap_GetMask, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmap_GetMask }};
//     wxMask* GetMask() const
static int LUACALL wxLua_wxBitmap_GetMask(lua_State *L)
{
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call GetMask
    wxMask* returns = (wxMask*)self->GetMask();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMask);

    return 1;
}

#endif // (wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_GetPalette[] = { &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmap_GetPalette(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_GetPalette[1] = {{ wxLua_wxBitmap_GetPalette, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmap_GetPalette }};
//     wxPalette* GetPalette() const
static int LUACALL wxLua_wxBitmap_GetPalette(lua_State *L)
{
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call GetPalette
    wxPalette* returns = (wxPalette*)self->GetPalette();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPalette);

    return 1;
}

#endif // (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_GetSubBitmap[] = { &wxluatype_wxBitmap, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxBitmap_GetSubBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_GetSubBitmap[1] = {{ wxLua_wxBitmap_GetSubBitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmap_GetSubBitmap }};
//     wxBitmap GetSubBitmap(const wxRect&rect) const
static int LUACALL wxLua_wxBitmap_GetSubBitmap(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call GetSubBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetSubBitmap(*rect));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_GetWidth[] = { &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmap_GetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_GetWidth[1] = {{ wxLua_wxBitmap_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmap_GetWidth }};
//     int GetWidth() const
static int LUACALL wxLua_wxBitmap_GetWidth(lua_State *L)
{
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call GetWidth
    int returns = (self->GetWidth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_LoadFile[] = { &wxluatype_wxBitmap, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxBitmap_LoadFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_LoadFile[1] = {{ wxLua_wxBitmap_LoadFile, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxBitmap_LoadFile }};
//     bool LoadFile(const wxString& name, wxBitmapType type)
static int LUACALL wxLua_wxBitmap_LoadFile(lua_State *L)
{
    // wxBitmapType type
    wxBitmapType type = (wxBitmapType)wxlua_getenumtype(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call LoadFile
    bool returns = (self->LoadFile(name, type));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_Ok[] = { &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmap_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_Ok[1] = {{ wxLua_wxBitmap_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmap_Ok }};
//     bool Ok() const
static int LUACALL wxLua_wxBitmap_Ok(lua_State *L)
{
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && ((!defined(__WXMSW__) && wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxBitmap))
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_QuantizeColour[] = { &wxluatype_wxBitmap, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxBitmap_QuantizeColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_QuantizeColour[1] = {{ wxLua_wxBitmap_QuantizeColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmap_QuantizeColour }};
//     !%msw&%wxchkver_2_8 virtual wxColour QuantizeColour(const wxColour& colour) const // msw doesn't derive from wxBitmapBase
static int LUACALL wxLua_wxBitmap_QuantizeColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call QuantizeColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->QuantizeColour(*colour));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && ((!defined(__WXMSW__) && wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxBitmap))

#if (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_SaveFile[] = { &wxluatype_wxBitmap, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_wxPalette, NULL };
static int LUACALL wxLua_wxBitmap_SaveFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_SaveFile[1] = {{ wxLua_wxBitmap_SaveFile, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxBitmap_SaveFile }};
//     bool SaveFile(const wxString& name, wxBitmapType type, wxPalette* palette = NULL)
static int LUACALL wxLua_wxBitmap_SaveFile(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPalette palette = NULL
    wxPalette * palette = (argCount >= 4 ? (wxPalette *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPalette) : NULL);
    // wxBitmapType type
    wxBitmapType type = (wxBitmapType)wxlua_getenumtype(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call SaveFile
    bool returns = (self->SaveFile(name, type, palette));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_SetDepth[] = { &wxluatype_wxBitmap, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBitmap_SetDepth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_SetDepth[1] = {{ wxLua_wxBitmap_SetDepth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmap_SetDepth }};
//     void SetDepth(int depth)
static int LUACALL wxLua_wxBitmap_SetDepth(lua_State *L)
{
    // int depth
    int depth = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call SetDepth
    self->SetDepth(depth);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_SetHeight[] = { &wxluatype_wxBitmap, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBitmap_SetHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_SetHeight[1] = {{ wxLua_wxBitmap_SetHeight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmap_SetHeight }};
//     void SetHeight(int height)
static int LUACALL wxLua_wxBitmap_SetHeight(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call SetHeight
    self->SetHeight(height);

    return 0;
}


#if (wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_SetMask[] = { &wxluatype_wxBitmap, &wxluatype_wxMask, NULL };
static int LUACALL wxLua_wxBitmap_SetMask(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_SetMask[1] = {{ wxLua_wxBitmap_SetMask, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmap_SetMask }};
//     void SetMask(%ungc wxMask* mask)
static int LUACALL wxLua_wxBitmap_SetMask(lua_State *L)
{
    // wxMask mask
    wxMask * mask = (wxMask *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMask);
    if (wxluaO_isgcobject(L, mask)) wxluaO_undeletegcobject(L, mask);
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call SetMask
    self->SetMask(mask);

    return 0;
}

#endif // (wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxPalette && wxUSE_PALETTE) && ((defined(__WXMSW__)) && (wxLUA_USE_wxBitmap))
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_SetPalette[] = { &wxluatype_wxBitmap, &wxluatype_wxPalette, NULL };
static int LUACALL wxLua_wxBitmap_SetPalette(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_SetPalette[1] = {{ wxLua_wxBitmap_SetPalette, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmap_SetPalette }};
//     %win void SetPalette(const wxPalette& palette)
static int LUACALL wxLua_wxBitmap_SetPalette(lua_State *L)
{
    // const wxPalette palette
    const wxPalette * palette = (const wxPalette *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPalette);
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call SetPalette
    self->SetPalette(*palette);

    return 0;
}

#endif // (wxLUA_USE_wxPalette && wxUSE_PALETTE) && ((defined(__WXMSW__)) && (wxLUA_USE_wxBitmap))

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_SetWidth[] = { &wxluatype_wxBitmap, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBitmap_SetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_SetWidth[1] = {{ wxLua_wxBitmap_SetWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmap_SetWidth }};
//     void SetWidth(int width)
static int LUACALL wxLua_wxBitmap_SetWidth(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call SetWidth
    self->SetWidth(width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_delete[] = { &wxluatype_wxBitmap, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxBitmap_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_op_set[] = { &wxluatype_wxBitmap, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmap_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_op_set[1] = {{ wxLua_wxBitmap_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmap_op_set }};
//     %operator wxBitmap& operator=(const wxBitmap& b) const
static int LUACALL wxLua_wxBitmap_op_set(lua_State *L)
{
    // const wxBitmap b
    const wxBitmap * b = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxBitmap * self = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call op_set
    (*self)=(*b);
    wxBitmap* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}


#if (wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxBitmap))
#define wxLua_wxBitmap_constructor8 wxLua_wxBitmapFromData_constructor
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_constructor8[] = { &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBitmap_constructor8(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_constructor8[1] = {{ wxLua_wxBitmap_constructor8, WXLUAMETHOD_CONSTRUCTOR, 5, 5, s_wxluatypeArray_wxLua_wxBitmap_constructor8 }};
// %override wxLua_wxBitmapFromData_constructor
// %win wxBitmap(void* data, int type, int width, int height, int depth = -1)
#ifdef __WXMSW__
static int LUACALL wxLua_wxBitmapFromData_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int depth = -1
    int depth = (argCount >= 5 ? (int)wxlua_getintegertype(L, 5) : -1);
    // int height
    int height = (int)wxlua_getintegertype(L, 4);
    // int width
    int width = (int)wxlua_getintegertype(L, 3);
    // int type
    int type = (int)wxlua_getintegertype(L, 2);
    // void* data
    void *data = (void *)lua_tostring(L, 1);
    // call constructor
    wxBitmap *returns = new wxBitmap(data, type, width, height, depth);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);
    // return the number of parameters
    return 1;
}
#endif


#endif // (wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxBitmap))

#define wxLua_wxBitmap_constructor7 wxLua_wxBitmapFromXPMData_constructor
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_constructor7[] = { &wxluatype_TTABLE, NULL };
static int LUACALL wxLua_wxBitmap_constructor7(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_constructor7[1] = {{ wxLua_wxBitmap_constructor7, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxBitmap_constructor7 }};
// %override wxLua_wxBitmapFromXPMData_constructor
// %constructor wxXmlResourceGetDefault()
static int LUACALL wxLua_wxBitmapFromXPMData_constructor(lua_State *L)
{
    int count = 0;

    const char **sizeArray = wxlua_getchararray(L, 1, count);
    if (sizeArray != NULL)
    {
        // call constructor
        wxBitmap *returns = new wxBitmap(sizeArray);
        delete [] sizeArray;
        // add to tracked memory list
        wxluaO_addgcobject(L, returns);
        // push the constructed class pointer
        wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);
        // return the number of parameters
        return 1;
    }

    return 0;
}


#define wxLua_wxBitmap_constructor6 wxLua_wxBitmapFromBitTable_constructor
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_constructor6[] = { &wxluatype_TTABLE, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBitmap_constructor6(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_constructor6[1] = {{ wxLua_wxBitmap_constructor6, WXLUAMETHOD_CONSTRUCTOR, 4, 4, s_wxluatypeArray_wxLua_wxBitmap_constructor6 }};
// %override wxLua_wxBitmapFromBitTable_constructor
// %win wxBitmap(LuaTable charTable, int width, int height, int depth = -1)
static int LUACALL wxLua_wxBitmapFromBitTable_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int depth = -1
    int depth = (argCount >= 4 ? (int)wxlua_getintegertype(L, 4) : -1);
    // int height
    int height = (int)wxlua_getintegertype(L, 3);
    // int width
    int width = (int)wxlua_getintegertype(L, 2);

    if (!wxlua_iswxluatype(lua_type(L, 1), WXLUA_TTABLE))
        wxlua_argerror(L, 1, wxT("a 'table'"));

    // const char* bits
    int size = height*width/8;
    char *bits = (char*)malloc(size);

    for (int n = 0; n < size; ++n)
    {
        lua_rawgeti(L, 1, n+1); // Lua array starts at 1

        if (!wxlua_iswxluatype(lua_type(L, -1), WXLUA_TINTEGER))
        {
            free(bits);
            wxlua_argerror(L, 1, wxT("a 'table of chars of size width*height/8'"));
        }

        bits[n] = (char)lua_tonumber(L, -1);
        lua_pop(L, 1);
    }

    // call constructor
    wxBitmap *returns = new wxBitmap(bits, width, height, depth);
    free(bits);

    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);
    // return the number of parameters
    return 1;
}


#define wxLua_wxBitmap_constructor5 wxLua_wxBitmapFromBits_constructor
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_constructor5[] = { &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBitmap_constructor5(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_constructor5[1] = {{ wxLua_wxBitmap_constructor5, WXLUAMETHOD_CONSTRUCTOR, 4, 4, s_wxluatypeArray_wxLua_wxBitmap_constructor5 }};
// %override wxLua_wxBitmapFromBits_constructor
// %win wxBitmap(const char* bits, int width, int height, int depth = -1)
static int LUACALL wxLua_wxBitmapFromBits_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int depth = -1
    int depth = (argCount >= 4 ? (int)wxlua_getintegertype(L, 4) : -1);
    // int height
    int height = (int)wxlua_getintegertype(L, 3);
    // int width
    int width = (int)wxlua_getintegertype(L, 2);
    // const char* bits
    const char *bits = (const char *)lua_tostring(L, 1);
    // call constructor
    wxBitmap *returns = new wxBitmap(bits, width, height, depth);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);
    // return the number of parameters
    return 1;
}



#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_constructor4[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBitmap_constructor4(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_constructor4[1] = {{ wxLua_wxBitmap_constructor4, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxBitmap_constructor4 }};
//     wxBitmap(const wxImage &image, int depth = -1)
static int LUACALL wxLua_wxBitmap_constructor4(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int depth = -1
    int depth = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : -1);
    // const wxImage image
    const wxImage * image = (const wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call constructor
    wxBitmap* returns = new wxBitmap(*image, depth);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_constructor3[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxBitmap_constructor3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_constructor3[1] = {{ wxLua_wxBitmap_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxBitmap_constructor3 }};
//     wxBitmap(const wxString& name, wxBitmapType type = wxBITMAP_TYPE_ANY)
static int LUACALL wxLua_wxBitmap_constructor3(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxBitmapType type = wxBITMAP_TYPE_ANY
    wxBitmapType type = (argCount >= 2 ? (wxBitmapType)wxlua_getenumtype(L, 2) : wxBITMAP_TYPE_ANY);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxBitmap* returns = new wxBitmap(name, type);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_constructor2[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBitmap_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_constructor2[1] = {{ wxLua_wxBitmap_constructor2, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxBitmap_constructor2 }};
//     wxBitmap( int width, int height, int depth = -1)
static int LUACALL wxLua_wxBitmap_constructor2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int depth = -1
    int depth = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : -1);
    // int height
    int height = (int)wxlua_getnumbertype(L, 2);
    // int width
    int width = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxBitmap* returns = new wxBitmap(width, height, depth);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmap_constructor1[] = { &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmap_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_constructor1[1] = {{ wxLua_wxBitmap_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxBitmap_constructor1 }};
//     wxBitmap(const wxBitmap& bitmap)
static int LUACALL wxLua_wxBitmap_constructor1(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call constructor
    wxBitmap* returns = new wxBitmap(*bitmap);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

static int LUACALL wxLua_wxBitmap_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_constructor[1] = {{ wxLua_wxBitmap_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxBitmap()
static int LUACALL wxLua_wxBitmap_constructor(lua_State *L)
{
    // call constructor
    wxBitmap* returns = new wxBitmap();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}




#if ((wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxBitmap)))||(wxLUA_USE_wxBitmap)||((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxBitmap))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmap_constructor_overload[] =
{

#if (wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxBitmap))
    { wxLua_wxBitmap_constructor8, WXLUAMETHOD_CONSTRUCTOR, 5, 5, s_wxluatypeArray_wxLua_wxBitmap_constructor8 },
#endif // (wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxBitmap))
    { wxLua_wxBitmap_constructor7, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxBitmap_constructor7 },
    { wxLua_wxBitmap_constructor6, WXLUAMETHOD_CONSTRUCTOR, 4, 4, s_wxluatypeArray_wxLua_wxBitmap_constructor6 },
    { wxLua_wxBitmap_constructor5, WXLUAMETHOD_CONSTRUCTOR, 4, 4, s_wxluatypeArray_wxLua_wxBitmap_constructor5 },

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxBitmap)
    { wxLua_wxBitmap_constructor4, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxBitmap_constructor4 },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxBitmap)
    { wxLua_wxBitmap_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxBitmap_constructor3 },
    { wxLua_wxBitmap_constructor2, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxBitmap_constructor2 },
    { wxLua_wxBitmap_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxBitmap_constructor1 },
    { wxLua_wxBitmap_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxBitmap_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxBitmap_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxBitmap)))||(wxLUA_USE_wxBitmap)||((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxBitmap))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxBitmap_methods[] = {
#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxBitmap)
    { "ConvertToImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_ConvertToImage, 1, NULL },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxIcon) && (wxLUA_USE_wxBitmap)
    { "CopyFromIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_CopyFromIcon, 1, NULL },
#endif // (wxLUA_USE_wxIcon) && (wxLUA_USE_wxBitmap)

    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_Create, 1, NULL },
    { "GetDepth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_GetDepth, 1, NULL },
    { "GetHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_GetHeight, 1, NULL },

#if (wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)
    { "GetMask", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_GetMask, 1, NULL },
#endif // (wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxBitmap)
    { "GetPalette", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_GetPalette, 1, NULL },
#endif // (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxBitmap)
    { "GetSubBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_GetSubBitmap, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxBitmap)

    { "GetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_GetWidth, 1, NULL },
    { "LoadFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_LoadFile, 1, NULL },
    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_Ok, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && ((!defined(__WXMSW__) && wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxBitmap))
    { "QuantizeColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_QuantizeColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && ((!defined(__WXMSW__) && wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxBitmap))

#if (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxBitmap)
    { "SaveFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_SaveFile, 1, NULL },
#endif // (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxBitmap)

    { "SetDepth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_SetDepth, 1, NULL },
    { "SetHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_SetHeight, 1, NULL },

#if (wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)
    { "SetMask", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_SetMask, 1, NULL },
#endif // (wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxPalette && wxUSE_PALETTE) && ((defined(__WXMSW__)) && (wxLUA_USE_wxBitmap))
    { "SetPalette", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_SetPalette, 1, NULL },
#endif // (wxLUA_USE_wxPalette && wxUSE_PALETTE) && ((defined(__WXMSW__)) && (wxLUA_USE_wxBitmap))

    { "SetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_SetWidth, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxBitmap_delete, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmap_op_set, 1, NULL },

#if ((wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxBitmap)))||(wxLUA_USE_wxBitmap)||((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxBitmap))
    { "wxBitmap", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxBitmap_constructor_overload, s_wxluafunc_wxLua_wxBitmap_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxBitmap)))||(wxLUA_USE_wxBitmap)||((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxBitmap))

    { 0, 0, 0, 0 },
};

int wxBitmap_methodCount = sizeof(wxBitmap_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxBitmap


#if wxLUA_USE_wxCursor
// ---------------------------------------------------------------------------
// Bind class wxCursor
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxCursor'
int wxluatype_wxCursor = WXLUA_TUNKNOWN;

#if (defined(__WXMSW__)) && (wxLUA_USE_wxCursor)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCursor_GetDepth[] = { &wxluatype_wxCursor, NULL };
static int LUACALL wxLua_wxCursor_GetDepth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCursor_GetDepth[1] = {{ wxLua_wxCursor_GetDepth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCursor_GetDepth }};
//     %win int GetDepth()
static int LUACALL wxLua_wxCursor_GetDepth(lua_State *L)
{
    // get this
    wxCursor * self = (wxCursor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCursor);
    // call GetDepth
    int returns = (self->GetDepth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCursor_GetHeight[] = { &wxluatype_wxCursor, NULL };
static int LUACALL wxLua_wxCursor_GetHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCursor_GetHeight[1] = {{ wxLua_wxCursor_GetHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCursor_GetHeight }};
//     %win int GetHeight()
static int LUACALL wxLua_wxCursor_GetHeight(lua_State *L)
{
    // get this
    wxCursor * self = (wxCursor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCursor);
    // call GetHeight
    int returns = (self->GetHeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCursor_GetWidth[] = { &wxluatype_wxCursor, NULL };
static int LUACALL wxLua_wxCursor_GetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCursor_GetWidth[1] = {{ wxLua_wxCursor_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCursor_GetWidth }};
//     %win int GetWidth()
static int LUACALL wxLua_wxCursor_GetWidth(lua_State *L)
{
    // get this
    wxCursor * self = (wxCursor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCursor);
    // call GetWidth
    int returns = (self->GetWidth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (defined(__WXMSW__)) && (wxLUA_USE_wxCursor)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCursor_Ok[] = { &wxluatype_wxCursor, NULL };
static int LUACALL wxLua_wxCursor_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCursor_Ok[1] = {{ wxLua_wxCursor_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCursor_Ok }};
//     bool Ok()
static int LUACALL wxLua_wxCursor_Ok(lua_State *L)
{
    // get this
    wxCursor * self = (wxCursor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCursor);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCursor_delete[] = { &wxluatype_wxCursor, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCursor_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxCursor_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxCursor_op_set[] = { &wxluatype_wxCursor, &wxluatype_wxCursor, NULL };
static int LUACALL wxLua_wxCursor_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCursor_op_set[1] = {{ wxLua_wxCursor_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCursor_op_set }};
//     %operator wxCursor& operator=(const wxCursor& c) const
static int LUACALL wxLua_wxCursor_op_set(lua_State *L)
{
    // const wxCursor c
    const wxCursor * c = (const wxCursor *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCursor);
    // get this
    wxCursor * self = (wxCursor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCursor);
    // call op_set
    (*self)=(*c);
    wxCursor* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCursor);

    return 1;
}


#if ((defined(__WXMSW__) || defined(__WXMAC__)) && (wxLUA_USE_wxCursor)) && (wxLUA_USE_wxCursor)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCursor_constructor3[] = { &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCursor_constructor3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCursor_constructor3[1] = {{ wxLua_wxCursor_constructor3, WXLUAMETHOD_CONSTRUCTOR, 2, 4, s_wxluatypeArray_wxLua_wxCursor_constructor3 }};
//     %win|%mac wxCursor(const wxString& cursorName, long type, int hotSpotX = 0, int hotSpotY = 0)
static int LUACALL wxLua_wxCursor_constructor3(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int hotSpotY = 0
    int hotSpotY = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // int hotSpotX = 0
    int hotSpotX = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // long type
    long type = (long)wxlua_getnumbertype(L, 2);
    // const wxString cursorName
    const wxString cursorName = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxCursor* returns = new wxCursor(cursorName, type, hotSpotX, hotSpotY);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCursor);

    return 1;
}

#endif // ((defined(__WXMSW__) || defined(__WXMAC__)) && (wxLUA_USE_wxCursor)) && (wxLUA_USE_wxCursor)

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxCursor)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCursor_constructor2[] = { &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxCursor_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCursor_constructor2[1] = {{ wxLua_wxCursor_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxCursor_constructor2 }};
//     wxCursor(const wxImage& image)
static int LUACALL wxLua_wxCursor_constructor2(lua_State *L)
{
    // const wxImage image
    const wxImage * image = (const wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call constructor
    wxCursor* returns = new wxCursor(*image);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCursor);

    return 1;
}

#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxCursor)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCursor_constructor1[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCursor_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCursor_constructor1[1] = {{ wxLua_wxCursor_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxCursor_constructor1 }};
//     wxCursor(int id)
static int LUACALL wxLua_wxCursor_constructor1(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxCursor* returns = new wxCursor(id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCursor);

    return 1;
}

static int LUACALL wxLua_wxCursor_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCursor_constructor[1] = {{ wxLua_wxCursor_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxCursor()
static int LUACALL wxLua_wxCursor_constructor(lua_State *L)
{
    // call constructor
    wxCursor* returns = new wxCursor();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCursor);

    return 1;
}




#if (((defined(__WXMSW__) || defined(__WXMAC__)) && (wxLUA_USE_wxCursor)) && (wxLUA_USE_wxCursor))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxCursor))||(wxLUA_USE_wxCursor)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCursor_constructor_overload[] =
{

#if ((defined(__WXMSW__) || defined(__WXMAC__)) && (wxLUA_USE_wxCursor)) && (wxLUA_USE_wxCursor)
    { wxLua_wxCursor_constructor3, WXLUAMETHOD_CONSTRUCTOR, 2, 4, s_wxluatypeArray_wxLua_wxCursor_constructor3 },
#endif // ((defined(__WXMSW__) || defined(__WXMAC__)) && (wxLUA_USE_wxCursor)) && (wxLUA_USE_wxCursor)

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxCursor)
    { wxLua_wxCursor_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxCursor_constructor2 },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxCursor)
    { wxLua_wxCursor_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxCursor_constructor1 },
    { wxLua_wxCursor_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxCursor_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxCursor_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((defined(__WXMSW__) || defined(__WXMAC__)) && (wxLUA_USE_wxCursor)) && (wxLUA_USE_wxCursor))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxCursor))||(wxLUA_USE_wxCursor)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxCursor_methods[] = {
#if (defined(__WXMSW__)) && (wxLUA_USE_wxCursor)
    { "GetDepth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCursor_GetDepth, 1, NULL },
    { "GetHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCursor_GetHeight, 1, NULL },
    { "GetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCursor_GetWidth, 1, NULL },
#endif // (defined(__WXMSW__)) && (wxLUA_USE_wxCursor)

    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCursor_Ok, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxCursor_delete, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCursor_op_set, 1, NULL },

#if (((defined(__WXMSW__) || defined(__WXMAC__)) && (wxLUA_USE_wxCursor)) && (wxLUA_USE_wxCursor))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxCursor))||(wxLUA_USE_wxCursor)
    { "wxCursor", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxCursor_constructor_overload, s_wxluafunc_wxLua_wxCursor_constructor_overload_count, 0 },
#endif // (((defined(__WXMSW__) || defined(__WXMAC__)) && (wxLUA_USE_wxCursor)) && (wxLUA_USE_wxCursor))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxCursor))||(wxLUA_USE_wxCursor)

    { 0, 0, 0, 0 },
};

int wxCursor_methodCount = sizeof(wxCursor_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxCursor


#if wxLUA_USE_wxMask
// ---------------------------------------------------------------------------
// Bind class wxMask
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMask'
int wxluatype_wxMask = WXLUA_TUNKNOWN;

#if ((defined(__WXMSW__)) && (wxLUA_USE_wxMask)) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxMask_Create2[] = { &wxluatype_wxMask, &wxluatype_wxBitmap, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMask_Create2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMask_Create2[1] = {{ wxLua_wxMask_Create2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMask_Create2 }};
//     %win bool Create(const wxBitmap& bitmap, int index)
static int LUACALL wxLua_wxMask_Create2(lua_State *L)
{
    // int index
    int index = (int)wxlua_getnumbertype(L, 3);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxMask * self = (wxMask *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMask);
    // call Create
    bool returns = (self->Create(*bitmap, index));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((defined(__WXMSW__)) && (wxLUA_USE_wxMask)) && (wxLUA_USE_wxBitmap)

#if ((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxMask_Create1[] = { &wxluatype_wxMask, &wxluatype_wxBitmap, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxMask_Create1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMask_Create1[1] = {{ wxLua_wxMask_Create1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMask_Create1 }};
//     bool Create(const wxBitmap& bitmap, const wxColour& colour)
static int LUACALL wxLua_wxMask_Create1(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxMask * self = (wxMask *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMask);
    // call Create
    bool returns = (self->Create(*bitmap, *colour));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxMask_Create[] = { &wxluatype_wxMask, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxMask_Create(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMask_Create[1] = {{ wxLua_wxMask_Create, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMask_Create }};
//     bool Create(const wxBitmap& bitmap)
static int LUACALL wxLua_wxMask_Create(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxMask * self = (wxMask *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMask);
    // call Create
    bool returns = (self->Create(*bitmap));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxMask_delete[] = { &wxluatype_wxMask, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMask_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxMask_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxMask_op_set[] = { &wxluatype_wxMask, &wxluatype_wxMask, NULL };
static int LUACALL wxLua_wxMask_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMask_op_set[1] = {{ wxLua_wxMask_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMask_op_set }};
//     %operator wxMask& operator=(const wxMask& m) const
static int LUACALL wxLua_wxMask_op_set(lua_State *L)
{
    // const wxMask m
    const wxMask * m = (const wxMask *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMask);
    // get this
    wxMask * self = (wxMask *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMask);
    // call op_set
    (*self)=(*m);
    wxMask* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMask);

    return 1;
}


#if ((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && ((defined(__WXMSW__)) && (wxLUA_USE_wxMask))
static wxLuaArgType s_wxluatypeArray_wxLua_wxMask_constructor3[] = { &wxluatype_wxBitmap, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMask_constructor3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMask_constructor3[1] = {{ wxLua_wxMask_constructor3, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxMask_constructor3 }};
//     %win wxMask(const wxBitmap& bitmap, int index)
static int LUACALL wxLua_wxMask_constructor3(lua_State *L)
{
    // int index
    int index = (int)wxlua_getnumbertype(L, 2);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call constructor
    wxMask* returns = new wxMask(*bitmap, index);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMask);

    return 1;
}

#endif // ((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && ((defined(__WXMSW__)) && (wxLUA_USE_wxMask))

#if ((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxMask_constructor2[] = { &wxluatype_wxBitmap, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxMask_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMask_constructor2[1] = {{ wxLua_wxMask_constructor2, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxMask_constructor2 }};
//     wxMask(const wxBitmap& bitmap, const wxColour& colour)
static int LUACALL wxLua_wxMask_constructor2(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call constructor
    wxMask* returns = new wxMask(*bitmap, *colour);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMask);

    return 1;
}

#endif // ((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxMask_constructor1[] = { &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxMask_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMask_constructor1[1] = {{ wxLua_wxMask_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxMask_constructor1 }};
//     wxMask(const wxBitmap& bitmap)
static int LUACALL wxLua_wxMask_constructor1(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call constructor
    wxMask* returns = new wxMask(*bitmap);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMask);

    return 1;
}

#endif // (wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)

static int LUACALL wxLua_wxMask_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxMask_constructor[1] = {{ wxLua_wxMask_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxMask()
static int LUACALL wxLua_wxMask_constructor(lua_State *L)
{
    // call constructor
    wxMask* returns = new wxMask();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMask);

    return 1;
}




#if (((defined(__WXMSW__)) && (wxLUA_USE_wxMask)) && (wxLUA_USE_wxBitmap))||(((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMask_Create_overload[] =
{

#if ((defined(__WXMSW__)) && (wxLUA_USE_wxMask)) && (wxLUA_USE_wxBitmap)
    { wxLua_wxMask_Create2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMask_Create2 },
#endif // ((defined(__WXMSW__)) && (wxLUA_USE_wxMask)) && (wxLUA_USE_wxBitmap)

#if ((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush)
    { wxLua_wxMask_Create1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxMask_Create1 },
#endif // ((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)
    { wxLua_wxMask_Create, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMask_Create },
#endif // (wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)
};
static int s_wxluafunc_wxLua_wxMask_Create_overload_count = sizeof(s_wxluafunc_wxLua_wxMask_Create_overload)/sizeof(wxLuaBindCFunc);

#endif // (((defined(__WXMSW__)) && (wxLUA_USE_wxMask)) && (wxLUA_USE_wxBitmap))||(((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap))

#if (((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && ((defined(__WXMSW__)) && (wxLUA_USE_wxMask)))||(((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap))||(wxLUA_USE_wxMask)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMask_constructor_overload[] =
{

#if ((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && ((defined(__WXMSW__)) && (wxLUA_USE_wxMask))
    { wxLua_wxMask_constructor3, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxMask_constructor3 },
#endif // ((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && ((defined(__WXMSW__)) && (wxLUA_USE_wxMask))

#if ((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush)
    { wxLua_wxMask_constructor2, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxMask_constructor2 },
#endif // ((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)
    { wxLua_wxMask_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxMask_constructor1 },
#endif // (wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)
    { wxLua_wxMask_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxMask_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxMask_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && ((defined(__WXMSW__)) && (wxLUA_USE_wxMask)))||(((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap))||(wxLUA_USE_wxMask)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMask_methods[] = {
#if (((defined(__WXMSW__)) && (wxLUA_USE_wxMask)) && (wxLUA_USE_wxBitmap))||(((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap))
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMask_Create_overload, s_wxluafunc_wxLua_wxMask_Create_overload_count, 0 },
#endif // (((defined(__WXMSW__)) && (wxLUA_USE_wxMask)) && (wxLUA_USE_wxBitmap))||(((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxMask_delete, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMask_op_set, 1, NULL },

#if (((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && ((defined(__WXMSW__)) && (wxLUA_USE_wxMask)))||(((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap))||(wxLUA_USE_wxMask)
    { "wxMask", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMask_constructor_overload, s_wxluafunc_wxLua_wxMask_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && ((defined(__WXMSW__)) && (wxLUA_USE_wxMask)))||(((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxMask) && (wxLUA_USE_wxBitmap))||(wxLUA_USE_wxMask)

    { 0, 0, 0, 0 },
};

int wxMask_methodCount = sizeof(wxMask_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxMask


#if wxLUA_USE_wxImageList
// ---------------------------------------------------------------------------
// Bind class wxImageList
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxImageList'
int wxluatype_wxImageList = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxIcon) && (wxLUA_USE_wxImageList)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImageList_Add2[] = { &wxluatype_wxImageList, &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxImageList_Add2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageList_Add2[1] = {{ wxLua_wxImageList_Add2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageList_Add2 }};
//     int Add(const wxIcon& icon)
static int LUACALL wxLua_wxImageList_Add2(lua_State *L)
{
    // const wxIcon icon
    const wxIcon * icon = (const wxIcon *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIcon);
    // get this
    wxImageList * self = (wxImageList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageList);
    // call Add
    int returns = (self->Add(*icon));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxIcon) && (wxLUA_USE_wxImageList)

#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxImageList)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImageList_Add1[] = { &wxluatype_wxImageList, &wxluatype_wxBitmap, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxImageList_Add1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageList_Add1[1] = {{ wxLua_wxImageList_Add1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImageList_Add1 }};
//     int Add(const wxBitmap& bitmap, const wxColour& maskColour)
static int LUACALL wxLua_wxImageList_Add1(lua_State *L)
{
    // const wxColour maskColour
    const wxColour * maskColour = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxImageList * self = (wxImageList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageList);
    // call Add
    int returns = (self->Add(*bitmap, *maskColour));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxImageList)

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImageList)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImageList_Add[] = { &wxluatype_wxImageList, &wxluatype_wxBitmap, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxImageList_Add(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageList_Add[1] = {{ wxLua_wxImageList_Add, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxImageList_Add }};
//     int Add(const wxBitmap& bitmap, const wxBitmap& mask = wxNullBitmap)
static int LUACALL wxLua_wxImageList_Add(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxBitmap mask = wxNullBitmap
    const wxBitmap * mask = (argCount >= 3 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 3, wxluatype_wxBitmap) : &wxNullBitmap);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxImageList * self = (wxImageList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageList);
    // call Add
    int returns = (self->Add(*bitmap, *mask));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImageList)

#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxImageList)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImageList_Draw[] = { &wxluatype_wxImageList, &wxluatype_TNUMBER, &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxImageList_Draw(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageList_Draw[1] = {{ wxLua_wxImageList_Draw, WXLUAMETHOD_METHOD, 5, 7, s_wxluatypeArray_wxLua_wxImageList_Draw }};
//     bool    Draw(int index, wxDC& dc, int x, int y, int flags = wxIMAGELIST_DRAW_NORMAL, bool solidBackground = false)
static int LUACALL wxLua_wxImageList_Draw(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool solidBackground = false
    bool solidBackground = (argCount >= 7 ? wxlua_getbooleantype(L, 7) : false);
    // int flags = wxIMAGELIST_DRAW_NORMAL
    int flags = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : wxIMAGELIST_DRAW_NORMAL);
    // int y
    int y = (int)wxlua_getnumbertype(L, 5);
    // int x
    int x = (int)wxlua_getnumbertype(L, 4);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // int index
    int index = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImageList * self = (wxImageList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageList);
    // call Draw
    bool returns = (self->Draw(index, *dc, x, y, flags, solidBackground));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxImageList)

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImageList)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImageList_GetBitmap[] = { &wxluatype_wxImageList, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImageList_GetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageList_GetBitmap[1] = {{ wxLua_wxImageList_GetBitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageList_GetBitmap }};
//     wxBitmap GetBitmap(int index) const
static int LUACALL wxLua_wxImageList_GetBitmap(lua_State *L)
{
    // int index
    int index = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImageList * self = (wxImageList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageList);
    // call GetBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetBitmap(index));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImageList)

#if (wxLUA_USE_wxIcon) && (wxLUA_USE_wxImageList)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImageList_GetIcon[] = { &wxluatype_wxImageList, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImageList_GetIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageList_GetIcon[1] = {{ wxLua_wxImageList_GetIcon, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageList_GetIcon }};
//     wxIcon  GetIcon(int index) const
static int LUACALL wxLua_wxImageList_GetIcon(lua_State *L)
{
    // int index
    int index = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImageList * self = (wxImageList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageList);
    // call GetIcon
    // allocate a new object using the copy constructor
    wxIcon* returns = new wxIcon(self->GetIcon(index));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxIcon*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // (wxLUA_USE_wxIcon) && (wxLUA_USE_wxImageList)

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageList_GetImageCount[] = { &wxluatype_wxImageList, NULL };
static int LUACALL wxLua_wxImageList_GetImageCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageList_GetImageCount[1] = {{ wxLua_wxImageList_GetImageCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImageList_GetImageCount }};
//     int     GetImageCount()
static int LUACALL wxLua_wxImageList_GetImageCount(lua_State *L)
{
    // get this
    wxImageList * self = (wxImageList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageList);
    // call GetImageCount
    int returns = (self->GetImageCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageList_GetSize[] = { &wxluatype_wxImageList, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImageList_GetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageList_GetSize[1] = {{ wxLua_wxImageList_GetSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageList_GetSize }};
// %override wxLua_wxImageList_GetSize
// void    GetSize(int index, int& width, int& height)
static int LUACALL wxLua_wxImageList_GetSize(lua_State *L)
{
    // int& height
    int height;
    // int& width
    int width;
    // int index
    int index = (int)wxlua_getintegertype(L, 2);
    // get this
    wxImageList *self = (wxImageList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageList);
    // call GetSize
    self->GetSize(index, width, height);
    lua_pushnumber(L, width);
    lua_pushnumber(L, height);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxImageList_Remove[] = { &wxluatype_wxImageList, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImageList_Remove(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageList_Remove[1] = {{ wxLua_wxImageList_Remove, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageList_Remove }};
//     bool    Remove(int index)
static int LUACALL wxLua_wxImageList_Remove(lua_State *L)
{
    // int index
    int index = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImageList * self = (wxImageList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageList);
    // call Remove
    bool returns = (self->Remove(index));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageList_RemoveAll[] = { &wxluatype_wxImageList, NULL };
static int LUACALL wxLua_wxImageList_RemoveAll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageList_RemoveAll[1] = {{ wxLua_wxImageList_RemoveAll, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImageList_RemoveAll }};
//     bool    RemoveAll()
static int LUACALL wxLua_wxImageList_RemoveAll(lua_State *L)
{
    // get this
    wxImageList * self = (wxImageList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageList);
    // call RemoveAll
    bool returns = (self->RemoveAll());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxBitmap) && ((defined(__WXGTK__) || defined(__WXMAC__)) && (wxLUA_USE_wxImageList))
static wxLuaArgType s_wxluatypeArray_wxLua_wxImageList_Replace1[] = { &wxluatype_wxImageList, &wxluatype_TNUMBER, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxImageList_Replace1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageList_Replace1[1] = {{ wxLua_wxImageList_Replace1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImageList_Replace1 }};
//     %gtk|%mac bool Replace(int index, const wxBitmap& bitmap)
static int LUACALL wxLua_wxImageList_Replace1(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 3, wxluatype_wxBitmap);
    // int index
    int index = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImageList * self = (wxImageList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageList);
    // call Replace
    bool returns = (self->Replace(index, *bitmap));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && ((defined(__WXGTK__) || defined(__WXMAC__)) && (wxLUA_USE_wxImageList))

#if (wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxImageList))
static wxLuaArgType s_wxluatypeArray_wxLua_wxImageList_Replace[] = { &wxluatype_wxImageList, &wxluatype_TNUMBER, &wxluatype_wxBitmap, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxImageList_Replace(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageList_Replace[1] = {{ wxLua_wxImageList_Replace, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxImageList_Replace }};
//     %win bool Replace(int index, const wxBitmap& bitmap, const wxBitmap& mask = wxNullBitmap)
static int LUACALL wxLua_wxImageList_Replace(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxBitmap mask = wxNullBitmap
    const wxBitmap * mask = (argCount >= 4 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 4, wxluatype_wxBitmap) : &wxNullBitmap);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 3, wxluatype_wxBitmap);
    // int index
    int index = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImageList * self = (wxImageList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageList);
    // call Replace
    bool returns = (self->Replace(index, *bitmap, *mask));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxImageList))

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageList_delete[] = { &wxluatype_wxImageList, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageList_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxImageList_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageList_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImageList_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageList_constructor[1] = {{ wxLua_wxImageList_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 4, s_wxluatypeArray_wxLua_wxImageList_constructor }};
//     wxImageList(int width, int height, bool mask = true, int initialCount = 1)
static int LUACALL wxLua_wxImageList_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int initialCount = 1
    int initialCount = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 1);
    // bool mask = true
    bool mask = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // int height
    int height = (int)wxlua_getnumbertype(L, 2);
    // int width
    int width = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxImageList* returns = new wxImageList(width, height, mask, initialCount);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImageList);

    return 1;
}




#if ((wxLUA_USE_wxIcon) && (wxLUA_USE_wxImageList))||(((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxImageList))||((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImageList))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageList_Add_overload[] =
{

#if (wxLUA_USE_wxIcon) && (wxLUA_USE_wxImageList)
    { wxLua_wxImageList_Add2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageList_Add2 },
#endif // (wxLUA_USE_wxIcon) && (wxLUA_USE_wxImageList)

#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxImageList)
    { wxLua_wxImageList_Add1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImageList_Add1 },
#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxImageList)

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImageList)
    { wxLua_wxImageList_Add, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxImageList_Add },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImageList)
};
static int s_wxluafunc_wxLua_wxImageList_Add_overload_count = sizeof(s_wxluafunc_wxLua_wxImageList_Add_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxIcon) && (wxLUA_USE_wxImageList))||(((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxImageList))||((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImageList))

#if ((wxLUA_USE_wxBitmap) && ((defined(__WXGTK__) || defined(__WXMAC__)) && (wxLUA_USE_wxImageList)))||((wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxImageList)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageList_Replace_overload[] =
{

#if (wxLUA_USE_wxBitmap) && ((defined(__WXGTK__) || defined(__WXMAC__)) && (wxLUA_USE_wxImageList))
    { wxLua_wxImageList_Replace1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImageList_Replace1 },
#endif // (wxLUA_USE_wxBitmap) && ((defined(__WXGTK__) || defined(__WXMAC__)) && (wxLUA_USE_wxImageList))

#if (wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxImageList))
    { wxLua_wxImageList_Replace, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxImageList_Replace },
#endif // (wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxImageList))
};
static int s_wxluafunc_wxLua_wxImageList_Replace_overload_count = sizeof(s_wxluafunc_wxLua_wxImageList_Replace_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxBitmap) && ((defined(__WXGTK__) || defined(__WXMAC__)) && (wxLUA_USE_wxImageList)))||((wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxImageList)))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxImageList_methods[] = {
#if ((wxLUA_USE_wxIcon) && (wxLUA_USE_wxImageList))||(((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxImageList))||((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImageList))
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageList_Add_overload, s_wxluafunc_wxLua_wxImageList_Add_overload_count, 0 },
#endif // ((wxLUA_USE_wxIcon) && (wxLUA_USE_wxImageList))||(((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxImageList))||((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImageList))

#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxImageList)
    { "Draw", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageList_Draw, 1, NULL },
#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxImageList)

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImageList)
    { "GetBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageList_GetBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImageList)

#if (wxLUA_USE_wxIcon) && (wxLUA_USE_wxImageList)
    { "GetIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageList_GetIcon, 1, NULL },
#endif // (wxLUA_USE_wxIcon) && (wxLUA_USE_wxImageList)

    { "GetImageCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageList_GetImageCount, 1, NULL },
    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageList_GetSize, 1, NULL },
    { "Remove", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageList_Remove, 1, NULL },
    { "RemoveAll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageList_RemoveAll, 1, NULL },

#if ((wxLUA_USE_wxBitmap) && ((defined(__WXGTK__) || defined(__WXMAC__)) && (wxLUA_USE_wxImageList)))||((wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxImageList)))
    { "Replace", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageList_Replace_overload, s_wxluafunc_wxLua_wxImageList_Replace_overload_count, 0 },
#endif // ((wxLUA_USE_wxBitmap) && ((defined(__WXGTK__) || defined(__WXMAC__)) && (wxLUA_USE_wxImageList)))||((wxLUA_USE_wxBitmap) && ((defined(__WXMSW__)) && (wxLUA_USE_wxImageList)))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxImageList_delete, 1, NULL },
    { "wxImageList", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxImageList_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxImageList_methodCount = sizeof(wxImageList_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxImageList


#if wxLUA_USE_wxDC
// ---------------------------------------------------------------------------
// Bind class wxDC
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDC'
int wxluatype_wxDC = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_Blit[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDC_Blit(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_Blit[1] = {{ wxLua_wxDC_Blit, WXLUAMETHOD_METHOD, 8, 10, s_wxluatypeArray_wxLua_wxDC_Blit }};
//     bool Blit(wxCoord xdest, wxCoord ydest, wxCoord width, wxCoord height, wxDC* source, wxCoord xsrc, wxCoord ysrc, int logicalFunc = wxCOPY, bool useMask = false)
static int LUACALL wxLua_wxDC_Blit(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool useMask = false
    bool useMask = (argCount >= 10 ? wxlua_getbooleantype(L, 10) : false);
    // int logicalFunc = wxCOPY
    int logicalFunc = (argCount >= 9 ? (int)wxlua_getnumbertype(L, 9) : wxCOPY);
    // wxCoord ysrc
    wxCoord ysrc = (wxCoord)wxlua_getnumbertype(L, 8);
    // wxCoord xsrc
    wxCoord xsrc = (wxCoord)wxlua_getnumbertype(L, 7);
    // wxDC source
    wxDC * source = (wxDC *)wxluaT_getuserdatatype(L, 6, wxluatype_wxDC);
    // wxCoord height
    wxCoord height = (wxCoord)wxlua_getnumbertype(L, 5);
    // wxCoord width
    wxCoord width = (wxCoord)wxlua_getnumbertype(L, 4);
    // wxCoord ydest
    wxCoord ydest = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord xdest
    wxCoord xdest = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call Blit
    bool returns = (self->Blit(xdest, ydest, width, height, source, xsrc, ysrc, logicalFunc, useMask));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_CalcBoundingBox[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_CalcBoundingBox(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_CalcBoundingBox[1] = {{ wxLua_wxDC_CalcBoundingBox, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDC_CalcBoundingBox }};
//     void CalcBoundingBox(wxCoord x, wxCoord y)
static int LUACALL wxLua_wxDC_CalcBoundingBox(lua_State *L)
{
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call CalcBoundingBox
    self->CalcBoundingBox(x, y);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_Clear[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_Clear[1] = {{ wxLua_wxDC_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_Clear }};
//     void Clear()
static int LUACALL wxLua_wxDC_Clear(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_CrossHair[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_CrossHair(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_CrossHair[1] = {{ wxLua_wxDC_CrossHair, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDC_CrossHair }};
//     void CrossHair(wxCoord x, wxCoord y)
static int LUACALL wxLua_wxDC_CrossHair(lua_State *L)
{
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call CrossHair
    self->CrossHair(x, y);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DestroyClippingRegion[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_DestroyClippingRegion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DestroyClippingRegion[1] = {{ wxLua_wxDC_DestroyClippingRegion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_DestroyClippingRegion }};
//     void DestroyClippingRegion()
static int LUACALL wxLua_wxDC_DestroyClippingRegion(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DestroyClippingRegion
    self->DestroyClippingRegion();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DeviceToLogicalX[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DeviceToLogicalX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DeviceToLogicalX[1] = {{ wxLua_wxDC_DeviceToLogicalX, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_DeviceToLogicalX }};
//     wxCoord DeviceToLogicalX(wxCoord x)
static int LUACALL wxLua_wxDC_DeviceToLogicalX(lua_State *L)
{
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DeviceToLogicalX
    wxCoord returns = (self->DeviceToLogicalX(x));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DeviceToLogicalXRel[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DeviceToLogicalXRel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DeviceToLogicalXRel[1] = {{ wxLua_wxDC_DeviceToLogicalXRel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_DeviceToLogicalXRel }};
//     wxCoord DeviceToLogicalXRel(wxCoord x)
static int LUACALL wxLua_wxDC_DeviceToLogicalXRel(lua_State *L)
{
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DeviceToLogicalXRel
    wxCoord returns = (self->DeviceToLogicalXRel(x));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DeviceToLogicalY[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DeviceToLogicalY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DeviceToLogicalY[1] = {{ wxLua_wxDC_DeviceToLogicalY, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_DeviceToLogicalY }};
//     wxCoord DeviceToLogicalY(wxCoord y)
static int LUACALL wxLua_wxDC_DeviceToLogicalY(lua_State *L)
{
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DeviceToLogicalY
    wxCoord returns = (self->DeviceToLogicalY(y));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DeviceToLogicalYRel[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DeviceToLogicalYRel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DeviceToLogicalYRel[1] = {{ wxLua_wxDC_DeviceToLogicalYRel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_DeviceToLogicalYRel }};
//     wxCoord DeviceToLogicalYRel(wxCoord y)
static int LUACALL wxLua_wxDC_DeviceToLogicalYRel(lua_State *L)
{
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DeviceToLogicalYRel
    wxCoord returns = (self->DeviceToLogicalYRel(y));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawArc[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DrawArc(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawArc[1] = {{ wxLua_wxDC_DrawArc, WXLUAMETHOD_METHOD, 7, 7, s_wxluatypeArray_wxLua_wxDC_DrawArc }};
//     void DrawArc(wxCoord x1, wxCoord y1, wxCoord x2, wxCoord y2, wxCoord xc, wxCoord yc)
static int LUACALL wxLua_wxDC_DrawArc(lua_State *L)
{
    // wxCoord yc
    wxCoord yc = (wxCoord)wxlua_getnumbertype(L, 7);
    // wxCoord xc
    wxCoord xc = (wxCoord)wxlua_getnumbertype(L, 6);
    // wxCoord y2
    wxCoord y2 = (wxCoord)wxlua_getnumbertype(L, 5);
    // wxCoord x2
    wxCoord x2 = (wxCoord)wxlua_getnumbertype(L, 4);
    // wxCoord y1
    wxCoord y1 = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x1
    wxCoord x1 = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawArc
    self->DrawArc(x1, y1, x2, y2, xc, yc);

    return 0;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawBitmap[] = { &wxluatype_wxDC, &wxluatype_wxBitmap, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDC_DrawBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawBitmap[1] = {{ wxLua_wxDC_DrawBitmap, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxDC_DrawBitmap }};
//     void DrawBitmap(const wxBitmap& bitmap, wxCoord x, wxCoord y, bool transparent)
static int LUACALL wxLua_wxDC_DrawBitmap(lua_State *L)
{
    // bool transparent
    bool transparent = wxlua_getbooleantype(L, 5);
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 4);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 3);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawBitmap
    self->DrawBitmap(*bitmap, x, y, transparent);

    return 0;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawCheckMark1[] = { &wxluatype_wxDC, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxDC_DrawCheckMark1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawCheckMark1[1] = {{ wxLua_wxDC_DrawCheckMark1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_DrawCheckMark1 }};
//     void DrawCheckMark(const wxRect &rect)
static int LUACALL wxLua_wxDC_DrawCheckMark1(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawCheckMark
    self->DrawCheckMark(*rect);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawCheckMark[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DrawCheckMark(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawCheckMark[1] = {{ wxLua_wxDC_DrawCheckMark, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxDC_DrawCheckMark }};
//     void DrawCheckMark(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
static int LUACALL wxLua_wxDC_DrawCheckMark(lua_State *L)
{
    // wxCoord height
    wxCoord height = (wxCoord)wxlua_getnumbertype(L, 5);
    // wxCoord width
    wxCoord width = (wxCoord)wxlua_getnumbertype(L, 4);
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawCheckMark
    self->DrawCheckMark(x, y, width, height);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawCircle[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DrawCircle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawCircle[1] = {{ wxLua_wxDC_DrawCircle, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxDC_DrawCircle }};
//     void DrawCircle(wxCoord x, wxCoord y, wxCoord radius)
static int LUACALL wxLua_wxDC_DrawCircle(lua_State *L)
{
    // wxCoord radius
    wxCoord radius = (wxCoord)wxlua_getnumbertype(L, 4);
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawCircle
    self->DrawCircle(x, y, radius);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawEllipse[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DrawEllipse(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawEllipse[1] = {{ wxLua_wxDC_DrawEllipse, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxDC_DrawEllipse }};
//     void DrawEllipse(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
static int LUACALL wxLua_wxDC_DrawEllipse(lua_State *L)
{
    // wxCoord height
    wxCoord height = (wxCoord)wxlua_getnumbertype(L, 5);
    // wxCoord width
    wxCoord width = (wxCoord)wxlua_getnumbertype(L, 4);
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawEllipse
    self->DrawEllipse(x, y, width, height);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawEllipticArc[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DrawEllipticArc(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawEllipticArc[1] = {{ wxLua_wxDC_DrawEllipticArc, WXLUAMETHOD_METHOD, 7, 7, s_wxluatypeArray_wxLua_wxDC_DrawEllipticArc }};
//     void DrawEllipticArc(wxCoord x, wxCoord y, wxCoord width, wxCoord height, double start, double end)
static int LUACALL wxLua_wxDC_DrawEllipticArc(lua_State *L)
{
    // double end
    double end = (double)wxlua_getnumbertype(L, 7);
    // double start
    double start = (double)wxlua_getnumbertype(L, 6);
    // wxCoord height
    wxCoord height = (wxCoord)wxlua_getnumbertype(L, 5);
    // wxCoord width
    wxCoord width = (wxCoord)wxlua_getnumbertype(L, 4);
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawEllipticArc
    self->DrawEllipticArc(x, y, width, height, start, end);

    return 0;
}


#if (wxLUA_USE_wxIcon) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawIcon[] = { &wxluatype_wxDC, &wxluatype_wxIcon, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DrawIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawIcon[1] = {{ wxLua_wxDC_DrawIcon, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxDC_DrawIcon }};
//     void DrawIcon(const wxIcon& icon, wxCoord x, wxCoord y)
static int LUACALL wxLua_wxDC_DrawIcon(lua_State *L)
{
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 4);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 3);
    // const wxIcon icon
    const wxIcon * icon = (const wxIcon *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIcon);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawIcon
    self->DrawIcon(*icon, x, y);

    return 0;
}

#endif // (wxLUA_USE_wxIcon) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawLabel1[] = { &wxluatype_wxDC, &wxluatype_TSTRING, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DrawLabel1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawLabel1[1] = {{ wxLua_wxDC_DrawLabel1, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxDC_DrawLabel1 }};
//     void DrawLabel(const wxString& text, const wxRect& rect, int alignment = wxALIGN_LEFT | wxALIGN_TOP, int indexAccel = -1)
static int LUACALL wxLua_wxDC_DrawLabel1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int indexAccel = -1
    int indexAccel = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // int alignment = wxALIGN_LEFT | wxALIGN_TOP
    int alignment = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxALIGN_LEFT | wxALIGN_TOP);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRect);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawLabel
    self->DrawLabel(text, *rect, alignment, indexAccel);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawLabel[] = { &wxluatype_wxDC, &wxluatype_TSTRING, &wxluatype_wxBitmap, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DrawLabel(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawLabel[1] = {{ wxLua_wxDC_DrawLabel, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxDC_DrawLabel }};
//     void DrawLabel(const wxString& text, const wxBitmap& image, const wxRect& rect, int alignment = wxALIGN_LEFT | wxALIGN_TOP, int indexAccel = -1) //, wxRect *rectBounding = NULL)
static int LUACALL wxLua_wxDC_DrawLabel(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int indexAccel = -1
    int indexAccel = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int alignment = wxALIGN_LEFT | wxALIGN_TOP
    int alignment = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxALIGN_LEFT | wxALIGN_TOP);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // const wxBitmap image
    const wxBitmap * image = (const wxBitmap *)wxluaT_getuserdatatype(L, 3, wxluatype_wxBitmap);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawLabel
    self->DrawLabel(text, *image, *rect, alignment, indexAccel);

    return 0;
}

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawLine[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DrawLine(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawLine[1] = {{ wxLua_wxDC_DrawLine, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxDC_DrawLine }};
//     void DrawLine(wxCoord x1, wxCoord y1, wxCoord x2, wxCoord y2)
static int LUACALL wxLua_wxDC_DrawLine(lua_State *L)
{
    // wxCoord y2
    wxCoord y2 = (wxCoord)wxlua_getnumbertype(L, 5);
    // wxCoord x2
    wxCoord x2 = (wxCoord)wxlua_getnumbertype(L, 4);
    // wxCoord y1
    wxCoord y1 = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x1
    wxCoord x1 = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawLine
    self->DrawLine(x1, y1, x2, y2);

    return 0;
}


#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawLinesList[] = { &wxluatype_wxDC, &wxluatype_wxList, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DrawLinesList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawLinesList[1] = {{ wxLua_wxDC_DrawLinesList, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxDC_DrawLinesList }};
//     %rename DrawLinesList void DrawLines(wxList *points, wxCoord xoffset = 0, wxCoord yoffset = 0)
static int LUACALL wxLua_wxDC_DrawLinesList(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxCoord yoffset = 0
    wxCoord yoffset = (argCount >= 4 ? (wxCoord)wxlua_getnumbertype(L, 4) : 0);
    // wxCoord xoffset = 0
    wxCoord xoffset = (argCount >= 3 ? (wxCoord)wxlua_getnumbertype(L, 3) : 0);
    // wxList points
    wxList * points = (wxList *)wxluaT_getuserdatatype(L, 2, wxluatype_wxList);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawLines
    self->DrawLines(points, xoffset, yoffset);

    return 0;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawPoint[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DrawPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawPoint[1] = {{ wxLua_wxDC_DrawPoint, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDC_DrawPoint }};
//     void DrawPoint(wxCoord x, wxCoord y)
static int LUACALL wxLua_wxDC_DrawPoint(lua_State *L)
{
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawPoint
    self->DrawPoint(x, y);

    return 0;
}


#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawPolygonList[] = { &wxluatype_wxDC, &wxluatype_wxList, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DrawPolygonList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawPolygonList[1] = {{ wxLua_wxDC_DrawPolygonList, WXLUAMETHOD_METHOD, 2, 5, s_wxluatypeArray_wxLua_wxDC_DrawPolygonList }};
//     %rename DrawPolygonList void DrawPolygon(wxList *points, wxCoord xoffset = 0, wxCoord yoffset = 0, int fill_style = wxODDEVEN_RULE)
static int LUACALL wxLua_wxDC_DrawPolygonList(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int fill_style = wxODDEVEN_RULE
    int fill_style = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxODDEVEN_RULE);
    // wxCoord yoffset = 0
    wxCoord yoffset = (argCount >= 4 ? (wxCoord)wxlua_getnumbertype(L, 4) : 0);
    // wxCoord xoffset = 0
    wxCoord xoffset = (argCount >= 3 ? (wxCoord)wxlua_getnumbertype(L, 3) : 0);
    // wxList points
    wxList * points = (wxList *)wxluaT_getuserdatatype(L, 2, wxluatype_wxList);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawPolygon
    self->DrawPolygon(points, xoffset, yoffset, fill_style);

    return 0;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawRectangle[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DrawRectangle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawRectangle[1] = {{ wxLua_wxDC_DrawRectangle, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxDC_DrawRectangle }};
//     void DrawRectangle(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
static int LUACALL wxLua_wxDC_DrawRectangle(lua_State *L)
{
    // wxCoord height
    wxCoord height = (wxCoord)wxlua_getnumbertype(L, 5);
    // wxCoord width
    wxCoord width = (wxCoord)wxlua_getnumbertype(L, 4);
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawRectangle
    self->DrawRectangle(x, y, width, height);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawRotatedText[] = { &wxluatype_wxDC, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DrawRotatedText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawRotatedText[1] = {{ wxLua_wxDC_DrawRotatedText, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxDC_DrawRotatedText }};
//     void DrawRotatedText(const wxString& text, wxCoord x, wxCoord y, double angle)
static int LUACALL wxLua_wxDC_DrawRotatedText(lua_State *L)
{
    // double angle
    double angle = (double)wxlua_getnumbertype(L, 5);
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 4);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 3);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawRotatedText
    self->DrawRotatedText(text, x, y, angle);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawRoundedRectangle[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DrawRoundedRectangle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawRoundedRectangle[1] = {{ wxLua_wxDC_DrawRoundedRectangle, WXLUAMETHOD_METHOD, 5, 6, s_wxluatypeArray_wxLua_wxDC_DrawRoundedRectangle }};
//     void DrawRoundedRectangle(wxCoord x, wxCoord y, wxCoord width, wxCoord height, double radius = 20)
static int LUACALL wxLua_wxDC_DrawRoundedRectangle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // double radius = 20
    double radius = (argCount >= 6 ? (double)wxlua_getnumbertype(L, 6) : 20);
    // wxCoord height
    wxCoord height = (wxCoord)wxlua_getnumbertype(L, 5);
    // wxCoord width
    wxCoord width = (wxCoord)wxlua_getnumbertype(L, 4);
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawRoundedRectangle
    self->DrawRoundedRectangle(x, y, width, height, radius);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_DrawText[] = { &wxluatype_wxDC, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_DrawText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawText[1] = {{ wxLua_wxDC_DrawText, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxDC_DrawText }};
//     void DrawText(const wxString& text, wxCoord x, wxCoord y)
static int LUACALL wxLua_wxDC_DrawText(lua_State *L)
{
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 4);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 3);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawText
    self->DrawText(text, x, y);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_EndDoc[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_EndDoc(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_EndDoc[1] = {{ wxLua_wxDC_EndDoc, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_EndDoc }};
//     void EndDoc()
static int LUACALL wxLua_wxDC_EndDoc(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call EndDoc
    self->EndDoc();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_EndPage[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_EndPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_EndPage[1] = {{ wxLua_wxDC_EndPage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_EndPage }};
//     void EndPage()
static int LUACALL wxLua_wxDC_EndPage(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call EndPage
    self->EndPage();

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_FloodFill[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxColour, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_FloodFill(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_FloodFill[1] = {{ wxLua_wxDC_FloodFill, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxDC_FloodFill }};
//     void FloodFill(wxCoord x, wxCoord y, const wxColour& colour, int style=wxFLOOD_SURFACE)
static int LUACALL wxLua_wxDC_FloodFill(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int style = wxFLOOD_SURFACE
    int style = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxFLOOD_SURFACE);
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 4, wxluatype_wxColour);
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call FloodFill
    self->FloodFill(x, y, *colour, style);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

#if (((wxLUA_USE_wxDC) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetAsBitmap[] = { &wxluatype_wxDC, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxDC_GetAsBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetAsBitmap[1] = {{ wxLua_wxDC_GetAsBitmap, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxDC_GetAsBitmap }};
//         wxBitmap GetAsBitmap(const wxRect *subrect = NULL) const
static int LUACALL wxLua_wxDC_GetAsBitmap(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRect subrect = NULL
    const wxRect * subrect = (argCount >= 2 ? (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect) : NULL);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetAsBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetAsBitmap(subrect));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (((wxLUA_USE_wxDC) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetBackground[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_GetBackground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetBackground[1] = {{ wxLua_wxDC_GetBackground, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_GetBackground }};
//     const wxBrush& GetBackground()
static int LUACALL wxLua_wxDC_GetBackground(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetBackground
    const wxBrush* returns = &self->GetBackground();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBrush);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetBackgroundMode[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_GetBackgroundMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetBackgroundMode[1] = {{ wxLua_wxDC_GetBackgroundMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_GetBackgroundMode }};
//     int GetBackgroundMode() const
static int LUACALL wxLua_wxDC_GetBackgroundMode(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetBackgroundMode
    int returns = (self->GetBackgroundMode());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetBrush[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_GetBrush(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetBrush[1] = {{ wxLua_wxDC_GetBrush, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_GetBrush }};
//     const wxBrush& GetBrush()
static int LUACALL wxLua_wxDC_GetBrush(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetBrush
    const wxBrush* returns = &self->GetBrush();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBrush);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetCharHeight[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_GetCharHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetCharHeight[1] = {{ wxLua_wxDC_GetCharHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_GetCharHeight }};
//     wxCoord GetCharHeight()
static int LUACALL wxLua_wxDC_GetCharHeight(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetCharHeight
    wxCoord returns = (self->GetCharHeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetCharWidth[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_GetCharWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetCharWidth[1] = {{ wxLua_wxDC_GetCharWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_GetCharWidth }};
//     wxCoord GetCharWidth()
static int LUACALL wxLua_wxDC_GetCharWidth(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetCharWidth
    wxCoord returns = (self->GetCharWidth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetClippingBox[] = { &wxluatype_wxDC, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxDC_GetClippingBox(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetClippingBox[1] = {{ wxLua_wxDC_GetClippingBox, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxDC_GetClippingBox }};
// %override wxLua_wxDC_GetClippingBox
// void GetClippingBox(wxCoord *x, wxCoord *y, wxCoord *width, wxCoord *height)
static int LUACALL wxLua_wxDC_GetClippingBox(lua_State *L)
{
    wxCoord height;
    wxCoord width;
    wxCoord y;
    wxCoord x;
    // get this
    wxDC *self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetClippingBox
    self->GetClippingBox(&x, &y, &width, &height);
    // push results
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    lua_pushnumber(L, width);
    lua_pushnumber(L, height);
    // return the number of parameters
    return 4;
}



#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetFont[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_GetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetFont[1] = {{ wxLua_wxDC_GetFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_GetFont }};
//     const wxFont& GetFont()
static int LUACALL wxLua_wxDC_GetFont(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetFont
    const wxFont* returns = &self->GetFont();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxDC)

#if ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetLayoutDirection[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_GetLayoutDirection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetLayoutDirection[1] = {{ wxLua_wxDC_GetLayoutDirection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_GetLayoutDirection }};
//     %wxchkver_2_8 wxLayoutDirection GetLayoutDirection() const
static int LUACALL wxLua_wxDC_GetLayoutDirection(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetLayoutDirection
    wxLayoutDirection returns = (self->GetLayoutDirection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetLogicalFunction[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_GetLogicalFunction(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetLogicalFunction[1] = {{ wxLua_wxDC_GetLogicalFunction, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_GetLogicalFunction }};
//     int GetLogicalFunction()
static int LUACALL wxLua_wxDC_GetLogicalFunction(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetLogicalFunction
    int returns = (self->GetLogicalFunction());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetMapMode[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_GetMapMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetMapMode[1] = {{ wxLua_wxDC_GetMapMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_GetMapMode }};
//     int GetMapMode()
static int LUACALL wxLua_wxDC_GetMapMode(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetMapMode
    int returns = (self->GetMapMode());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxFont) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetMultiLineTextExtent[] = { &wxluatype_wxDC, &wxluatype_TSTRING, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxDC_GetMultiLineTextExtent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetMultiLineTextExtent[1] = {{ wxLua_wxDC_GetMultiLineTextExtent, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxDC_GetMultiLineTextExtent }};
// %override wxLua_wxDC_GetMultiLineTextExtent
// void GetMultiLineTextExtent(const wxString& string, wxCoord *w, wxCoord *h, wxCoord *heightLine = NULL, wxFont *font = NULL)
static int LUACALL wxLua_wxDC_GetMultiLineTextExtent(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxFont *font = NULL
    wxFont *font = (argCount >= 3 ? (wxFont *)wxluaT_getuserdatatype(L, 3, wxluatype_wxFont) : NULL);

    wxCoord heightLine;
    wxCoord h;
    wxCoord w;

    wxString string = wxlua_getwxStringtype(L, 2);
    // get this
    wxDC *self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetTextExtent
    self->GetMultiLineTextExtent(string, &w, &h, &heightLine, font);
    lua_pushnumber(L, w);
    lua_pushnumber(L, h);
    lua_pushnumber(L, heightLine);
    // return the number of parameters
    return 4;
}


#endif // (wxLUA_USE_wxFont) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))

#if (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetMultiLineTextExtentSize[] = { &wxluatype_wxDC, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDC_GetMultiLineTextExtentSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetMultiLineTextExtentSize[1] = {{ wxLua_wxDC_GetMultiLineTextExtentSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_GetMultiLineTextExtentSize }};
//     %wxchkver_2_8 %rename GetMultiLineTextExtentSize wxSize GetMultiLineTextExtent(const wxString& string) const
static int LUACALL wxLua_wxDC_GetMultiLineTextExtentSize(lua_State *L)
{
    // const wxString string
    const wxString string = wxlua_getwxStringtype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetMultiLineTextExtent
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetMultiLineTextExtent(string));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetPPI[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_GetPPI(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetPPI[1] = {{ wxLua_wxDC_GetPPI, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_GetPPI }};
//     wxSize GetPPI() const
static int LUACALL wxLua_wxDC_GetPPI(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetPPI
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetPPI());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetPen[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_GetPen(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetPen[1] = {{ wxLua_wxDC_GetPen, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_GetPen }};
//     const wxPen& GetPen()
static int LUACALL wxLua_wxDC_GetPen(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetPen
    const wxPen* returns = &self->GetPen();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPen);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetPixel[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxDC_GetPixel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetPixel[1] = {{ wxLua_wxDC_GetPixel, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxDC_GetPixel }};
//     bool GetPixel(wxCoord x, wxCoord y, wxColour *colour)
static int LUACALL wxLua_wxDC_GetPixel(lua_State *L)
{
    // wxColour colour
    wxColour * colour = (wxColour *)wxluaT_getuserdatatype(L, 4, wxluatype_wxColour);
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetPixel
    bool returns = (self->GetPixel(x, y, colour));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetSize[] = { &wxluatype_wxDC, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxDC_GetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetSize[1] = {{ wxLua_wxDC_GetSize, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDC_GetSize }};
// %override wxLua_wxDC_GetSize
// void GetSize(wxCoord *width, wxCoord *height)
static int LUACALL wxLua_wxDC_GetSize(lua_State *L)
{
    wxCoord width;
    wxCoord height;
    // get this
    wxDC *self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetSize
    self->GetSize(&width, &height);
    lua_pushnumber(L, width);
    lua_pushnumber(L, height);
    // return the number of parameters
    return 2;
}



#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetTextBackground[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_GetTextBackground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetTextBackground[1] = {{ wxLua_wxDC_GetTextBackground, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_GetTextBackground }};
//     const wxColour& GetTextBackground() const
static int LUACALL wxLua_wxDC_GetTextBackground(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetTextBackground
    const wxColour* returns = &self->GetTextBackground();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetTextExtent[] = { &wxluatype_wxDC, &wxluatype_TSTRING, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxDC_GetTextExtent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetTextExtent[1] = {{ wxLua_wxDC_GetTextExtent, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxDC_GetTextExtent }};
// %override wxLua_wxDC_GetTextExtent
// void GetTextExtent(const wxString& string, wxCoord *w, wxCoord *h, wxCoord *descent = NULL, wxCoord *externalLeading = NULL, wxFont *font = NULL)
static int LUACALL wxLua_wxDC_GetTextExtent(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxFont *font = NULL
    wxFont *font = (argCount >= 3 ? (wxFont *)wxluaT_getuserdatatype(L, 3, wxluatype_wxFont) : NULL);

    wxCoord externalLeading;
    wxCoord descent;
    wxCoord h;
    wxCoord w;

    wxString string = wxlua_getwxStringtype(L, 2);
    // get this
    wxDC *self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetTextExtent
    self->GetTextExtent(string, &w, &h, &descent, &externalLeading, font);
    lua_pushnumber(L, w);
    lua_pushnumber(L, h);
    lua_pushnumber(L, descent);
    lua_pushnumber(L, externalLeading);
    // return the number of parameters
    return 4;
}


#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetTextExtentSize[] = { &wxluatype_wxDC, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDC_GetTextExtentSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetTextExtentSize[1] = {{ wxLua_wxDC_GetTextExtentSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_GetTextExtentSize }};
//     %wxchkver_2_8 %rename GetTextExtentSize wxSize GetTextExtent(const wxString& string) const
static int LUACALL wxLua_wxDC_GetTextExtentSize(lua_State *L)
{
    // const wxString string
    const wxString string = wxlua_getwxStringtype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetTextExtent
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetTextExtent(string));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetTextForeground[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_GetTextForeground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetTextForeground[1] = {{ wxLua_wxDC_GetTextForeground, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_GetTextForeground }};
//     const wxColour& GetTextForeground()
static int LUACALL wxLua_wxDC_GetTextForeground(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetTextForeground
    const wxColour* returns = &self->GetTextForeground();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GetUserScale[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_GetUserScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GetUserScale[1] = {{ wxLua_wxDC_GetUserScale, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_GetUserScale }};
// %override wxLua_wxDC_GetUserScale
// void GetUserScale(double *x, double *y)
static int LUACALL wxLua_wxDC_GetUserScale(lua_State *L)
{
    double y = 0;
    double x = 0;
    // get this
    wxDC *self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetUserScale
    self->GetUserScale(&x, &y);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}



#if (((wxLUA_USE_wxDC) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GradientFillConcentric[] = { &wxluatype_wxDC, &wxluatype_wxRect, &wxluatype_wxColour, &wxluatype_wxColour, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxDC_GradientFillConcentric(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GradientFillConcentric[1] = {{ wxLua_wxDC_GradientFillConcentric, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxDC_GradientFillConcentric }};
//         void GradientFillConcentric(const wxRect& rect, const wxColour& initialColour, const wxColour& destColour, const wxPoint& circleCenter)
static int LUACALL wxLua_wxDC_GradientFillConcentric(lua_State *L)
{
    // const wxPoint circleCenter
    const wxPoint * circleCenter = (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint);
    // const wxColour destColour
    const wxColour * destColour = (const wxColour *)wxluaT_getuserdatatype(L, 4, wxluatype_wxColour);
    // const wxColour initialColour
    const wxColour * initialColour = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GradientFillConcentric
    self->GradientFillConcentric(*rect, *initialColour, *destColour, *circleCenter);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_GradientFillLinear[] = { &wxluatype_wxDC, &wxluatype_wxRect, &wxluatype_wxColour, &wxluatype_wxColour, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDC_GradientFillLinear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_GradientFillLinear[1] = {{ wxLua_wxDC_GradientFillLinear, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxDC_GradientFillLinear }};
//         void GradientFillLinear(const wxRect& rect, const wxColour& initialColour, const wxColour& destColour, wxDirection nDirection = wxEAST)
static int LUACALL wxLua_wxDC_GradientFillLinear(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxDirection nDirection = wxEAST
    wxDirection nDirection = (argCount >= 5 ? (wxDirection)wxlua_getenumtype(L, 5) : wxEAST);
    // const wxColour destColour
    const wxColour * destColour = (const wxColour *)wxluaT_getuserdatatype(L, 4, wxluatype_wxColour);
    // const wxColour initialColour
    const wxColour * initialColour = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GradientFillLinear
    self->GradientFillLinear(*rect, *initialColour, *destColour, nDirection);

    return 0;
}

#endif // (((wxLUA_USE_wxDC) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_LogicalToDeviceX[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_LogicalToDeviceX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_LogicalToDeviceX[1] = {{ wxLua_wxDC_LogicalToDeviceX, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_LogicalToDeviceX }};
//     wxCoord LogicalToDeviceX(wxCoord x)
static int LUACALL wxLua_wxDC_LogicalToDeviceX(lua_State *L)
{
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call LogicalToDeviceX
    wxCoord returns = (self->LogicalToDeviceX(x));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_LogicalToDeviceXRel[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_LogicalToDeviceXRel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_LogicalToDeviceXRel[1] = {{ wxLua_wxDC_LogicalToDeviceXRel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_LogicalToDeviceXRel }};
//     wxCoord LogicalToDeviceXRel(wxCoord x)
static int LUACALL wxLua_wxDC_LogicalToDeviceXRel(lua_State *L)
{
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call LogicalToDeviceXRel
    wxCoord returns = (self->LogicalToDeviceXRel(x));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_LogicalToDeviceY[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_LogicalToDeviceY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_LogicalToDeviceY[1] = {{ wxLua_wxDC_LogicalToDeviceY, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_LogicalToDeviceY }};
//     wxCoord LogicalToDeviceY(wxCoord y)
static int LUACALL wxLua_wxDC_LogicalToDeviceY(lua_State *L)
{
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call LogicalToDeviceY
    wxCoord returns = (self->LogicalToDeviceY(y));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_LogicalToDeviceYRel[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_LogicalToDeviceYRel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_LogicalToDeviceYRel[1] = {{ wxLua_wxDC_LogicalToDeviceYRel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_LogicalToDeviceYRel }};
//     wxCoord LogicalToDeviceYRel(wxCoord y)
static int LUACALL wxLua_wxDC_LogicalToDeviceYRel(lua_State *L)
{
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call LogicalToDeviceYRel
    wxCoord returns = (self->LogicalToDeviceYRel(y));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_MaxX[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_MaxX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_MaxX[1] = {{ wxLua_wxDC_MaxX, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_MaxX }};
//     wxCoord MaxX()
static int LUACALL wxLua_wxDC_MaxX(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call MaxX
    wxCoord returns = (self->MaxX());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_MaxY[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_MaxY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_MaxY[1] = {{ wxLua_wxDC_MaxY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_MaxY }};
//     wxCoord MaxY()
static int LUACALL wxLua_wxDC_MaxY(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call MaxY
    wxCoord returns = (self->MaxY());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_MinX[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_MinX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_MinX[1] = {{ wxLua_wxDC_MinX, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_MinX }};
//     wxCoord MinX()
static int LUACALL wxLua_wxDC_MinX(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call MinX
    wxCoord returns = (self->MinX());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_MinY[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_MinY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_MinY[1] = {{ wxLua_wxDC_MinY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_MinY }};
//     wxCoord MinY()
static int LUACALL wxLua_wxDC_MinY(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call MinY
    wxCoord returns = (self->MinY());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_Ok[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_Ok[1] = {{ wxLua_wxDC_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_Ok }};
//     bool Ok()
static int LUACALL wxLua_wxDC_Ok(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_ResetBoundingBox[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_ResetBoundingBox(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_ResetBoundingBox[1] = {{ wxLua_wxDC_ResetBoundingBox, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_ResetBoundingBox }};
//     void ResetBoundingBox()
static int LUACALL wxLua_wxDC_ResetBoundingBox(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call ResetBoundingBox
    self->ResetBoundingBox();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_SetAxisOrientation[] = { &wxluatype_wxDC, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDC_SetAxisOrientation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetAxisOrientation[1] = {{ wxLua_wxDC_SetAxisOrientation, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDC_SetAxisOrientation }};
//     void SetAxisOrientation(bool xLeftRight, bool yBottomUp)
static int LUACALL wxLua_wxDC_SetAxisOrientation(lua_State *L)
{
    // bool yBottomUp
    bool yBottomUp = wxlua_getbooleantype(L, 3);
    // bool xLeftRight
    bool xLeftRight = wxlua_getbooleantype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call SetAxisOrientation
    self->SetAxisOrientation(xLeftRight, yBottomUp);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_SetBackground[] = { &wxluatype_wxDC, &wxluatype_wxBrush, NULL };
static int LUACALL wxLua_wxDC_SetBackground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetBackground[1] = {{ wxLua_wxDC_SetBackground, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_SetBackground }};
//     void SetBackground(const wxBrush& brush)
static int LUACALL wxLua_wxDC_SetBackground(lua_State *L)
{
    // const wxBrush brush
    const wxBrush * brush = (const wxBrush *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBrush);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call SetBackground
    self->SetBackground(*brush);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_SetBackgroundMode[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_SetBackgroundMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetBackgroundMode[1] = {{ wxLua_wxDC_SetBackgroundMode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_SetBackgroundMode }};
//     void SetBackgroundMode(int mode)
static int LUACALL wxLua_wxDC_SetBackgroundMode(lua_State *L)
{
    // int mode
    int mode = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call SetBackgroundMode
    self->SetBackgroundMode(mode);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_SetBrush[] = { &wxluatype_wxDC, &wxluatype_wxBrush, NULL };
static int LUACALL wxLua_wxDC_SetBrush(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetBrush[1] = {{ wxLua_wxDC_SetBrush, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_SetBrush }};
//     void SetBrush(const wxBrush& brush)
static int LUACALL wxLua_wxDC_SetBrush(lua_State *L)
{
    // const wxBrush brush
    const wxBrush * brush = (const wxBrush *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBrush);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call SetBrush
    self->SetBrush(*brush);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_SetClippingRegion1[] = { &wxluatype_wxDC, &wxluatype_wxRegion, NULL };
static int LUACALL wxLua_wxDC_SetClippingRegion1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetClippingRegion1[1] = {{ wxLua_wxDC_SetClippingRegion1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_SetClippingRegion1 }};
//     void SetClippingRegion(const wxRegion& region)
static int LUACALL wxLua_wxDC_SetClippingRegion1(lua_State *L)
{
    // const wxRegion region
    const wxRegion * region = (const wxRegion *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRegion);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call SetClippingRegion
    self->SetClippingRegion(*region);

    return 0;
}

#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_SetClippingRegion[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_SetClippingRegion(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetClippingRegion[1] = {{ wxLua_wxDC_SetClippingRegion, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxDC_SetClippingRegion }};
//     void SetClippingRegion(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
static int LUACALL wxLua_wxDC_SetClippingRegion(lua_State *L)
{
    // wxCoord height
    wxCoord height = (wxCoord)wxlua_getnumbertype(L, 5);
    // wxCoord width
    wxCoord width = (wxCoord)wxlua_getnumbertype(L, 4);
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call SetClippingRegion
    self->SetClippingRegion(x, y, width, height);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_SetDeviceOrigin[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_SetDeviceOrigin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetDeviceOrigin[1] = {{ wxLua_wxDC_SetDeviceOrigin, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDC_SetDeviceOrigin }};
//     void SetDeviceOrigin(wxCoord x, wxCoord y)
static int LUACALL wxLua_wxDC_SetDeviceOrigin(lua_State *L)
{
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call SetDeviceOrigin
    self->SetDeviceOrigin(x, y);

    return 0;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_SetFont[] = { &wxluatype_wxDC, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxDC_SetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetFont[1] = {{ wxLua_wxDC_SetFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_SetFont }};
//     void SetFont(const wxFont& font)
static int LUACALL wxLua_wxDC_SetFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call SetFont
    self->SetFont(*font);

    return 0;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxDC)

#if ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_SetLayoutDirection[] = { &wxluatype_wxDC, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDC_SetLayoutDirection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetLayoutDirection[1] = {{ wxLua_wxDC_SetLayoutDirection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_SetLayoutDirection }};
//     %wxchkver_2_8 void SetLayoutDirection(wxLayoutDirection dir)
static int LUACALL wxLua_wxDC_SetLayoutDirection(lua_State *L)
{
    // wxLayoutDirection dir
    wxLayoutDirection dir = (wxLayoutDirection)wxlua_getenumtype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call SetLayoutDirection
    self->SetLayoutDirection(dir);

    return 0;
}

#endif // ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_SetLogicalFunction[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_SetLogicalFunction(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetLogicalFunction[1] = {{ wxLua_wxDC_SetLogicalFunction, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_SetLogicalFunction }};
//     void SetLogicalFunction(int function)
static int LUACALL wxLua_wxDC_SetLogicalFunction(lua_State *L)
{
    // int function
    int function = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call SetLogicalFunction
    self->SetLogicalFunction(function);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_SetMapMode[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_SetMapMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetMapMode[1] = {{ wxLua_wxDC_SetMapMode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_SetMapMode }};
//     void SetMapMode(int unit)
static int LUACALL wxLua_wxDC_SetMapMode(lua_State *L)
{
    // int unit
    int unit = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call SetMapMode
    self->SetMapMode(unit);

    return 0;
}


#if (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_SetPalette[] = { &wxluatype_wxDC, &wxluatype_wxPalette, NULL };
static int LUACALL wxLua_wxDC_SetPalette(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetPalette[1] = {{ wxLua_wxDC_SetPalette, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_SetPalette }};
//     void SetPalette(const wxPalette& palette)
static int LUACALL wxLua_wxDC_SetPalette(lua_State *L)
{
    // const wxPalette palette
    const wxPalette * palette = (const wxPalette *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPalette);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call SetPalette
    self->SetPalette(*palette);

    return 0;
}

#endif // (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_SetPen[] = { &wxluatype_wxDC, &wxluatype_wxPen, NULL };
static int LUACALL wxLua_wxDC_SetPen(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetPen[1] = {{ wxLua_wxDC_SetPen, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_SetPen }};
//     void SetPen(const wxPen& pen)
static int LUACALL wxLua_wxDC_SetPen(lua_State *L)
{
    // const wxPen pen
    const wxPen * pen = (const wxPen *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPen);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call SetPen
    self->SetPen(*pen);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_SetTextBackground[] = { &wxluatype_wxDC, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxDC_SetTextBackground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetTextBackground[1] = {{ wxLua_wxDC_SetTextBackground, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_SetTextBackground }};
//     void SetTextBackground(const wxColour& colour)
static int LUACALL wxLua_wxDC_SetTextBackground(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call SetTextBackground
    self->SetTextBackground(*colour);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_SetTextForeground[] = { &wxluatype_wxDC, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxDC_SetTextForeground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetTextForeground[1] = {{ wxLua_wxDC_SetTextForeground, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_SetTextForeground }};
//     void SetTextForeground(const wxColour& colour)
static int LUACALL wxLua_wxDC_SetTextForeground(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call SetTextForeground
    self->SetTextForeground(*colour);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_SetUserScale[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDC_SetUserScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetUserScale[1] = {{ wxLua_wxDC_SetUserScale, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDC_SetUserScale }};
//     void SetUserScale(double xScale, double yScale)
static int LUACALL wxLua_wxDC_SetUserScale(lua_State *L)
{
    // double yScale
    double yScale = (double)wxlua_getnumbertype(L, 3);
    // double xScale
    double xScale = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call SetUserScale
    self->SetUserScale(xScale, yScale);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_StartDoc[] = { &wxluatype_wxDC, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDC_StartDoc(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_StartDoc[1] = {{ wxLua_wxDC_StartDoc, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_StartDoc }};
//     bool StartDoc(const wxString& message)
static int LUACALL wxLua_wxDC_StartDoc(lua_State *L)
{
    // const wxString message
    const wxString message = wxlua_getwxStringtype(L, 2);
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call StartDoc
    bool returns = (self->StartDoc(message));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_StartPage[] = { &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxDC_StartPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_StartPage[1] = {{ wxLua_wxDC_StartPage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDC_StartPage }};
//     void StartPage()
static int LUACALL wxLua_wxDC_StartPage(lua_State *L)
{
    // get this
    wxDC * self = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call StartPage
    self->StartPage();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDC_delete[] = { &wxluatype_wxDC, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDC_delete }};




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawCheckMark_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
    { wxLua_wxDC_DrawCheckMark1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_DrawCheckMark1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
    { wxLua_wxDC_DrawCheckMark, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxDC_DrawCheckMark },
};
static int s_wxluafunc_wxLua_wxDC_DrawCheckMark_overload_count = sizeof(s_wxluafunc_wxLua_wxDC_DrawCheckMark_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))||(((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxDC))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_DrawLabel_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
    { wxLua_wxDC_DrawLabel1, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxDC_DrawLabel1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxDC)
    { wxLua_wxDC_DrawLabel, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxDC_DrawLabel },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxDC)
};
static int s_wxluafunc_wxLua_wxDC_DrawLabel_overload_count = sizeof(s_wxluafunc_wxLua_wxDC_DrawLabel_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))||(((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxDC))

#if ((wxLUA_USE_wxRegion) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDC_SetClippingRegion_overload[] =
{

#if (wxLUA_USE_wxRegion) && (wxLUA_USE_wxDC)
    { wxLua_wxDC_SetClippingRegion1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDC_SetClippingRegion1 },
#endif // (wxLUA_USE_wxRegion) && (wxLUA_USE_wxDC)
    { wxLua_wxDC_SetClippingRegion, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxDC_SetClippingRegion },
};
static int s_wxluafunc_wxLua_wxDC_SetClippingRegion_overload_count = sizeof(s_wxluafunc_wxLua_wxDC_SetClippingRegion_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxRegion) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDC_methods[] = {
    { "Blit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_Blit, 1, NULL },
    { "CalcBoundingBox", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_CalcBoundingBox, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_Clear, 1, NULL },
    { "CrossHair", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_CrossHair, 1, NULL },
    { "DestroyClippingRegion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DestroyClippingRegion, 1, NULL },
    { "DeviceToLogicalX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DeviceToLogicalX, 1, NULL },
    { "DeviceToLogicalXRel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DeviceToLogicalXRel, 1, NULL },
    { "DeviceToLogicalY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DeviceToLogicalY, 1, NULL },
    { "DeviceToLogicalYRel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DeviceToLogicalYRel, 1, NULL },
    { "DrawArc", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DrawArc, 1, NULL },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)
    { "DrawBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DrawBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)
    { "DrawCheckMark", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DrawCheckMark_overload, s_wxluafunc_wxLua_wxDC_DrawCheckMark_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)

    { "DrawCircle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DrawCircle, 1, NULL },
    { "DrawEllipse", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DrawEllipse, 1, NULL },
    { "DrawEllipticArc", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DrawEllipticArc, 1, NULL },

#if (wxLUA_USE_wxIcon) && (wxLUA_USE_wxDC)
    { "DrawIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DrawIcon, 1, NULL },
#endif // (wxLUA_USE_wxIcon) && (wxLUA_USE_wxDC)

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))||(((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxDC))
    { "DrawLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DrawLabel_overload, s_wxluafunc_wxLua_wxDC_DrawLabel_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))||(((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxDC))

    { "DrawLine", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DrawLine, 1, NULL },

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxDC)
    { "DrawLinesList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DrawLinesList, 1, NULL },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxDC)

    { "DrawPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DrawPoint, 1, NULL },

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxDC)
    { "DrawPolygonList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DrawPolygonList, 1, NULL },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxDC)

    { "DrawRectangle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DrawRectangle, 1, NULL },
    { "DrawRotatedText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DrawRotatedText, 1, NULL },
    { "DrawRoundedRectangle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DrawRoundedRectangle, 1, NULL },
    { "DrawText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_DrawText, 1, NULL },
    { "EndDoc", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_EndDoc, 1, NULL },
    { "EndPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_EndPage, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
    { "FloodFill", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_FloodFill, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

#if (((wxLUA_USE_wxDC) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxPointSizeRect)
    { "GetAsBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetAsBitmap, 1, NULL },
#endif // (((wxLUA_USE_wxDC) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
    { "GetBackground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetBackground, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

    { "GetBackgroundMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetBackgroundMode, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
    { "GetBrush", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetBrush, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

    { "GetCharHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetCharHeight, 1, NULL },
    { "GetCharWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetCharWidth, 1, NULL },
    { "GetClippingBox", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetClippingBox, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxDC)
    { "GetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxDC)

#if ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))
    { "GetLayoutDirection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetLayoutDirection, 1, NULL },
#endif // ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))

    { "GetLogicalFunction", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetLogicalFunction, 1, NULL },
    { "GetMapMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetMapMode, 1, NULL },

#if (wxLUA_USE_wxFont) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))
    { "GetMultiLineTextExtent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetMultiLineTextExtent, 1, NULL },
#endif // (wxLUA_USE_wxFont) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))

#if (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))
    { "GetMultiLineTextExtentSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetMultiLineTextExtentSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
    { "GetPPI", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetPPI, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
    { "GetPen", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetPen, 1, NULL },
    { "GetPixel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetPixel, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetSize, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
    { "GetTextBackground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetTextBackground, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxDC)
    { "GetTextExtent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetTextExtent, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))
    { "GetTextExtentSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetTextExtentSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
    { "GetTextForeground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetTextForeground, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

    { "GetUserScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GetUserScale, 1, NULL },

#if (((wxLUA_USE_wxDC) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxPointSizeRect)
    { "GradientFillConcentric", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GradientFillConcentric, 1, NULL },
    { "GradientFillLinear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_GradientFillLinear, 1, NULL },
#endif // (((wxLUA_USE_wxDC) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxPointSizeRect)

    { "LogicalToDeviceX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_LogicalToDeviceX, 1, NULL },
    { "LogicalToDeviceXRel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_LogicalToDeviceXRel, 1, NULL },
    { "LogicalToDeviceY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_LogicalToDeviceY, 1, NULL },
    { "LogicalToDeviceYRel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_LogicalToDeviceYRel, 1, NULL },
    { "MaxX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_MaxX, 1, NULL },
    { "MaxY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_MaxY, 1, NULL },
    { "MinX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_MinX, 1, NULL },
    { "MinY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_MinY, 1, NULL },
    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_Ok, 1, NULL },
    { "ResetBoundingBox", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_ResetBoundingBox, 1, NULL },
    { "SetAxisOrientation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_SetAxisOrientation, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
    { "SetBackground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_SetBackground, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

    { "SetBackgroundMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_SetBackgroundMode, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
    { "SetBrush", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_SetBrush, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

#if ((wxLUA_USE_wxRegion) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)
    { "SetClippingRegion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_SetClippingRegion_overload, s_wxluafunc_wxLua_wxDC_SetClippingRegion_overload_count, 0 },
#endif // ((wxLUA_USE_wxRegion) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)

    { "SetDeviceOrigin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_SetDeviceOrigin, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxDC)
    { "SetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_SetFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxDC)

#if ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))
    { "SetLayoutDirection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_SetLayoutDirection, 1, NULL },
#endif // ((wxUSE_INTL) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))

    { "SetLogicalFunction", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_SetLogicalFunction, 1, NULL },
    { "SetMapMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_SetMapMode, 1, NULL },

#if (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxDC)
    { "SetPalette", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_SetPalette, 1, NULL },
#endif // (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)
    { "SetPen", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_SetPen, 1, NULL },
    { "SetTextBackground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_SetTextBackground, 1, NULL },
    { "SetTextForeground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_SetTextForeground, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxDC)

    { "SetUserScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_SetUserScale, 1, NULL },
    { "StartDoc", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_StartDoc, 1, NULL },
    { "StartPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDC_StartPage, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDC_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDC_methodCount = sizeof(wxDC_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDC


#if wxLUA_USE_wxDC
// ---------------------------------------------------------------------------
// Bind class wxMemoryDC
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMemoryDC'
int wxluatype_wxMemoryDC = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxMemoryDC_SelectObject[] = { &wxluatype_wxMemoryDC, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxMemoryDC_SelectObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMemoryDC_SelectObject[1] = {{ wxLua_wxMemoryDC_SelectObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMemoryDC_SelectObject }};
//     void SelectObject(wxBitmap& bitmap) // not const in >=2.8
static int LUACALL wxLua_wxMemoryDC_SelectObject(lua_State *L)
{
    // wxBitmap bitmap
    wxBitmap * bitmap = (wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxMemoryDC * self = (wxMemoryDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMemoryDC);
    // call SelectObject
    self->SelectObject(*bitmap);

    return 0;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxBitmap) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))
static wxLuaArgType s_wxluatypeArray_wxLua_wxMemoryDC_SelectObjectAsSource[] = { &wxluatype_wxMemoryDC, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxMemoryDC_SelectObjectAsSource(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMemoryDC_SelectObjectAsSource[1] = {{ wxLua_wxMemoryDC_SelectObjectAsSource, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMemoryDC_SelectObjectAsSource }};
//     %wxchkver_2_8 virtual void SelectObjectAsSource(const wxBitmap& bmp)
static int LUACALL wxLua_wxMemoryDC_SelectObjectAsSource(lua_State *L)
{
    // const wxBitmap bmp
    const wxBitmap * bmp = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxMemoryDC * self = (wxMemoryDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMemoryDC);
    // call SelectObjectAsSource
    self->SelectObjectAsSource(*bmp);

    return 0;
}

#endif // (wxLUA_USE_wxBitmap) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))

static wxLuaArgType s_wxluatypeArray_wxLua_wxMemoryDC_delete[] = { &wxluatype_wxMemoryDC, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMemoryDC_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxMemoryDC_delete }};

static int LUACALL wxLua_wxMemoryDC_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMemoryDC_constructor[1] = {{ wxLua_wxMemoryDC_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxMemoryDC()
static int LUACALL wxLua_wxMemoryDC_constructor(lua_State *L)
{
    // call constructor
    wxMemoryDC* returns = new wxMemoryDC();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMemoryDC);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMemoryDC_methods[] = {
#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)
    { "SelectObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMemoryDC_SelectObject, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxBitmap) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))
    { "SelectObjectAsSource", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMemoryDC_SelectObjectAsSource, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDC))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxMemoryDC_delete, 1, NULL },
    { "wxMemoryDC", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMemoryDC_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxMemoryDC_methodCount = sizeof(wxMemoryDC_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDC


#if wxLUA_USE_wxDC
// ---------------------------------------------------------------------------
// Bind class wxWindowDC
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxWindowDC'
int wxluatype_wxWindowDC = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindowDC_delete[] = { &wxluatype_wxWindowDC, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindowDC_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxWindowDC_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindowDC_constructor[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindowDC_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindowDC_constructor[1] = {{ wxLua_wxWindowDC_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxWindowDC_constructor }};
//     wxWindowDC(wxWindow* window)
static int LUACALL wxLua_wxWindowDC_constructor(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxWindowDC* returns = new wxWindowDC(window);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindowDC);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxWindowDC_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxWindowDC_delete, 1, NULL },
    { "wxWindowDC", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxWindowDC_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxWindowDC_methodCount = sizeof(wxWindowDC_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDC


#if wxLUA_USE_wxDC
// ---------------------------------------------------------------------------
// Bind class wxClientDC
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxClientDC'
int wxluatype_wxClientDC = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxClientDC_delete[] = { &wxluatype_wxClientDC, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClientDC_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxClientDC_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxClientDC_constructor[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxClientDC_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClientDC_constructor[1] = {{ wxLua_wxClientDC_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxClientDC_constructor }};
//     wxClientDC(wxWindow* window)
static int LUACALL wxLua_wxClientDC_constructor(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxClientDC* returns = new wxClientDC(window);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClientDC);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxClientDC_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxClientDC_delete, 1, NULL },
    { "wxClientDC", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxClientDC_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxClientDC_methodCount = sizeof(wxClientDC_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDC


#if wxLUA_USE_wxDC
// ---------------------------------------------------------------------------
// Bind class wxPaintDC
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPaintDC'
int wxluatype_wxPaintDC = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxPaintDC_delete[] = { &wxluatype_wxPaintDC, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPaintDC_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxPaintDC_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxPaintDC_constructor[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxPaintDC_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPaintDC_constructor[1] = {{ wxLua_wxPaintDC_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxPaintDC_constructor }};
//     wxPaintDC(wxWindow* window)
static int LUACALL wxLua_wxPaintDC_constructor(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxPaintDC* returns = new wxPaintDC(window);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPaintDC);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPaintDC_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxPaintDC_delete, 1, NULL },
    { "wxPaintDC", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxPaintDC_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxPaintDC_methodCount = sizeof(wxPaintDC_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDC


#if wxLUA_USE_wxDC
// ---------------------------------------------------------------------------
// Bind class wxScreenDC
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxScreenDC'
int wxluatype_wxScreenDC = WXLUA_TUNKNOWN;

static int LUACALL wxLua_wxScreenDC_EndDrawingOnTop(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScreenDC_EndDrawingOnTop[1] = {{ wxLua_wxScreenDC_EndDrawingOnTop, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static bool EndDrawingOnTop()
static int LUACALL wxLua_wxScreenDC_EndDrawingOnTop(lua_State *L)
{
    // call EndDrawingOnTop
    bool returns = (wxScreenDC::EndDrawingOnTop());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxScreenDC_StartDrawingOnTop1[] = { &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxScreenDC_StartDrawingOnTop1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxScreenDC_StartDrawingOnTop1[1] = {{ wxLua_wxScreenDC_StartDrawingOnTop1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxScreenDC_StartDrawingOnTop1 }};
//     static bool StartDrawingOnTop(wxRect* rect = NULL)
static int LUACALL wxLua_wxScreenDC_StartDrawingOnTop1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRect rect = NULL
    wxRect * rect = (argCount >= 1 ? (wxRect *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRect) : NULL);
    // call StartDrawingOnTop
    bool returns = (wxScreenDC::StartDrawingOnTop(rect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxScreenDC_StartDrawingOnTop[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxScreenDC_StartDrawingOnTop(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxScreenDC_StartDrawingOnTop[1] = {{ wxLua_wxScreenDC_StartDrawingOnTop, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxScreenDC_StartDrawingOnTop }};
//     static bool StartDrawingOnTop(wxWindow* window)
static int LUACALL wxLua_wxScreenDC_StartDrawingOnTop(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call StartDrawingOnTop
    bool returns = (wxScreenDC::StartDrawingOnTop(window));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxScreenDC_delete[] = { &wxluatype_wxScreenDC, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScreenDC_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxScreenDC_delete }};

static int LUACALL wxLua_wxScreenDC_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScreenDC_constructor[1] = {{ wxLua_wxScreenDC_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxScreenDC()
static int LUACALL wxLua_wxScreenDC_constructor(lua_State *L)
{
    // call constructor
    wxScreenDC* returns = new wxScreenDC();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxScreenDC);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScreenDC_StartDrawingOnTop_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
    { wxLua_wxScreenDC_StartDrawingOnTop1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxScreenDC_StartDrawingOnTop1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
    { wxLua_wxScreenDC_StartDrawingOnTop, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxScreenDC_StartDrawingOnTop },
};
static int s_wxluafunc_wxLua_wxScreenDC_StartDrawingOnTop_overload_count = sizeof(s_wxluafunc_wxLua_wxScreenDC_StartDrawingOnTop_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxScreenDC_methods[] = {
    { "EndDrawingOnTop", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxScreenDC_EndDrawingOnTop, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)
    { "StartDrawingOnTop", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxScreenDC_StartDrawingOnTop_overload, s_wxluafunc_wxLua_wxScreenDC_StartDrawingOnTop_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxScreenDC_delete, 1, NULL },
    { "wxScreenDC", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxScreenDC_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxScreenDC_methodCount = sizeof(wxScreenDC_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDC


#if wxLUA_USE_wxDC
// ---------------------------------------------------------------------------
// Bind class wxBufferedDC
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxBufferedDC'
int wxluatype_wxBufferedDC = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBufferedDC_Init1[] = { &wxluatype_wxBufferedDC, &wxluatype_wxDC, &wxluatype_wxBitmap, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBufferedDC_Init1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBufferedDC_Init1[1] = {{ wxLua_wxBufferedDC_Init1, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxBufferedDC_Init1 }};
//     void Init(wxDC *dc, wxBitmap& buffer, int style = wxBUFFER_CLIENT_AREA) // not const bitmap in >= 2.8
static int LUACALL wxLua_wxBufferedDC_Init1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int style = wxBUFFER_CLIENT_AREA
    int style = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxBUFFER_CLIENT_AREA);
    // wxBitmap buffer
    wxBitmap * buffer = (wxBitmap *)wxluaT_getuserdatatype(L, 3, wxluatype_wxBitmap);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxBufferedDC * self = (wxBufferedDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBufferedDC);
    // call Init
    self->Init(dc, *buffer, style);

    return 0;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBufferedDC_Init[] = { &wxluatype_wxBufferedDC, &wxluatype_wxDC, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBufferedDC_Init(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBufferedDC_Init[1] = {{ wxLua_wxBufferedDC_Init, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxBufferedDC_Init }};
//     void Init(wxDC *dc, const wxSize& area, int style = wxBUFFER_CLIENT_AREA)
static int LUACALL wxLua_wxBufferedDC_Init(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int style = wxBUFFER_CLIENT_AREA
    int style = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxBUFFER_CLIENT_AREA);
    // const wxSize area
    const wxSize * area = (const wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxBufferedDC * self = (wxBufferedDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBufferedDC);
    // call Init
    self->Init(dc, *area, style);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBufferedDC_delete[] = { &wxluatype_wxBufferedDC, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBufferedDC_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxBufferedDC_delete }};


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBufferedDC_constructor2[] = { &wxluatype_wxDC, &wxluatype_wxBitmap, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBufferedDC_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBufferedDC_constructor2[1] = {{ wxLua_wxBufferedDC_constructor2, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxBufferedDC_constructor2 }};
//     wxBufferedDC(wxDC *dc, wxBitmap& buffer, int style = wxBUFFER_CLIENT_AREA) // not const bitmap >= 2.8
static int LUACALL wxLua_wxBufferedDC_constructor2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int style = wxBUFFER_CLIENT_AREA
    int style = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxBUFFER_CLIENT_AREA);
    // wxBitmap buffer
    wxBitmap * buffer = (wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call constructor
    wxBufferedDC* returns = new wxBufferedDC(dc, *buffer, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBufferedDC);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBufferedDC_constructor1[] = { &wxluatype_wxDC, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBufferedDC_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBufferedDC_constructor1[1] = {{ wxLua_wxBufferedDC_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxBufferedDC_constructor1 }};
//     wxBufferedDC(wxDC *dc, const wxSize& area, int style = wxBUFFER_CLIENT_AREA)
static int LUACALL wxLua_wxBufferedDC_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int style = wxBUFFER_CLIENT_AREA
    int style = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxBUFFER_CLIENT_AREA);
    // const wxSize area
    const wxSize * area = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call constructor
    wxBufferedDC* returns = new wxBufferedDC(dc, *area, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBufferedDC);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)

static int LUACALL wxLua_wxBufferedDC_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBufferedDC_constructor[1] = {{ wxLua_wxBufferedDC_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxBufferedDC()
static int LUACALL wxLua_wxBufferedDC_constructor(lua_State *L)
{
    // call constructor
    wxBufferedDC* returns = new wxBufferedDC();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBufferedDC);

    return 1;
}




#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC))||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBufferedDC_Init_overload[] =
{

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)
    { wxLua_wxBufferedDC_Init1, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxBufferedDC_Init1 },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
    { wxLua_wxBufferedDC_Init, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxBufferedDC_Init },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
};
static int s_wxluafunc_wxLua_wxBufferedDC_Init_overload_count = sizeof(s_wxluafunc_wxLua_wxBufferedDC_Init_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC))||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC))||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBufferedDC_constructor_overload[] =
{

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)
    { wxLua_wxBufferedDC_constructor2, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxBufferedDC_constructor2 },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
    { wxLua_wxBufferedDC_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxBufferedDC_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
    { wxLua_wxBufferedDC_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxBufferedDC_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxBufferedDC_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC))||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxBufferedDC_methods[] = {
#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC))||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))
    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBufferedDC_Init_overload, s_wxluafunc_wxLua_wxBufferedDC_Init_overload_count, 0 },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC))||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxBufferedDC_delete, 1, NULL },

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC))||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)
    { "wxBufferedDC", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxBufferedDC_constructor_overload, s_wxluafunc_wxLua_wxBufferedDC_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC))||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)

    { 0, 0, 0, 0 },
};

int wxBufferedDC_methodCount = sizeof(wxBufferedDC_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDC


#if wxLUA_USE_wxDC
// ---------------------------------------------------------------------------
// Bind class wxBufferedPaintDC
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxBufferedPaintDC'
int wxluatype_wxBufferedPaintDC = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxBufferedPaintDC_delete[] = { &wxluatype_wxBufferedPaintDC, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBufferedPaintDC_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxBufferedPaintDC_delete }};


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBufferedPaintDC_constructor1[] = { &wxluatype_wxWindow, &wxluatype_wxBitmap, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBufferedPaintDC_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBufferedPaintDC_constructor1[1] = {{ wxLua_wxBufferedPaintDC_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxBufferedPaintDC_constructor1 }};
//     wxBufferedPaintDC(wxWindow *window, wxBitmap& buffer, int style = wxBUFFER_CLIENT_AREA) // not const bitmap in >= 2.8
static int LUACALL wxLua_wxBufferedPaintDC_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int style = wxBUFFER_CLIENT_AREA
    int style = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxBUFFER_CLIENT_AREA);
    // wxBitmap buffer
    wxBitmap * buffer = (wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxBufferedPaintDC* returns = new wxBufferedPaintDC(window, *buffer, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBufferedPaintDC);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBufferedPaintDC_constructor[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBufferedPaintDC_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBufferedPaintDC_constructor[1] = {{ wxLua_wxBufferedPaintDC_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxBufferedPaintDC_constructor }};
//     wxBufferedPaintDC(wxWindow *window, int style = wxBUFFER_CLIENT_AREA)
static int LUACALL wxLua_wxBufferedPaintDC_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int style = wxBUFFER_CLIENT_AREA
    int style = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxBUFFER_CLIENT_AREA);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxBufferedPaintDC* returns = new wxBufferedPaintDC(window, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBufferedPaintDC);

    return 1;
}




#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBufferedPaintDC_constructor_overload[] =
{

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)
    { wxLua_wxBufferedPaintDC_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxBufferedPaintDC_constructor1 },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)
    { wxLua_wxBufferedPaintDC_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxBufferedPaintDC_constructor },
};
static int s_wxluafunc_wxLua_wxBufferedPaintDC_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxBufferedPaintDC_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxBufferedPaintDC_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxBufferedPaintDC_delete, 1, NULL },

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)
    { "wxBufferedPaintDC", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxBufferedPaintDC_constructor_overload, s_wxluafunc_wxLua_wxBufferedPaintDC_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC))||(wxLUA_USE_wxDC)

    { 0, 0, 0, 0 },
};

int wxBufferedPaintDC_methodCount = sizeof(wxBufferedPaintDC_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDC


#if (wxLUA_USE_wxDC) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxAutoBufferedPaintDC
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAutoBufferedPaintDC'
int wxluatype_wxAutoBufferedPaintDC = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAutoBufferedPaintDC_delete[] = { &wxluatype_wxAutoBufferedPaintDC, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAutoBufferedPaintDC_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAutoBufferedPaintDC_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxAutoBufferedPaintDC_constructor[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxAutoBufferedPaintDC_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAutoBufferedPaintDC_constructor[1] = {{ wxLua_wxAutoBufferedPaintDC_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAutoBufferedPaintDC_constructor }};
//     wxAutoBufferedPaintDC(wxWindow *window)
static int LUACALL wxLua_wxAutoBufferedPaintDC_constructor(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxAutoBufferedPaintDC* returns = new wxAutoBufferedPaintDC(window);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAutoBufferedPaintDC);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAutoBufferedPaintDC_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAutoBufferedPaintDC_delete, 1, NULL },
    { "wxAutoBufferedPaintDC", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAutoBufferedPaintDC_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxAutoBufferedPaintDC_methodCount = sizeof(wxAutoBufferedPaintDC_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxDC) && (wxCHECK_VERSION(2,8,0))


#if wxLUA_USE_wxDC
// ---------------------------------------------------------------------------
// Bind class wxMirrorDC
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMirrorDC'
int wxluatype_wxMirrorDC = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxMirrorDC_delete[] = { &wxluatype_wxMirrorDC, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMirrorDC_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxMirrorDC_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxMirrorDC_constructor[] = { &wxluatype_wxDC, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxMirrorDC_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMirrorDC_constructor[1] = {{ wxLua_wxMirrorDC_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxMirrorDC_constructor }};
//     wxMirrorDC(wxDC& dc, bool mirror)
static int LUACALL wxLua_wxMirrorDC_constructor(lua_State *L)
{
    // bool mirror
    bool mirror = wxlua_getbooleantype(L, 2);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call constructor
    wxMirrorDC* returns = new wxMirrorDC(*dc, mirror);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMirrorDC);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMirrorDC_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxMirrorDC_delete, 1, NULL },
    { "wxMirrorDC", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMirrorDC_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxMirrorDC_methodCount = sizeof(wxMirrorDC_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDC


#if wxLUA_USE_wxDC
// ---------------------------------------------------------------------------
// Bind class wxDCClipper
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDCClipper'
int wxluatype_wxDCClipper = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDCClipper_delete[] = { &wxluatype_wxDCClipper, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDCClipper_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDCClipper_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxDCClipper_constructor1[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDCClipper_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDCClipper_constructor1[1] = {{ wxLua_wxDCClipper_constructor1, WXLUAMETHOD_CONSTRUCTOR, 5, 5, s_wxluatypeArray_wxLua_wxDCClipper_constructor1 }};
//     wxDCClipper(wxDC& dc, wxCoord x, wxCoord y, wxCoord w, wxCoord h)
static int LUACALL wxLua_wxDCClipper_constructor1(lua_State *L)
{
    // wxCoord h
    wxCoord h = (wxCoord)wxlua_getnumbertype(L, 5);
    // wxCoord w
    wxCoord w = (wxCoord)wxlua_getnumbertype(L, 4);
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call constructor
    wxDCClipper* returns = new wxDCClipper(*dc, x, y, w, h);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDCClipper((wxDCClipper*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDCClipper);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDCClipper_constructor[] = { &wxluatype_wxDC, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxDCClipper_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDCClipper_constructor[1] = {{ wxLua_wxDCClipper_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxDCClipper_constructor }};
//     wxDCClipper(wxDC& dc, const wxRect& r)
static int LUACALL wxLua_wxDCClipper_constructor(lua_State *L)
{
    // const wxRect r
    const wxRect * r = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call constructor
    wxDCClipper* returns = new wxDCClipper(*dc, *r);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDCClipper((wxDCClipper*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDCClipper);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)



#if (wxLUA_USE_wxDC)||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDCClipper_constructor_overload[] =
{
    { wxLua_wxDCClipper_constructor1, WXLUAMETHOD_CONSTRUCTOR, 5, 5, s_wxluatypeArray_wxLua_wxDCClipper_constructor1 },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
    { wxLua_wxDCClipper_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxDCClipper_constructor },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
};
static int s_wxluafunc_wxLua_wxDCClipper_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxDCClipper_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxDC)||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDCClipper_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDCClipper_delete, 1, NULL },

#if (wxLUA_USE_wxDC)||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))
    { "wxDCClipper", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDCClipper_constructor_overload, s_wxluafunc_wxLua_wxDCClipper_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxDC)||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC))

    { 0, 0, 0, 0 },
};

int wxDCClipper_methodCount = sizeof(wxDCClipper_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDC


#if wxLUA_USE_wxCaret && wxUSE_CARET
// ---------------------------------------------------------------------------
// Bind class wxCaret
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxCaret'
int wxluatype_wxCaret = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_Create1[] = { &wxluatype_wxCaret, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCaret_Create1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_Create1[1] = {{ wxLua_wxCaret_Create1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxCaret_Create1 }};
//     bool Create(wxWindow* window, int width, int height)
static int LUACALL wxLua_wxCaret_Create1(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 4);
    // int width
    int width = (int)wxlua_getnumbertype(L, 3);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxCaret * self = (wxCaret *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCaret);
    // call Create
    bool returns = (self->Create(window, width, height));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_Create[] = { &wxluatype_wxCaret, &wxluatype_wxWindow, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxCaret_Create(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_Create[1] = {{ wxLua_wxCaret_Create, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxCaret_Create }};
//     bool Create(wxWindow* window, const wxSize& size)
static int LUACALL wxLua_wxCaret_Create(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxCaret * self = (wxCaret *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCaret);
    // call Create
    bool returns = (self->Create(window, *size));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxCaret_GetBlinkTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_GetBlinkTime[1] = {{ wxLua_wxCaret_GetBlinkTime, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static int GetBlinkTime()
static int LUACALL wxLua_wxCaret_GetBlinkTime(lua_State *L)
{
    // call GetBlinkTime
    int returns = (wxCaret::GetBlinkTime());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_GetPosition[] = { &wxluatype_wxCaret, NULL };
static int LUACALL wxLua_wxCaret_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_GetPosition[1] = {{ wxLua_wxCaret_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCaret_GetPosition }};
//     wxPoint GetPosition()
static int LUACALL wxLua_wxCaret_GetPosition(lua_State *L)
{
    // get this
    wxCaret * self = (wxCaret *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCaret);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_GetPositionXY[] = { &wxluatype_wxCaret, NULL };
static int LUACALL wxLua_wxCaret_GetPositionXY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_GetPositionXY[1] = {{ wxLua_wxCaret_GetPositionXY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCaret_GetPositionXY }};
// %override wxLua_wxCaret_GetPositionXY
// %rename GetPositionXY void GetPosition(int *x, int *y)
static int LUACALL wxLua_wxCaret_GetPositionXY(lua_State *L)
{
    int x;
    int y;
    // get this
    wxCaret *self = (wxCaret *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCaret);
    // call GetPosition
    self->GetPosition(&x, &y);
    // return the number of parameters
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}



#if (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_GetSize[] = { &wxluatype_wxCaret, NULL };
static int LUACALL wxLua_wxCaret_GetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_GetSize[1] = {{ wxLua_wxCaret_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCaret_GetSize }};
//     wxSize GetSize()
static int LUACALL wxLua_wxCaret_GetSize(lua_State *L)
{
    // get this
    wxCaret * self = (wxCaret *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCaret);
    // call GetSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_GetSizeWH[] = { &wxluatype_wxCaret, NULL };
static int LUACALL wxLua_wxCaret_GetSizeWH(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_GetSizeWH[1] = {{ wxLua_wxCaret_GetSizeWH, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCaret_GetSizeWH }};
// %override wxLua_wxCaret_GetSizeWH
// %rename GetSizeWH void GetSize(int *x, int *y)
static int LUACALL wxLua_wxCaret_GetSizeWH(lua_State *L)
{
    int x;
    int y;
    // get this
    wxCaret *self = (wxCaret *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCaret);
    // call GetSize
    self->GetSize(&x, &y);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_GetWindow[] = { &wxluatype_wxCaret, NULL };
static int LUACALL wxLua_wxCaret_GetWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_GetWindow[1] = {{ wxLua_wxCaret_GetWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCaret_GetWindow }};
//     wxWindow *GetWindow()
static int LUACALL wxLua_wxCaret_GetWindow(lua_State *L)
{
    // get this
    wxCaret * self = (wxCaret *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCaret);
    // call GetWindow
    wxWindow* returns = (wxWindow*)self->GetWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_Hide[] = { &wxluatype_wxCaret, NULL };
static int LUACALL wxLua_wxCaret_Hide(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_Hide[1] = {{ wxLua_wxCaret_Hide, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCaret_Hide }};
//     void Hide()
static int LUACALL wxLua_wxCaret_Hide(lua_State *L)
{
    // get this
    wxCaret * self = (wxCaret *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCaret);
    // call Hide
    self->Hide();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_IsOk[] = { &wxluatype_wxCaret, NULL };
static int LUACALL wxLua_wxCaret_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_IsOk[1] = {{ wxLua_wxCaret_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCaret_IsOk }};
//     bool IsOk()
static int LUACALL wxLua_wxCaret_IsOk(lua_State *L)
{
    // get this
    wxCaret * self = (wxCaret *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCaret);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_IsVisible[] = { &wxluatype_wxCaret, NULL };
static int LUACALL wxLua_wxCaret_IsVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_IsVisible[1] = {{ wxLua_wxCaret_IsVisible, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCaret_IsVisible }};
//     bool IsVisible()
static int LUACALL wxLua_wxCaret_IsVisible(lua_State *L)
{
    // get this
    wxCaret * self = (wxCaret *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCaret);
    // call IsVisible
    bool returns = (self->IsVisible());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_Move1[] = { &wxluatype_wxCaret, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxCaret_Move1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_Move1[1] = {{ wxLua_wxCaret_Move1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCaret_Move1 }};
//     void Move(const wxPoint& pt)
static int LUACALL wxLua_wxCaret_Move1(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxCaret * self = (wxCaret *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCaret);
    // call Move
    self->Move(*pt);

    return 0;
}

#endif // (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_Move[] = { &wxluatype_wxCaret, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCaret_Move(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_Move[1] = {{ wxLua_wxCaret_Move, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxCaret_Move }};
//     void Move(int x, int y)
static int LUACALL wxLua_wxCaret_Move(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxCaret * self = (wxCaret *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCaret);
    // call Move
    self->Move(x, y);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_SetBlinkTime[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCaret_SetBlinkTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_SetBlinkTime[1] = {{ wxLua_wxCaret_SetBlinkTime, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxCaret_SetBlinkTime }};
//     static void SetBlinkTime(int ms)
static int LUACALL wxLua_wxCaret_SetBlinkTime(lua_State *L)
{
    // int ms
    int ms = (int)wxlua_getnumbertype(L, 1);
    // call SetBlinkTime
    wxCaret::SetBlinkTime(ms);

    return 0;
}


#if (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_SetSize1[] = { &wxluatype_wxCaret, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxCaret_SetSize1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_SetSize1[1] = {{ wxLua_wxCaret_SetSize1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCaret_SetSize1 }};
//     void SetSize(const wxSize& size)
static int LUACALL wxLua_wxCaret_SetSize1(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxCaret * self = (wxCaret *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCaret);
    // call SetSize
    self->SetSize(*size);

    return 0;
}

#endif // (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_SetSize[] = { &wxluatype_wxCaret, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCaret_SetSize(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_SetSize[1] = {{ wxLua_wxCaret_SetSize, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxCaret_SetSize }};
//     void SetSize(int width, int height)
static int LUACALL wxLua_wxCaret_SetSize(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxCaret * self = (wxCaret *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCaret);
    // call SetSize
    self->SetSize(width, height);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_Show[] = { &wxluatype_wxCaret, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxCaret_Show(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_Show[1] = {{ wxLua_wxCaret_Show, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxCaret_Show }};
//     void Show(bool show = true)
static int LUACALL wxLua_wxCaret_Show(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool show = true
    bool show = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxCaret * self = (wxCaret *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCaret);
    // call Show
    self->Show(show);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_delete[] = { &wxluatype_wxCaret, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxCaret_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_constructor2[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCaret_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_constructor2[1] = {{ wxLua_wxCaret_constructor2, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxCaret_constructor2 }};
//     wxCaret(wxWindow* window, int width, int height)
static int LUACALL wxLua_wxCaret_constructor2(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxCaret* returns = new wxCaret(window, width, height);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxCaret((wxCaret*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCaret);

    return 1;
}


#if (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCaret_constructor1[] = { &wxluatype_wxWindow, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxCaret_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_constructor1[1] = {{ wxLua_wxCaret_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxCaret_constructor1 }};
//     wxCaret(wxWindow* window, const wxSize& size)
static int LUACALL wxLua_wxCaret_constructor1(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxCaret* returns = new wxCaret(window, *size);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxCaret((wxCaret*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCaret);

    return 1;
}

#endif // (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxCaret_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_constructor[1] = {{ wxLua_wxCaret_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxCaret()
static int LUACALL wxLua_wxCaret_constructor(lua_State *L)
{
    // call constructor
    wxCaret* returns = new wxCaret();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxCaret((wxCaret*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCaret);

    return 1;
}




#if (wxLUA_USE_wxCaret && wxUSE_CARET)||((wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_Create_overload[] =
{
    { wxLua_wxCaret_Create1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxCaret_Create1 },

#if (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxCaret_Create, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxCaret_Create },
#endif // (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)
};
static int s_wxluafunc_wxLua_wxCaret_Create_overload_count = sizeof(s_wxluafunc_wxLua_wxCaret_Create_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxCaret && wxUSE_CARET)||((wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect))

#if ((wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxCaret && wxUSE_CARET)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_Move_overload[] =
{

#if (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxCaret_Move1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCaret_Move1 },
#endif // (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxCaret_Move, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxCaret_Move },
};
static int s_wxluafunc_wxLua_wxCaret_Move_overload_count = sizeof(s_wxluafunc_wxLua_wxCaret_Move_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_SetSize_overload[] =
{

#if (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxCaret_SetSize1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCaret_SetSize1 },
#endif // (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxCaret_SetSize, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxCaret_SetSize },
};
static int s_wxluafunc_wxLua_wxCaret_SetSize_overload_count = sizeof(s_wxluafunc_wxLua_wxCaret_SetSize_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxCaret && wxUSE_CARET)

#if (wxLUA_USE_wxCaret && wxUSE_CARET)||((wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaret_constructor_overload[] =
{
    { wxLua_wxCaret_constructor2, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxCaret_constructor2 },

#if (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxCaret_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxCaret_constructor1 },
#endif // (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxCaret_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxCaret_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxCaret_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxCaret && wxUSE_CARET)||((wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxCaret_methods[] = {
#if (wxLUA_USE_wxCaret && wxUSE_CARET)||((wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect))
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCaret_Create_overload, s_wxluafunc_wxLua_wxCaret_Create_overload_count, 0 },
#endif // (wxLUA_USE_wxCaret && wxUSE_CARET)||((wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect))

    { "GetBlinkTime", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxCaret_GetBlinkTime, 1, NULL },

#if (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCaret_GetPosition, 1, NULL },
#endif // (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)

    { "GetPositionXY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCaret_GetPositionXY, 1, NULL },

#if (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)
    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCaret_GetSize, 1, NULL },
#endif // (wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect)

    { "GetSizeWH", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCaret_GetSizeWH, 1, NULL },
    { "GetWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCaret_GetWindow, 1, NULL },
    { "Hide", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCaret_Hide, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCaret_IsOk, 1, NULL },
    { "IsVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCaret_IsVisible, 1, NULL },

#if ((wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxCaret && wxUSE_CARET)
    { "Move", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCaret_Move_overload, s_wxluafunc_wxLua_wxCaret_Move_overload_count, 0 },
#endif // ((wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxCaret && wxUSE_CARET)

    { "SetBlinkTime", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxCaret_SetBlinkTime, 1, NULL },

#if ((wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxCaret && wxUSE_CARET)
    { "SetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCaret_SetSize_overload, s_wxluafunc_wxLua_wxCaret_SetSize_overload_count, 0 },
#endif // ((wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxCaret && wxUSE_CARET)

    { "Show", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCaret_Show, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxCaret_delete, 1, NULL },

#if (wxLUA_USE_wxCaret && wxUSE_CARET)||((wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect))
    { "wxCaret", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxCaret_constructor_overload, s_wxluafunc_wxLua_wxCaret_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxCaret && wxUSE_CARET)||((wxLUA_USE_wxCaret && wxUSE_CARET) && (wxLUA_USE_wxPointSizeRect))

    { 0, 0, 0, 0 },
};

int wxCaret_methodCount = sizeof(wxCaret_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxCaret && wxUSE_CARET


#if wxLUA_USE_wxCaret && wxUSE_CARET
// ---------------------------------------------------------------------------
// Bind class wxCaretSuspend
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxCaretSuspend'
int wxluatype_wxCaretSuspend = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxCaretSuspend_delete[] = { &wxluatype_wxCaretSuspend, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaretSuspend_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxCaretSuspend_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxCaretSuspend_constructor[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxCaretSuspend_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCaretSuspend_constructor[1] = {{ wxLua_wxCaretSuspend_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxCaretSuspend_constructor }};
//     wxCaretSuspend(wxWindow *win = NULL)
static int LUACALL wxLua_wxCaretSuspend_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindow win = NULL
    wxWindow * win = (argCount >= 1 ? (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow) : NULL);
    // call constructor
    wxCaretSuspend* returns = new wxCaretSuspend(win);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxCaretSuspend((wxCaretSuspend*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCaretSuspend);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxCaretSuspend_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxCaretSuspend_delete, 1, NULL },
    { "wxCaretSuspend", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxCaretSuspend_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxCaretSuspend_methodCount = sizeof(wxCaretSuspend_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxCaret && wxUSE_CARET


#if wxLUA_USE_wxDisplay && wxUSE_DISPLAY
// ---------------------------------------------------------------------------
// Bind class wxVideoMode
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxVideoMode'
int wxluatype_wxVideoMode = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxVideoMode_GetDepth[] = { &wxluatype_wxVideoMode, NULL };
static int LUACALL wxLua_wxVideoMode_GetDepth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxVideoMode_GetDepth[1] = {{ wxLua_wxVideoMode_GetDepth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxVideoMode_GetDepth }};
//     int  GetDepth() const
static int LUACALL wxLua_wxVideoMode_GetDepth(lua_State *L)
{
    // get this
    wxVideoMode * self = (wxVideoMode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxVideoMode);
    // call GetDepth
    int returns = (self->GetDepth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxVideoMode_GetHeight[] = { &wxluatype_wxVideoMode, NULL };
static int LUACALL wxLua_wxVideoMode_GetHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxVideoMode_GetHeight[1] = {{ wxLua_wxVideoMode_GetHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxVideoMode_GetHeight }};
//     int  GetHeight() const
static int LUACALL wxLua_wxVideoMode_GetHeight(lua_State *L)
{
    // get this
    wxVideoMode * self = (wxVideoMode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxVideoMode);
    // call GetHeight
    int returns = (self->GetHeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxVideoMode_GetWidth[] = { &wxluatype_wxVideoMode, NULL };
static int LUACALL wxLua_wxVideoMode_GetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxVideoMode_GetWidth[1] = {{ wxLua_wxVideoMode_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxVideoMode_GetWidth }};
//     int  GetWidth() const
static int LUACALL wxLua_wxVideoMode_GetWidth(lua_State *L)
{
    // get this
    wxVideoMode * self = (wxVideoMode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxVideoMode);
    // call GetWidth
    int returns = (self->GetWidth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxVideoMode_IsOk[] = { &wxluatype_wxVideoMode, NULL };
static int LUACALL wxLua_wxVideoMode_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxVideoMode_IsOk[1] = {{ wxLua_wxVideoMode_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxVideoMode_IsOk }};
//     bool IsOk() const
static int LUACALL wxLua_wxVideoMode_IsOk(lua_State *L)
{
    // get this
    wxVideoMode * self = (wxVideoMode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxVideoMode);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxVideoMode_Matches[] = { &wxluatype_wxVideoMode, &wxluatype_wxVideoMode, NULL };
static int LUACALL wxLua_wxVideoMode_Matches(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxVideoMode_Matches[1] = {{ wxLua_wxVideoMode_Matches, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxVideoMode_Matches }};
//     bool Matches(const wxVideoMode& other) const
static int LUACALL wxLua_wxVideoMode_Matches(lua_State *L)
{
    // const wxVideoMode other
    const wxVideoMode * other = (const wxVideoMode *)wxluaT_getuserdatatype(L, 2, wxluatype_wxVideoMode);
    // get this
    wxVideoMode * self = (wxVideoMode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxVideoMode);
    // call Matches
    bool returns = (self->Matches(*other));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxVideoMode_delete[] = { &wxluatype_wxVideoMode, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxVideoMode_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxVideoMode_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxVideoMode_op_eq[] = { &wxluatype_wxVideoMode, &wxluatype_wxVideoMode, NULL };
static int LUACALL wxLua_wxVideoMode_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxVideoMode_op_eq[1] = {{ wxLua_wxVideoMode_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxVideoMode_op_eq }};
//     %operator bool operator==(const wxVideoMode& v) const
static int LUACALL wxLua_wxVideoMode_op_eq(lua_State *L)
{
    // const wxVideoMode v
    const wxVideoMode * v = (const wxVideoMode *)wxluaT_getuserdatatype(L, 2, wxluatype_wxVideoMode);
    // get this
    wxVideoMode * self = (wxVideoMode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxVideoMode);
    // call op_eq
    bool returns = ((*self)==(*v));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxVideoMode_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxVideoMode_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxVideoMode_constructor[1] = {{ wxLua_wxVideoMode_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxVideoMode_constructor }};
//     wxVideoMode(int width = 0, int height = 0, int depth = 0, int freq = 0)
static int LUACALL wxLua_wxVideoMode_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int freq = 0
    int freq = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // int depth = 0
    int depth = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int height = 0
    int height = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // int width = 0
    int width = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxVideoMode* returns = new wxVideoMode(width, height, depth, freq);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxVideoMode((wxVideoMode*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVideoMode);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxVideoMode_methods[] = {
    { "GetDepth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxVideoMode_GetDepth, 1, NULL },
    { "GetHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxVideoMode_GetHeight, 1, NULL },
    { "GetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxVideoMode_GetWidth, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxVideoMode_IsOk, 1, NULL },
    { "Matches", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxVideoMode_Matches, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxVideoMode_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxVideoMode_op_eq, 1, NULL },
    { "wxVideoMode", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxVideoMode_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxVideoMode_methodCount = sizeof(wxVideoMode_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDisplay && wxUSE_DISPLAY


#if wxLUA_USE_wxDisplay && wxUSE_DISPLAY
// ---------------------------------------------------------------------------
// Bind class wxArrayVideoModes
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxArrayVideoModes'
int wxluatype_wxArrayVideoModes = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayVideoModes_Add[] = { &wxluatype_wxArrayVideoModes, &wxluatype_wxVideoMode, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxArrayVideoModes_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayVideoModes_Add[1] = {{ wxLua_wxArrayVideoModes_Add, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxArrayVideoModes_Add }};
//     void Add(const wxVideoMode& vm, size_t copies = 1)
static int LUACALL wxLua_wxArrayVideoModes_Add(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t copies = 1
    size_t copies = (argCount >= 3 ? (size_t)wxlua_getuintegertype(L, 3) : 1);
    // const wxVideoMode vm
    const wxVideoMode * vm = (const wxVideoMode *)wxluaT_getuserdatatype(L, 2, wxluatype_wxVideoMode);
    // get this
    wxArrayVideoModes * self = (wxArrayVideoModes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayVideoModes);
    // call Add
    self->Add(*vm, copies);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayVideoModes_Alloc[] = { &wxluatype_wxArrayVideoModes, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxArrayVideoModes_Alloc(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayVideoModes_Alloc[1] = {{ wxLua_wxArrayVideoModes_Alloc, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxArrayVideoModes_Alloc }};
//     void Alloc(size_t nCount)
static int LUACALL wxLua_wxArrayVideoModes_Alloc(lua_State *L)
{
    // size_t nCount
    size_t nCount = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxArrayVideoModes * self = (wxArrayVideoModes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayVideoModes);
    // call Alloc
    self->Alloc(nCount);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayVideoModes_Clear[] = { &wxluatype_wxArrayVideoModes, NULL };
static int LUACALL wxLua_wxArrayVideoModes_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayVideoModes_Clear[1] = {{ wxLua_wxArrayVideoModes_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayVideoModes_Clear }};
//     void Clear()
static int LUACALL wxLua_wxArrayVideoModes_Clear(lua_State *L)
{
    // get this
    wxArrayVideoModes * self = (wxArrayVideoModes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayVideoModes);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayVideoModes_Empty[] = { &wxluatype_wxArrayVideoModes, NULL };
static int LUACALL wxLua_wxArrayVideoModes_Empty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayVideoModes_Empty[1] = {{ wxLua_wxArrayVideoModes_Empty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayVideoModes_Empty }};
//     void Empty()
static int LUACALL wxLua_wxArrayVideoModes_Empty(lua_State *L)
{
    // get this
    wxArrayVideoModes * self = (wxArrayVideoModes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayVideoModes);
    // call Empty
    self->Empty();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayVideoModes_GetCount[] = { &wxluatype_wxArrayVideoModes, NULL };
static int LUACALL wxLua_wxArrayVideoModes_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayVideoModes_GetCount[1] = {{ wxLua_wxArrayVideoModes_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayVideoModes_GetCount }};
//     int  GetCount() const
static int LUACALL wxLua_wxArrayVideoModes_GetCount(lua_State *L)
{
    // get this
    wxArrayVideoModes * self = (wxArrayVideoModes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayVideoModes);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayVideoModes_Insert[] = { &wxluatype_wxArrayVideoModes, &wxluatype_wxVideoMode, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxArrayVideoModes_Insert(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayVideoModes_Insert[1] = {{ wxLua_wxArrayVideoModes_Insert, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxArrayVideoModes_Insert }};
//     void Insert(const wxVideoMode& vm, int nIndex, size_t copies = 1)
static int LUACALL wxLua_wxArrayVideoModes_Insert(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t copies = 1
    size_t copies = (argCount >= 4 ? (size_t)wxlua_getuintegertype(L, 4) : 1);
    // int nIndex
    int nIndex = (int)wxlua_getnumbertype(L, 3);
    // const wxVideoMode vm
    const wxVideoMode * vm = (const wxVideoMode *)wxluaT_getuserdatatype(L, 2, wxluatype_wxVideoMode);
    // get this
    wxArrayVideoModes * self = (wxArrayVideoModes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayVideoModes);
    // call Insert
    self->Insert(*vm, nIndex, copies);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayVideoModes_IsEmpty[] = { &wxluatype_wxArrayVideoModes, NULL };
static int LUACALL wxLua_wxArrayVideoModes_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayVideoModes_IsEmpty[1] = {{ wxLua_wxArrayVideoModes_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayVideoModes_IsEmpty }};
//     bool IsEmpty()
static int LUACALL wxLua_wxArrayVideoModes_IsEmpty(lua_State *L)
{
    // get this
    wxArrayVideoModes * self = (wxArrayVideoModes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayVideoModes);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayVideoModes_Item[] = { &wxluatype_wxArrayVideoModes, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxArrayVideoModes_Item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayVideoModes_Item[1] = {{ wxLua_wxArrayVideoModes_Item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxArrayVideoModes_Item }};
//     wxVideoMode Item(size_t nIndex) const
static int LUACALL wxLua_wxArrayVideoModes_Item(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxArrayVideoModes * self = (wxArrayVideoModes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayVideoModes);
    // call Item
    // allocate a new object using the copy constructor
    wxVideoMode* returns = new wxVideoMode(self->Item(nIndex));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxVideoMode((wxVideoMode*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVideoMode);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayVideoModes_Last[] = { &wxluatype_wxArrayVideoModes, NULL };
static int LUACALL wxLua_wxArrayVideoModes_Last(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayVideoModes_Last[1] = {{ wxLua_wxArrayVideoModes_Last, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayVideoModes_Last }};
//     wxVideoMode Last()
static int LUACALL wxLua_wxArrayVideoModes_Last(lua_State *L)
{
    // get this
    wxArrayVideoModes * self = (wxArrayVideoModes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayVideoModes);
    // call Last
    // allocate a new object using the copy constructor
    wxVideoMode* returns = new wxVideoMode(self->Last());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxVideoMode((wxVideoMode*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVideoMode);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayVideoModes_RemoveAt[] = { &wxluatype_wxArrayVideoModes, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxArrayVideoModes_RemoveAt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayVideoModes_RemoveAt[1] = {{ wxLua_wxArrayVideoModes_RemoveAt, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxArrayVideoModes_RemoveAt }};
//     void RemoveAt(size_t nIndex, size_t count = 1)
static int LUACALL wxLua_wxArrayVideoModes_RemoveAt(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t count = 1
    size_t count = (argCount >= 3 ? (size_t)wxlua_getuintegertype(L, 3) : 1);
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxArrayVideoModes * self = (wxArrayVideoModes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayVideoModes);
    // call RemoveAt
    self->RemoveAt(nIndex, count);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayVideoModes_Shrink[] = { &wxluatype_wxArrayVideoModes, NULL };
static int LUACALL wxLua_wxArrayVideoModes_Shrink(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayVideoModes_Shrink[1] = {{ wxLua_wxArrayVideoModes_Shrink, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayVideoModes_Shrink }};
//     void Shrink()
static int LUACALL wxLua_wxArrayVideoModes_Shrink(lua_State *L)
{
    // get this
    wxArrayVideoModes * self = (wxArrayVideoModes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayVideoModes);
    // call Shrink
    self->Shrink();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayVideoModes_delete[] = { &wxluatype_wxArrayVideoModes, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayVideoModes_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxArrayVideoModes_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayVideoModes_op_index[] = { &wxluatype_wxArrayVideoModes, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxArrayVideoModes_op_index(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayVideoModes_op_index[1] = {{ wxLua_wxArrayVideoModes_op_index, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxArrayVideoModes_op_index }};
//     %operator wxVideoMode& operator[](size_t nIndex)
static int LUACALL wxLua_wxArrayVideoModes_op_index(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxArrayVideoModes * self = (wxArrayVideoModes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayVideoModes);
    // call op_index
    wxVideoMode* returns = &((*self)[(nIndex)]);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVideoMode);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayVideoModes_constructor1[] = { &wxluatype_wxArrayVideoModes, NULL };
static int LUACALL wxLua_wxArrayVideoModes_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayVideoModes_constructor1[1] = {{ wxLua_wxArrayVideoModes_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxArrayVideoModes_constructor1 }};
//     wxArrayVideoModes(const wxArrayVideoModes& array)
static int LUACALL wxLua_wxArrayVideoModes_constructor1(lua_State *L)
{
    // const wxArrayVideoModes array
    const wxArrayVideoModes * array = (const wxArrayVideoModes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayVideoModes);
    // call constructor
    wxArrayVideoModes* returns = new wxArrayVideoModes(*array);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxArrayVideoModes((wxArrayVideoModes*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayVideoModes);

    return 1;
}

static int LUACALL wxLua_wxArrayVideoModes_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayVideoModes_constructor[1] = {{ wxLua_wxArrayVideoModes_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxArrayVideoModes()
static int LUACALL wxLua_wxArrayVideoModes_constructor(lua_State *L)
{
    // call constructor
    wxArrayVideoModes* returns = new wxArrayVideoModes();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxArrayVideoModes((wxArrayVideoModes*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayVideoModes);

    return 1;
}




#if (wxLUA_USE_wxDisplay && wxUSE_DISPLAY)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayVideoModes_constructor_overload[] =
{
    { wxLua_wxArrayVideoModes_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxArrayVideoModes_constructor1 },
    { wxLua_wxArrayVideoModes_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxArrayVideoModes_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxArrayVideoModes_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxDisplay && wxUSE_DISPLAY)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxArrayVideoModes_methods[] = {
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayVideoModes_Add, 1, NULL },
    { "Alloc", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayVideoModes_Alloc, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayVideoModes_Clear, 1, NULL },
    { "Empty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayVideoModes_Empty, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayVideoModes_GetCount, 1, NULL },
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayVideoModes_Insert, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayVideoModes_IsEmpty, 1, NULL },
    { "Item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayVideoModes_Item, 1, NULL },
    { "Last", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayVideoModes_Last, 1, NULL },
    { "RemoveAt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayVideoModes_RemoveAt, 1, NULL },
    { "Shrink", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayVideoModes_Shrink, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxArrayVideoModes_delete, 1, NULL },
    { "op_index", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayVideoModes_op_index, 1, NULL },

#if (wxLUA_USE_wxDisplay && wxUSE_DISPLAY)
    { "wxArrayVideoModes", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxArrayVideoModes_constructor_overload, s_wxluafunc_wxLua_wxArrayVideoModes_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxDisplay && wxUSE_DISPLAY)

    { 0, 0, 0, 0 },
};

int wxArrayVideoModes_methodCount = sizeof(wxArrayVideoModes_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDisplay && wxUSE_DISPLAY


#if wxLUA_USE_wxDisplay && wxUSE_DISPLAY
// ---------------------------------------------------------------------------
// Bind class wxDisplay
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDisplay'
int wxluatype_wxDisplay = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDisplay_ChangeMode[] = { &wxluatype_wxDisplay, &wxluatype_wxVideoMode, NULL };
static int LUACALL wxLua_wxDisplay_ChangeMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDisplay_ChangeMode[1] = {{ wxLua_wxDisplay_ChangeMode, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxDisplay_ChangeMode }};
//     bool  ChangeMode(const wxVideoMode& mode = wxDefaultVideoMode)
static int LUACALL wxLua_wxDisplay_ChangeMode(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxVideoMode mode = wxDefaultVideoMode
    const wxVideoMode * mode = (argCount >= 2 ? (const wxVideoMode *)wxluaT_getuserdatatype(L, 2, wxluatype_wxVideoMode) : &wxDefaultVideoMode);
    // get this
    wxDisplay * self = (wxDisplay *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDisplay);
    // call ChangeMode
    bool returns = (self->ChangeMode(*mode));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDisplay && wxUSE_DISPLAY))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDisplay_GetClientArea[] = { &wxluatype_wxDisplay, NULL };
static int LUACALL wxLua_wxDisplay_GetClientArea(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDisplay_GetClientArea[1] = {{ wxLua_wxDisplay_GetClientArea, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDisplay_GetClientArea }};
//     %wxchkver_2_8 wxRect GetClientArea() const
static int LUACALL wxLua_wxDisplay_GetClientArea(lua_State *L)
{
    // get this
    wxDisplay * self = (wxDisplay *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDisplay);
    // call GetClientArea
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetClientArea());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDisplay && wxUSE_DISPLAY))

static int LUACALL wxLua_wxDisplay_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDisplay_GetCount[1] = {{ wxLua_wxDisplay_GetCount, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static size_t GetCount()
static int LUACALL wxLua_wxDisplay_GetCount(lua_State *L)
{
    // call GetCount
    size_t returns = (wxDisplay::GetCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDisplay_GetCurrentMode[] = { &wxluatype_wxDisplay, NULL };
static int LUACALL wxLua_wxDisplay_GetCurrentMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDisplay_GetCurrentMode[1] = {{ wxLua_wxDisplay_GetCurrentMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDisplay_GetCurrentMode }};
//     wxVideoMode  GetCurrentMode() const
static int LUACALL wxLua_wxDisplay_GetCurrentMode(lua_State *L)
{
    // get this
    wxDisplay * self = (wxDisplay *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDisplay);
    // call GetCurrentMode
    // allocate a new object using the copy constructor
    wxVideoMode* returns = new wxVideoMode(self->GetCurrentMode());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxVideoMode((wxVideoMode*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVideoMode);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDisplay && wxUSE_DISPLAY)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDisplay_GetFromPoint[] = { &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxDisplay_GetFromPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDisplay_GetFromPoint[1] = {{ wxLua_wxDisplay_GetFromPoint, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxDisplay_GetFromPoint }};
//     static int GetFromPoint(const wxPoint& pt)
static int LUACALL wxLua_wxDisplay_GetFromPoint(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call GetFromPoint
    int returns = (wxDisplay::GetFromPoint(*pt));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDisplay && wxUSE_DISPLAY)

#if (wxCHECK_VERSION(2,8,0) || !defined(__WXGTK__)) && (wxLUA_USE_wxDisplay && wxUSE_DISPLAY)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDisplay_GetFromWindow[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxDisplay_GetFromWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDisplay_GetFromWindow[1] = {{ wxLua_wxDisplay_GetFromWindow, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxDisplay_GetFromWindow }};
//     %wxchkver_2_8|!%gtk static int GetFromWindow(wxWindow* win)
static int LUACALL wxLua_wxDisplay_GetFromWindow(lua_State *L)
{
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetFromWindow
    int returns = (wxDisplay::GetFromWindow(win));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) || !defined(__WXGTK__)) && (wxLUA_USE_wxDisplay && wxUSE_DISPLAY)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDisplay && wxUSE_DISPLAY)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDisplay_GetGeometry[] = { &wxluatype_wxDisplay, NULL };
static int LUACALL wxLua_wxDisplay_GetGeometry(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDisplay_GetGeometry[1] = {{ wxLua_wxDisplay_GetGeometry, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDisplay_GetGeometry }};
//     wxRect  GetGeometry() const
static int LUACALL wxLua_wxDisplay_GetGeometry(lua_State *L)
{
    // get this
    wxDisplay * self = (wxDisplay *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDisplay);
    // call GetGeometry
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetGeometry());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDisplay && wxUSE_DISPLAY)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDisplay_GetModes[] = { &wxluatype_wxDisplay, &wxluatype_wxVideoMode, NULL };
static int LUACALL wxLua_wxDisplay_GetModes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDisplay_GetModes[1] = {{ wxLua_wxDisplay_GetModes, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxDisplay_GetModes }};
//     wxArrayVideoModes  GetModes(const wxVideoMode& mode = wxDefaultVideoMode) const
static int LUACALL wxLua_wxDisplay_GetModes(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxVideoMode mode = wxDefaultVideoMode
    const wxVideoMode * mode = (argCount >= 2 ? (const wxVideoMode *)wxluaT_getuserdatatype(L, 2, wxluatype_wxVideoMode) : &wxDefaultVideoMode);
    // get this
    wxDisplay * self = (wxDisplay *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDisplay);
    // call GetModes
    // allocate a new object using the copy constructor
    wxArrayVideoModes* returns = new wxArrayVideoModes(self->GetModes(*mode));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxArrayVideoModes((wxArrayVideoModes*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayVideoModes);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDisplay_GetName[] = { &wxluatype_wxDisplay, NULL };
static int LUACALL wxLua_wxDisplay_GetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDisplay_GetName[1] = {{ wxLua_wxDisplay_GetName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDisplay_GetName }};
//     wxString  GetName() const
static int LUACALL wxLua_wxDisplay_GetName(lua_State *L)
{
    // get this
    wxDisplay * self = (wxDisplay *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDisplay);
    // call GetName
    wxString returns = (self->GetName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDisplay_IsOk[] = { &wxluatype_wxDisplay, NULL };
static int LUACALL wxLua_wxDisplay_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDisplay_IsOk[1] = {{ wxLua_wxDisplay_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDisplay_IsOk }};
//     bool  IsOk() const
static int LUACALL wxLua_wxDisplay_IsOk(lua_State *L)
{
    // get this
    wxDisplay * self = (wxDisplay *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDisplay);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDisplay_IsPrimary[] = { &wxluatype_wxDisplay, NULL };
static int LUACALL wxLua_wxDisplay_IsPrimary(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDisplay_IsPrimary[1] = {{ wxLua_wxDisplay_IsPrimary, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDisplay_IsPrimary }};
//     bool  IsPrimary()
static int LUACALL wxLua_wxDisplay_IsPrimary(lua_State *L)
{
    // get this
    wxDisplay * self = (wxDisplay *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDisplay);
    // call IsPrimary
    bool returns = (self->IsPrimary());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDisplay_delete[] = { &wxluatype_wxDisplay, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDisplay_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDisplay_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxDisplay_constructor[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDisplay_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDisplay_constructor[1] = {{ wxLua_wxDisplay_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxDisplay_constructor }};
//     wxDisplay(size_t index = 0)
static int LUACALL wxLua_wxDisplay_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t index = 0
    size_t index = (argCount >= 1 ? (size_t)wxlua_getuintegertype(L, 1) : 0);
    // call constructor
    wxDisplay* returns = new wxDisplay(index);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDisplay((wxDisplay*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDisplay);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDisplay_methods[] = {
    { "ChangeMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDisplay_ChangeMode, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDisplay && wxUSE_DISPLAY))
    { "GetClientArea", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDisplay_GetClientArea, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDisplay && wxUSE_DISPLAY))

    { "GetCount", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDisplay_GetCount, 1, NULL },
    { "GetCurrentMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDisplay_GetCurrentMode, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDisplay && wxUSE_DISPLAY)
    { "GetFromPoint", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDisplay_GetFromPoint, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDisplay && wxUSE_DISPLAY)

#if (wxCHECK_VERSION(2,8,0) || !defined(__WXGTK__)) && (wxLUA_USE_wxDisplay && wxUSE_DISPLAY)
    { "GetFromWindow", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDisplay_GetFromWindow, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) || !defined(__WXGTK__)) && (wxLUA_USE_wxDisplay && wxUSE_DISPLAY)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDisplay && wxUSE_DISPLAY)
    { "GetGeometry", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDisplay_GetGeometry, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDisplay && wxUSE_DISPLAY)

    { "GetModes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDisplay_GetModes, 1, NULL },
    { "GetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDisplay_GetName, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDisplay_IsOk, 1, NULL },
    { "IsPrimary", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDisplay_IsPrimary, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDisplay_delete, 1, NULL },
    { "wxDisplay", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDisplay_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDisplay_methodCount = sizeof(wxDisplay_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDisplay && wxUSE_DISPLAY

// ---------------------------------------------------------------------------
// Bind class wxEffects
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxEffects'
int wxluatype_wxEffects = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxEffects_DrawSunkenEdge[] = { &wxluatype_wxEffects, &wxluatype_wxDC, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxEffects_DrawSunkenEdge(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_DrawSunkenEdge[1] = {{ wxLua_wxEffects_DrawSunkenEdge, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxEffects_DrawSunkenEdge }};
//     void DrawSunkenEdge(wxDC& dc, const wxRect& rect, int borderSize = 1)
static int LUACALL wxLua_wxEffects_DrawSunkenEdge(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int borderSize = 1
    int borderSize = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 1);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRect);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxEffects * self = (wxEffects *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEffects);
    // call DrawSunkenEdge
    self->DrawSunkenEdge(*dc, *rect, borderSize);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)

#if wxLUA_USE_wxColourPenBrush
static wxLuaArgType s_wxluatypeArray_wxLua_wxEffects_GetDarkShadow[] = { &wxluatype_wxEffects, NULL };
static int LUACALL wxLua_wxEffects_GetDarkShadow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_GetDarkShadow[1] = {{ wxLua_wxEffects_GetDarkShadow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEffects_GetDarkShadow }};
//     wxColour GetDarkShadow() const
static int LUACALL wxLua_wxEffects_GetDarkShadow(lua_State *L)
{
    // get this
    wxEffects * self = (wxEffects *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEffects);
    // call GetDarkShadow
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetDarkShadow());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEffects_GetFaceColour[] = { &wxluatype_wxEffects, NULL };
static int LUACALL wxLua_wxEffects_GetFaceColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_GetFaceColour[1] = {{ wxLua_wxEffects_GetFaceColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEffects_GetFaceColour }};
//     wxColour GetFaceColour() const
static int LUACALL wxLua_wxEffects_GetFaceColour(lua_State *L)
{
    // get this
    wxEffects * self = (wxEffects *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEffects);
    // call GetFaceColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetFaceColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEffects_GetHighlightColour[] = { &wxluatype_wxEffects, NULL };
static int LUACALL wxLua_wxEffects_GetHighlightColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_GetHighlightColour[1] = {{ wxLua_wxEffects_GetHighlightColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEffects_GetHighlightColour }};
//     wxColour GetHighlightColour() const
static int LUACALL wxLua_wxEffects_GetHighlightColour(lua_State *L)
{
    // get this
    wxEffects * self = (wxEffects *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEffects);
    // call GetHighlightColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetHighlightColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEffects_GetLightShadow[] = { &wxluatype_wxEffects, NULL };
static int LUACALL wxLua_wxEffects_GetLightShadow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_GetLightShadow[1] = {{ wxLua_wxEffects_GetLightShadow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEffects_GetLightShadow }};
//     wxColour GetLightShadow() const
static int LUACALL wxLua_wxEffects_GetLightShadow(lua_State *L)
{
    // get this
    wxEffects * self = (wxEffects *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEffects);
    // call GetLightShadow
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetLightShadow());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEffects_GetMediumShadow[] = { &wxluatype_wxEffects, NULL };
static int LUACALL wxLua_wxEffects_GetMediumShadow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_GetMediumShadow[1] = {{ wxLua_wxEffects_GetMediumShadow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEffects_GetMediumShadow }};
//     wxColour GetMediumShadow() const
static int LUACALL wxLua_wxEffects_GetMediumShadow(lua_State *L)
{
    // get this
    wxEffects * self = (wxEffects *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEffects);
    // call GetMediumShadow
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetMediumShadow());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEffects_Set[] = { &wxluatype_wxEffects, &wxluatype_wxColour, &wxluatype_wxColour, &wxluatype_wxColour, &wxluatype_wxColour, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxEffects_Set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_Set[1] = {{ wxLua_wxEffects_Set, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxEffects_Set }};
//     void Set(const wxColour& highlightColour, const wxColour& lightShadow, const wxColour& faceColour, const wxColour& mediumShadow, const wxColour& darkShadow)
static int LUACALL wxLua_wxEffects_Set(lua_State *L)
{
    // const wxColour darkShadow
    const wxColour * darkShadow = (const wxColour *)wxluaT_getuserdatatype(L, 6, wxluatype_wxColour);
    // const wxColour mediumShadow
    const wxColour * mediumShadow = (const wxColour *)wxluaT_getuserdatatype(L, 5, wxluatype_wxColour);
    // const wxColour faceColour
    const wxColour * faceColour = (const wxColour *)wxluaT_getuserdatatype(L, 4, wxluatype_wxColour);
    // const wxColour lightShadow
    const wxColour * lightShadow = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // const wxColour highlightColour
    const wxColour * highlightColour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxEffects * self = (wxEffects *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEffects);
    // call Set
    self->Set(*highlightColour, *lightShadow, *faceColour, *mediumShadow, *darkShadow);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEffects_SetDarkShadow[] = { &wxluatype_wxEffects, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxEffects_SetDarkShadow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_SetDarkShadow[1] = {{ wxLua_wxEffects_SetDarkShadow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEffects_SetDarkShadow }};
//     void SetDarkShadow(const wxColour& c)
static int LUACALL wxLua_wxEffects_SetDarkShadow(lua_State *L)
{
    // const wxColour c
    const wxColour * c = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxEffects * self = (wxEffects *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEffects);
    // call SetDarkShadow
    self->SetDarkShadow(*c);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEffects_SetFaceColour[] = { &wxluatype_wxEffects, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxEffects_SetFaceColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_SetFaceColour[1] = {{ wxLua_wxEffects_SetFaceColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEffects_SetFaceColour }};
//     void SetFaceColour(const wxColour& c)
static int LUACALL wxLua_wxEffects_SetFaceColour(lua_State *L)
{
    // const wxColour c
    const wxColour * c = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxEffects * self = (wxEffects *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEffects);
    // call SetFaceColour
    self->SetFaceColour(*c);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEffects_SetHighlightColour[] = { &wxluatype_wxEffects, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxEffects_SetHighlightColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_SetHighlightColour[1] = {{ wxLua_wxEffects_SetHighlightColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEffects_SetHighlightColour }};
//     void SetHighlightColour(const wxColour& c)
static int LUACALL wxLua_wxEffects_SetHighlightColour(lua_State *L)
{
    // const wxColour c
    const wxColour * c = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxEffects * self = (wxEffects *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEffects);
    // call SetHighlightColour
    self->SetHighlightColour(*c);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEffects_SetLightShadow[] = { &wxluatype_wxEffects, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxEffects_SetLightShadow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_SetLightShadow[1] = {{ wxLua_wxEffects_SetLightShadow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEffects_SetLightShadow }};
//     void SetLightShadow(const wxColour& c)
static int LUACALL wxLua_wxEffects_SetLightShadow(lua_State *L)
{
    // const wxColour c
    const wxColour * c = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxEffects * self = (wxEffects *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEffects);
    // call SetLightShadow
    self->SetLightShadow(*c);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEffects_SetMediumShadow[] = { &wxluatype_wxEffects, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxEffects_SetMediumShadow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_SetMediumShadow[1] = {{ wxLua_wxEffects_SetMediumShadow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEffects_SetMediumShadow }};
//     void SetMediumShadow(const wxColour& c)
static int LUACALL wxLua_wxEffects_SetMediumShadow(lua_State *L)
{
    // const wxColour c
    const wxColour * c = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxEffects * self = (wxEffects *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEffects);
    // call SetMediumShadow
    self->SetMediumShadow(*c);

    return 0;
}

#endif // wxLUA_USE_wxColourPenBrush

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxEffects_TileBitmap[] = { &wxluatype_wxEffects, &wxluatype_wxRect, &wxluatype_wxDC, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxEffects_TileBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_TileBitmap[1] = {{ wxLua_wxEffects_TileBitmap, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxEffects_TileBitmap }};
//     bool TileBitmap(const wxRect& rect, wxDC& dc, wxBitmap& bitmap)
static int LUACALL wxLua_wxEffects_TileBitmap(lua_State *L)
{
    // wxBitmap bitmap
    wxBitmap * bitmap = (wxBitmap *)wxluaT_getuserdatatype(L, 4, wxluatype_wxBitmap);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxEffects * self = (wxEffects *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEffects);
    // call TileBitmap
    bool returns = (self->TileBitmap(*rect, *dc, *bitmap));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxEffects_delete[] = { &wxluatype_wxEffects, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxEffects_delete }};


#if wxLUA_USE_wxColourPenBrush
static wxLuaArgType s_wxluatypeArray_wxLua_wxEffects_constructor1[] = { &wxluatype_wxColour, &wxluatype_wxColour, &wxluatype_wxColour, &wxluatype_wxColour, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxEffects_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_constructor1[1] = {{ wxLua_wxEffects_constructor1, WXLUAMETHOD_CONSTRUCTOR, 5, 5, s_wxluatypeArray_wxLua_wxEffects_constructor1 }};
//     wxEffects(const wxColour& highlightColour, const wxColour& lightShadow, const wxColour& faceColour, const wxColour& mediumShadow, const wxColour& darkShadow)
static int LUACALL wxLua_wxEffects_constructor1(lua_State *L)
{
    // const wxColour darkShadow
    const wxColour * darkShadow = (const wxColour *)wxluaT_getuserdatatype(L, 5, wxluatype_wxColour);
    // const wxColour mediumShadow
    const wxColour * mediumShadow = (const wxColour *)wxluaT_getuserdatatype(L, 4, wxluatype_wxColour);
    // const wxColour faceColour
    const wxColour * faceColour = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // const wxColour lightShadow
    const wxColour * lightShadow = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // const wxColour highlightColour
    const wxColour * highlightColour = (const wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call constructor
    wxEffects* returns = new wxEffects(*highlightColour, *lightShadow, *faceColour, *mediumShadow, *darkShadow);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxEffects);

    return 1;
}

#endif // wxLUA_USE_wxColourPenBrush

static int LUACALL wxLua_wxEffects_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_constructor[1] = {{ wxLua_wxEffects_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxEffects() // use system default colours
static int LUACALL wxLua_wxEffects_constructor(lua_State *L)
{
    // call constructor
    wxEffects* returns = new wxEffects();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxEffects);

    return 1;
}



#if (wxLUA_USE_wxColourPenBrush)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEffects_constructor_overload[] =
{

#if wxLUA_USE_wxColourPenBrush
    { wxLua_wxEffects_constructor1, WXLUAMETHOD_CONSTRUCTOR, 5, 5, s_wxluatypeArray_wxLua_wxEffects_constructor1 },
#endif // wxLUA_USE_wxColourPenBrush
    { wxLua_wxEffects_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxEffects_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxEffects_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxColourPenBrush)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxEffects_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)
    { "DrawSunkenEdge", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEffects_DrawSunkenEdge, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDC)

#if wxLUA_USE_wxColourPenBrush
    { "GetDarkShadow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEffects_GetDarkShadow, 1, NULL },
    { "GetFaceColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEffects_GetFaceColour, 1, NULL },
    { "GetHighlightColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEffects_GetHighlightColour, 1, NULL },
    { "GetLightShadow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEffects_GetLightShadow, 1, NULL },
    { "GetMediumShadow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEffects_GetMediumShadow, 1, NULL },
    { "Set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEffects_Set, 1, NULL },
    { "SetDarkShadow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEffects_SetDarkShadow, 1, NULL },
    { "SetFaceColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEffects_SetFaceColour, 1, NULL },
    { "SetHighlightColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEffects_SetHighlightColour, 1, NULL },
    { "SetLightShadow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEffects_SetLightShadow, 1, NULL },
    { "SetMediumShadow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEffects_SetMediumShadow, 1, NULL },
#endif // wxLUA_USE_wxColourPenBrush

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)
    { "TileBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEffects_TileBitmap, 1, NULL },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxEffects_delete, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush)
    { "wxEffects", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxEffects_constructor_overload, s_wxluafunc_wxLua_wxEffects_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxColourPenBrush)

    { 0, 0, 0, 0 },
};

int wxEffects_methodCount = sizeof(wxEffects_methods)/sizeof(wxLuaBindMethod) - 1;



#if wxLUA_USE_wxRenderer
// ---------------------------------------------------------------------------
// Bind struct wxSplitterRenderParams
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSplitterRenderParams'
int wxluatype_wxSplitterRenderParams = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterRenderParams_Get_border[] = { &wxluatype_wxSplitterRenderParams, NULL };
static int LUACALL wxLua_wxSplitterRenderParams_Get_border(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterRenderParams_Get_border[1] = {{ wxLua_wxSplitterRenderParams_Get_border, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplitterRenderParams_Get_border }};
//     %member const wxCoord border        // the width of the border of the splitter window
static int LUACALL wxLua_wxSplitterRenderParams_Get_border(lua_State *L)
{
    // get this
    wxSplitterRenderParams *self = (wxSplitterRenderParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterRenderParams);
    // push the result number
    lua_pushnumber(L, self->border);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterRenderParams_Get_isHotSensitive[] = { &wxluatype_wxSplitterRenderParams, NULL };
static int LUACALL wxLua_wxSplitterRenderParams_Get_isHotSensitive(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterRenderParams_Get_isHotSensitive[1] = {{ wxLua_wxSplitterRenderParams_Get_isHotSensitive, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplitterRenderParams_Get_isHotSensitive }};
//     %member const bool isHotSensitive   // true if the splitter changes its appearance when the mouse is over it
static int LUACALL wxLua_wxSplitterRenderParams_Get_isHotSensitive(lua_State *L)
{
    // get this
    wxSplitterRenderParams *self = (wxSplitterRenderParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterRenderParams);
    // push the result flag
    lua_pushboolean(L, self->isHotSensitive);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterRenderParams_Get_widthSash[] = { &wxluatype_wxSplitterRenderParams, NULL };
static int LUACALL wxLua_wxSplitterRenderParams_Get_widthSash(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterRenderParams_Get_widthSash[1] = {{ wxLua_wxSplitterRenderParams_Get_widthSash, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplitterRenderParams_Get_widthSash }};
//     %member const wxCoord widthSash     // the width of the splitter sash
static int LUACALL wxLua_wxSplitterRenderParams_Get_widthSash(lua_State *L)
{
    // get this
    wxSplitterRenderParams *self = (wxSplitterRenderParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterRenderParams);
    // push the result number
    lua_pushnumber(L, self->widthSash);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterRenderParams_delete[] = { &wxluatype_wxSplitterRenderParams, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterRenderParams_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSplitterRenderParams_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterRenderParams_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSplitterRenderParams_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterRenderParams_constructor[1] = {{ wxLua_wxSplitterRenderParams_constructor, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxSplitterRenderParams_constructor }};
//     wxSplitterRenderParams(wxCoord widthSash_, wxCoord border_, bool isSens_)
static int LUACALL wxLua_wxSplitterRenderParams_constructor(lua_State *L)
{
    // bool isSens_
    bool isSens_ = wxlua_getbooleantype(L, 3);
    // wxCoord border_
    wxCoord border_ = (wxCoord)wxlua_getnumbertype(L, 2);
    // wxCoord widthSash_
    wxCoord widthSash_ = (wxCoord)wxlua_getnumbertype(L, 1);
    // call constructor
    wxSplitterRenderParams* returns = new wxSplitterRenderParams(widthSash_, border_, isSens_);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSplitterRenderParams((wxSplitterRenderParams*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSplitterRenderParams);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSplitterRenderParams_methods[] = {
    // %member    { "Get_border", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterRenderParams_Get_border, 1, NULL },
    // %member    { "Get_isHotSensitive", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterRenderParams_Get_isHotSensitive, 1, NULL },
    // %member    { "Get_widthSash", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterRenderParams_Get_widthSash, 1, NULL },
    { "border", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxSplitterRenderParams_Get_border, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSplitterRenderParams_delete, 1, NULL },
    { "isHotSensitive", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxSplitterRenderParams_Get_isHotSensitive, 1, NULL },
    { "widthSash", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxSplitterRenderParams_Get_widthSash, 1, NULL },
    { "wxSplitterRenderParams", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSplitterRenderParams_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxSplitterRenderParams_methodCount = sizeof(wxSplitterRenderParams_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRenderer


#if wxLUA_USE_wxRenderer
// ---------------------------------------------------------------------------
// Bind struct wxHeaderButtonParams
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHeaderButtonParams'
int wxluatype_wxHeaderButtonParams = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderButtonParams_Get_m_arrowColour[] = { &wxluatype_wxHeaderButtonParams, NULL };
static int LUACALL wxLua_wxHeaderButtonParams_Get_m_arrowColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_arrowColour[1] = {{ wxLua_wxHeaderButtonParams_Get_m_arrowColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderButtonParams_Get_m_arrowColour }};
//     %member wxColour    m_arrowColour;
static int LUACALL wxLua_wxHeaderButtonParams_Get_m_arrowColour(lua_State *L)
{
    // get this
    wxHeaderButtonParams *self = (wxHeaderButtonParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderButtonParams);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_arrowColour, wxluatype_wxColour);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderButtonParams_Get_m_labelAlignment[] = { &wxluatype_wxHeaderButtonParams, NULL };
static int LUACALL wxLua_wxHeaderButtonParams_Get_m_labelAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_labelAlignment[1] = {{ wxLua_wxHeaderButtonParams_Get_m_labelAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderButtonParams_Get_m_labelAlignment }};
//     %member int         m_labelAlignment;
static int LUACALL wxLua_wxHeaderButtonParams_Get_m_labelAlignment(lua_State *L)
{
    // get this
    wxHeaderButtonParams *self = (wxHeaderButtonParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderButtonParams);
    // push the result number
    lua_pushnumber(L, self->m_labelAlignment);
    // return the number of values
    return 1;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRenderer)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderButtonParams_Get_m_labelBitmap[] = { &wxluatype_wxHeaderButtonParams, NULL };
static int LUACALL wxLua_wxHeaderButtonParams_Get_m_labelBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_labelBitmap[1] = {{ wxLua_wxHeaderButtonParams_Get_m_labelBitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderButtonParams_Get_m_labelBitmap }};
//     %member wxBitmap    m_labelBitmap;
static int LUACALL wxLua_wxHeaderButtonParams_Get_m_labelBitmap(lua_State *L)
{
    // get this
    wxHeaderButtonParams *self = (wxHeaderButtonParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderButtonParams);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_labelBitmap, wxluatype_wxBitmap);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRenderer)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderButtonParams_Get_m_labelColour[] = { &wxluatype_wxHeaderButtonParams, NULL };
static int LUACALL wxLua_wxHeaderButtonParams_Get_m_labelColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_labelColour[1] = {{ wxLua_wxHeaderButtonParams_Get_m_labelColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderButtonParams_Get_m_labelColour }};
//     %member wxColour    m_labelColour;
static int LUACALL wxLua_wxHeaderButtonParams_Get_m_labelColour(lua_State *L)
{
    // get this
    wxHeaderButtonParams *self = (wxHeaderButtonParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderButtonParams);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_labelColour, wxluatype_wxColour);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRenderer)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderButtonParams_Get_m_labelFont[] = { &wxluatype_wxHeaderButtonParams, NULL };
static int LUACALL wxLua_wxHeaderButtonParams_Get_m_labelFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_labelFont[1] = {{ wxLua_wxHeaderButtonParams_Get_m_labelFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderButtonParams_Get_m_labelFont }};
//     %member wxFont      m_labelFont;
static int LUACALL wxLua_wxHeaderButtonParams_Get_m_labelFont(lua_State *L)
{
    // get this
    wxHeaderButtonParams *self = (wxHeaderButtonParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderButtonParams);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_labelFont, wxluatype_wxFont);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRenderer)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderButtonParams_Get_m_labelText[] = { &wxluatype_wxHeaderButtonParams, NULL };
static int LUACALL wxLua_wxHeaderButtonParams_Get_m_labelText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_labelText[1] = {{ wxLua_wxHeaderButtonParams_Get_m_labelText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderButtonParams_Get_m_labelText }};
//     %member wxString    m_labelText;
static int LUACALL wxLua_wxHeaderButtonParams_Get_m_labelText(lua_State *L)
{
    // get this
    wxHeaderButtonParams *self = (wxHeaderButtonParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderButtonParams);
    // push the result string
    wxlua_pushwxString(L, self->m_labelText);
    // return the number of values
    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderButtonParams_Get_m_selectionColour[] = { &wxluatype_wxHeaderButtonParams, NULL };
static int LUACALL wxLua_wxHeaderButtonParams_Get_m_selectionColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_selectionColour[1] = {{ wxLua_wxHeaderButtonParams_Get_m_selectionColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderButtonParams_Get_m_selectionColour }};
//     %member wxColour    m_selectionColour;
static int LUACALL wxLua_wxHeaderButtonParams_Get_m_selectionColour(lua_State *L)
{
    // get this
    wxHeaderButtonParams *self = (wxHeaderButtonParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderButtonParams);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_selectionColour, wxluatype_wxColour);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderButtonParams_Set_m_arrowColour[] = { &wxluatype_wxHeaderButtonParams, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxHeaderButtonParams_Set_m_arrowColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_arrowColour[1] = {{ wxLua_wxHeaderButtonParams_Set_m_arrowColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHeaderButtonParams_Set_m_arrowColour }};
//     %member wxColour    m_arrowColour;
static int LUACALL wxLua_wxHeaderButtonParams_Set_m_arrowColour(lua_State *L)
{
    // get the data type value
    wxColour* val = (wxColour*)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxHeaderButtonParams *self = (wxHeaderButtonParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderButtonParams);
    self->m_arrowColour = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderButtonParams_Set_m_labelAlignment[] = { &wxluatype_wxHeaderButtonParams, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHeaderButtonParams_Set_m_labelAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_labelAlignment[1] = {{ wxLua_wxHeaderButtonParams_Set_m_labelAlignment, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHeaderButtonParams_Set_m_labelAlignment }};
//     %member int         m_labelAlignment;
static int LUACALL wxLua_wxHeaderButtonParams_Set_m_labelAlignment(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHeaderButtonParams *self = (wxHeaderButtonParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderButtonParams);
    self->m_labelAlignment = val;
    // return the number of values
    return 0;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRenderer)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderButtonParams_Set_m_labelBitmap[] = { &wxluatype_wxHeaderButtonParams, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxHeaderButtonParams_Set_m_labelBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_labelBitmap[1] = {{ wxLua_wxHeaderButtonParams_Set_m_labelBitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHeaderButtonParams_Set_m_labelBitmap }};
//     %member wxBitmap    m_labelBitmap;
static int LUACALL wxLua_wxHeaderButtonParams_Set_m_labelBitmap(lua_State *L)
{
    // get the data type value
    wxBitmap* val = (wxBitmap*)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxHeaderButtonParams *self = (wxHeaderButtonParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderButtonParams);
    self->m_labelBitmap = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRenderer)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderButtonParams_Set_m_labelColour[] = { &wxluatype_wxHeaderButtonParams, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxHeaderButtonParams_Set_m_labelColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_labelColour[1] = {{ wxLua_wxHeaderButtonParams_Set_m_labelColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHeaderButtonParams_Set_m_labelColour }};
//     %member wxColour    m_labelColour;
static int LUACALL wxLua_wxHeaderButtonParams_Set_m_labelColour(lua_State *L)
{
    // get the data type value
    wxColour* val = (wxColour*)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxHeaderButtonParams *self = (wxHeaderButtonParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderButtonParams);
    self->m_labelColour = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRenderer)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderButtonParams_Set_m_labelFont[] = { &wxluatype_wxHeaderButtonParams, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxHeaderButtonParams_Set_m_labelFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_labelFont[1] = {{ wxLua_wxHeaderButtonParams_Set_m_labelFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHeaderButtonParams_Set_m_labelFont }};
//     %member wxFont      m_labelFont;
static int LUACALL wxLua_wxHeaderButtonParams_Set_m_labelFont(lua_State *L)
{
    // get the data type value
    wxFont* val = (wxFont*)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxHeaderButtonParams *self = (wxHeaderButtonParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderButtonParams);
    self->m_labelFont = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRenderer)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderButtonParams_Set_m_labelText[] = { &wxluatype_wxHeaderButtonParams, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHeaderButtonParams_Set_m_labelText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_labelText[1] = {{ wxLua_wxHeaderButtonParams_Set_m_labelText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHeaderButtonParams_Set_m_labelText }};
//     %member wxString    m_labelText;
static int LUACALL wxLua_wxHeaderButtonParams_Set_m_labelText(lua_State *L)
{
    // get the string value
    wxString val = wxlua_getwxStringtype(L, 2);
    // get this
    wxHeaderButtonParams *self = (wxHeaderButtonParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderButtonParams);
    self->m_labelText = val;
    // return the number of values
    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderButtonParams_Set_m_selectionColour[] = { &wxluatype_wxHeaderButtonParams, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxHeaderButtonParams_Set_m_selectionColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_selectionColour[1] = {{ wxLua_wxHeaderButtonParams_Set_m_selectionColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHeaderButtonParams_Set_m_selectionColour }};
//     %member wxColour    m_selectionColour;
static int LUACALL wxLua_wxHeaderButtonParams_Set_m_selectionColour(lua_State *L)
{
    // get the data type value
    wxColour* val = (wxColour*)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxHeaderButtonParams *self = (wxHeaderButtonParams *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderButtonParams);
    self->m_selectionColour = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderButtonParams_delete[] = { &wxluatype_wxHeaderButtonParams, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderButtonParams_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxHeaderButtonParams_delete }};


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRenderer)
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRenderer)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRenderer)
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRenderer)


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)

static int LUACALL wxLua_wxHeaderButtonParams_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderButtonParams_constructor[1] = {{ wxLua_wxHeaderButtonParams_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxHeaderButtonParams()
static int LUACALL wxLua_wxHeaderButtonParams_constructor(lua_State *L)
{
    // call constructor
    wxHeaderButtonParams* returns = new wxHeaderButtonParams();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxHeaderButtonParams((wxHeaderButtonParams*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHeaderButtonParams);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHeaderButtonParams_methods[] = {
#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)
    // %member    { "Get_m_arrowColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_arrowColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)

    // %member    { "Get_m_labelAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_labelAlignment, 1, NULL },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRenderer)
    // %member    { "Get_m_labelBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_labelBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRenderer)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)
    // %member    { "Get_m_labelColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_labelColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRenderer)
    // %member    { "Get_m_labelFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_labelFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRenderer)

    // %member    { "Get_m_labelText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_labelText, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)
    // %member    { "Get_m_selectionColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_selectionColour, 1, NULL },
    // %member    { "Set_m_arrowColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_arrowColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)

    // %member    { "Set_m_labelAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_labelAlignment, 1, NULL },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRenderer)
    // %member    { "Set_m_labelBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_labelBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRenderer)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)
    // %member    { "Set_m_labelColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_labelColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRenderer)
    // %member    { "Set_m_labelFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_labelFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRenderer)

    // %member    { "Set_m_labelText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_labelText, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)
    // %member    { "Set_m_selectionColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_selectionColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxHeaderButtonParams_delete, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)
    { "m_arrowColour", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_arrowColour, 1, NULL },
    { "m_arrowColour", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_arrowColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)

    { "m_labelAlignment", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_labelAlignment, 1, NULL },
    { "m_labelAlignment", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_labelAlignment, 1, NULL },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRenderer)
    { "m_labelBitmap", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_labelBitmap, 1, NULL },
    { "m_labelBitmap", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_labelBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRenderer)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)
    { "m_labelColour", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_labelColour, 1, NULL },
    { "m_labelColour", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_labelColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRenderer)
    { "m_labelFont", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_labelFont, 1, NULL },
    { "m_labelFont", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_labelFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRenderer)

    { "m_labelText", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_labelText, 1, NULL },
    { "m_labelText", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_labelText, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)
    { "m_selectionColour", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxHeaderButtonParams_Set_m_selectionColour, 1, NULL },
    { "m_selectionColour", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxHeaderButtonParams_Get_m_selectionColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRenderer)

    { "wxHeaderButtonParams", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHeaderButtonParams_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxHeaderButtonParams_methodCount = sizeof(wxHeaderButtonParams_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRenderer


#if wxLUA_USE_wxRenderer
// ---------------------------------------------------------------------------
// Bind struct wxRendererVersion
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRendererVersion'
int wxluatype_wxRendererVersion = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererVersion_Get_age[] = { &wxluatype_wxRendererVersion, NULL };
static int LUACALL wxLua_wxRendererVersion_Get_age(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererVersion_Get_age[1] = {{ wxLua_wxRendererVersion_Get_age, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRendererVersion_Get_age }};
//     %member const int age;
static int LUACALL wxLua_wxRendererVersion_Get_age(lua_State *L)
{
    // get this
    wxRendererVersion *self = (wxRendererVersion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererVersion);
    // push the result number
    lua_pushnumber(L, self->age);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererVersion_Get_version[] = { &wxluatype_wxRendererVersion, NULL };
static int LUACALL wxLua_wxRendererVersion_Get_version(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererVersion_Get_version[1] = {{ wxLua_wxRendererVersion_Get_version, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRendererVersion_Get_version }};
//     %member const int version;
static int LUACALL wxLua_wxRendererVersion_Get_version(lua_State *L)
{
    // get this
    wxRendererVersion *self = (wxRendererVersion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererVersion);
    // push the result number
    lua_pushnumber(L, self->version);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererVersion_IsCompatible[] = { &wxluatype_wxRendererVersion, NULL };
static int LUACALL wxLua_wxRendererVersion_IsCompatible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererVersion_IsCompatible[1] = {{ wxLua_wxRendererVersion_IsCompatible, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRendererVersion_IsCompatible }};
//     static bool IsCompatible(const wxRendererVersion& ver)
static int LUACALL wxLua_wxRendererVersion_IsCompatible(lua_State *L)
{
    // const wxRendererVersion ver
    const wxRendererVersion * ver = (const wxRendererVersion *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererVersion);
    // call IsCompatible
    bool returns = (wxRendererVersion::IsCompatible(*ver));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererVersion_delete[] = { &wxluatype_wxRendererVersion, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererVersion_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRendererVersion_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererVersion_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRendererVersion_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererVersion_constructor[1] = {{ wxLua_wxRendererVersion_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxRendererVersion_constructor }};
//     wxRendererVersion(int version_, int age_)
static int LUACALL wxLua_wxRendererVersion_constructor(lua_State *L)
{
    // int age_
    int age_ = (int)wxlua_getnumbertype(L, 2);
    // int version_
    int version_ = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxRendererVersion* returns = new wxRendererVersion(version_, age_);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRendererVersion((wxRendererVersion*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRendererVersion);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRendererVersion_methods[] = {
    // %member    { "Get_age", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRendererVersion_Get_age, 1, NULL },
    // %member    { "Get_version", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRendererVersion_Get_version, 1, NULL },
    { "IsCompatible", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRendererVersion_IsCompatible, 1, NULL },
    { "age", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRendererVersion_Get_age, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRendererVersion_delete, 1, NULL },
    { "version", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRendererVersion_Get_version, 1, NULL },
    { "wxRendererVersion", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRendererVersion_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRendererVersion_methodCount = sizeof(wxRendererVersion_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxRendererVersion_enums[] = {
#if wxLUA_USE_wxRenderer
        { "Current_Age", wxRendererVersion::Current_Age },
        { "Current_Version", wxRendererVersion::Current_Version },
#endif // wxLUA_USE_wxRenderer

    { NULL, 0, },
};
int wxRendererVersion_enumCount = sizeof(wxRendererVersion_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // wxLUA_USE_wxRenderer


#if wxLUA_USE_wxRenderer
// ---------------------------------------------------------------------------
// Bind class wxRendererNative
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRendererNative'
int wxluatype_wxRendererNative = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxRenderer) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererNative_DrawCheckBox[] = { &wxluatype_wxRendererNative, &wxluatype_wxWindow, &wxluatype_wxDC, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRendererNative_DrawCheckBox(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_DrawCheckBox[1] = {{ wxLua_wxRendererNative_DrawCheckBox, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRendererNative_DrawCheckBox }};
//     virtual void DrawCheckBox(wxWindow *win, wxDC& dc, const wxRect& rect, int flags = 0) //= 0;
static int LUACALL wxLua_wxRendererNative_DrawCheckBox(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRendererNative * self = (wxRendererNative *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererNative);
    // call DrawCheckBox
    self->DrawCheckBox(win, *dc, *rect, flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererNative_DrawComboBoxDropButton[] = { &wxluatype_wxRendererNative, &wxluatype_wxWindow, &wxluatype_wxDC, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRendererNative_DrawComboBoxDropButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_DrawComboBoxDropButton[1] = {{ wxLua_wxRendererNative_DrawComboBoxDropButton, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRendererNative_DrawComboBoxDropButton }};
//     virtual void DrawComboBoxDropButton(wxWindow *win, wxDC& dc, const wxRect& rect, int flags = 0) //= 0;
static int LUACALL wxLua_wxRendererNative_DrawComboBoxDropButton(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRendererNative * self = (wxRendererNative *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererNative);
    // call DrawComboBoxDropButton
    self->DrawComboBoxDropButton(win, *dc, *rect, flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererNative_DrawDropArrow[] = { &wxluatype_wxRendererNative, &wxluatype_wxWindow, &wxluatype_wxDC, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRendererNative_DrawDropArrow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_DrawDropArrow[1] = {{ wxLua_wxRendererNative_DrawDropArrow, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRendererNative_DrawDropArrow }};
//     virtual void DrawDropArrow(wxWindow *win, wxDC& dc, const wxRect& rect, int flags = 0) //= 0;
static int LUACALL wxLua_wxRendererNative_DrawDropArrow(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRendererNative * self = (wxRendererNative *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererNative);
    // call DrawDropArrow
    self->DrawDropArrow(win, *dc, *rect, flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererNative_DrawHeaderButton[] = { &wxluatype_wxRendererNative, &wxluatype_wxWindow, &wxluatype_wxDC, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_wxHeaderButtonParams, NULL };
static int LUACALL wxLua_wxRendererNative_DrawHeaderButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_DrawHeaderButton[1] = {{ wxLua_wxRendererNative_DrawHeaderButton, WXLUAMETHOD_METHOD, 4, 7, s_wxluatypeArray_wxLua_wxRendererNative_DrawHeaderButton }};
//     virtual int  DrawHeaderButton(wxWindow *win, wxDC& dc, const wxRect& rect, int flags = 0, wxHeaderSortIconType sortArrow = wxHDR_SORT_ICON_NONE, wxHeaderButtonParams* params=NULL) //= 0;
static int LUACALL wxLua_wxRendererNative_DrawHeaderButton(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxHeaderButtonParams params = NULL
    wxHeaderButtonParams * params = (argCount >= 7 ? (wxHeaderButtonParams *)wxluaT_getuserdatatype(L, 7, wxluatype_wxHeaderButtonParams) : NULL);
    // wxHeaderSortIconType sortArrow = wxHDR_SORT_ICON_NONE
    wxHeaderSortIconType sortArrow = (argCount >= 6 ? (wxHeaderSortIconType)wxlua_getenumtype(L, 6) : wxHDR_SORT_ICON_NONE);
    // int flags = 0
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRendererNative * self = (wxRendererNative *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererNative);
    // call DrawHeaderButton
    int returns = (self->DrawHeaderButton(win, *dc, *rect, flags, sortArrow, params));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererNative_DrawHeaderButtonContents[] = { &wxluatype_wxRendererNative, &wxluatype_wxWindow, &wxluatype_wxDC, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_wxHeaderButtonParams, NULL };
static int LUACALL wxLua_wxRendererNative_DrawHeaderButtonContents(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_DrawHeaderButtonContents[1] = {{ wxLua_wxRendererNative_DrawHeaderButtonContents, WXLUAMETHOD_METHOD, 4, 7, s_wxluatypeArray_wxLua_wxRendererNative_DrawHeaderButtonContents }};
//     virtual int  DrawHeaderButtonContents(wxWindow *win, wxDC& dc, const wxRect& rect, int flags = 0, wxHeaderSortIconType sortArrow = wxHDR_SORT_ICON_NONE, wxHeaderButtonParams* params=NULL) //= 0;
static int LUACALL wxLua_wxRendererNative_DrawHeaderButtonContents(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxHeaderButtonParams params = NULL
    wxHeaderButtonParams * params = (argCount >= 7 ? (wxHeaderButtonParams *)wxluaT_getuserdatatype(L, 7, wxluatype_wxHeaderButtonParams) : NULL);
    // wxHeaderSortIconType sortArrow = wxHDR_SORT_ICON_NONE
    wxHeaderSortIconType sortArrow = (argCount >= 6 ? (wxHeaderSortIconType)wxlua_getenumtype(L, 6) : wxHDR_SORT_ICON_NONE);
    // int flags = 0
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRendererNative * self = (wxRendererNative *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererNative);
    // call DrawHeaderButtonContents
    int returns = (self->DrawHeaderButtonContents(win, *dc, *rect, flags, sortArrow, params));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererNative_DrawItemSelectionRect[] = { &wxluatype_wxRendererNative, &wxluatype_wxWindow, &wxluatype_wxDC, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRendererNative_DrawItemSelectionRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_DrawItemSelectionRect[1] = {{ wxLua_wxRendererNative_DrawItemSelectionRect, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRendererNative_DrawItemSelectionRect }};
//     virtual void DrawItemSelectionRect(wxWindow *win, wxDC& dc, const wxRect& rect, int flags = 0) //= 0;
static int LUACALL wxLua_wxRendererNative_DrawItemSelectionRect(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRendererNative * self = (wxRendererNative *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererNative);
    // call DrawItemSelectionRect
    self->DrawItemSelectionRect(win, *dc, *rect, flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererNative_DrawPushButton[] = { &wxluatype_wxRendererNative, &wxluatype_wxWindow, &wxluatype_wxDC, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRendererNative_DrawPushButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_DrawPushButton[1] = {{ wxLua_wxRendererNative_DrawPushButton, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRendererNative_DrawPushButton }};
//     virtual void DrawPushButton(wxWindow *win, wxDC& dc, const wxRect& rect, int flags = 0) //= 0;
static int LUACALL wxLua_wxRendererNative_DrawPushButton(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRendererNative * self = (wxRendererNative *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererNative);
    // call DrawPushButton
    self->DrawPushButton(win, *dc, *rect, flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererNative_DrawSplitterBorder[] = { &wxluatype_wxRendererNative, &wxluatype_wxWindow, &wxluatype_wxDC, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRendererNative_DrawSplitterBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_DrawSplitterBorder[1] = {{ wxLua_wxRendererNative_DrawSplitterBorder, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRendererNative_DrawSplitterBorder }};
//     virtual void DrawSplitterBorder(wxWindow *win, wxDC& dc, const wxRect& rect, int flags = 0) //= 0;
static int LUACALL wxLua_wxRendererNative_DrawSplitterBorder(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRendererNative * self = (wxRendererNative *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererNative);
    // call DrawSplitterBorder
    self->DrawSplitterBorder(win, *dc, *rect, flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererNative_DrawSplitterSash[] = { &wxluatype_wxRendererNative, &wxluatype_wxWindow, &wxluatype_wxDC, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRendererNative_DrawSplitterSash(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_DrawSplitterSash[1] = {{ wxLua_wxRendererNative_DrawSplitterSash, WXLUAMETHOD_METHOD, 6, 7, s_wxluatypeArray_wxLua_wxRendererNative_DrawSplitterSash }};
//     virtual void DrawSplitterSash(wxWindow *win, wxDC& dc, const wxSize& size, wxCoord position, wxOrientation orient, int flags = 0) //= 0;
static int LUACALL wxLua_wxRendererNative_DrawSplitterSash(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : 0);
    // wxOrientation orient
    wxOrientation orient = (wxOrientation)wxlua_getenumtype(L, 6);
    // wxCoord position
    wxCoord position = (wxCoord)wxlua_getnumbertype(L, 5);
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRendererNative * self = (wxRendererNative *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererNative);
    // call DrawSplitterSash
    self->DrawSplitterSash(win, *dc, *size, position, orient, flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererNative_DrawTreeItemButton[] = { &wxluatype_wxRendererNative, &wxluatype_wxWindow, &wxluatype_wxDC, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRendererNative_DrawTreeItemButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_DrawTreeItemButton[1] = {{ wxLua_wxRendererNative_DrawTreeItemButton, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRendererNative_DrawTreeItemButton }};
//     virtual void DrawTreeItemButton(wxWindow *win, wxDC& dc, const wxRect& rect, int flags = 0) //= 0;
static int LUACALL wxLua_wxRendererNative_DrawTreeItemButton(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRendererNative * self = (wxRendererNative *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererNative);
    // call DrawTreeItemButton
    self->DrawTreeItemButton(win, *dc, *rect, flags);

    return 0;
}

#endif // ((wxLUA_USE_wxRenderer) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxDC)

static int LUACALL wxLua_wxRendererNative_Get(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_Get[1] = {{ wxLua_wxRendererNative_Get, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxRendererNative& Get();
static int LUACALL wxLua_wxRendererNative_Get(lua_State *L)
{
    // call Get
    wxRendererNative* returns = &wxRendererNative::Get();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRendererNative);

    return 1;
}

static int LUACALL wxLua_wxRendererNative_GetDefault(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_GetDefault[1] = {{ wxLua_wxRendererNative_GetDefault, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxRendererNative& GetDefault();
static int LUACALL wxLua_wxRendererNative_GetDefault(lua_State *L)
{
    // call GetDefault
    wxRendererNative* returns = &wxRendererNative::GetDefault();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRendererNative);

    return 1;
}

static int LUACALL wxLua_wxRendererNative_GetGeneric(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_GetGeneric[1] = {{ wxLua_wxRendererNative_GetGeneric, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxRendererNative& GetGeneric();
static int LUACALL wxLua_wxRendererNative_GetGeneric(lua_State *L)
{
    // call GetGeneric
    wxRendererNative* returns = &wxRendererNative::GetGeneric();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRendererNative);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererNative_GetHeaderButtonHeight[] = { &wxluatype_wxRendererNative, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxRendererNative_GetHeaderButtonHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_GetHeaderButtonHeight[1] = {{ wxLua_wxRendererNative_GetHeaderButtonHeight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRendererNative_GetHeaderButtonHeight }};
//     virtual int GetHeaderButtonHeight(wxWindow *win) //= 0;
static int LUACALL wxLua_wxRendererNative_GetHeaderButtonHeight(lua_State *L)
{
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRendererNative * self = (wxRendererNative *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererNative);
    // call GetHeaderButtonHeight
    int returns = (self->GetHeaderButtonHeight(win));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererNative_GetSplitterParams[] = { &wxluatype_wxRendererNative, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxRendererNative_GetSplitterParams(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_GetSplitterParams[1] = {{ wxLua_wxRendererNative_GetSplitterParams, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRendererNative_GetSplitterParams }};
//     virtual wxSplitterRenderParams GetSplitterParams(const wxWindow *win) //= 0;
static int LUACALL wxLua_wxRendererNative_GetSplitterParams(lua_State *L)
{
    // const wxWindow win
    const wxWindow * win = (const wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRendererNative * self = (wxRendererNative *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererNative);
    // call GetSplitterParams
    // allocate a new object using the copy constructor
    wxSplitterRenderParams* returns = new wxSplitterRenderParams(self->GetSplitterParams(win));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSplitterRenderParams((wxSplitterRenderParams*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSplitterRenderParams);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererNative_GetVersion[] = { &wxluatype_wxRendererNative, NULL };
static int LUACALL wxLua_wxRendererNative_GetVersion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_GetVersion[1] = {{ wxLua_wxRendererNative_GetVersion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRendererNative_GetVersion }};
//     virtual wxRendererVersion GetVersion() const //= 0;
static int LUACALL wxLua_wxRendererNative_GetVersion(lua_State *L)
{
    // get this
    wxRendererNative * self = (wxRendererNative *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererNative);
    // call GetVersion
    // allocate a new object using the copy constructor
    wxRendererVersion* returns = new wxRendererVersion(self->GetVersion());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRendererVersion((wxRendererVersion*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRendererVersion);

    return 1;
}


#if ((wxLUA_USE_wxRenderer) && (wxUSE_DYNLIB_CLASS)) && (wxLUA_USE_wxRenderer)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererNative_Load[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRendererNative_Load(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_Load[1] = {{ wxLua_wxRendererNative_Load, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRendererNative_Load }};
//     static %gc wxRendererNative *Load(const wxString& name);
static int LUACALL wxLua_wxRendererNative_Load(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call Load
    wxRendererNative* returns = (wxRendererNative*)wxRendererNative::Load(name);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRendererNative(returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRendererNative);

    return 1;
}

#endif // ((wxLUA_USE_wxRenderer) && (wxUSE_DYNLIB_CLASS)) && (wxLUA_USE_wxRenderer)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererNative_Set[] = { &wxluatype_wxRendererNative, NULL };
static int LUACALL wxLua_wxRendererNative_Set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_Set[1] = {{ wxLua_wxRendererNative_Set, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRendererNative_Set }};
//     static %gc wxRendererNative *Set(%ungc wxRendererNative *renderer);
static int LUACALL wxLua_wxRendererNative_Set(lua_State *L)
{
    // wxRendererNative renderer
    wxRendererNative * renderer = (wxRendererNative *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRendererNative);
    if (wxluaO_isgcobject(L, renderer)) wxluaO_undeletegcobject(L, renderer);
    // call Set
    wxRendererNative* returns = (wxRendererNative*)wxRendererNative::Set(renderer);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRendererNative(returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRendererNative);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRendererNative_delete[] = { &wxluatype_wxRendererNative, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRendererNative_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRendererNative_delete }};




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRendererNative_methods[] = {
#if ((wxLUA_USE_wxRenderer) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxDC)
    { "DrawCheckBox", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRendererNative_DrawCheckBox, 1, NULL },
    { "DrawComboBoxDropButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRendererNative_DrawComboBoxDropButton, 1, NULL },
    { "DrawDropArrow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRendererNative_DrawDropArrow, 1, NULL },
    { "DrawHeaderButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRendererNative_DrawHeaderButton, 1, NULL },
    { "DrawHeaderButtonContents", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRendererNative_DrawHeaderButtonContents, 1, NULL },
    { "DrawItemSelectionRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRendererNative_DrawItemSelectionRect, 1, NULL },
    { "DrawPushButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRendererNative_DrawPushButton, 1, NULL },
    { "DrawSplitterBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRendererNative_DrawSplitterBorder, 1, NULL },
    { "DrawSplitterSash", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRendererNative_DrawSplitterSash, 1, NULL },
    { "DrawTreeItemButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRendererNative_DrawTreeItemButton, 1, NULL },
#endif // ((wxLUA_USE_wxRenderer) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxDC)

    { "Get", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRendererNative_Get, 1, NULL },
    { "GetDefault", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRendererNative_GetDefault, 1, NULL },
    { "GetGeneric", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRendererNative_GetGeneric, 1, NULL },
    { "GetHeaderButtonHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRendererNative_GetHeaderButtonHeight, 1, NULL },
    { "GetSplitterParams", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRendererNative_GetSplitterParams, 1, NULL },
    { "GetVersion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRendererNative_GetVersion, 1, NULL },

#if ((wxLUA_USE_wxRenderer) && (wxUSE_DYNLIB_CLASS)) && (wxLUA_USE_wxRenderer)
    { "Load", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRendererNative_Load, 1, NULL },
#endif // ((wxLUA_USE_wxRenderer) && (wxUSE_DYNLIB_CLASS)) && (wxLUA_USE_wxRenderer)

    { "Set", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRendererNative_Set, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRendererNative_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRendererNative_methodCount = sizeof(wxRendererNative_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRenderer

