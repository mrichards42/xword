// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxcore_event.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxcore_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif


// ---------------------------------------------------------------------------
// Bind class wxEvtHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxEvtHandler'
int wxluatype_wxEvtHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvtHandler_AddPendingEvent[] = { &wxluatype_wxEvtHandler, &wxluatype_wxEvent, NULL };
static int LUACALL wxLua_wxEvtHandler_AddPendingEvent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvtHandler_AddPendingEvent[1] = {{ wxLua_wxEvtHandler_AddPendingEvent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEvtHandler_AddPendingEvent }};
//     void AddPendingEvent(wxEvent& event)
static int LUACALL wxLua_wxEvtHandler_AddPendingEvent(lua_State *L)
{
    // wxEvent event
    wxEvent * event = (wxEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxEvent);
    // get this
    wxEvtHandler * self = (wxEvtHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvtHandler);
    // call AddPendingEvent
    self->AddPendingEvent(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvtHandler_Connect[] = { &wxluatype_wxEvtHandler, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TFUNCTION, NULL };
static int LUACALL wxLua_wxEvtHandler_Connect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvtHandler_Connect[1] = {{ wxLua_wxEvtHandler_Connect, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxEvtHandler_Connect }};
// %override wxLua_wxEvtHandler_Connect
// void Connect(int id, int lastId, wxEventType eventType, LuaFunction func)

#include "wxlua/include/wxlcallb.h"
// Connect an event to a handler. This Lua 'C' function supports
// function calls with either three or four parameters. These parameters
// are:         The class (which must be derived from wxEvtHandler),
//              The event type
// (Optional)   The ID of the object the event is for
//              A Lua function to call to handle the event.
//              The Lua function gets called with a single parameter
//              which is a reference to the event object
//              associated with the event.
static int LUACALL wxLua_wxEvtHandler_Connect(lua_State *L)
{
    wxCHECK_MSG(wxluatype_wxEvtHandler != -1, 0, wxT("wxEvtHandler is not wrapped by wxLua"));
    wxLuaState wxlState(L);
    wxCHECK_MSG(wxlState.Ok(), 0, wxT("Invalid wxLuaState"));

    wxWindowID  winId     = wxID_ANY;
    wxWindowID  lastId    = wxID_ANY;
    wxEventType eventType = wxEVT_NULL;

    int nParams = lua_gettop(L);

    wxEvtHandler *evtHandler = (wxEvtHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvtHandler);

    int func_idx = 0;
    int evttype_idx = 0;

    switch (nParams)
    {
        case 5:
        {
            //void Connect(int winid, int lastId, int eventType, wxObjectEventFunction func, wxObject *userData = (wxObject *) NULL, wxEvtHandler *eventSink = (wxEvtHandler *) NULL);
            func_idx = 5;
            evttype_idx = 4;

            if (wxlua_isintegertype(L, 3))
                lastId = (wxWindowID)lua_tonumber(L, 3);
            else
            {
                wxlua_argerror(L, 3, wxT("an 'integer wxWindowID'"));
                return 0;
            }

            if (wxlua_isintegertype(L, 2))
                winId = (wxWindowID)lua_tonumber(L, 2);
            else
            {
                wxlua_argerror(L, 2, wxT("an 'integer wxWindowID'"));
                return 0;
            }

            break;
        }
        case 4:
        {
            //void Connect(int winid, int eventType, wxObjectEventFunction func, wxObject *userData = (wxObject *) NULL, wxEvtHandler *eventSink = (wxEvtHandler *) NULL)
            func_idx = 4;
            evttype_idx = 3;

            if (wxlua_isintegertype(L, 2))
                winId  = (wxWindowID)lua_tonumber(L, 2);
            else
            {
                wxlua_argerror(L, 2, wxT("an 'integer wxWindowID'"));
                return 0;
            }

            break;
        }
        case 3:
        {
            //void Connect(int eventType, wxObjectEventFunction func, wxObject *userData = (wxObject *) NULL, wxEvtHandler *eventSink = (wxEvtHandler *) NULL)
            func_idx = 3;
            evttype_idx = 2;
/*
            // Is this right? wxWidgets just uses wxID_ANY for no winId overload
            if (evtHandler->IsKindOf(CLASSINFO(wxWindow)))
            {
                // FIXME! bug in Mac this is the fix
#if !defined(__WXMAC__) || wxCHECK_VERSION(2,6,0)
                winId = ((wxWindow *)evtHandler)->GetId();
                wxPrintf(wxT("winId %d\n"), winId);
#endif
            }
            else
            {
                wxlua_error(L, "wxLua: Connect: Unexpected event object type, expected a wxWindow.");
                return 0;
            }
*/
            break;
        }
        default:
        {
            wxlua_argerrormsg(L, wxT("Incorrect number of arguments to wxEventHandler::Connect()."));
            return 0;
        }
    }

    if (!lua_isfunction(L, func_idx))
    {
        wxlua_argerror(L, func_idx, wxT("a 'Lua function'"));
        return 0;
    }

    if (wxlua_isintegertype(L, evttype_idx))
        eventType = (wxEventType)lua_tonumber(L, evttype_idx);
    else
    {
        wxlua_argerror(L, evttype_idx, wxT("an 'integer wxEventType'"));
        return 0;
    }

    // Create and connect the callback
    wxLuaEventCallback* pCallback = new wxLuaEventCallback;
    wxString errMsg(pCallback->Connect(wxlState, func_idx, winId, lastId, eventType, evtHandler));
    if (!errMsg.IsEmpty())
    {
        delete pCallback;
        wxlua_error(L, errMsg);
    }

    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxEvtHandler_Disconnect[] = { &wxluatype_wxEvtHandler, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxEvtHandler_Disconnect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvtHandler_Disconnect[1] = {{ wxLua_wxEvtHandler_Disconnect, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxEvtHandler_Disconnect }};
// %override wxLua_wxEvtHandler_Disconnect
// void Disconnect(int id, int lastId, wxEventType eventType)

#include "wxlua/include/wxlcallb.h"
static int LUACALL wxLua_wxEvtHandler_Disconnect(lua_State *L)
{
    wxCHECK_MSG(wxluatype_wxEvtHandler != -1, 0, wxT("wxEvtHandler is not wrapped by wxLua"));
    wxLuaState wxlState(L);
    wxCHECK_MSG(wxlState.Ok(), 0, wxT("Invalid wxLuaState"));

    wxWindowID  winId     = wxID_ANY;
    wxWindowID  lastId    = wxID_ANY;
    wxEventType eventType = wxEVT_NULL;

    int nParams = lua_gettop(L);

    wxEvtHandler *evtHandler = (wxEvtHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvtHandler);

    int evttype_idx = 0;

    switch (nParams)
    {
        case 4:
        {
            //bool Disconnect(int winid, int lastId, wxEventType eventType, wxObjectEventFunction func = NULL, wxObject *userData = (wxObject *) NULL, wxEvtHandler *eventSink = (wxEvtHandler *) NULL);
            evttype_idx = 4;

            if (wxlua_isintegertype(L, 3))
                lastId = (wxWindowID)lua_tonumber(L, 3);
            else
            {
                wxlua_argerror(L, 3, wxT("an 'integer wxWindowID'"));
                return 0;
            }

            if (wxlua_isintegertype(L, 2))
                winId = (wxWindowID)lua_tonumber(L, 2);
            else
            {
                wxlua_argerror(L, 2, wxT("an 'integer wxWindowID'"));
                return 0;
            }

            break;
        }
        case 3:
        {
            //bool Disconnect(int winid = wxID_ANY, wxEventType eventType = wxEVT_NULL, wxObjectEventFunction func = NULL, wxObject *userData = (wxObject *) NULL, wxEvtHandler *eventSink = (wxEvtHandler *) NULL)
            evttype_idx = 3;

            if (wxlua_isintegertype(L, 2))
                winId  = (wxWindowID)lua_tonumber(L, 2);
            else
            {
                wxlua_argerror(L, 1, wxT("an 'integer wxWindowID'"));
                return 0;
            }

            break;
        }
        case 2:
        {
            //bool Disconnect(wxEventType eventType, wxObjectEventFunction func, wxObject *userData = (wxObject *) NULL, wxEvtHandler *eventSink = (wxEvtHandler *) NULL)
            evttype_idx = 2;

            break;
        }
        default:
        {
            wxlua_argerrormsg(L, wxT("Incorrect number of arguments to wxEventHandler::Disconnect()."));
            return 0;
        }
    }

    if (wxlua_isintegertype(L, evttype_idx))
        eventType = (wxEventType)lua_tonumber(L, evttype_idx);
    else
    {
        wxlua_argerror(L, evttype_idx, wxT("an 'integer wxEventType'"));
        return 0;
    }

    // Try to disconnect from the callback, it will delete the wxLuaEventCallback.
    bool returns = evtHandler->Disconnect(winId, lastId, eventType, (wxObjectEventFunction)&wxLuaEventCallback::OnAllEvents);

    lua_pushboolean(L, returns);
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxEvtHandler_GetClientData[] = { &wxluatype_wxEvtHandler, NULL };
static int LUACALL wxLua_wxEvtHandler_GetClientData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvtHandler_GetClientData[1] = {{ wxLua_wxEvtHandler_GetClientData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEvtHandler_GetClientData }};
//     voidptr_long GetClientData() // C++ returns (void *) You get a number here
static int LUACALL wxLua_wxEvtHandler_GetClientData(lua_State *L)
{
    // get this
    wxEvtHandler * self = (wxEvtHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvtHandler);
    // call GetClientData
    long  returns = (long )self->GetClientData();
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvtHandler_GetClientObject[] = { &wxluatype_wxEvtHandler, NULL };
static int LUACALL wxLua_wxEvtHandler_GetClientObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvtHandler_GetClientObject[1] = {{ wxLua_wxEvtHandler_GetClientObject, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEvtHandler_GetClientObject }};
//     wxClientData* GetClientObject() const
static int LUACALL wxLua_wxEvtHandler_GetClientObject(lua_State *L)
{
    // get this
    wxEvtHandler * self = (wxEvtHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvtHandler);
    // call GetClientObject
    wxClientData* returns = (wxClientData*)self->GetClientObject();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClientData);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvtHandler_GetEvtHandlerEnabled[] = { &wxluatype_wxEvtHandler, NULL };
static int LUACALL wxLua_wxEvtHandler_GetEvtHandlerEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvtHandler_GetEvtHandlerEnabled[1] = {{ wxLua_wxEvtHandler_GetEvtHandlerEnabled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEvtHandler_GetEvtHandlerEnabled }};
//     bool GetEvtHandlerEnabled()
static int LUACALL wxLua_wxEvtHandler_GetEvtHandlerEnabled(lua_State *L)
{
    // get this
    wxEvtHandler * self = (wxEvtHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvtHandler);
    // call GetEvtHandlerEnabled
    bool returns = (self->GetEvtHandlerEnabled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvtHandler_GetNextHandler[] = { &wxluatype_wxEvtHandler, NULL };
static int LUACALL wxLua_wxEvtHandler_GetNextHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvtHandler_GetNextHandler[1] = {{ wxLua_wxEvtHandler_GetNextHandler, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEvtHandler_GetNextHandler }};
//     wxEvtHandler* GetNextHandler()
static int LUACALL wxLua_wxEvtHandler_GetNextHandler(lua_State *L)
{
    // get this
    wxEvtHandler * self = (wxEvtHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvtHandler);
    // call GetNextHandler
    wxEvtHandler* returns = (wxEvtHandler*)self->GetNextHandler();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxEvtHandler);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvtHandler_GetPreviousHandler[] = { &wxluatype_wxEvtHandler, NULL };
static int LUACALL wxLua_wxEvtHandler_GetPreviousHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvtHandler_GetPreviousHandler[1] = {{ wxLua_wxEvtHandler_GetPreviousHandler, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEvtHandler_GetPreviousHandler }};
//     wxEvtHandler* GetPreviousHandler()
static int LUACALL wxLua_wxEvtHandler_GetPreviousHandler(lua_State *L)
{
    // get this
    wxEvtHandler * self = (wxEvtHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvtHandler);
    // call GetPreviousHandler
    wxEvtHandler* returns = (wxEvtHandler*)self->GetPreviousHandler();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxEvtHandler);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvtHandler_ProcessEvent[] = { &wxluatype_wxEvtHandler, &wxluatype_wxEvent, NULL };
static int LUACALL wxLua_wxEvtHandler_ProcessEvent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvtHandler_ProcessEvent[1] = {{ wxLua_wxEvtHandler_ProcessEvent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEvtHandler_ProcessEvent }};
//     virtual bool ProcessEvent(wxEvent& event)
static int LUACALL wxLua_wxEvtHandler_ProcessEvent(lua_State *L)
{
    // wxEvent event
    wxEvent * event = (wxEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxEvent);
    // get this
    wxEvtHandler * self = (wxEvtHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvtHandler);
    // call ProcessEvent
    bool returns = (self->ProcessEvent(*event));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvtHandler_SetClientData[] = { &wxluatype_wxEvtHandler, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxEvtHandler_SetClientData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvtHandler_SetClientData[1] = {{ wxLua_wxEvtHandler_SetClientData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEvtHandler_SetClientData }};
//     void SetClientData(voidptr_long number) // C++ is (void *clientData) You can put a number here
static int LUACALL wxLua_wxEvtHandler_SetClientData(lua_State *L)
{
    // voidptr_long number
    long number = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxEvtHandler * self = (wxEvtHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvtHandler);
    // call SetClientData
    self->SetClientData((void*)number);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvtHandler_SetClientObject[] = { &wxluatype_wxEvtHandler, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxEvtHandler_SetClientObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvtHandler_SetClientObject[1] = {{ wxLua_wxEvtHandler_SetClientObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEvtHandler_SetClientObject }};
//     void SetClientObject(wxClientData* data)
static int LUACALL wxLua_wxEvtHandler_SetClientObject(lua_State *L)
{
    // wxClientData data
    wxClientData * data = (wxClientData *)wxluaT_getuserdatatype(L, 2, wxluatype_wxClientData);
    // get this
    wxEvtHandler * self = (wxEvtHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvtHandler);
    // call SetClientObject
    self->SetClientObject(data);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvtHandler_SetEvtHandlerEnabled[] = { &wxluatype_wxEvtHandler, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxEvtHandler_SetEvtHandlerEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvtHandler_SetEvtHandlerEnabled[1] = {{ wxLua_wxEvtHandler_SetEvtHandlerEnabled, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEvtHandler_SetEvtHandlerEnabled }};
//     void SetEvtHandlerEnabled(bool enabled)
static int LUACALL wxLua_wxEvtHandler_SetEvtHandlerEnabled(lua_State *L)
{
    // bool enabled
    bool enabled = wxlua_getbooleantype(L, 2);
    // get this
    wxEvtHandler * self = (wxEvtHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvtHandler);
    // call SetEvtHandlerEnabled
    self->SetEvtHandlerEnabled(enabled);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvtHandler_SetNextHandler[] = { &wxluatype_wxEvtHandler, &wxluatype_wxEvtHandler, NULL };
static int LUACALL wxLua_wxEvtHandler_SetNextHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvtHandler_SetNextHandler[1] = {{ wxLua_wxEvtHandler_SetNextHandler, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEvtHandler_SetNextHandler }};
//     void SetNextHandler(wxEvtHandler* handler)
static int LUACALL wxLua_wxEvtHandler_SetNextHandler(lua_State *L)
{
    // wxEvtHandler handler
    wxEvtHandler * handler = (wxEvtHandler *)wxluaT_getuserdatatype(L, 2, wxluatype_wxEvtHandler);
    // get this
    wxEvtHandler * self = (wxEvtHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvtHandler);
    // call SetNextHandler
    self->SetNextHandler(handler);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvtHandler_SetPreviousHandler[] = { &wxluatype_wxEvtHandler, &wxluatype_wxEvtHandler, NULL };
static int LUACALL wxLua_wxEvtHandler_SetPreviousHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvtHandler_SetPreviousHandler[1] = {{ wxLua_wxEvtHandler_SetPreviousHandler, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEvtHandler_SetPreviousHandler }};
//     void SetPreviousHandler(wxEvtHandler* handler)
static int LUACALL wxLua_wxEvtHandler_SetPreviousHandler(lua_State *L)
{
    // wxEvtHandler handler
    wxEvtHandler * handler = (wxEvtHandler *)wxluaT_getuserdatatype(L, 2, wxluatype_wxEvtHandler);
    // get this
    wxEvtHandler * self = (wxEvtHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvtHandler);
    // call SetPreviousHandler
    self->SetPreviousHandler(handler);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvtHandler_delete[] = { &wxluatype_wxEvtHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvtHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxEvtHandler_delete }};

static int LUACALL wxLua_wxEvtHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvtHandler_constructor[1] = {{ wxLua_wxEvtHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxEvtHandler()
static int LUACALL wxLua_wxEvtHandler_constructor(lua_State *L)
{
    // call constructor
    wxEvtHandler* returns = new wxEvtHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxEvtHandler);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxEvtHandler_methods[] = {
    { "AddPendingEvent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvtHandler_AddPendingEvent, 1, NULL },
    { "Connect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvtHandler_Connect, 1, NULL },
    { "Disconnect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvtHandler_Disconnect, 1, NULL },
    { "GetClientData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvtHandler_GetClientData, 1, NULL },
    { "GetClientObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvtHandler_GetClientObject, 1, NULL },
    { "GetEvtHandlerEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvtHandler_GetEvtHandlerEnabled, 1, NULL },
    { "GetNextHandler", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvtHandler_GetNextHandler, 1, NULL },
    { "GetPreviousHandler", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvtHandler_GetPreviousHandler, 1, NULL },
    { "ProcessEvent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvtHandler_ProcessEvent, 1, NULL },
    { "SetClientData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvtHandler_SetClientData, 1, NULL },
    { "SetClientObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvtHandler_SetClientObject, 1, NULL },
    { "SetEvtHandlerEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvtHandler_SetEvtHandlerEnabled, 1, NULL },
    { "SetNextHandler", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvtHandler_SetNextHandler, 1, NULL },
    { "SetPreviousHandler", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvtHandler_SetPreviousHandler, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxEvtHandler_delete, 1, NULL },
    { "wxEvtHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxEvtHandler_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxEvtHandler_methodCount = sizeof(wxEvtHandler_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxEvent'
int wxluatype_wxEvent = WXLUA_TUNKNOWN;

#if wxLUA_USE_wxObject
static wxLuaArgType s_wxluatypeArray_wxLua_wxEvent_GetEventObject[] = { &wxluatype_wxEvent, NULL };
static int LUACALL wxLua_wxEvent_GetEventObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvent_GetEventObject[1] = {{ wxLua_wxEvent_GetEventObject, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEvent_GetEventObject }};
//     wxObject* GetEventObject()
static int LUACALL wxLua_wxEvent_GetEventObject(lua_State *L)
{
    // get this
    wxEvent * self = (wxEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvent);
    // call GetEventObject
    wxObject* returns = (wxObject*)self->GetEventObject();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxObject);

    return 1;
}

#endif // wxLUA_USE_wxObject

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvent_GetEventType[] = { &wxluatype_wxEvent, NULL };
static int LUACALL wxLua_wxEvent_GetEventType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvent_GetEventType[1] = {{ wxLua_wxEvent_GetEventType, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEvent_GetEventType }};
//     wxEventType GetEventType()
static int LUACALL wxLua_wxEvent_GetEventType(lua_State *L)
{
    // get this
    wxEvent * self = (wxEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvent);
    // call GetEventType
    wxEventType returns = (self->GetEventType());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvent_GetId[] = { &wxluatype_wxEvent, NULL };
static int LUACALL wxLua_wxEvent_GetId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvent_GetId[1] = {{ wxLua_wxEvent_GetId, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEvent_GetId }};
//     int GetId()
static int LUACALL wxLua_wxEvent_GetId(lua_State *L)
{
    // get this
    wxEvent * self = (wxEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvent);
    // call GetId
    int returns = (self->GetId());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvent_GetSkipped[] = { &wxluatype_wxEvent, NULL };
static int LUACALL wxLua_wxEvent_GetSkipped(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvent_GetSkipped[1] = {{ wxLua_wxEvent_GetSkipped, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEvent_GetSkipped }};
//     bool GetSkipped()
static int LUACALL wxLua_wxEvent_GetSkipped(lua_State *L)
{
    // get this
    wxEvent * self = (wxEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvent);
    // call GetSkipped
    bool returns = (self->GetSkipped());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvent_GetTimestamp[] = { &wxluatype_wxEvent, NULL };
static int LUACALL wxLua_wxEvent_GetTimestamp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvent_GetTimestamp[1] = {{ wxLua_wxEvent_GetTimestamp, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEvent_GetTimestamp }};
//     long GetTimestamp()
static int LUACALL wxLua_wxEvent_GetTimestamp(lua_State *L)
{
    // get this
    wxEvent * self = (wxEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvent);
    // call GetTimestamp
    long  returns = (self->GetTimestamp());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvent_IsCommandEvent[] = { &wxluatype_wxEvent, NULL };
static int LUACALL wxLua_wxEvent_IsCommandEvent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvent_IsCommandEvent[1] = {{ wxLua_wxEvent_IsCommandEvent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEvent_IsCommandEvent }};
//     bool IsCommandEvent() const
static int LUACALL wxLua_wxEvent_IsCommandEvent(lua_State *L)
{
    // get this
    wxEvent * self = (wxEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvent);
    // call IsCommandEvent
    bool returns = (self->IsCommandEvent());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvent_ResumePropagation[] = { &wxluatype_wxEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxEvent_ResumePropagation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvent_ResumePropagation[1] = {{ wxLua_wxEvent_ResumePropagation, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEvent_ResumePropagation }};
//     void ResumePropagation(int propagationLevel)
static int LUACALL wxLua_wxEvent_ResumePropagation(lua_State *L)
{
    // int propagationLevel
    int propagationLevel = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxEvent * self = (wxEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvent);
    // call ResumePropagation
    self->ResumePropagation(propagationLevel);

    return 0;
}


#if wxLUA_USE_wxObject
static wxLuaArgType s_wxluatypeArray_wxLua_wxEvent_SetEventObject[] = { &wxluatype_wxEvent, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxEvent_SetEventObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvent_SetEventObject[1] = {{ wxLua_wxEvent_SetEventObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEvent_SetEventObject }};
//     void SetEventObject(wxObject* object)
static int LUACALL wxLua_wxEvent_SetEventObject(lua_State *L)
{
    // wxObject object
    wxObject * object = (wxObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxObject);
    // get this
    wxEvent * self = (wxEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvent);
    // call SetEventObject
    self->SetEventObject(object);

    return 0;
}

#endif // wxLUA_USE_wxObject

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvent_SetEventType[] = { &wxluatype_wxEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxEvent_SetEventType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvent_SetEventType[1] = {{ wxLua_wxEvent_SetEventType, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEvent_SetEventType }};
//     void SetEventType(wxEventType type)
static int LUACALL wxLua_wxEvent_SetEventType(lua_State *L)
{
    // wxEventType type
    wxEventType type = (wxEventType)wxlua_getnumbertype(L, 2);
    // get this
    wxEvent * self = (wxEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvent);
    // call SetEventType
    self->SetEventType(type);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvent_SetId[] = { &wxluatype_wxEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxEvent_SetId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvent_SetId[1] = {{ wxLua_wxEvent_SetId, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEvent_SetId }};
//     void SetId(int id)
static int LUACALL wxLua_wxEvent_SetId(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxEvent * self = (wxEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvent);
    // call SetId
    self->SetId(id);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvent_SetTimestamp[] = { &wxluatype_wxEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxEvent_SetTimestamp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvent_SetTimestamp[1] = {{ wxLua_wxEvent_SetTimestamp, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxEvent_SetTimestamp }};
//     void SetTimestamp(long timeStamp)
static int LUACALL wxLua_wxEvent_SetTimestamp(lua_State *L)
{
    // long timeStamp
    long timeStamp = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxEvent * self = (wxEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvent);
    // call SetTimestamp
    self->SetTimestamp(timeStamp);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvent_ShouldPropagate[] = { &wxluatype_wxEvent, NULL };
static int LUACALL wxLua_wxEvent_ShouldPropagate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvent_ShouldPropagate[1] = {{ wxLua_wxEvent_ShouldPropagate, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEvent_ShouldPropagate }};
//     bool ShouldPropagate() const
static int LUACALL wxLua_wxEvent_ShouldPropagate(lua_State *L)
{
    // get this
    wxEvent * self = (wxEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvent);
    // call ShouldPropagate
    bool returns = (self->ShouldPropagate());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvent_Skip[] = { &wxluatype_wxEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxEvent_Skip(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvent_Skip[1] = {{ wxLua_wxEvent_Skip, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxEvent_Skip }};
//     void Skip(bool skip = true)
static int LUACALL wxLua_wxEvent_Skip(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool skip = true
    bool skip = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxEvent * self = (wxEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvent);
    // call Skip
    self->Skip(skip);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvent_StopPropagation[] = { &wxluatype_wxEvent, NULL };
static int LUACALL wxLua_wxEvent_StopPropagation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvent_StopPropagation[1] = {{ wxLua_wxEvent_StopPropagation, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEvent_StopPropagation }};
//     int StopPropagation()
static int LUACALL wxLua_wxEvent_StopPropagation(lua_State *L)
{
    // get this
    wxEvent * self = (wxEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvent);
    // call StopPropagation
    int returns = (self->StopPropagation());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxEvent_delete[] = { &wxluatype_wxEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxEvent_delete }};



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxEvent_methods[] = {
#if wxLUA_USE_wxObject
    { "GetEventObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvent_GetEventObject, 1, NULL },
#endif // wxLUA_USE_wxObject

    { "GetEventType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvent_GetEventType, 1, NULL },
    { "GetId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvent_GetId, 1, NULL },
    { "GetSkipped", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvent_GetSkipped, 1, NULL },
    { "GetTimestamp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvent_GetTimestamp, 1, NULL },
    { "IsCommandEvent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvent_IsCommandEvent, 1, NULL },
    { "ResumePropagation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvent_ResumePropagation, 1, NULL },

#if wxLUA_USE_wxObject
    { "SetEventObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvent_SetEventObject, 1, NULL },
#endif // wxLUA_USE_wxObject

    { "SetEventType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvent_SetEventType, 1, NULL },
    { "SetId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvent_SetId, 1, NULL },
    { "SetTimestamp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvent_SetTimestamp, 1, NULL },
    { "ShouldPropagate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvent_ShouldPropagate, 1, NULL },
    { "Skip", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvent_Skip, 1, NULL },
    { "StopPropagation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEvent_StopPropagation, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxEvent_delete, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxEvent_methodCount = sizeof(wxEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxPropagationDisabler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPropagationDisabler'
int wxluatype_wxPropagationDisabler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxPropagationDisabler_delete[] = { &wxluatype_wxPropagationDisabler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPropagationDisabler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxPropagationDisabler_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxPropagationDisabler_constructor[] = { &wxluatype_wxEvent, NULL };
static int LUACALL wxLua_wxPropagationDisabler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPropagationDisabler_constructor[1] = {{ wxLua_wxPropagationDisabler_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxPropagationDisabler_constructor }};
//     wxPropagationDisabler(wxEvent& event)
static int LUACALL wxLua_wxPropagationDisabler_constructor(lua_State *L)
{
    // wxEvent event
    wxEvent * event = (wxEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvent);
    // call constructor
    wxPropagationDisabler* returns = new wxPropagationDisabler(*event);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPropagationDisabler((wxPropagationDisabler*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPropagationDisabler);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPropagationDisabler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxPropagationDisabler_delete, 1, NULL },
    { "wxPropagationDisabler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxPropagationDisabler_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxPropagationDisabler_methodCount = sizeof(wxPropagationDisabler_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxPropagateOnce
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPropagateOnce'
int wxluatype_wxPropagateOnce = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxPropagateOnce_delete[] = { &wxluatype_wxPropagateOnce, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPropagateOnce_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxPropagateOnce_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxPropagateOnce_constructor[] = { &wxluatype_wxEvent, NULL };
static int LUACALL wxLua_wxPropagateOnce_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPropagateOnce_constructor[1] = {{ wxLua_wxPropagateOnce_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxPropagateOnce_constructor }};
//     wxPropagateOnce(wxEvent& event)
static int LUACALL wxLua_wxPropagateOnce_constructor(lua_State *L)
{
    // wxEvent event
    wxEvent * event = (wxEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEvent);
    // call constructor
    wxPropagateOnce* returns = new wxPropagateOnce(*event);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPropagateOnce((wxPropagateOnce*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPropagateOnce);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPropagateOnce_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxPropagateOnce_delete, 1, NULL },
    { "wxPropagateOnce", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxPropagateOnce_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxPropagateOnce_methodCount = sizeof(wxPropagateOnce_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxCommandEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxCommandEvent'
int wxluatype_wxCommandEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxCommandEvent_GetClientData[] = { &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxCommandEvent_GetClientData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCommandEvent_GetClientData[1] = {{ wxLua_wxCommandEvent_GetClientData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCommandEvent_GetClientData }};
//     voidptr_long GetClientData() // C++ returns (void *) You get a number here
static int LUACALL wxLua_wxCommandEvent_GetClientData(lua_State *L)
{
    // get this
    wxCommandEvent * self = (wxCommandEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCommandEvent);
    // call GetClientData
    long  returns = (long )self->GetClientData();
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCommandEvent_GetClientObject[] = { &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxCommandEvent_GetClientObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCommandEvent_GetClientObject[1] = {{ wxLua_wxCommandEvent_GetClientObject, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCommandEvent_GetClientObject }};
//     wxClientData* GetClientObject()
static int LUACALL wxLua_wxCommandEvent_GetClientObject(lua_State *L)
{
    // get this
    wxCommandEvent * self = (wxCommandEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCommandEvent);
    // call GetClientObject
    wxClientData* returns = (wxClientData*)self->GetClientObject();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClientData);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCommandEvent_GetExtraLong[] = { &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxCommandEvent_GetExtraLong(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCommandEvent_GetExtraLong[1] = {{ wxLua_wxCommandEvent_GetExtraLong, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCommandEvent_GetExtraLong }};
//     long GetExtraLong()
static int LUACALL wxLua_wxCommandEvent_GetExtraLong(lua_State *L)
{
    // get this
    wxCommandEvent * self = (wxCommandEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCommandEvent);
    // call GetExtraLong
    long  returns = (self->GetExtraLong());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCommandEvent_GetInt[] = { &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxCommandEvent_GetInt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCommandEvent_GetInt[1] = {{ wxLua_wxCommandEvent_GetInt, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCommandEvent_GetInt }};
//     int GetInt()
static int LUACALL wxLua_wxCommandEvent_GetInt(lua_State *L)
{
    // get this
    wxCommandEvent * self = (wxCommandEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCommandEvent);
    // call GetInt
    int returns = (self->GetInt());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCommandEvent_GetSelection[] = { &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxCommandEvent_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCommandEvent_GetSelection[1] = {{ wxLua_wxCommandEvent_GetSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCommandEvent_GetSelection }};
//     int GetSelection()
static int LUACALL wxLua_wxCommandEvent_GetSelection(lua_State *L)
{
    // get this
    wxCommandEvent * self = (wxCommandEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCommandEvent);
    // call GetSelection
    int returns = (self->GetSelection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCommandEvent_GetString[] = { &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxCommandEvent_GetString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCommandEvent_GetString[1] = {{ wxLua_wxCommandEvent_GetString, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCommandEvent_GetString }};
//     wxString GetString()
static int LUACALL wxLua_wxCommandEvent_GetString(lua_State *L)
{
    // get this
    wxCommandEvent * self = (wxCommandEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCommandEvent);
    // call GetString
    wxString returns = (self->GetString());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCommandEvent_GetStringClientObject[] = { &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxCommandEvent_GetStringClientObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCommandEvent_GetStringClientObject[1] = {{ wxLua_wxCommandEvent_GetStringClientObject, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCommandEvent_GetStringClientObject }};
//     %rename GetStringClientObject wxStringClientData* GetClientObject()
static int LUACALL wxLua_wxCommandEvent_GetStringClientObject(lua_State *L)
{
    // get this
    wxCommandEvent * self = (wxCommandEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCommandEvent);
    // call GetClientObject
    wxStringClientData* returns = (wxStringClientData*)self->GetClientObject();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStringClientData);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCommandEvent_IsChecked[] = { &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxCommandEvent_IsChecked(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCommandEvent_IsChecked[1] = {{ wxLua_wxCommandEvent_IsChecked, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCommandEvent_IsChecked }};
//     bool IsChecked() const
static int LUACALL wxLua_wxCommandEvent_IsChecked(lua_State *L)
{
    // get this
    wxCommandEvent * self = (wxCommandEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCommandEvent);
    // call IsChecked
    bool returns = (self->IsChecked());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCommandEvent_IsSelection[] = { &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxCommandEvent_IsSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCommandEvent_IsSelection[1] = {{ wxLua_wxCommandEvent_IsSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCommandEvent_IsSelection }};
//     bool IsSelection()
static int LUACALL wxLua_wxCommandEvent_IsSelection(lua_State *L)
{
    // get this
    wxCommandEvent * self = (wxCommandEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCommandEvent);
    // call IsSelection
    bool returns = (self->IsSelection());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCommandEvent_SetClientData[] = { &wxluatype_wxCommandEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCommandEvent_SetClientData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCommandEvent_SetClientData[1] = {{ wxLua_wxCommandEvent_SetClientData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCommandEvent_SetClientData }};
//     void SetClientData(voidptr_long number) // C++ is (void *clientData) You can put a number here
static int LUACALL wxLua_wxCommandEvent_SetClientData(lua_State *L)
{
    // voidptr_long number
    long number = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxCommandEvent * self = (wxCommandEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCommandEvent);
    // call SetClientData
    self->SetClientData((void*)number);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCommandEvent_SetExtraLong[] = { &wxluatype_wxCommandEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCommandEvent_SetExtraLong(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCommandEvent_SetExtraLong[1] = {{ wxLua_wxCommandEvent_SetExtraLong, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCommandEvent_SetExtraLong }};
//     void SetExtraLong(int extraLong)
static int LUACALL wxLua_wxCommandEvent_SetExtraLong(lua_State *L)
{
    // int extraLong
    int extraLong = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxCommandEvent * self = (wxCommandEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCommandEvent);
    // call SetExtraLong
    self->SetExtraLong(extraLong);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCommandEvent_SetInt[] = { &wxluatype_wxCommandEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCommandEvent_SetInt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCommandEvent_SetInt[1] = {{ wxLua_wxCommandEvent_SetInt, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCommandEvent_SetInt }};
//     void SetInt(int intCommand)
static int LUACALL wxLua_wxCommandEvent_SetInt(lua_State *L)
{
    // int intCommand
    int intCommand = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxCommandEvent * self = (wxCommandEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCommandEvent);
    // call SetInt
    self->SetInt(intCommand);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCommandEvent_SetString[] = { &wxluatype_wxCommandEvent, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxCommandEvent_SetString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCommandEvent_SetString[1] = {{ wxLua_wxCommandEvent_SetString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCommandEvent_SetString }};
//     void SetString(const wxString &string)
static int LUACALL wxLua_wxCommandEvent_SetString(lua_State *L)
{
    // const wxString string
    const wxString string = wxlua_getwxStringtype(L, 2);
    // get this
    wxCommandEvent * self = (wxCommandEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCommandEvent);
    // call SetString
    self->SetString(string);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCommandEvent_delete[] = { &wxluatype_wxCommandEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCommandEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxCommandEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxCommandEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCommandEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCommandEvent_constructor[1] = {{ wxLua_wxCommandEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxCommandEvent_constructor }};
//     wxCommandEvent(wxEventType commandEventType = wxEVT_NULL, int id = 0)
static int LUACALL wxLua_wxCommandEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType commandEventType = wxEVT_NULL
    wxEventType commandEventType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxCommandEvent* returns = new wxCommandEvent(commandEventType, id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCommandEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxCommandEvent_methods[] = {
    { "GetClientData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCommandEvent_GetClientData, 1, NULL },
    { "GetClientObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCommandEvent_GetClientObject, 1, NULL },
    { "GetExtraLong", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCommandEvent_GetExtraLong, 1, NULL },
    { "GetInt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCommandEvent_GetInt, 1, NULL },
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCommandEvent_GetSelection, 1, NULL },
    { "GetString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCommandEvent_GetString, 1, NULL },
    { "GetStringClientObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCommandEvent_GetStringClientObject, 1, NULL },
    { "IsChecked", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCommandEvent_IsChecked, 1, NULL },
    { "IsSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCommandEvent_IsSelection, 1, NULL },
    { "SetClientData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCommandEvent_SetClientData, 1, NULL },
    { "SetExtraLong", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCommandEvent_SetExtraLong, 1, NULL },
    { "SetInt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCommandEvent_SetInt, 1, NULL },
    { "SetString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCommandEvent_SetString, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxCommandEvent_delete, 1, NULL },
    { "wxCommandEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxCommandEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxCommandEvent_methodCount = sizeof(wxCommandEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxNotifyEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxNotifyEvent'
int wxluatype_wxNotifyEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxNotifyEvent_Allow[] = { &wxluatype_wxNotifyEvent, NULL };
static int LUACALL wxLua_wxNotifyEvent_Allow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotifyEvent_Allow[1] = {{ wxLua_wxNotifyEvent_Allow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNotifyEvent_Allow }};
//     void Allow()
static int LUACALL wxLua_wxNotifyEvent_Allow(lua_State *L)
{
    // get this
    wxNotifyEvent * self = (wxNotifyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNotifyEvent);
    // call Allow
    self->Allow();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNotifyEvent_IsAllowed[] = { &wxluatype_wxNotifyEvent, NULL };
static int LUACALL wxLua_wxNotifyEvent_IsAllowed(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotifyEvent_IsAllowed[1] = {{ wxLua_wxNotifyEvent_IsAllowed, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNotifyEvent_IsAllowed }};
//     bool IsAllowed() const
static int LUACALL wxLua_wxNotifyEvent_IsAllowed(lua_State *L)
{
    // get this
    wxNotifyEvent * self = (wxNotifyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNotifyEvent);
    // call IsAllowed
    bool returns = (self->IsAllowed());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNotifyEvent_Veto[] = { &wxluatype_wxNotifyEvent, NULL };
static int LUACALL wxLua_wxNotifyEvent_Veto(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotifyEvent_Veto[1] = {{ wxLua_wxNotifyEvent_Veto, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNotifyEvent_Veto }};
//     void Veto()
static int LUACALL wxLua_wxNotifyEvent_Veto(lua_State *L)
{
    // get this
    wxNotifyEvent * self = (wxNotifyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNotifyEvent);
    // call Veto
    self->Veto();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNotifyEvent_delete[] = { &wxluatype_wxNotifyEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotifyEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxNotifyEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxNotifyEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxNotifyEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotifyEvent_constructor[1] = {{ wxLua_wxNotifyEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxNotifyEvent_constructor }};
//     wxNotifyEvent(wxEventType eventType = wxEVT_NULL, int id = 0)
static int LUACALL wxLua_wxNotifyEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType eventType = wxEVT_NULL
    wxEventType eventType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxNotifyEvent* returns = new wxNotifyEvent(eventType, id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNotifyEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxNotifyEvent_methods[] = {
    { "Allow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNotifyEvent_Allow, 1, NULL },
    { "IsAllowed", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNotifyEvent_IsAllowed, 1, NULL },
    { "Veto", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNotifyEvent_Veto, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxNotifyEvent_delete, 1, NULL },
    { "wxNotifyEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxNotifyEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxNotifyEvent_methodCount = sizeof(wxNotifyEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxActivateEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxActivateEvent'
int wxluatype_wxActivateEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxActivateEvent_GetActive[] = { &wxluatype_wxActivateEvent, NULL };
static int LUACALL wxLua_wxActivateEvent_GetActive(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxActivateEvent_GetActive[1] = {{ wxLua_wxActivateEvent_GetActive, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxActivateEvent_GetActive }};
//     bool GetActive() const
static int LUACALL wxLua_wxActivateEvent_GetActive(lua_State *L)
{
    // get this
    wxActivateEvent * self = (wxActivateEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxActivateEvent);
    // call GetActive
    bool returns = (self->GetActive());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxActivateEvent_delete[] = { &wxluatype_wxActivateEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxActivateEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxActivateEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxActivateEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxActivateEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxActivateEvent_constructor[1] = {{ wxLua_wxActivateEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxActivateEvent_constructor }};
//     wxActivateEvent(wxEventType eventType = wxEVT_NULL, bool active = true, int id = 0)
static int LUACALL wxLua_wxActivateEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int id = 0
    int id = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // bool active = true
    bool active = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // wxEventType eventType = wxEVT_NULL
    wxEventType eventType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxActivateEvent* returns = new wxActivateEvent(eventType, active, id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxActivateEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxActivateEvent_methods[] = {
    { "GetActive", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxActivateEvent_GetActive, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxActivateEvent_delete, 1, NULL },
    { "wxActivateEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxActivateEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxActivateEvent_methodCount = sizeof(wxActivateEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxCloseEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxCloseEvent'
int wxluatype_wxCloseEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxCloseEvent_CanVeto[] = { &wxluatype_wxCloseEvent, NULL };
static int LUACALL wxLua_wxCloseEvent_CanVeto(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCloseEvent_CanVeto[1] = {{ wxLua_wxCloseEvent_CanVeto, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCloseEvent_CanVeto }};
//     bool CanVeto()
static int LUACALL wxLua_wxCloseEvent_CanVeto(lua_State *L)
{
    // get this
    wxCloseEvent * self = (wxCloseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCloseEvent);
    // call CanVeto
    bool returns = (self->CanVeto());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCloseEvent_GetLoggingOff[] = { &wxluatype_wxCloseEvent, NULL };
static int LUACALL wxLua_wxCloseEvent_GetLoggingOff(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCloseEvent_GetLoggingOff[1] = {{ wxLua_wxCloseEvent_GetLoggingOff, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCloseEvent_GetLoggingOff }};
//     bool GetLoggingOff() const
static int LUACALL wxLua_wxCloseEvent_GetLoggingOff(lua_State *L)
{
    // get this
    wxCloseEvent * self = (wxCloseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCloseEvent);
    // call GetLoggingOff
    bool returns = (self->GetLoggingOff());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCloseEvent_SetCanVeto[] = { &wxluatype_wxCloseEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxCloseEvent_SetCanVeto(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCloseEvent_SetCanVeto[1] = {{ wxLua_wxCloseEvent_SetCanVeto, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCloseEvent_SetCanVeto }};
//     void SetCanVeto(bool canVeto)
static int LUACALL wxLua_wxCloseEvent_SetCanVeto(lua_State *L)
{
    // bool canVeto
    bool canVeto = wxlua_getbooleantype(L, 2);
    // get this
    wxCloseEvent * self = (wxCloseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCloseEvent);
    // call SetCanVeto
    self->SetCanVeto(canVeto);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCloseEvent_SetLoggingOff[] = { &wxluatype_wxCloseEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxCloseEvent_SetLoggingOff(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCloseEvent_SetLoggingOff[1] = {{ wxLua_wxCloseEvent_SetLoggingOff, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCloseEvent_SetLoggingOff }};
//     void SetLoggingOff(bool loggingOff) const
static int LUACALL wxLua_wxCloseEvent_SetLoggingOff(lua_State *L)
{
    // bool loggingOff
    bool loggingOff = wxlua_getbooleantype(L, 2);
    // get this
    wxCloseEvent * self = (wxCloseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCloseEvent);
    // call SetLoggingOff
    self->SetLoggingOff(loggingOff);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCloseEvent_Veto[] = { &wxluatype_wxCloseEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxCloseEvent_Veto(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCloseEvent_Veto[1] = {{ wxLua_wxCloseEvent_Veto, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxCloseEvent_Veto }};
//     void Veto(bool veto = true)
static int LUACALL wxLua_wxCloseEvent_Veto(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool veto = true
    bool veto = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxCloseEvent * self = (wxCloseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCloseEvent);
    // call Veto
    self->Veto(veto);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCloseEvent_delete[] = { &wxluatype_wxCloseEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCloseEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxCloseEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxCloseEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCloseEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCloseEvent_constructor[1] = {{ wxLua_wxCloseEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxCloseEvent_constructor }};
//     wxCloseEvent(wxEventType commandEventType = wxEVT_NULL, int id = 0)
static int LUACALL wxLua_wxCloseEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType commandEventType = wxEVT_NULL
    wxEventType commandEventType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxCloseEvent* returns = new wxCloseEvent(commandEventType, id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCloseEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxCloseEvent_methods[] = {
    { "CanVeto", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCloseEvent_CanVeto, 1, NULL },
    { "GetLoggingOff", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCloseEvent_GetLoggingOff, 1, NULL },
    { "SetCanVeto", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCloseEvent_SetCanVeto, 1, NULL },
    { "SetLoggingOff", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCloseEvent_SetLoggingOff, 1, NULL },
    { "Veto", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCloseEvent_Veto, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxCloseEvent_delete, 1, NULL },
    { "wxCloseEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxCloseEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxCloseEvent_methodCount = sizeof(wxCloseEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxEraseEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxEraseEvent'
int wxluatype_wxEraseEvent = WXLUA_TUNKNOWN;

#if wxLUA_USE_wxDC
static wxLuaArgType s_wxluatypeArray_wxLua_wxEraseEvent_GetDC[] = { &wxluatype_wxEraseEvent, NULL };
static int LUACALL wxLua_wxEraseEvent_GetDC(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEraseEvent_GetDC[1] = {{ wxLua_wxEraseEvent_GetDC, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxEraseEvent_GetDC }};
//     wxDC* GetDC() const
static int LUACALL wxLua_wxEraseEvent_GetDC(lua_State *L)
{
    // get this
    wxEraseEvent * self = (wxEraseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxEraseEvent);
    // call GetDC
    wxDC* returns = (wxDC*)self->GetDC();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDC);

    return 1;
}

#endif // wxLUA_USE_wxDC

static wxLuaArgType s_wxluatypeArray_wxLua_wxEraseEvent_delete[] = { &wxluatype_wxEraseEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEraseEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxEraseEvent_delete }};


#if wxLUA_USE_wxDC
static wxLuaArgType s_wxluatypeArray_wxLua_wxEraseEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxEraseEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxEraseEvent_constructor[1] = {{ wxLua_wxEraseEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxEraseEvent_constructor }};
//     wxEraseEvent(int id = 0, wxDC* dc = NULL)
static int LUACALL wxLua_wxEraseEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxDC dc = NULL
    wxDC * dc = (argCount >= 2 ? (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC) : NULL);
    // int id = 0
    int id = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxEraseEvent* returns = new wxEraseEvent(id, dc);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxEraseEvent);

    return 1;
}

#endif // wxLUA_USE_wxDC



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxEraseEvent_methods[] = {
#if wxLUA_USE_wxDC
    { "GetDC", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxEraseEvent_GetDC, 1, NULL },
#endif // wxLUA_USE_wxDC

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxEraseEvent_delete, 1, NULL },

#if wxLUA_USE_wxDC
    { "wxEraseEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxEraseEvent_constructor, 1, NULL },
#endif // wxLUA_USE_wxDC

    { 0, 0, 0, 0 },
};

int wxEraseEvent_methodCount = sizeof(wxEraseEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxFocusEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFocusEvent'
int wxluatype_wxFocusEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFocusEvent_GetWindow[] = { &wxluatype_wxFocusEvent, NULL };
static int LUACALL wxLua_wxFocusEvent_GetWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFocusEvent_GetWindow[1] = {{ wxLua_wxFocusEvent_GetWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFocusEvent_GetWindow }};
//     wxWindow* GetWindow()
static int LUACALL wxLua_wxFocusEvent_GetWindow(lua_State *L)
{
    // get this
    wxFocusEvent * self = (wxFocusEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFocusEvent);
    // call GetWindow
    wxWindow* returns = (wxWindow*)self->GetWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFocusEvent_SetWindow[] = { &wxluatype_wxFocusEvent, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxFocusEvent_SetWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFocusEvent_SetWindow[1] = {{ wxLua_wxFocusEvent_SetWindow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFocusEvent_SetWindow }};
//     void SetWindow(wxWindow *win)
static int LUACALL wxLua_wxFocusEvent_SetWindow(lua_State *L)
{
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxFocusEvent * self = (wxFocusEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFocusEvent);
    // call SetWindow
    self->SetWindow(win);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFocusEvent_delete[] = { &wxluatype_wxFocusEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFocusEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFocusEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxFocusEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFocusEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFocusEvent_constructor[1] = {{ wxLua_wxFocusEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxFocusEvent_constructor }};
//     wxFocusEvent(wxEventType eventType = wxEVT_NULL, int id = 0)
static int LUACALL wxLua_wxFocusEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType eventType = wxEVT_NULL
    wxEventType eventType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxFocusEvent* returns = new wxFocusEvent(eventType, id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFocusEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFocusEvent_methods[] = {
    { "GetWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFocusEvent_GetWindow, 1, NULL },
    { "SetWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFocusEvent_SetWindow, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFocusEvent_delete, 1, NULL },
    { "wxFocusEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFocusEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxFocusEvent_methodCount = sizeof(wxFocusEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxChildFocusEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxChildFocusEvent'
int wxluatype_wxChildFocusEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxChildFocusEvent_GetWindow[] = { &wxluatype_wxChildFocusEvent, NULL };
static int LUACALL wxLua_wxChildFocusEvent_GetWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxChildFocusEvent_GetWindow[1] = {{ wxLua_wxChildFocusEvent_GetWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxChildFocusEvent_GetWindow }};
//     wxWindow *GetWindow() const
static int LUACALL wxLua_wxChildFocusEvent_GetWindow(lua_State *L)
{
    // get this
    wxChildFocusEvent * self = (wxChildFocusEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxChildFocusEvent);
    // call GetWindow
    wxWindow* returns = (wxWindow*)self->GetWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxChildFocusEvent_delete[] = { &wxluatype_wxChildFocusEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxChildFocusEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxChildFocusEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxChildFocusEvent_constructor[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxChildFocusEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxChildFocusEvent_constructor[1] = {{ wxLua_wxChildFocusEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxChildFocusEvent_constructor }};
//     wxChildFocusEvent(wxWindow *win = NULL)
static int LUACALL wxLua_wxChildFocusEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindow win = NULL
    wxWindow * win = (argCount >= 1 ? (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow) : NULL);
    // call constructor
    wxChildFocusEvent* returns = new wxChildFocusEvent(win);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxChildFocusEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxChildFocusEvent_methods[] = {
    { "GetWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxChildFocusEvent_GetWindow, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxChildFocusEvent_delete, 1, NULL },
    { "wxChildFocusEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxChildFocusEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxChildFocusEvent_methodCount = sizeof(wxChildFocusEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxQueryNewPaletteEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxQueryNewPaletteEvent'
int wxluatype_wxQueryNewPaletteEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxQueryNewPaletteEvent_GetPaletteRealized[] = { &wxluatype_wxQueryNewPaletteEvent, NULL };
static int LUACALL wxLua_wxQueryNewPaletteEvent_GetPaletteRealized(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQueryNewPaletteEvent_GetPaletteRealized[1] = {{ wxLua_wxQueryNewPaletteEvent_GetPaletteRealized, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxQueryNewPaletteEvent_GetPaletteRealized }};
//     bool GetPaletteRealized() const
static int LUACALL wxLua_wxQueryNewPaletteEvent_GetPaletteRealized(lua_State *L)
{
    // get this
    wxQueryNewPaletteEvent * self = (wxQueryNewPaletteEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxQueryNewPaletteEvent);
    // call GetPaletteRealized
    bool returns = (self->GetPaletteRealized());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxQueryNewPaletteEvent_SetPaletteRealized[] = { &wxluatype_wxQueryNewPaletteEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxQueryNewPaletteEvent_SetPaletteRealized(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQueryNewPaletteEvent_SetPaletteRealized[1] = {{ wxLua_wxQueryNewPaletteEvent_SetPaletteRealized, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxQueryNewPaletteEvent_SetPaletteRealized }};
//     void SetPaletteRealized(bool realized)
static int LUACALL wxLua_wxQueryNewPaletteEvent_SetPaletteRealized(lua_State *L)
{
    // bool realized
    bool realized = wxlua_getbooleantype(L, 2);
    // get this
    wxQueryNewPaletteEvent * self = (wxQueryNewPaletteEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxQueryNewPaletteEvent);
    // call SetPaletteRealized
    self->SetPaletteRealized(realized);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxQueryNewPaletteEvent_delete[] = { &wxluatype_wxQueryNewPaletteEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQueryNewPaletteEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxQueryNewPaletteEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxQueryNewPaletteEvent_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxQueryNewPaletteEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQueryNewPaletteEvent_constructor[1] = {{ wxLua_wxQueryNewPaletteEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxQueryNewPaletteEvent_constructor }};
//     wxQueryNewPaletteEvent(wxWindowID winid = 0)
static int LUACALL wxLua_wxQueryNewPaletteEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindowID winid = 0
    wxWindowID winid = (argCount >= 1 ? (wxWindowID)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxQueryNewPaletteEvent* returns = new wxQueryNewPaletteEvent(winid);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxQueryNewPaletteEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxQueryNewPaletteEvent_methods[] = {
    { "GetPaletteRealized", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxQueryNewPaletteEvent_GetPaletteRealized, 1, NULL },
    { "SetPaletteRealized", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxQueryNewPaletteEvent_SetPaletteRealized, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxQueryNewPaletteEvent_delete, 1, NULL },
    { "wxQueryNewPaletteEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxQueryNewPaletteEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxQueryNewPaletteEvent_methodCount = sizeof(wxQueryNewPaletteEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxPaletteChangedEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPaletteChangedEvent'
int wxluatype_wxPaletteChangedEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxPaletteChangedEvent_GetChangedWindow[] = { &wxluatype_wxPaletteChangedEvent, NULL };
static int LUACALL wxLua_wxPaletteChangedEvent_GetChangedWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPaletteChangedEvent_GetChangedWindow[1] = {{ wxLua_wxPaletteChangedEvent_GetChangedWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPaletteChangedEvent_GetChangedWindow }};
//     wxWindow* GetChangedWindow() const
static int LUACALL wxLua_wxPaletteChangedEvent_GetChangedWindow(lua_State *L)
{
    // get this
    wxPaletteChangedEvent * self = (wxPaletteChangedEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPaletteChangedEvent);
    // call GetChangedWindow
    wxWindow* returns = (wxWindow*)self->GetChangedWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPaletteChangedEvent_SetChangedWindow[] = { &wxluatype_wxPaletteChangedEvent, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxPaletteChangedEvent_SetChangedWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPaletteChangedEvent_SetChangedWindow[1] = {{ wxLua_wxPaletteChangedEvent_SetChangedWindow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPaletteChangedEvent_SetChangedWindow }};
//     void SetChangedWindow(wxWindow* win)
static int LUACALL wxLua_wxPaletteChangedEvent_SetChangedWindow(lua_State *L)
{
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxPaletteChangedEvent * self = (wxPaletteChangedEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPaletteChangedEvent);
    // call SetChangedWindow
    self->SetChangedWindow(win);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPaletteChangedEvent_delete[] = { &wxluatype_wxPaletteChangedEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPaletteChangedEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxPaletteChangedEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxPaletteChangedEvent_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPaletteChangedEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPaletteChangedEvent_constructor[1] = {{ wxLua_wxPaletteChangedEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxPaletteChangedEvent_constructor }};
//     wxPaletteChangedEvent(wxWindowID winid = 0)
static int LUACALL wxLua_wxPaletteChangedEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindowID winid = 0
    wxWindowID winid = (argCount >= 1 ? (wxWindowID)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxPaletteChangedEvent* returns = new wxPaletteChangedEvent(winid);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPaletteChangedEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPaletteChangedEvent_methods[] = {
    { "GetChangedWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPaletteChangedEvent_GetChangedWindow, 1, NULL },
    { "SetChangedWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPaletteChangedEvent_SetChangedWindow, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxPaletteChangedEvent_delete, 1, NULL },
    { "wxPaletteChangedEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxPaletteChangedEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxPaletteChangedEvent_methodCount = sizeof(wxPaletteChangedEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxKeyEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxKeyEvent'
int wxluatype_wxKeyEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxKeyEvent_AltDown[] = { &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxKeyEvent_AltDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxKeyEvent_AltDown[1] = {{ wxLua_wxKeyEvent_AltDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxKeyEvent_AltDown }};
//     bool AltDown() const
static int LUACALL wxLua_wxKeyEvent_AltDown(lua_State *L)
{
    // get this
    wxKeyEvent * self = (wxKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxKeyEvent);
    // call AltDown
    bool returns = (self->AltDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxKeyEvent_CmdDown[] = { &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxKeyEvent_CmdDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxKeyEvent_CmdDown[1] = {{ wxLua_wxKeyEvent_CmdDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxKeyEvent_CmdDown }};
//     bool CmdDown() const
static int LUACALL wxLua_wxKeyEvent_CmdDown(lua_State *L)
{
    // get this
    wxKeyEvent * self = (wxKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxKeyEvent);
    // call CmdDown
    bool returns = (self->CmdDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxKeyEvent_ControlDown[] = { &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxKeyEvent_ControlDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxKeyEvent_ControlDown[1] = {{ wxLua_wxKeyEvent_ControlDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxKeyEvent_ControlDown }};
//     bool ControlDown() const
static int LUACALL wxLua_wxKeyEvent_ControlDown(lua_State *L)
{
    // get this
    wxKeyEvent * self = (wxKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxKeyEvent);
    // call ControlDown
    bool returns = (self->ControlDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxKeyEvent_GetKeyCode[] = { &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxKeyEvent_GetKeyCode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxKeyEvent_GetKeyCode[1] = {{ wxLua_wxKeyEvent_GetKeyCode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxKeyEvent_GetKeyCode }};
//     int GetKeyCode() const
static int LUACALL wxLua_wxKeyEvent_GetKeyCode(lua_State *L)
{
    // get this
    wxKeyEvent * self = (wxKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxKeyEvent);
    // call GetKeyCode
    int returns = (self->GetKeyCode());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxKeyEvent_GetModifiers[] = { &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxKeyEvent_GetModifiers(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxKeyEvent_GetModifiers[1] = {{ wxLua_wxKeyEvent_GetModifiers, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxKeyEvent_GetModifiers }};
//     %wxchkver_2_8 int GetModifiers() const
static int LUACALL wxLua_wxKeyEvent_GetModifiers(lua_State *L)
{
    // get this
    wxKeyEvent * self = (wxKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxKeyEvent);
    // call GetModifiers
    int returns = (self->GetModifiers());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // wxCHECK_VERSION(2,8,0)

#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxKeyEvent_GetPosition[] = { &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxKeyEvent_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxKeyEvent_GetPosition[1] = {{ wxLua_wxKeyEvent_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxKeyEvent_GetPosition }};
//     wxPoint GetPosition() const
static int LUACALL wxLua_wxKeyEvent_GetPosition(lua_State *L)
{
    // get this
    wxKeyEvent * self = (wxKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxKeyEvent);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxKeyEvent_GetPositionXY[] = { &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxKeyEvent_GetPositionXY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxKeyEvent_GetPositionXY[1] = {{ wxLua_wxKeyEvent_GetPositionXY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxKeyEvent_GetPositionXY }};
// %override wxLua_wxKeyEvent_GetPositionXY
static int LUACALL wxLua_wxKeyEvent_GetPositionXY(lua_State *L)
{
    wxCoord y;
    wxCoord x;
    // get this
    wxKeyEvent *self = (wxKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxKeyEvent);
    // call GetPositionXY
    self->GetPosition(&x, &y);
    // push results
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxKeyEvent_GetX[] = { &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxKeyEvent_GetX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxKeyEvent_GetX[1] = {{ wxLua_wxKeyEvent_GetX, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxKeyEvent_GetX }};
//     long GetX()
static int LUACALL wxLua_wxKeyEvent_GetX(lua_State *L)
{
    // get this
    wxKeyEvent * self = (wxKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxKeyEvent);
    // call GetX
    long  returns = (self->GetX());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxKeyEvent_GetY[] = { &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxKeyEvent_GetY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxKeyEvent_GetY[1] = {{ wxLua_wxKeyEvent_GetY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxKeyEvent_GetY }};
//     long GetY() const
static int LUACALL wxLua_wxKeyEvent_GetY(lua_State *L)
{
    // get this
    wxKeyEvent * self = (wxKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxKeyEvent);
    // call GetY
    long  returns = (self->GetY());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxKeyEvent_HasModifiers[] = { &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxKeyEvent_HasModifiers(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxKeyEvent_HasModifiers[1] = {{ wxLua_wxKeyEvent_HasModifiers, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxKeyEvent_HasModifiers }};
//     bool HasModifiers() const
static int LUACALL wxLua_wxKeyEvent_HasModifiers(lua_State *L)
{
    // get this
    wxKeyEvent * self = (wxKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxKeyEvent);
    // call HasModifiers
    bool returns = (self->HasModifiers());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxKeyEvent_MetaDown[] = { &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxKeyEvent_MetaDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxKeyEvent_MetaDown[1] = {{ wxLua_wxKeyEvent_MetaDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxKeyEvent_MetaDown }};
//     bool MetaDown() const
static int LUACALL wxLua_wxKeyEvent_MetaDown(lua_State *L)
{
    // get this
    wxKeyEvent * self = (wxKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxKeyEvent);
    // call MetaDown
    bool returns = (self->MetaDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxKeyEvent_ShiftDown[] = { &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxKeyEvent_ShiftDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxKeyEvent_ShiftDown[1] = {{ wxLua_wxKeyEvent_ShiftDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxKeyEvent_ShiftDown }};
//     bool ShiftDown() const
static int LUACALL wxLua_wxKeyEvent_ShiftDown(lua_State *L)
{
    // get this
    wxKeyEvent * self = (wxKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxKeyEvent);
    // call ShiftDown
    bool returns = (self->ShiftDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxKeyEvent_delete[] = { &wxluatype_wxKeyEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxKeyEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxKeyEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxKeyEvent_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxKeyEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxKeyEvent_constructor[1] = {{ wxLua_wxKeyEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxKeyEvent_constructor }};
//     wxKeyEvent(wxEventType keyEventType)
static int LUACALL wxLua_wxKeyEvent_constructor(lua_State *L)
{
    // wxEventType keyEventType
    wxEventType keyEventType = (wxEventType)wxlua_getnumbertype(L, 1);
    // call constructor
    wxKeyEvent* returns = new wxKeyEvent(keyEventType);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxKeyEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxKeyEvent_methods[] = {
    { "AltDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxKeyEvent_AltDown, 1, NULL },
    { "CmdDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxKeyEvent_CmdDown, 1, NULL },
    { "ControlDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxKeyEvent_ControlDown, 1, NULL },
    { "GetKeyCode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxKeyEvent_GetKeyCode, 1, NULL },

#if wxCHECK_VERSION(2,8,0)
    { "GetModifiers", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxKeyEvent_GetModifiers, 1, NULL },
#endif // wxCHECK_VERSION(2,8,0)

#if wxLUA_USE_wxPointSizeRect
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxKeyEvent_GetPosition, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "GetPositionXY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxKeyEvent_GetPositionXY, 1, NULL },
    { "GetX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxKeyEvent_GetX, 1, NULL },
    { "GetY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxKeyEvent_GetY, 1, NULL },
    { "HasModifiers", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxKeyEvent_HasModifiers, 1, NULL },
    { "MetaDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxKeyEvent_MetaDown, 1, NULL },
    { "ShiftDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxKeyEvent_ShiftDown, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxKeyEvent_delete, 1, NULL },
    { "wxKeyEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxKeyEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxKeyEvent_methodCount = sizeof(wxKeyEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxNavigationKeyEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxNavigationKeyEvent'
int wxluatype_wxNavigationKeyEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxNavigationKeyEvent_GetCurrentFocus[] = { &wxluatype_wxNavigationKeyEvent, NULL };
static int LUACALL wxLua_wxNavigationKeyEvent_GetCurrentFocus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNavigationKeyEvent_GetCurrentFocus[1] = {{ wxLua_wxNavigationKeyEvent_GetCurrentFocus, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNavigationKeyEvent_GetCurrentFocus }};
//     wxWindow* GetCurrentFocus() const
static int LUACALL wxLua_wxNavigationKeyEvent_GetCurrentFocus(lua_State *L)
{
    // get this
    wxNavigationKeyEvent * self = (wxNavigationKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNavigationKeyEvent);
    // call GetCurrentFocus
    wxWindow* returns = (wxWindow*)self->GetCurrentFocus();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNavigationKeyEvent_GetDirection[] = { &wxluatype_wxNavigationKeyEvent, NULL };
static int LUACALL wxLua_wxNavigationKeyEvent_GetDirection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNavigationKeyEvent_GetDirection[1] = {{ wxLua_wxNavigationKeyEvent_GetDirection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNavigationKeyEvent_GetDirection }};
//     bool GetDirection() const
static int LUACALL wxLua_wxNavigationKeyEvent_GetDirection(lua_State *L)
{
    // get this
    wxNavigationKeyEvent * self = (wxNavigationKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNavigationKeyEvent);
    // call GetDirection
    bool returns = (self->GetDirection());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNavigationKeyEvent_IsFromTab[] = { &wxluatype_wxNavigationKeyEvent, NULL };
static int LUACALL wxLua_wxNavigationKeyEvent_IsFromTab(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNavigationKeyEvent_IsFromTab[1] = {{ wxLua_wxNavigationKeyEvent_IsFromTab, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNavigationKeyEvent_IsFromTab }};
//     bool IsFromTab() const
static int LUACALL wxLua_wxNavigationKeyEvent_IsFromTab(lua_State *L)
{
    // get this
    wxNavigationKeyEvent * self = (wxNavigationKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNavigationKeyEvent);
    // call IsFromTab
    bool returns = (self->IsFromTab());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNavigationKeyEvent_IsWindowChange[] = { &wxluatype_wxNavigationKeyEvent, NULL };
static int LUACALL wxLua_wxNavigationKeyEvent_IsWindowChange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNavigationKeyEvent_IsWindowChange[1] = {{ wxLua_wxNavigationKeyEvent_IsWindowChange, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNavigationKeyEvent_IsWindowChange }};
//     bool IsWindowChange() const
static int LUACALL wxLua_wxNavigationKeyEvent_IsWindowChange(lua_State *L)
{
    // get this
    wxNavigationKeyEvent * self = (wxNavigationKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNavigationKeyEvent);
    // call IsWindowChange
    bool returns = (self->IsWindowChange());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNavigationKeyEvent_SetCurrentFocus[] = { &wxluatype_wxNavigationKeyEvent, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxNavigationKeyEvent_SetCurrentFocus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNavigationKeyEvent_SetCurrentFocus[1] = {{ wxLua_wxNavigationKeyEvent_SetCurrentFocus, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNavigationKeyEvent_SetCurrentFocus }};
//     void SetCurrentFocus(wxWindow *win)
static int LUACALL wxLua_wxNavigationKeyEvent_SetCurrentFocus(lua_State *L)
{
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxNavigationKeyEvent * self = (wxNavigationKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNavigationKeyEvent);
    // call SetCurrentFocus
    self->SetCurrentFocus(win);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNavigationKeyEvent_SetDirection[] = { &wxluatype_wxNavigationKeyEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxNavigationKeyEvent_SetDirection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNavigationKeyEvent_SetDirection[1] = {{ wxLua_wxNavigationKeyEvent_SetDirection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNavigationKeyEvent_SetDirection }};
//     void SetDirection(bool bForward)
static int LUACALL wxLua_wxNavigationKeyEvent_SetDirection(lua_State *L)
{
    // bool bForward
    bool bForward = wxlua_getbooleantype(L, 2);
    // get this
    wxNavigationKeyEvent * self = (wxNavigationKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNavigationKeyEvent);
    // call SetDirection
    self->SetDirection(bForward);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNavigationKeyEvent_SetFlags[] = { &wxluatype_wxNavigationKeyEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxNavigationKeyEvent_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNavigationKeyEvent_SetFlags[1] = {{ wxLua_wxNavigationKeyEvent_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNavigationKeyEvent_SetFlags }};
//     void SetFlags(long flags)
static int LUACALL wxLua_wxNavigationKeyEvent_SetFlags(lua_State *L)
{
    // long flags
    long flags = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxNavigationKeyEvent * self = (wxNavigationKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNavigationKeyEvent);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNavigationKeyEvent_SetFromTab[] = { &wxluatype_wxNavigationKeyEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxNavigationKeyEvent_SetFromTab(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNavigationKeyEvent_SetFromTab[1] = {{ wxLua_wxNavigationKeyEvent_SetFromTab, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNavigationKeyEvent_SetFromTab }};
//     void SetFromTab(bool bIs)
static int LUACALL wxLua_wxNavigationKeyEvent_SetFromTab(lua_State *L)
{
    // bool bIs
    bool bIs = wxlua_getbooleantype(L, 2);
    // get this
    wxNavigationKeyEvent * self = (wxNavigationKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNavigationKeyEvent);
    // call SetFromTab
    self->SetFromTab(bIs);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNavigationKeyEvent_SetWindowChange[] = { &wxluatype_wxNavigationKeyEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxNavigationKeyEvent_SetWindowChange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNavigationKeyEvent_SetWindowChange[1] = {{ wxLua_wxNavigationKeyEvent_SetWindowChange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNavigationKeyEvent_SetWindowChange }};
//     void SetWindowChange(bool bIs)
static int LUACALL wxLua_wxNavigationKeyEvent_SetWindowChange(lua_State *L)
{
    // bool bIs
    bool bIs = wxlua_getbooleantype(L, 2);
    // get this
    wxNavigationKeyEvent * self = (wxNavigationKeyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNavigationKeyEvent);
    // call SetWindowChange
    self->SetWindowChange(bIs);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNavigationKeyEvent_delete[] = { &wxluatype_wxNavigationKeyEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNavigationKeyEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxNavigationKeyEvent_delete }};

static int LUACALL wxLua_wxNavigationKeyEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNavigationKeyEvent_constructor[1] = {{ wxLua_wxNavigationKeyEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxNavigationKeyEvent()
static int LUACALL wxLua_wxNavigationKeyEvent_constructor(lua_State *L)
{
    // call constructor
    wxNavigationKeyEvent* returns = new wxNavigationKeyEvent();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNavigationKeyEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxNavigationKeyEvent_methods[] = {
    { "GetCurrentFocus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNavigationKeyEvent_GetCurrentFocus, 1, NULL },
    { "GetDirection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNavigationKeyEvent_GetDirection, 1, NULL },
    { "IsFromTab", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNavigationKeyEvent_IsFromTab, 1, NULL },
    { "IsWindowChange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNavigationKeyEvent_IsWindowChange, 1, NULL },
    { "SetCurrentFocus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNavigationKeyEvent_SetCurrentFocus, 1, NULL },
    { "SetDirection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNavigationKeyEvent_SetDirection, 1, NULL },
    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNavigationKeyEvent_SetFlags, 1, NULL },
    { "SetFromTab", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNavigationKeyEvent_SetFromTab, 1, NULL },
    { "SetWindowChange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNavigationKeyEvent_SetWindowChange, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxNavigationKeyEvent_delete, 1, NULL },
    { "wxNavigationKeyEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxNavigationKeyEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxNavigationKeyEvent_methodCount = sizeof(wxNavigationKeyEvent_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxNavigationKeyEvent_enums[] = {
        { "FromTab", wxNavigationKeyEvent::FromTab },
        { "IsBackward", wxNavigationKeyEvent::IsBackward },
        { "IsForward", wxNavigationKeyEvent::IsForward },
        { "WinChange", wxNavigationKeyEvent::WinChange },
    { NULL, 0, },
};
int wxNavigationKeyEvent_enumCount = sizeof(wxNavigationKeyEvent_enums)/sizeof(wxLuaBindNumber) - 1;

// ---------------------------------------------------------------------------
// Bind class wxIdleEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxIdleEvent'
int wxluatype_wxIdleEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxIdleEvent_CanSend[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxIdleEvent_CanSend(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIdleEvent_CanSend[1] = {{ wxLua_wxIdleEvent_CanSend, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxIdleEvent_CanSend }};
//     static bool CanSend(wxWindow* window)
static int LUACALL wxLua_wxIdleEvent_CanSend(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call CanSend
    bool returns = (wxIdleEvent::CanSend(window));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static int LUACALL wxLua_wxIdleEvent_GetMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIdleEvent_GetMode[1] = {{ wxLua_wxIdleEvent_GetMode, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxIdleMode GetMode()
static int LUACALL wxLua_wxIdleEvent_GetMode(lua_State *L)
{
    // call GetMode
    wxIdleMode returns = (wxIdleEvent::GetMode());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIdleEvent_MoreRequested[] = { &wxluatype_wxIdleEvent, NULL };
static int LUACALL wxLua_wxIdleEvent_MoreRequested(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIdleEvent_MoreRequested[1] = {{ wxLua_wxIdleEvent_MoreRequested, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIdleEvent_MoreRequested }};
//     bool MoreRequested() const
static int LUACALL wxLua_wxIdleEvent_MoreRequested(lua_State *L)
{
    // get this
    wxIdleEvent * self = (wxIdleEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIdleEvent);
    // call MoreRequested
    bool returns = (self->MoreRequested());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIdleEvent_RequestMore[] = { &wxluatype_wxIdleEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxIdleEvent_RequestMore(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIdleEvent_RequestMore[1] = {{ wxLua_wxIdleEvent_RequestMore, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxIdleEvent_RequestMore }};
//     void RequestMore(bool needMore = true)
static int LUACALL wxLua_wxIdleEvent_RequestMore(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool needMore = true
    bool needMore = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxIdleEvent * self = (wxIdleEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIdleEvent);
    // call RequestMore
    self->RequestMore(needMore);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIdleEvent_SetMode[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxIdleEvent_SetMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIdleEvent_SetMode[1] = {{ wxLua_wxIdleEvent_SetMode, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxIdleEvent_SetMode }};
//     static void SetMode(wxIdleMode mode)
static int LUACALL wxLua_wxIdleEvent_SetMode(lua_State *L)
{
    // wxIdleMode mode
    wxIdleMode mode = (wxIdleMode)wxlua_getenumtype(L, 1);
    // call SetMode
    wxIdleEvent::SetMode(mode);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIdleEvent_delete[] = { &wxluatype_wxIdleEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIdleEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxIdleEvent_delete }};

static int LUACALL wxLua_wxIdleEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIdleEvent_constructor[1] = {{ wxLua_wxIdleEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxIdleEvent()
static int LUACALL wxLua_wxIdleEvent_constructor(lua_State *L)
{
    // call constructor
    wxIdleEvent* returns = new wxIdleEvent();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIdleEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxIdleEvent_methods[] = {
    { "CanSend", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxIdleEvent_CanSend, 1, NULL },
    { "GetMode", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxIdleEvent_GetMode, 1, NULL },
    { "MoreRequested", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIdleEvent_MoreRequested, 1, NULL },
    { "RequestMore", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIdleEvent_RequestMore, 1, NULL },
    { "SetMode", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxIdleEvent_SetMode, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxIdleEvent_delete, 1, NULL },
    { "wxIdleEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxIdleEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxIdleEvent_methodCount = sizeof(wxIdleEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxInitDialogEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxInitDialogEvent'
int wxluatype_wxInitDialogEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxInitDialogEvent_delete[] = { &wxluatype_wxInitDialogEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxInitDialogEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxInitDialogEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxInitDialogEvent_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxInitDialogEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxInitDialogEvent_constructor[1] = {{ wxLua_wxInitDialogEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxInitDialogEvent_constructor }};
//     wxInitDialogEvent(int id = 0)
static int LUACALL wxLua_wxInitDialogEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int id = 0
    int id = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxInitDialogEvent* returns = new wxInitDialogEvent(id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxInitDialogEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxInitDialogEvent_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxInitDialogEvent_delete, 1, NULL },
    { "wxInitDialogEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxInitDialogEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxInitDialogEvent_methodCount = sizeof(wxInitDialogEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxContextMenuEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxContextMenuEvent'
int wxluatype_wxContextMenuEvent = WXLUA_TUNKNOWN;

#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxContextMenuEvent_GetPosition[] = { &wxluatype_wxContextMenuEvent, NULL };
static int LUACALL wxLua_wxContextMenuEvent_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxContextMenuEvent_GetPosition[1] = {{ wxLua_wxContextMenuEvent_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxContextMenuEvent_GetPosition }};
//     wxPoint GetPosition() const
static int LUACALL wxLua_wxContextMenuEvent_GetPosition(lua_State *L)
{
    // get this
    wxContextMenuEvent * self = (wxContextMenuEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxContextMenuEvent);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxContextMenuEvent_SetPosition[] = { &wxluatype_wxContextMenuEvent, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxContextMenuEvent_SetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxContextMenuEvent_SetPosition[1] = {{ wxLua_wxContextMenuEvent_SetPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxContextMenuEvent_SetPosition }};
//     void SetPosition(const wxPoint& pos)
static int LUACALL wxLua_wxContextMenuEvent_SetPosition(lua_State *L)
{
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxContextMenuEvent * self = (wxContextMenuEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxContextMenuEvent);
    // call SetPosition
    self->SetPosition(*pos);

    return 0;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxContextMenuEvent_delete[] = { &wxluatype_wxContextMenuEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxContextMenuEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxContextMenuEvent_delete }};


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxContextMenuEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxContextMenuEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxContextMenuEvent_constructor[1] = {{ wxLua_wxContextMenuEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxContextMenuEvent_constructor }};
//     wxContextMenuEvent(wxEventType type = wxEVT_NULL, wxWindowID winid = 0, const wxPoint& pt = wxDefaultPosition)
static int LUACALL wxLua_wxContextMenuEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxPoint pt = wxDefaultPosition
    const wxPoint * pt = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID winid = 0
    wxWindowID winid = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType type = wxEVT_NULL
    wxEventType type = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxContextMenuEvent* returns = new wxContextMenuEvent(type, winid, *pt);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxContextMenuEvent);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxContextMenuEvent_methods[] = {
#if wxLUA_USE_wxPointSizeRect
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxContextMenuEvent_GetPosition, 1, NULL },
    { "SetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxContextMenuEvent_SetPosition, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxContextMenuEvent_delete, 1, NULL },

#if wxLUA_USE_wxPointSizeRect
    { "wxContextMenuEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxContextMenuEvent_constructor, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { 0, 0, 0, 0 },
};

int wxContextMenuEvent_methodCount = sizeof(wxContextMenuEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxMouseEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMouseEvent'
int wxluatype_wxMouseEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_AltDown[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_AltDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_AltDown[1] = {{ wxLua_wxMouseEvent_AltDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_AltDown }};
//     bool AltDown()
static int LUACALL wxLua_wxMouseEvent_AltDown(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call AltDown
    bool returns = (self->AltDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_Button[] = { &wxluatype_wxMouseEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMouseEvent_Button(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_Button[1] = {{ wxLua_wxMouseEvent_Button, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMouseEvent_Button }};
//     bool Button(int button)
static int LUACALL wxLua_wxMouseEvent_Button(lua_State *L)
{
    // int button
    int button = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call Button
    bool returns = (self->Button(button));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_ButtonDClick[] = { &wxluatype_wxMouseEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMouseEvent_ButtonDClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_ButtonDClick[1] = {{ wxLua_wxMouseEvent_ButtonDClick, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxMouseEvent_ButtonDClick }};
//     bool ButtonDClick(int but = wxMOUSE_BTN_ANY)
static int LUACALL wxLua_wxMouseEvent_ButtonDClick(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int but = wxMOUSE_BTN_ANY
    int but = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxMOUSE_BTN_ANY);
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call ButtonDClick
    bool returns = (self->ButtonDClick(but));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_ButtonDown[] = { &wxluatype_wxMouseEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMouseEvent_ButtonDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_ButtonDown[1] = {{ wxLua_wxMouseEvent_ButtonDown, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxMouseEvent_ButtonDown }};
//     bool ButtonDown(int but = wxMOUSE_BTN_ANY)
static int LUACALL wxLua_wxMouseEvent_ButtonDown(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int but = wxMOUSE_BTN_ANY
    int but = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxMOUSE_BTN_ANY);
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call ButtonDown
    bool returns = (self->ButtonDown(but));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_ButtonUp[] = { &wxluatype_wxMouseEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMouseEvent_ButtonUp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_ButtonUp[1] = {{ wxLua_wxMouseEvent_ButtonUp, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxMouseEvent_ButtonUp }};
//     bool ButtonUp(int but = wxMOUSE_BTN_ANY)
static int LUACALL wxLua_wxMouseEvent_ButtonUp(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int but = wxMOUSE_BTN_ANY
    int but = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxMOUSE_BTN_ANY);
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call ButtonUp
    bool returns = (self->ButtonUp(but));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_CmdDown[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_CmdDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_CmdDown[1] = {{ wxLua_wxMouseEvent_CmdDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_CmdDown }};
//     bool CmdDown() const
static int LUACALL wxLua_wxMouseEvent_CmdDown(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call CmdDown
    bool returns = (self->CmdDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_ControlDown[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_ControlDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_ControlDown[1] = {{ wxLua_wxMouseEvent_ControlDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_ControlDown }};
//     bool ControlDown()
static int LUACALL wxLua_wxMouseEvent_ControlDown(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call ControlDown
    bool returns = (self->ControlDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_Dragging[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_Dragging(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_Dragging[1] = {{ wxLua_wxMouseEvent_Dragging, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_Dragging }};
//     bool Dragging()
static int LUACALL wxLua_wxMouseEvent_Dragging(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call Dragging
    bool returns = (self->Dragging());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_Entering[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_Entering(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_Entering[1] = {{ wxLua_wxMouseEvent_Entering, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_Entering }};
//     bool Entering()
static int LUACALL wxLua_wxMouseEvent_Entering(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call Entering
    bool returns = (self->Entering());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_GetLinesPerAction[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_GetLinesPerAction(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_GetLinesPerAction[1] = {{ wxLua_wxMouseEvent_GetLinesPerAction, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_GetLinesPerAction }};
//     int GetLinesPerAction() const
static int LUACALL wxLua_wxMouseEvent_GetLinesPerAction(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call GetLinesPerAction
    int returns = (self->GetLinesPerAction());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_GetLogicalPosition[] = { &wxluatype_wxMouseEvent, &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxMouseEvent_GetLogicalPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_GetLogicalPosition[1] = {{ wxLua_wxMouseEvent_GetLogicalPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMouseEvent_GetLogicalPosition }};
//     wxPoint GetLogicalPosition(const wxDC& dc) const
static int LUACALL wxLua_wxMouseEvent_GetLogicalPosition(lua_State *L)
{
    // const wxDC dc
    const wxDC * dc = (const wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call GetLogicalPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetLogicalPosition(*dc));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)

#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_GetPosition[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_GetPosition[1] = {{ wxLua_wxMouseEvent_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_GetPosition }};
//     wxPoint GetPosition() const
static int LUACALL wxLua_wxMouseEvent_GetPosition(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_GetPositionXY[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_GetPositionXY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_GetPositionXY[1] = {{ wxLua_wxMouseEvent_GetPositionXY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_GetPositionXY }};
// %override wxLua_wxMouseEvent_GetPositionXY
// void GetPositionXY(wxCoord* x, wxCoord* y) const
static int LUACALL wxLua_wxMouseEvent_GetPositionXY(lua_State *L)
{
    wxCoord y;
    wxCoord x;
    // get this
    wxMouseEvent *self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call GetPosition
    self->GetPosition(&x, &y);
    // push results
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_GetWheelDelta[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_GetWheelDelta(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_GetWheelDelta[1] = {{ wxLua_wxMouseEvent_GetWheelDelta, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_GetWheelDelta }};
//     int GetWheelDelta() const
static int LUACALL wxLua_wxMouseEvent_GetWheelDelta(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call GetWheelDelta
    int returns = (self->GetWheelDelta());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_GetWheelRotation[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_GetWheelRotation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_GetWheelRotation[1] = {{ wxLua_wxMouseEvent_GetWheelRotation, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_GetWheelRotation }};
//     int GetWheelRotation() const
static int LUACALL wxLua_wxMouseEvent_GetWheelRotation(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call GetWheelRotation
    int returns = (self->GetWheelRotation());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_GetX[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_GetX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_GetX[1] = {{ wxLua_wxMouseEvent_GetX, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_GetX }};
//     long GetX() const
static int LUACALL wxLua_wxMouseEvent_GetX(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call GetX
    long  returns = (self->GetX());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_GetY[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_GetY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_GetY[1] = {{ wxLua_wxMouseEvent_GetY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_GetY }};
//     long GetY()
static int LUACALL wxLua_wxMouseEvent_GetY(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call GetY
    long  returns = (self->GetY());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_IsButton[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_IsButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_IsButton[1] = {{ wxLua_wxMouseEvent_IsButton, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_IsButton }};
//     bool IsButton() const
static int LUACALL wxLua_wxMouseEvent_IsButton(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call IsButton
    bool returns = (self->IsButton());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_Leaving[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_Leaving(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_Leaving[1] = {{ wxLua_wxMouseEvent_Leaving, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_Leaving }};
//     bool Leaving() const
static int LUACALL wxLua_wxMouseEvent_Leaving(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call Leaving
    bool returns = (self->Leaving());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_LeftDClick[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_LeftDClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_LeftDClick[1] = {{ wxLua_wxMouseEvent_LeftDClick, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_LeftDClick }};
//     bool LeftDClick() const
static int LUACALL wxLua_wxMouseEvent_LeftDClick(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call LeftDClick
    bool returns = (self->LeftDClick());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_LeftDown[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_LeftDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_LeftDown[1] = {{ wxLua_wxMouseEvent_LeftDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_LeftDown }};
//     bool LeftDown() const
static int LUACALL wxLua_wxMouseEvent_LeftDown(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call LeftDown
    bool returns = (self->LeftDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_LeftIsDown[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_LeftIsDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_LeftIsDown[1] = {{ wxLua_wxMouseEvent_LeftIsDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_LeftIsDown }};
//     bool LeftIsDown() const
static int LUACALL wxLua_wxMouseEvent_LeftIsDown(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call LeftIsDown
    bool returns = (self->LeftIsDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_LeftUp[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_LeftUp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_LeftUp[1] = {{ wxLua_wxMouseEvent_LeftUp, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_LeftUp }};
//     bool LeftUp() const
static int LUACALL wxLua_wxMouseEvent_LeftUp(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call LeftUp
    bool returns = (self->LeftUp());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_MetaDown[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_MetaDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_MetaDown[1] = {{ wxLua_wxMouseEvent_MetaDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_MetaDown }};
//     bool MetaDown() const
static int LUACALL wxLua_wxMouseEvent_MetaDown(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call MetaDown
    bool returns = (self->MetaDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_MiddleDClick[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_MiddleDClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_MiddleDClick[1] = {{ wxLua_wxMouseEvent_MiddleDClick, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_MiddleDClick }};
//     bool MiddleDClick() const
static int LUACALL wxLua_wxMouseEvent_MiddleDClick(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call MiddleDClick
    bool returns = (self->MiddleDClick());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_MiddleDown[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_MiddleDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_MiddleDown[1] = {{ wxLua_wxMouseEvent_MiddleDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_MiddleDown }};
//     bool MiddleDown() const
static int LUACALL wxLua_wxMouseEvent_MiddleDown(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call MiddleDown
    bool returns = (self->MiddleDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_MiddleIsDown[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_MiddleIsDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_MiddleIsDown[1] = {{ wxLua_wxMouseEvent_MiddleIsDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_MiddleIsDown }};
//     bool MiddleIsDown() const
static int LUACALL wxLua_wxMouseEvent_MiddleIsDown(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call MiddleIsDown
    bool returns = (self->MiddleIsDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_MiddleUp[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_MiddleUp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_MiddleUp[1] = {{ wxLua_wxMouseEvent_MiddleUp, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_MiddleUp }};
//     bool MiddleUp() const
static int LUACALL wxLua_wxMouseEvent_MiddleUp(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call MiddleUp
    bool returns = (self->MiddleUp());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_Moving[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_Moving(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_Moving[1] = {{ wxLua_wxMouseEvent_Moving, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_Moving }};
//     bool Moving() const
static int LUACALL wxLua_wxMouseEvent_Moving(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call Moving
    bool returns = (self->Moving());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_RightDClick[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_RightDClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_RightDClick[1] = {{ wxLua_wxMouseEvent_RightDClick, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_RightDClick }};
//     bool RightDClick() const
static int LUACALL wxLua_wxMouseEvent_RightDClick(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call RightDClick
    bool returns = (self->RightDClick());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_RightDown[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_RightDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_RightDown[1] = {{ wxLua_wxMouseEvent_RightDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_RightDown }};
//     bool RightDown() const
static int LUACALL wxLua_wxMouseEvent_RightDown(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call RightDown
    bool returns = (self->RightDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_RightIsDown[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_RightIsDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_RightIsDown[1] = {{ wxLua_wxMouseEvent_RightIsDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_RightIsDown }};
//     bool RightIsDown() const
static int LUACALL wxLua_wxMouseEvent_RightIsDown(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call RightIsDown
    bool returns = (self->RightIsDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_RightUp[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_RightUp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_RightUp[1] = {{ wxLua_wxMouseEvent_RightUp, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_RightUp }};
//     bool RightUp() const
static int LUACALL wxLua_wxMouseEvent_RightUp(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call RightUp
    bool returns = (self->RightUp());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_ShiftDown[] = { &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxMouseEvent_ShiftDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_ShiftDown[1] = {{ wxLua_wxMouseEvent_ShiftDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_ShiftDown }};
//     bool ShiftDown() const
static int LUACALL wxLua_wxMouseEvent_ShiftDown(lua_State *L)
{
    // get this
    wxMouseEvent * self = (wxMouseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseEvent);
    // call ShiftDown
    bool returns = (self->ShiftDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_delete[] = { &wxluatype_wxMouseEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxMouseEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseEvent_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMouseEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseEvent_constructor[1] = {{ wxLua_wxMouseEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxMouseEvent_constructor }};
//     wxMouseEvent(wxEventType mouseEventType = wxEVT_NULL)
static int LUACALL wxLua_wxMouseEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxEventType mouseEventType = wxEVT_NULL
    wxEventType mouseEventType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxMouseEvent* returns = new wxMouseEvent(mouseEventType);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMouseEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMouseEvent_methods[] = {
    { "AltDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_AltDown, 1, NULL },
    { "Button", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_Button, 1, NULL },
    { "ButtonDClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_ButtonDClick, 1, NULL },
    { "ButtonDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_ButtonDown, 1, NULL },
    { "ButtonUp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_ButtonUp, 1, NULL },
    { "CmdDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_CmdDown, 1, NULL },
    { "ControlDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_ControlDown, 1, NULL },
    { "Dragging", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_Dragging, 1, NULL },
    { "Entering", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_Entering, 1, NULL },
    { "GetLinesPerAction", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_GetLinesPerAction, 1, NULL },

#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)
    { "GetLogicalPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_GetLogicalPosition, 1, NULL },
#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)

#if wxLUA_USE_wxPointSizeRect
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_GetPosition, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "GetPositionXY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_GetPositionXY, 1, NULL },
    { "GetWheelDelta", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_GetWheelDelta, 1, NULL },
    { "GetWheelRotation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_GetWheelRotation, 1, NULL },
    { "GetX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_GetX, 1, NULL },
    { "GetY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_GetY, 1, NULL },
    { "IsButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_IsButton, 1, NULL },
    { "Leaving", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_Leaving, 1, NULL },
    { "LeftDClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_LeftDClick, 1, NULL },
    { "LeftDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_LeftDown, 1, NULL },
    { "LeftIsDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_LeftIsDown, 1, NULL },
    { "LeftUp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_LeftUp, 1, NULL },
    { "MetaDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_MetaDown, 1, NULL },
    { "MiddleDClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_MiddleDClick, 1, NULL },
    { "MiddleDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_MiddleDown, 1, NULL },
    { "MiddleIsDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_MiddleIsDown, 1, NULL },
    { "MiddleUp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_MiddleUp, 1, NULL },
    { "Moving", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_Moving, 1, NULL },
    { "RightDClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_RightDClick, 1, NULL },
    { "RightDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_RightDown, 1, NULL },
    { "RightIsDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_RightIsDown, 1, NULL },
    { "RightUp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_RightUp, 1, NULL },
    { "ShiftDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseEvent_ShiftDown, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxMouseEvent_delete, 1, NULL },
    { "wxMouseEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMouseEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxMouseEvent_methodCount = sizeof(wxMouseEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxMouseCaptureChangedEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMouseCaptureChangedEvent'
int wxluatype_wxMouseCaptureChangedEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseCaptureChangedEvent_GetCapturedWindow[] = { &wxluatype_wxMouseCaptureChangedEvent, NULL };
static int LUACALL wxLua_wxMouseCaptureChangedEvent_GetCapturedWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseCaptureChangedEvent_GetCapturedWindow[1] = {{ wxLua_wxMouseCaptureChangedEvent_GetCapturedWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMouseCaptureChangedEvent_GetCapturedWindow }};
//     wxWindow* GetCapturedWindow() const
static int LUACALL wxLua_wxMouseCaptureChangedEvent_GetCapturedWindow(lua_State *L)
{
    // get this
    wxMouseCaptureChangedEvent * self = (wxMouseCaptureChangedEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMouseCaptureChangedEvent);
    // call GetCapturedWindow
    wxWindow* returns = (wxWindow*)self->GetCapturedWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseCaptureChangedEvent_delete[] = { &wxluatype_wxMouseCaptureChangedEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseCaptureChangedEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxMouseCaptureChangedEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseCaptureChangedEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxMouseCaptureChangedEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseCaptureChangedEvent_constructor[1] = {{ wxLua_wxMouseCaptureChangedEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxMouseCaptureChangedEvent_constructor }};
//     wxMouseCaptureChangedEvent(wxWindowID winid = 0, wxWindow* gainedCapture = NULL)
static int LUACALL wxLua_wxMouseCaptureChangedEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindow gainedCapture = NULL
    wxWindow * gainedCapture = (argCount >= 2 ? (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow) : NULL);
    // wxWindowID winid = 0
    wxWindowID winid = (argCount >= 1 ? (wxWindowID)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxMouseCaptureChangedEvent* returns = new wxMouseCaptureChangedEvent(winid, gainedCapture);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMouseCaptureChangedEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMouseCaptureChangedEvent_methods[] = {
    { "GetCapturedWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMouseCaptureChangedEvent_GetCapturedWindow, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxMouseCaptureChangedEvent_delete, 1, NULL },
    { "wxMouseCaptureChangedEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMouseCaptureChangedEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxMouseCaptureChangedEvent_methodCount = sizeof(wxMouseCaptureChangedEvent_methods)/sizeof(wxLuaBindMethod) - 1;



#if wxCHECK_VERSION(2,8,0)
// ---------------------------------------------------------------------------
// Bind class wxMouseCaptureLostEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMouseCaptureLostEvent'
int wxluatype_wxMouseCaptureLostEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseCaptureLostEvent_delete[] = { &wxluatype_wxMouseCaptureLostEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseCaptureLostEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxMouseCaptureLostEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxMouseCaptureLostEvent_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMouseCaptureLostEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMouseCaptureLostEvent_constructor[1] = {{ wxLua_wxMouseCaptureLostEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxMouseCaptureLostEvent_constructor }};
//     wxMouseCaptureLostEvent(wxWindowID winid = 0)
static int LUACALL wxLua_wxMouseCaptureLostEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindowID winid = 0
    wxWindowID winid = (argCount >= 1 ? (wxWindowID)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxMouseCaptureLostEvent* returns = new wxMouseCaptureLostEvent(winid);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMouseCaptureLostEvent);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMouseCaptureLostEvent_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxMouseCaptureLostEvent_delete, 1, NULL },
    { "wxMouseCaptureLostEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMouseCaptureLostEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxMouseCaptureLostEvent_methodCount = sizeof(wxMouseCaptureLostEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(2,8,0)

// ---------------------------------------------------------------------------
// Bind class wxMoveEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMoveEvent'
int wxluatype_wxMoveEvent = WXLUA_TUNKNOWN;

#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxMoveEvent_GetPosition[] = { &wxluatype_wxMoveEvent, NULL };
static int LUACALL wxLua_wxMoveEvent_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMoveEvent_GetPosition[1] = {{ wxLua_wxMoveEvent_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMoveEvent_GetPosition }};
//     wxPoint GetPosition() const
static int LUACALL wxLua_wxMoveEvent_GetPosition(lua_State *L)
{
    // get this
    wxMoveEvent * self = (wxMoveEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMoveEvent);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxMoveEvent_delete[] = { &wxluatype_wxMoveEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMoveEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxMoveEvent_delete }};


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxMoveEvent_constructor[] = { &wxluatype_wxPoint, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMoveEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMoveEvent_constructor[1] = {{ wxLua_wxMoveEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxMoveEvent_constructor }};
//     wxMoveEvent(const wxPoint& pt, int id = 0)
static int LUACALL wxLua_wxMoveEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPoint);
    // call constructor
    wxMoveEvent* returns = new wxMoveEvent(*pt, id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMoveEvent);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMoveEvent_methods[] = {
#if wxLUA_USE_wxPointSizeRect
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMoveEvent_GetPosition, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxMoveEvent_delete, 1, NULL },

#if wxLUA_USE_wxPointSizeRect
    { "wxMoveEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMoveEvent_constructor, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { 0, 0, 0, 0 },
};

int wxMoveEvent_methodCount = sizeof(wxMoveEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxPaintEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPaintEvent'
int wxluatype_wxPaintEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxPaintEvent_delete[] = { &wxluatype_wxPaintEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPaintEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxPaintEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxPaintEvent_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPaintEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPaintEvent_constructor[1] = {{ wxLua_wxPaintEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxPaintEvent_constructor }};
//     wxPaintEvent(int id = 0)
static int LUACALL wxLua_wxPaintEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int id = 0
    int id = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxPaintEvent* returns = new wxPaintEvent(id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPaintEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPaintEvent_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxPaintEvent_delete, 1, NULL },
    { "wxPaintEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxPaintEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxPaintEvent_methodCount = sizeof(wxPaintEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxProcessEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxProcessEvent'
int wxluatype_wxProcessEvent = WXLUA_TUNKNOWN;

#if wxCHECK_VERSION(2,6,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxProcessEvent_GetExitCode[] = { &wxluatype_wxProcessEvent, NULL };
static int LUACALL wxLua_wxProcessEvent_GetExitCode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxProcessEvent_GetExitCode[1] = {{ wxLua_wxProcessEvent_GetExitCode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxProcessEvent_GetExitCode }};
//     %wxchkver_2_6 int GetExitCode()
static int LUACALL wxLua_wxProcessEvent_GetExitCode(lua_State *L)
{
    // get this
    wxProcessEvent * self = (wxProcessEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxProcessEvent);
    // call GetExitCode
    int returns = (self->GetExitCode());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // wxCHECK_VERSION(2,6,0)

static wxLuaArgType s_wxluatypeArray_wxLua_wxProcessEvent_GetPid[] = { &wxluatype_wxProcessEvent, NULL };
static int LUACALL wxLua_wxProcessEvent_GetPid(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxProcessEvent_GetPid[1] = {{ wxLua_wxProcessEvent_GetPid, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxProcessEvent_GetPid }};
//     int GetPid() const
static int LUACALL wxLua_wxProcessEvent_GetPid(lua_State *L)
{
    // get this
    wxProcessEvent * self = (wxProcessEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxProcessEvent);
    // call GetPid
    int returns = (self->GetPid());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxProcessEvent_delete[] = { &wxluatype_wxProcessEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxProcessEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxProcessEvent_delete }};


#if wxCHECK_VERSION(2,6,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxProcessEvent_constructor1[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxProcessEvent_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxProcessEvent_constructor1[1] = {{ wxLua_wxProcessEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxProcessEvent_constructor1 }};
//     %wxchkver_2_6 wxProcessEvent(int nId = 0, int pid = 0, int exitcode = 0)
static int LUACALL wxLua_wxProcessEvent_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int exitcode = 0
    int exitcode = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int pid = 0
    int pid = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // int nId = 0
    int nId = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxProcessEvent* returns = new wxProcessEvent(nId, pid, exitcode);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxProcessEvent);

    return 1;
}

#endif // wxCHECK_VERSION(2,6,0)

#if !wxCHECK_VERSION(2,6,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxProcessEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxProcessEvent_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxProcessEvent_constructor[1] = {{ wxLua_wxProcessEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxProcessEvent_constructor }};
//     !%wxchkver_2_6 wxProcessEvent(int id = 0, int pid = 0)
static int LUACALL wxLua_wxProcessEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int pid = 0
    int pid = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // int id = 0
    int id = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxProcessEvent* returns = new wxProcessEvent(id, pid);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxProcessEvent);

    return 1;
}

#endif // !wxCHECK_VERSION(2,6,0)



#if (wxCHECK_VERSION(2,6,0))||(!wxCHECK_VERSION(2,6,0))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxProcessEvent_constructor_overload[] =
{

#if wxCHECK_VERSION(2,6,0)
    { wxLua_wxProcessEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxProcessEvent_constructor1 },
#endif // wxCHECK_VERSION(2,6,0)

#if !wxCHECK_VERSION(2,6,0)
    { wxLua_wxProcessEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxProcessEvent_constructor },
#endif // !wxCHECK_VERSION(2,6,0)
};
static int s_wxluafunc_wxLua_wxProcessEvent_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxProcessEvent_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxCHECK_VERSION(2,6,0))||(!wxCHECK_VERSION(2,6,0))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxProcessEvent_methods[] = {
#if wxCHECK_VERSION(2,6,0)
    { "GetExitCode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxProcessEvent_GetExitCode, 1, NULL },
#endif // wxCHECK_VERSION(2,6,0)

    { "GetPid", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxProcessEvent_GetPid, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxProcessEvent_delete, 1, NULL },

#if (wxCHECK_VERSION(2,6,0))||(!wxCHECK_VERSION(2,6,0))
    { "wxProcessEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxProcessEvent_constructor_overload, s_wxluafunc_wxLua_wxProcessEvent_constructor_overload_count, 0 },
#endif // (wxCHECK_VERSION(2,6,0))||(!wxCHECK_VERSION(2,6,0))

    { 0, 0, 0, 0 },
};

int wxProcessEvent_methodCount = sizeof(wxProcessEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxScrollEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxScrollEvent'
int wxluatype_wxScrollEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrollEvent_GetOrientation[] = { &wxluatype_wxScrollEvent, NULL };
static int LUACALL wxLua_wxScrollEvent_GetOrientation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollEvent_GetOrientation[1] = {{ wxLua_wxScrollEvent_GetOrientation, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxScrollEvent_GetOrientation }};
//     int GetOrientation() const
static int LUACALL wxLua_wxScrollEvent_GetOrientation(lua_State *L)
{
    // get this
    wxScrollEvent * self = (wxScrollEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrollEvent);
    // call GetOrientation
    int returns = (self->GetOrientation());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrollEvent_GetPosition[] = { &wxluatype_wxScrollEvent, NULL };
static int LUACALL wxLua_wxScrollEvent_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollEvent_GetPosition[1] = {{ wxLua_wxScrollEvent_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxScrollEvent_GetPosition }};
//     int GetPosition() const
static int LUACALL wxLua_wxScrollEvent_GetPosition(lua_State *L)
{
    // get this
    wxScrollEvent * self = (wxScrollEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrollEvent);
    // call GetPosition
    int returns = (self->GetPosition());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrollEvent_delete[] = { &wxluatype_wxScrollEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxScrollEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrollEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxScrollEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollEvent_constructor[1] = {{ wxLua_wxScrollEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxScrollEvent_constructor }};
//     wxScrollEvent(wxEventType commandType = wxEVT_NULL, int id = 0, int pos = 0, int orientation = 0)
static int LUACALL wxLua_wxScrollEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int orientation = 0
    int orientation = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // int pos = 0
    int pos = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType commandType = wxEVT_NULL
    wxEventType commandType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxScrollEvent* returns = new wxScrollEvent(commandType, id, pos, orientation);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxScrollEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxScrollEvent_methods[] = {
    { "GetOrientation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrollEvent_GetOrientation, 1, NULL },
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrollEvent_GetPosition, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxScrollEvent_delete, 1, NULL },
    { "wxScrollEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxScrollEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxScrollEvent_methodCount = sizeof(wxScrollEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxScrollWinEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxScrollWinEvent'
int wxluatype_wxScrollWinEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrollWinEvent_GetOrientation[] = { &wxluatype_wxScrollWinEvent, NULL };
static int LUACALL wxLua_wxScrollWinEvent_GetOrientation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollWinEvent_GetOrientation[1] = {{ wxLua_wxScrollWinEvent_GetOrientation, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxScrollWinEvent_GetOrientation }};
//     int GetOrientation() const
static int LUACALL wxLua_wxScrollWinEvent_GetOrientation(lua_State *L)
{
    // get this
    wxScrollWinEvent * self = (wxScrollWinEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrollWinEvent);
    // call GetOrientation
    int returns = (self->GetOrientation());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrollWinEvent_GetPosition[] = { &wxluatype_wxScrollWinEvent, NULL };
static int LUACALL wxLua_wxScrollWinEvent_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollWinEvent_GetPosition[1] = {{ wxLua_wxScrollWinEvent_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxScrollWinEvent_GetPosition }};
//     int GetPosition() const
static int LUACALL wxLua_wxScrollWinEvent_GetPosition(lua_State *L)
{
    // get this
    wxScrollWinEvent * self = (wxScrollWinEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrollWinEvent);
    // call GetPosition
    int returns = (self->GetPosition());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrollWinEvent_delete[] = { &wxluatype_wxScrollWinEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollWinEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxScrollWinEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrollWinEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxScrollWinEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollWinEvent_constructor[1] = {{ wxLua_wxScrollWinEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxScrollWinEvent_constructor }};
//     wxScrollWinEvent(wxEventType commandType = wxEVT_NULL, int pos = 0, int orientation = 0)
static int LUACALL wxLua_wxScrollWinEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int orientation = 0
    int orientation = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int pos = 0
    int pos = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType commandType = wxEVT_NULL
    wxEventType commandType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxScrollWinEvent* returns = new wxScrollWinEvent(commandType, pos, orientation);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxScrollWinEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxScrollWinEvent_methods[] = {
    { "GetOrientation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrollWinEvent_GetOrientation, 1, NULL },
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrollWinEvent_GetPosition, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxScrollWinEvent_delete, 1, NULL },
    { "wxScrollWinEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxScrollWinEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxScrollWinEvent_methodCount = sizeof(wxScrollWinEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxSizeEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSizeEvent'
int wxluatype_wxSizeEvent = WXLUA_TUNKNOWN;

#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxSizeEvent_GetSize[] = { &wxluatype_wxSizeEvent, NULL };
static int LUACALL wxLua_wxSizeEvent_GetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizeEvent_GetSize[1] = {{ wxLua_wxSizeEvent_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSizeEvent_GetSize }};
//     wxSize GetSize() const
static int LUACALL wxLua_wxSizeEvent_GetSize(lua_State *L)
{
    // get this
    wxSizeEvent * self = (wxSizeEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSizeEvent);
    // call GetSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxSizeEvent_delete[] = { &wxluatype_wxSizeEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizeEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSizeEvent_delete }};


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxSizeEvent_constructor[] = { &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSizeEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSizeEvent_constructor[1] = {{ wxLua_wxSizeEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxSizeEvent_constructor }};
//     wxSizeEvent(const wxSize& sz, int id = 0)
static int LUACALL wxLua_wxSizeEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSize);
    // call constructor
    wxSizeEvent* returns = new wxSizeEvent(*sz, id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizeEvent);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSizeEvent_methods[] = {
#if wxLUA_USE_wxPointSizeRect
    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSizeEvent_GetSize, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSizeEvent_delete, 1, NULL },

#if wxLUA_USE_wxPointSizeRect
    { "wxSizeEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSizeEvent_constructor, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { 0, 0, 0, 0 },
};

int wxSizeEvent_methodCount = sizeof(wxSizeEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxShowEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxShowEvent'
int wxluatype_wxShowEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxShowEvent_GetShow[] = { &wxluatype_wxShowEvent, NULL };
static int LUACALL wxLua_wxShowEvent_GetShow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxShowEvent_GetShow[1] = {{ wxLua_wxShowEvent_GetShow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxShowEvent_GetShow }};
//     bool GetShow() const
static int LUACALL wxLua_wxShowEvent_GetShow(lua_State *L)
{
    // get this
    wxShowEvent * self = (wxShowEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxShowEvent);
    // call GetShow
    bool returns = (self->GetShow());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxShowEvent_SetShow[] = { &wxluatype_wxShowEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxShowEvent_SetShow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxShowEvent_SetShow[1] = {{ wxLua_wxShowEvent_SetShow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxShowEvent_SetShow }};
//     void SetShow(bool show)
static int LUACALL wxLua_wxShowEvent_SetShow(lua_State *L)
{
    // bool show
    bool show = wxlua_getbooleantype(L, 2);
    // get this
    wxShowEvent * self = (wxShowEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxShowEvent);
    // call SetShow
    self->SetShow(show);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxShowEvent_delete[] = { &wxluatype_wxShowEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxShowEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxShowEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxShowEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxShowEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxShowEvent_constructor[1] = {{ wxLua_wxShowEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxShowEvent_constructor }};
//     wxShowEvent(int winid = 0, bool show = false)
static int LUACALL wxLua_wxShowEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool show = false
    bool show = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // int winid = 0
    int winid = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxShowEvent* returns = new wxShowEvent(winid, show);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxShowEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxShowEvent_methods[] = {
    { "GetShow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxShowEvent_GetShow, 1, NULL },
    { "SetShow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxShowEvent_SetShow, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxShowEvent_delete, 1, NULL },
    { "wxShowEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxShowEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxShowEvent_methodCount = sizeof(wxShowEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxIconizeEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxIconizeEvent'
int wxluatype_wxIconizeEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxIconizeEvent_Iconized[] = { &wxluatype_wxIconizeEvent, NULL };
static int LUACALL wxLua_wxIconizeEvent_Iconized(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconizeEvent_Iconized[1] = {{ wxLua_wxIconizeEvent_Iconized, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIconizeEvent_Iconized }};
//     bool Iconized() const
static int LUACALL wxLua_wxIconizeEvent_Iconized(lua_State *L)
{
    // get this
    wxIconizeEvent * self = (wxIconizeEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIconizeEvent);
    // call Iconized
    bool returns = (self->Iconized());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIconizeEvent_delete[] = { &wxluatype_wxIconizeEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconizeEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxIconizeEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxIconizeEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxIconizeEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconizeEvent_constructor[1] = {{ wxLua_wxIconizeEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxIconizeEvent_constructor }};
//     wxIconizeEvent(int winid = 0, bool iconized = true)
static int LUACALL wxLua_wxIconizeEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool iconized = true
    bool iconized = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // int winid = 0
    int winid = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxIconizeEvent* returns = new wxIconizeEvent(winid, iconized);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIconizeEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxIconizeEvent_methods[] = {
    { "Iconized", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIconizeEvent_Iconized, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxIconizeEvent_delete, 1, NULL },
    { "wxIconizeEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxIconizeEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxIconizeEvent_methodCount = sizeof(wxIconizeEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxMaximizeEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMaximizeEvent'
int wxluatype_wxMaximizeEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxMaximizeEvent_delete[] = { &wxluatype_wxMaximizeEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMaximizeEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxMaximizeEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxMaximizeEvent_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMaximizeEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMaximizeEvent_constructor[1] = {{ wxLua_wxMaximizeEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxMaximizeEvent_constructor }};
//     wxMaximizeEvent(int winid = 0)
static int LUACALL wxLua_wxMaximizeEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int winid = 0
    int winid = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxMaximizeEvent* returns = new wxMaximizeEvent(winid);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMaximizeEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMaximizeEvent_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxMaximizeEvent_delete, 1, NULL },
    { "wxMaximizeEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMaximizeEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxMaximizeEvent_methodCount = sizeof(wxMaximizeEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxWindowCreateEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxWindowCreateEvent'
int wxluatype_wxWindowCreateEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindowCreateEvent_GetWindow[] = { &wxluatype_wxWindowCreateEvent, NULL };
static int LUACALL wxLua_wxWindowCreateEvent_GetWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindowCreateEvent_GetWindow[1] = {{ wxLua_wxWindowCreateEvent_GetWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindowCreateEvent_GetWindow }};
//     wxWindow *GetWindow() const
static int LUACALL wxLua_wxWindowCreateEvent_GetWindow(lua_State *L)
{
    // get this
    wxWindowCreateEvent * self = (wxWindowCreateEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindowCreateEvent);
    // call GetWindow
    wxWindow* returns = (wxWindow*)self->GetWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindowCreateEvent_delete[] = { &wxluatype_wxWindowCreateEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindowCreateEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxWindowCreateEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindowCreateEvent_constructor[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindowCreateEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindowCreateEvent_constructor[1] = {{ wxLua_wxWindowCreateEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxWindowCreateEvent_constructor }};
//     wxWindowCreateEvent(wxWindow *win = NULL)
static int LUACALL wxLua_wxWindowCreateEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindow win = NULL
    wxWindow * win = (argCount >= 1 ? (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow) : NULL);
    // call constructor
    wxWindowCreateEvent* returns = new wxWindowCreateEvent(win);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindowCreateEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxWindowCreateEvent_methods[] = {
    { "GetWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindowCreateEvent_GetWindow, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxWindowCreateEvent_delete, 1, NULL },
    { "wxWindowCreateEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxWindowCreateEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxWindowCreateEvent_methodCount = sizeof(wxWindowCreateEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxWindowDestroyEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxWindowDestroyEvent'
int wxluatype_wxWindowDestroyEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindowDestroyEvent_GetWindow[] = { &wxluatype_wxWindowDestroyEvent, NULL };
static int LUACALL wxLua_wxWindowDestroyEvent_GetWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindowDestroyEvent_GetWindow[1] = {{ wxLua_wxWindowDestroyEvent_GetWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindowDestroyEvent_GetWindow }};
//     wxWindow *GetWindow() const
static int LUACALL wxLua_wxWindowDestroyEvent_GetWindow(lua_State *L)
{
    // get this
    wxWindowDestroyEvent * self = (wxWindowDestroyEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindowDestroyEvent);
    // call GetWindow
    wxWindow* returns = (wxWindow*)self->GetWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindowDestroyEvent_delete[] = { &wxluatype_wxWindowDestroyEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindowDestroyEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxWindowDestroyEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindowDestroyEvent_constructor[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindowDestroyEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindowDestroyEvent_constructor[1] = {{ wxLua_wxWindowDestroyEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxWindowDestroyEvent_constructor }};
//     wxWindowDestroyEvent(wxWindow *win = NULL)
static int LUACALL wxLua_wxWindowDestroyEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindow win = NULL
    wxWindow * win = (argCount >= 1 ? (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow) : NULL);
    // call constructor
    wxWindowDestroyEvent* returns = new wxWindowDestroyEvent(win);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindowDestroyEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxWindowDestroyEvent_methods[] = {
    { "GetWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindowDestroyEvent_GetWindow, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxWindowDestroyEvent_delete, 1, NULL },
    { "wxWindowDestroyEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxWindowDestroyEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxWindowDestroyEvent_methodCount = sizeof(wxWindowDestroyEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxSysColourChangedEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSysColourChangedEvent'
int wxluatype_wxSysColourChangedEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSysColourChangedEvent_delete[] = { &wxluatype_wxSysColourChangedEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSysColourChangedEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSysColourChangedEvent_delete }};

static int LUACALL wxLua_wxSysColourChangedEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSysColourChangedEvent_constructor[1] = {{ wxLua_wxSysColourChangedEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxSysColourChangedEvent()
static int LUACALL wxLua_wxSysColourChangedEvent_constructor(lua_State *L)
{
    // call constructor
    wxSysColourChangedEvent* returns = new wxSysColourChangedEvent();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSysColourChangedEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSysColourChangedEvent_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSysColourChangedEvent_delete, 1, NULL },
    { "wxSysColourChangedEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSysColourChangedEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxSysColourChangedEvent_methodCount = sizeof(wxSysColourChangedEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxDisplayChangedEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDisplayChangedEvent'
int wxluatype_wxDisplayChangedEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDisplayChangedEvent_delete[] = { &wxluatype_wxDisplayChangedEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDisplayChangedEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDisplayChangedEvent_delete }};

static int LUACALL wxLua_wxDisplayChangedEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDisplayChangedEvent_constructor[1] = {{ wxLua_wxDisplayChangedEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDisplayChangedEvent()
static int LUACALL wxLua_wxDisplayChangedEvent_constructor(lua_State *L)
{
    // call constructor
    wxDisplayChangedEvent* returns = new wxDisplayChangedEvent();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDisplayChangedEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDisplayChangedEvent_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDisplayChangedEvent_delete, 1, NULL },
    { "wxDisplayChangedEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDisplayChangedEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxDisplayChangedEvent_methodCount = sizeof(wxDisplayChangedEvent_methods)/sizeof(wxLuaBindMethod) - 1;



#if (wxCHECK_VERSION(2,8,0)) && (defined(wxHAS_POWER_EVENTS))
// ---------------------------------------------------------------------------
// Bind class wxPowerEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPowerEvent'
int wxluatype_wxPowerEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxPowerEvent_IsVetoed[] = { &wxluatype_wxPowerEvent, NULL };
static int LUACALL wxLua_wxPowerEvent_IsVetoed(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPowerEvent_IsVetoed[1] = {{ wxLua_wxPowerEvent_IsVetoed, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPowerEvent_IsVetoed }};
//     bool IsVetoed() const
static int LUACALL wxLua_wxPowerEvent_IsVetoed(lua_State *L)
{
    // get this
    wxPowerEvent * self = (wxPowerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPowerEvent);
    // call IsVetoed
    bool returns = (self->IsVetoed());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPowerEvent_Veto[] = { &wxluatype_wxPowerEvent, NULL };
static int LUACALL wxLua_wxPowerEvent_Veto(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPowerEvent_Veto[1] = {{ wxLua_wxPowerEvent_Veto, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPowerEvent_Veto }};
//     void Veto()
static int LUACALL wxLua_wxPowerEvent_Veto(lua_State *L)
{
    // get this
    wxPowerEvent * self = (wxPowerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPowerEvent);
    // call Veto
    self->Veto();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPowerEvent_delete[] = { &wxluatype_wxPowerEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPowerEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxPowerEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxPowerEvent_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPowerEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPowerEvent_constructor[1] = {{ wxLua_wxPowerEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxPowerEvent_constructor }};
//     wxPowerEvent(wxEventType evtType)
static int LUACALL wxLua_wxPowerEvent_constructor(lua_State *L)
{
    // wxEventType evtType
    wxEventType evtType = (wxEventType)wxlua_getnumbertype(L, 1);
    // call constructor
    wxPowerEvent* returns = new wxPowerEvent(evtType);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPowerEvent);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPowerEvent_methods[] = {
    { "IsVetoed", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPowerEvent_IsVetoed, 1, NULL },
    { "Veto", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPowerEvent_Veto, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxPowerEvent_delete, 1, NULL },
    { "wxPowerEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxPowerEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxPowerEvent_methodCount = sizeof(wxPowerEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxCHECK_VERSION(2,8,0)) && (defined(wxHAS_POWER_EVENTS))

// ---------------------------------------------------------------------------
// Bind class wxSetCursorEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSetCursorEvent'
int wxluatype_wxSetCursorEvent = WXLUA_TUNKNOWN;

#if wxLUA_USE_wxCursor
static wxLuaArgType s_wxluatypeArray_wxLua_wxSetCursorEvent_GetCursor[] = { &wxluatype_wxSetCursorEvent, NULL };
static int LUACALL wxLua_wxSetCursorEvent_GetCursor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSetCursorEvent_GetCursor[1] = {{ wxLua_wxSetCursorEvent_GetCursor, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSetCursorEvent_GetCursor }};
//     wxCursor GetCursor() const
static int LUACALL wxLua_wxSetCursorEvent_GetCursor(lua_State *L)
{
    // get this
    wxSetCursorEvent * self = (wxSetCursorEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSetCursorEvent);
    // call GetCursor
    // allocate a new object using the copy constructor
    wxCursor* returns = new wxCursor(self->GetCursor());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxCursor*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCursor);

    return 1;
}

#endif // wxLUA_USE_wxCursor

static wxLuaArgType s_wxluatypeArray_wxLua_wxSetCursorEvent_GetX[] = { &wxluatype_wxSetCursorEvent, NULL };
static int LUACALL wxLua_wxSetCursorEvent_GetX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSetCursorEvent_GetX[1] = {{ wxLua_wxSetCursorEvent_GetX, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSetCursorEvent_GetX }};
//     wxCoord GetX() const
static int LUACALL wxLua_wxSetCursorEvent_GetX(lua_State *L)
{
    // get this
    wxSetCursorEvent * self = (wxSetCursorEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSetCursorEvent);
    // call GetX
    wxCoord returns = (self->GetX());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSetCursorEvent_GetY[] = { &wxluatype_wxSetCursorEvent, NULL };
static int LUACALL wxLua_wxSetCursorEvent_GetY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSetCursorEvent_GetY[1] = {{ wxLua_wxSetCursorEvent_GetY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSetCursorEvent_GetY }};
//     wxCoord GetY() const
static int LUACALL wxLua_wxSetCursorEvent_GetY(lua_State *L)
{
    // get this
    wxSetCursorEvent * self = (wxSetCursorEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSetCursorEvent);
    // call GetY
    wxCoord returns = (self->GetY());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSetCursorEvent_HasCursor[] = { &wxluatype_wxSetCursorEvent, NULL };
static int LUACALL wxLua_wxSetCursorEvent_HasCursor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSetCursorEvent_HasCursor[1] = {{ wxLua_wxSetCursorEvent_HasCursor, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSetCursorEvent_HasCursor }};
//     bool HasCursor() const
static int LUACALL wxLua_wxSetCursorEvent_HasCursor(lua_State *L)
{
    // get this
    wxSetCursorEvent * self = (wxSetCursorEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSetCursorEvent);
    // call HasCursor
    bool returns = (self->HasCursor());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if wxLUA_USE_wxCursor
static wxLuaArgType s_wxluatypeArray_wxLua_wxSetCursorEvent_SetCursor[] = { &wxluatype_wxSetCursorEvent, &wxluatype_wxCursor, NULL };
static int LUACALL wxLua_wxSetCursorEvent_SetCursor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSetCursorEvent_SetCursor[1] = {{ wxLua_wxSetCursorEvent_SetCursor, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSetCursorEvent_SetCursor }};
//     void SetCursor(const wxCursor& cursor)
static int LUACALL wxLua_wxSetCursorEvent_SetCursor(lua_State *L)
{
    // const wxCursor cursor
    const wxCursor * cursor = (const wxCursor *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCursor);
    // get this
    wxSetCursorEvent * self = (wxSetCursorEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSetCursorEvent);
    // call SetCursor
    self->SetCursor(*cursor);

    return 0;
}

#endif // wxLUA_USE_wxCursor

static wxLuaArgType s_wxluatypeArray_wxLua_wxSetCursorEvent_delete[] = { &wxluatype_wxSetCursorEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSetCursorEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSetCursorEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxSetCursorEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSetCursorEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSetCursorEvent_constructor[1] = {{ wxLua_wxSetCursorEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxSetCursorEvent_constructor }};
//     wxSetCursorEvent(wxCoord x = 0, wxCoord y = 0)
static int LUACALL wxLua_wxSetCursorEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxCoord y = 0
    wxCoord y = (argCount >= 2 ? (wxCoord)wxlua_getnumbertype(L, 2) : 0);
    // wxCoord x = 0
    wxCoord x = (argCount >= 1 ? (wxCoord)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxSetCursorEvent* returns = new wxSetCursorEvent(x, y);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSetCursorEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSetCursorEvent_methods[] = {
#if wxLUA_USE_wxCursor
    { "GetCursor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSetCursorEvent_GetCursor, 1, NULL },
#endif // wxLUA_USE_wxCursor

    { "GetX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSetCursorEvent_GetX, 1, NULL },
    { "GetY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSetCursorEvent_GetY, 1, NULL },
    { "HasCursor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSetCursorEvent_HasCursor, 1, NULL },

#if wxLUA_USE_wxCursor
    { "SetCursor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSetCursorEvent_SetCursor, 1, NULL },
#endif // wxLUA_USE_wxCursor

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSetCursorEvent_delete, 1, NULL },
    { "wxSetCursorEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSetCursorEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxSetCursorEvent_methodCount = sizeof(wxSetCursorEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxUpdateUIEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxUpdateUIEvent'
int wxluatype_wxUpdateUIEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_CanUpdate[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxUpdateUIEvent_CanUpdate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_CanUpdate[1] = {{ wxLua_wxUpdateUIEvent_CanUpdate, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxUpdateUIEvent_CanUpdate }};
//     static bool CanUpdate(wxWindow* window)
static int LUACALL wxLua_wxUpdateUIEvent_CanUpdate(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call CanUpdate
    bool returns = (wxUpdateUIEvent::CanUpdate(window));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_Check[] = { &wxluatype_wxUpdateUIEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxUpdateUIEvent_Check(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_Check[1] = {{ wxLua_wxUpdateUIEvent_Check, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxUpdateUIEvent_Check }};
//     void Check(bool check)
static int LUACALL wxLua_wxUpdateUIEvent_Check(lua_State *L)
{
    // bool check
    bool check = wxlua_getbooleantype(L, 2);
    // get this
    wxUpdateUIEvent * self = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxUpdateUIEvent);
    // call Check
    self->Check(check);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_Enable[] = { &wxluatype_wxUpdateUIEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxUpdateUIEvent_Enable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_Enable[1] = {{ wxLua_wxUpdateUIEvent_Enable, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxUpdateUIEvent_Enable }};
//     void Enable(bool enable)
static int LUACALL wxLua_wxUpdateUIEvent_Enable(lua_State *L)
{
    // bool enable
    bool enable = wxlua_getbooleantype(L, 2);
    // get this
    wxUpdateUIEvent * self = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxUpdateUIEvent);
    // call Enable
    self->Enable(enable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_GetChecked[] = { &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxUpdateUIEvent_GetChecked(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_GetChecked[1] = {{ wxLua_wxUpdateUIEvent_GetChecked, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxUpdateUIEvent_GetChecked }};
//     bool GetChecked() const
static int LUACALL wxLua_wxUpdateUIEvent_GetChecked(lua_State *L)
{
    // get this
    wxUpdateUIEvent * self = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxUpdateUIEvent);
    // call GetChecked
    bool returns = (self->GetChecked());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_GetEnabled[] = { &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxUpdateUIEvent_GetEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_GetEnabled[1] = {{ wxLua_wxUpdateUIEvent_GetEnabled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxUpdateUIEvent_GetEnabled }};
//     bool GetEnabled() const
static int LUACALL wxLua_wxUpdateUIEvent_GetEnabled(lua_State *L)
{
    // get this
    wxUpdateUIEvent * self = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxUpdateUIEvent);
    // call GetEnabled
    bool returns = (self->GetEnabled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static int LUACALL wxLua_wxUpdateUIEvent_GetMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_GetMode[1] = {{ wxLua_wxUpdateUIEvent_GetMode, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxUpdateUIMode GetMode()
static int LUACALL wxLua_wxUpdateUIEvent_GetMode(lua_State *L)
{
    // call GetMode
    wxUpdateUIMode returns = (wxUpdateUIEvent::GetMode());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_GetSetChecked[] = { &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxUpdateUIEvent_GetSetChecked(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_GetSetChecked[1] = {{ wxLua_wxUpdateUIEvent_GetSetChecked, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxUpdateUIEvent_GetSetChecked }};
//     bool GetSetChecked() const
static int LUACALL wxLua_wxUpdateUIEvent_GetSetChecked(lua_State *L)
{
    // get this
    wxUpdateUIEvent * self = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxUpdateUIEvent);
    // call GetSetChecked
    bool returns = (self->GetSetChecked());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_GetSetEnabled[] = { &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxUpdateUIEvent_GetSetEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_GetSetEnabled[1] = {{ wxLua_wxUpdateUIEvent_GetSetEnabled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxUpdateUIEvent_GetSetEnabled }};
//     bool GetSetEnabled() const
static int LUACALL wxLua_wxUpdateUIEvent_GetSetEnabled(lua_State *L)
{
    // get this
    wxUpdateUIEvent * self = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxUpdateUIEvent);
    // call GetSetEnabled
    bool returns = (self->GetSetEnabled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_GetSetShown[] = { &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxUpdateUIEvent_GetSetShown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_GetSetShown[1] = {{ wxLua_wxUpdateUIEvent_GetSetShown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxUpdateUIEvent_GetSetShown }};
//     %wxchkver_2_8 bool GetSetShown() const
static int LUACALL wxLua_wxUpdateUIEvent_GetSetShown(lua_State *L)
{
    // get this
    wxUpdateUIEvent * self = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxUpdateUIEvent);
    // call GetSetShown
    bool returns = (self->GetSetShown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // wxCHECK_VERSION(2,8,0)

static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_GetSetText[] = { &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxUpdateUIEvent_GetSetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_GetSetText[1] = {{ wxLua_wxUpdateUIEvent_GetSetText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxUpdateUIEvent_GetSetText }};
//     bool GetSetText() const
static int LUACALL wxLua_wxUpdateUIEvent_GetSetText(lua_State *L)
{
    // get this
    wxUpdateUIEvent * self = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxUpdateUIEvent);
    // call GetSetText
    bool returns = (self->GetSetText());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_GetShown[] = { &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxUpdateUIEvent_GetShown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_GetShown[1] = {{ wxLua_wxUpdateUIEvent_GetShown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxUpdateUIEvent_GetShown }};
//     %wxchkver_2_8 bool GetShown() const
static int LUACALL wxLua_wxUpdateUIEvent_GetShown(lua_State *L)
{
    // get this
    wxUpdateUIEvent * self = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxUpdateUIEvent);
    // call GetShown
    bool returns = (self->GetShown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // wxCHECK_VERSION(2,8,0)

static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_GetText[] = { &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxUpdateUIEvent_GetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_GetText[1] = {{ wxLua_wxUpdateUIEvent_GetText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxUpdateUIEvent_GetText }};
//     wxString GetText() const
static int LUACALL wxLua_wxUpdateUIEvent_GetText(lua_State *L)
{
    // get this
    wxUpdateUIEvent * self = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxUpdateUIEvent);
    // call GetText
    wxString returns = (self->GetText());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static int LUACALL wxLua_wxUpdateUIEvent_GetUpdateInterval(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_GetUpdateInterval[1] = {{ wxLua_wxUpdateUIEvent_GetUpdateInterval, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static long GetUpdateInterval()
static int LUACALL wxLua_wxUpdateUIEvent_GetUpdateInterval(lua_State *L)
{
    // call GetUpdateInterval
    long  returns = (wxUpdateUIEvent::GetUpdateInterval());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static int LUACALL wxLua_wxUpdateUIEvent_ResetUpdateTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_ResetUpdateTime[1] = {{ wxLua_wxUpdateUIEvent_ResetUpdateTime, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void ResetUpdateTime()
static int LUACALL wxLua_wxUpdateUIEvent_ResetUpdateTime(lua_State *L)
{
    // call ResetUpdateTime
    wxUpdateUIEvent::ResetUpdateTime();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_SetMode[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxUpdateUIEvent_SetMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_SetMode[1] = {{ wxLua_wxUpdateUIEvent_SetMode, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxUpdateUIEvent_SetMode }};
//     static void SetMode(wxUpdateUIMode mode)
static int LUACALL wxLua_wxUpdateUIEvent_SetMode(lua_State *L)
{
    // wxUpdateUIMode mode
    wxUpdateUIMode mode = (wxUpdateUIMode)wxlua_getenumtype(L, 1);
    // call SetMode
    wxUpdateUIEvent::SetMode(mode);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_SetText[] = { &wxluatype_wxUpdateUIEvent, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxUpdateUIEvent_SetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_SetText[1] = {{ wxLua_wxUpdateUIEvent_SetText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxUpdateUIEvent_SetText }};
//     void SetText(const wxString& text)
static int LUACALL wxLua_wxUpdateUIEvent_SetText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxUpdateUIEvent * self = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxUpdateUIEvent);
    // call SetText
    self->SetText(text);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_SetUpdateInterval[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxUpdateUIEvent_SetUpdateInterval(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_SetUpdateInterval[1] = {{ wxLua_wxUpdateUIEvent_SetUpdateInterval, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxUpdateUIEvent_SetUpdateInterval }};
//     static void SetUpdateInterval(long updateInterval)
static int LUACALL wxLua_wxUpdateUIEvent_SetUpdateInterval(lua_State *L)
{
    // long updateInterval
    long updateInterval = (long)wxlua_getnumbertype(L, 1);
    // call SetUpdateInterval
    wxUpdateUIEvent::SetUpdateInterval(updateInterval);

    return 0;
}


#if wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_Show[] = { &wxluatype_wxUpdateUIEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxUpdateUIEvent_Show(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_Show[1] = {{ wxLua_wxUpdateUIEvent_Show, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxUpdateUIEvent_Show }};
//     %wxchkver_2_8 void Show(bool show)
static int LUACALL wxLua_wxUpdateUIEvent_Show(lua_State *L)
{
    // bool show
    bool show = wxlua_getbooleantype(L, 2);
    // get this
    wxUpdateUIEvent * self = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxUpdateUIEvent);
    // call Show
    self->Show(show);

    return 0;
}

#endif // wxCHECK_VERSION(2,8,0)

static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_delete[] = { &wxluatype_wxUpdateUIEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxUpdateUIEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxUpdateUIEvent_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxUpdateUIEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxUpdateUIEvent_constructor[1] = {{ wxLua_wxUpdateUIEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxUpdateUIEvent_constructor }};
//     wxUpdateUIEvent(wxWindowID commandId = wxID_ANY)
static int LUACALL wxLua_wxUpdateUIEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindowID commandId = wxID_ANY
    wxWindowID commandId = (argCount >= 1 ? (wxWindowID)wxlua_getnumbertype(L, 1) : wxID_ANY);
    // call constructor
    wxUpdateUIEvent* returns = new wxUpdateUIEvent(commandId);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxUpdateUIEvent);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxUpdateUIEvent_methods[] = {
    { "CanUpdate", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxUpdateUIEvent_CanUpdate, 1, NULL },
    { "Check", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxUpdateUIEvent_Check, 1, NULL },
    { "Enable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxUpdateUIEvent_Enable, 1, NULL },
    { "GetChecked", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxUpdateUIEvent_GetChecked, 1, NULL },
    { "GetEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxUpdateUIEvent_GetEnabled, 1, NULL },
    { "GetMode", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxUpdateUIEvent_GetMode, 1, NULL },
    { "GetSetChecked", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxUpdateUIEvent_GetSetChecked, 1, NULL },
    { "GetSetEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxUpdateUIEvent_GetSetEnabled, 1, NULL },

#if wxCHECK_VERSION(2,8,0)
    { "GetSetShown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxUpdateUIEvent_GetSetShown, 1, NULL },
#endif // wxCHECK_VERSION(2,8,0)

    { "GetSetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxUpdateUIEvent_GetSetText, 1, NULL },

#if wxCHECK_VERSION(2,8,0)
    { "GetShown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxUpdateUIEvent_GetShown, 1, NULL },
#endif // wxCHECK_VERSION(2,8,0)

    { "GetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxUpdateUIEvent_GetText, 1, NULL },
    { "GetUpdateInterval", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxUpdateUIEvent_GetUpdateInterval, 1, NULL },
    { "ResetUpdateTime", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxUpdateUIEvent_ResetUpdateTime, 1, NULL },
    { "SetMode", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxUpdateUIEvent_SetMode, 1, NULL },
    { "SetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxUpdateUIEvent_SetText, 1, NULL },
    { "SetUpdateInterval", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxUpdateUIEvent_SetUpdateInterval, 1, NULL },

#if wxCHECK_VERSION(2,8,0)
    { "Show", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxUpdateUIEvent_Show, 1, NULL },
#endif // wxCHECK_VERSION(2,8,0)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxUpdateUIEvent_delete, 1, NULL },
    { "wxUpdateUIEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxUpdateUIEvent_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxUpdateUIEvent_methodCount = sizeof(wxUpdateUIEvent_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxHelpEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHelpEvent'
int wxluatype_wxHelpEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxHelpEvent_GetLink[] = { &wxluatype_wxHelpEvent, NULL };
static int LUACALL wxLua_wxHelpEvent_GetLink(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHelpEvent_GetLink[1] = {{ wxLua_wxHelpEvent_GetLink, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHelpEvent_GetLink }};
//     wxString GetLink()
static int LUACALL wxLua_wxHelpEvent_GetLink(lua_State *L)
{
    // get this
    wxHelpEvent * self = (wxHelpEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHelpEvent);
    // call GetLink
    wxString returns = (self->GetLink());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHelpEvent_GetOrigin[] = { &wxluatype_wxHelpEvent, NULL };
static int LUACALL wxLua_wxHelpEvent_GetOrigin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHelpEvent_GetOrigin[1] = {{ wxLua_wxHelpEvent_GetOrigin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHelpEvent_GetOrigin }};
//     %wxchkver_2_8 wxHelpEvent::Origin GetOrigin() const
static int LUACALL wxLua_wxHelpEvent_GetOrigin(lua_State *L)
{
    // get this
    wxHelpEvent * self = (wxHelpEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHelpEvent);
    // call GetOrigin
    wxHelpEvent::Origin returns = (self->GetOrigin());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // wxCHECK_VERSION(2,8,0)

#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxHelpEvent_GetPosition[] = { &wxluatype_wxHelpEvent, NULL };
static int LUACALL wxLua_wxHelpEvent_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHelpEvent_GetPosition[1] = {{ wxLua_wxHelpEvent_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHelpEvent_GetPosition }};
//     wxPoint  GetPosition()
static int LUACALL wxLua_wxHelpEvent_GetPosition(lua_State *L)
{
    // get this
    wxHelpEvent * self = (wxHelpEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHelpEvent);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxHelpEvent_GetTarget[] = { &wxluatype_wxHelpEvent, NULL };
static int LUACALL wxLua_wxHelpEvent_GetTarget(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHelpEvent_GetTarget[1] = {{ wxLua_wxHelpEvent_GetTarget, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHelpEvent_GetTarget }};
//     wxString GetTarget()
static int LUACALL wxLua_wxHelpEvent_GetTarget(lua_State *L)
{
    // get this
    wxHelpEvent * self = (wxHelpEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHelpEvent);
    // call GetTarget
    wxString returns = (self->GetTarget());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHelpEvent_SetLink[] = { &wxluatype_wxHelpEvent, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHelpEvent_SetLink(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHelpEvent_SetLink[1] = {{ wxLua_wxHelpEvent_SetLink, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHelpEvent_SetLink }};
//     void SetLink(const wxString& link)
static int LUACALL wxLua_wxHelpEvent_SetLink(lua_State *L)
{
    // const wxString link
    const wxString link = wxlua_getwxStringtype(L, 2);
    // get this
    wxHelpEvent * self = (wxHelpEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHelpEvent);
    // call SetLink
    self->SetLink(link);

    return 0;
}


#if wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHelpEvent_SetOrigin[] = { &wxluatype_wxHelpEvent, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxHelpEvent_SetOrigin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHelpEvent_SetOrigin[1] = {{ wxLua_wxHelpEvent_SetOrigin, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHelpEvent_SetOrigin }};
//     %wxchkver_2_8 void SetOrigin(wxHelpEvent::Origin origin)
static int LUACALL wxLua_wxHelpEvent_SetOrigin(lua_State *L)
{
    // wxHelpEvent::Origin origin
    wxHelpEvent::Origin origin = (wxHelpEvent::Origin)wxlua_getenumtype(L, 2);
    // get this
    wxHelpEvent * self = (wxHelpEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHelpEvent);
    // call SetOrigin
    self->SetOrigin(origin);

    return 0;
}

#endif // wxCHECK_VERSION(2,8,0)

#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxHelpEvent_SetPosition[] = { &wxluatype_wxHelpEvent, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxHelpEvent_SetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHelpEvent_SetPosition[1] = {{ wxLua_wxHelpEvent_SetPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHelpEvent_SetPosition }};
//     void SetPosition(const wxPoint& pos)
static int LUACALL wxLua_wxHelpEvent_SetPosition(lua_State *L)
{
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxHelpEvent * self = (wxHelpEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHelpEvent);
    // call SetPosition
    self->SetPosition(*pos);

    return 0;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxHelpEvent_SetTarget[] = { &wxluatype_wxHelpEvent, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHelpEvent_SetTarget(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHelpEvent_SetTarget[1] = {{ wxLua_wxHelpEvent_SetTarget, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHelpEvent_SetTarget }};
//     void SetTarget(const wxString& target)
static int LUACALL wxLua_wxHelpEvent_SetTarget(lua_State *L)
{
    // const wxString target
    const wxString target = wxlua_getwxStringtype(L, 2);
    // get this
    wxHelpEvent * self = (wxHelpEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHelpEvent);
    // call SetTarget
    self->SetTarget(target);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHelpEvent_delete[] = { &wxluatype_wxHelpEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHelpEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxHelpEvent_delete }};


#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxHelpEvent_constructor1[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxHelpEvent_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxHelpEvent_constructor1[1] = {{ wxLua_wxHelpEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxHelpEvent_constructor1 }};
//     %wxchkver_2_8 wxHelpEvent(wxEventType type = wxEVT_NULL, wxWindowID id = 0, const wxPoint& pt = wxDefaultPosition, wxHelpEvent::Origin origin = wxHelpEvent::Origin_Unknown)
static int LUACALL wxLua_wxHelpEvent_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxHelpEvent::Origin origin = wxHelpEvent::Origin_Unknown
    wxHelpEvent::Origin origin = (argCount >= 4 ? (wxHelpEvent::Origin)wxlua_getenumtype(L, 4) : wxHelpEvent::Origin_Unknown);
    // const wxPoint pt = wxDefaultPosition
    const wxPoint * pt = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = 0
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType type = wxEVT_NULL
    wxEventType type = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxHelpEvent* returns = new wxHelpEvent(type, id, *pt, origin);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHelpEvent);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0))

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHelpEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxHelpEvent_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxHelpEvent_constructor[1] = {{ wxLua_wxHelpEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxHelpEvent_constructor }};
//     !%wxchkver_2_8 wxHelpEvent(wxEventType type = wxEVT_NULL, wxWindowID id = 0, const wxPoint& pt = wxDefaultPosition)
static int LUACALL wxLua_wxHelpEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxPoint pt = wxDefaultPosition
    const wxPoint * pt = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = 0
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType type = wxEVT_NULL
    wxEventType type = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxHelpEvent* returns = new wxHelpEvent(type, id, *pt);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHelpEvent);

    return 1;
}

#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)



#if ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0)))||((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHelpEvent_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0))
    { wxLua_wxHelpEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxHelpEvent_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0))

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxHelpEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxHelpEvent_constructor },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)
};
static int s_wxluafunc_wxLua_wxHelpEvent_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxHelpEvent_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0)))||((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHelpEvent_methods[] = {
    { "GetLink", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHelpEvent_GetLink, 1, NULL },

#if wxCHECK_VERSION(2,8,0)
    { "GetOrigin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHelpEvent_GetOrigin, 1, NULL },
#endif // wxCHECK_VERSION(2,8,0)

#if wxLUA_USE_wxPointSizeRect
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHelpEvent_GetPosition, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "GetTarget", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHelpEvent_GetTarget, 1, NULL },
    { "SetLink", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHelpEvent_SetLink, 1, NULL },

#if wxCHECK_VERSION(2,8,0)
    { "SetOrigin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHelpEvent_SetOrigin, 1, NULL },
#endif // wxCHECK_VERSION(2,8,0)

#if wxLUA_USE_wxPointSizeRect
    { "SetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHelpEvent_SetPosition, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "SetTarget", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHelpEvent_SetTarget, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxHelpEvent_delete, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0)))||((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect))
    { "wxHelpEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHelpEvent_constructor_overload, s_wxluafunc_wxLua_wxHelpEvent_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0)))||((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect))

    { 0, 0, 0, 0 },
};

int wxHelpEvent_methodCount = sizeof(wxHelpEvent_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxHelpEvent_enums[] = {
#if wxCHECK_VERSION(2,8,0)
        { "Origin_HelpButton", wxHelpEvent::Origin_HelpButton },
        { "Origin_Keyboard", wxHelpEvent::Origin_Keyboard },
        { "Origin_Unknown", wxHelpEvent::Origin_Unknown },
#endif // wxCHECK_VERSION(2,8,0)

    { NULL, 0, },
};
int wxHelpEvent_enumCount = sizeof(wxHelpEvent_enums)/sizeof(wxLuaBindNumber) - 1;

