// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxcore_image.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxcore_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif



#if wxLUA_USE_wxImage && wxUSE_IMAGE
// ---------------------------------------------------------------------------
// Bind class wxImage
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxImage'
int wxluatype_wxImage = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_AddHandler[] = { &wxluatype_wxImageHandler, NULL };
static int LUACALL wxLua_wxImage_AddHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_AddHandler[1] = {{ wxLua_wxImage_AddHandler, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxImage_AddHandler }};
//     static void AddHandler(%ungc wxImageHandler* handler)
static int LUACALL wxLua_wxImage_AddHandler(lua_State *L)
{
    // wxImageHandler handler
    wxImageHandler * handler = (wxImageHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHandler);
    if (wxluaO_isgcobject(L, handler)) wxluaO_undeletegcobject(L, handler);
    // call AddHandler
    wxImage::AddHandler(handler);

    return 0;
}


#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_Blur[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_Blur(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Blur[1] = {{ wxLua_wxImage_Blur, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImage_Blur }};
//     %wxchkver_2_8 wxImage Blur(int radius)
static int LUACALL wxLua_wxImage_Blur(lua_State *L)
{
    // int radius
    int radius = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call Blur
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->Blur(radius));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxImage*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_BlurHorizontal[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_BlurHorizontal(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_BlurHorizontal[1] = {{ wxLua_wxImage_BlurHorizontal, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImage_BlurHorizontal }};
//     %wxchkver_2_8 wxImage BlurHorizontal(int radius)
static int LUACALL wxLua_wxImage_BlurHorizontal(lua_State *L)
{
    // int radius
    int radius = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call BlurHorizontal
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->BlurHorizontal(radius));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxImage*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_BlurVertical[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_BlurVertical(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_BlurVertical[1] = {{ wxLua_wxImage_BlurVertical, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImage_BlurVertical }};
//     %wxchkver_2_8 wxImage BlurVertical(int radius)
static int LUACALL wxLua_wxImage_BlurVertical(lua_State *L)
{
    // int radius
    int radius = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call BlurVertical
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->BlurVertical(radius));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxImage*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

static int LUACALL wxLua_wxImage_CleanUpHandlers(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_CleanUpHandlers[1] = {{ wxLua_wxImage_CleanUpHandlers, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void CleanUpHandlers()
static int LUACALL wxLua_wxImage_CleanUpHandlers(lua_State *L)
{
    // call CleanUpHandlers
    wxImage::CleanUpHandlers();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_ComputeHistogram[] = { &wxluatype_wxImage, &wxluatype_wxImageHistogram, NULL };
static int LUACALL wxLua_wxImage_ComputeHistogram(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_ComputeHistogram[1] = {{ wxLua_wxImage_ComputeHistogram, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImage_ComputeHistogram }};
//     unsigned long ComputeHistogram(wxImageHistogram& histogram) const
static int LUACALL wxLua_wxImage_ComputeHistogram(lua_State *L)
{
    // wxImageHistogram histogram
    wxImageHistogram * histogram = (wxImageHistogram *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImageHistogram);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call ComputeHistogram
    unsigned long returns = (self->ComputeHistogram(*histogram));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_ConvertToGreyscale[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_ConvertToGreyscale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_ConvertToGreyscale[1] = {{ wxLua_wxImage_ConvertToGreyscale, WXLUAMETHOD_METHOD, 1, 4, s_wxluatypeArray_wxLua_wxImage_ConvertToGreyscale }};
//     %wxchkver_2_8 wxImage ConvertToGreyscale( double lr = 0.299, double lg = 0.587, double lb = 0.114 ) const
static int LUACALL wxLua_wxImage_ConvertToGreyscale(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // double lb = 0.114
    double lb = (argCount >= 4 ? (double)wxlua_getnumbertype(L, 4) : 0.114);
    // double lg = 0.587
    double lg = (argCount >= 3 ? (double)wxlua_getnumbertype(L, 3) : 0.587);
    // double lr = 0.299
    double lr = (argCount >= 2 ? (double)wxlua_getnumbertype(L, 2) : 0.299);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call ConvertToGreyscale
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->ConvertToGreyscale(lr, lg, lb));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxImage*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_ConvertToMono[] = { &wxluatype_wxImage, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxImage_ConvertToMono(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_ConvertToMono[1] = {{ wxLua_wxImage_ConvertToMono, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxImage_ConvertToMono }};
//     wxImage ConvertToMono(unsigned char r, unsigned char g, unsigned char b) const
static int LUACALL wxLua_wxImage_ConvertToMono(lua_State *L)
{
    // unsigned char b
    unsigned char b = (unsigned char)wxlua_getuintegertype(L, 4);
    // unsigned char g
    unsigned char g = (unsigned char)wxlua_getuintegertype(L, 3);
    // unsigned char r
    unsigned char r = (unsigned char)wxlua_getuintegertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call ConvertToMono
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->ConvertToMono(r, g, b));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxImage*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_Copy[] = { &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxImage_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Copy[1] = {{ wxLua_wxImage_Copy, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImage_Copy }};
//     wxImage Copy() const
static int LUACALL wxLua_wxImage_Copy(lua_State *L)
{
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call Copy
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->Copy());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxImage*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_Create[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxImage_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Create[1] = {{ wxLua_wxImage_Create, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxImage_Create }};
//     void Create(int width, int height, bool clear=true)
static int LUACALL wxLua_wxImage_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool clear = true
    bool clear = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call Create
    self->Create(width, height, clear);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_Destroy[] = { &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxImage_Destroy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Destroy[1] = {{ wxLua_wxImage_Destroy, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImage_Destroy }};
//     void Destroy()
static int LUACALL wxLua_wxImage_Destroy(lua_State *L)
{
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call Destroy
    self->Destroy();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_FindFirstUnusedColour[] = { &wxluatype_wxImage, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxImage_FindFirstUnusedColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_FindFirstUnusedColour[1] = {{ wxLua_wxImage_FindFirstUnusedColour, WXLUAMETHOD_METHOD, 1, 4, s_wxluatypeArray_wxLua_wxImage_FindFirstUnusedColour }};
// %override wxLua_wxImage_FindFirstUnusedColour
//     bool FindFirstUnusedColour(unsigned char* r, unsigned char* g, unsigned char* b, unsigned char startR = 1, unsigned char startG = 0, unsigned char startB = 0)
static int LUACALL wxLua_wxImage_FindFirstUnusedColour(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // unsigned char startB = 0
    unsigned char startB = (argCount >= 4 ? (char)wxlua_getnumbertype(L, 4) : 0);
    // unsigned char startG = 0
    unsigned char startG = (argCount >= 3 ? (char)wxlua_getnumbertype(L, 3) : 0);
    // unsigned char startR = 1
    unsigned char startR = (argCount >= 2 ? (char)wxlua_getnumbertype(L, 2) : 1);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call FindFirstUnusedColour
    unsigned char r = 0, g = 0, b = 0;
    bool returns = self->FindFirstUnusedColour(&r, &g, &b, startR, startG, startB);
    // push the result flag
    lua_pushboolean(L, returns);
    lua_pushnumber(L, r);
    lua_pushnumber(L, g);
    lua_pushnumber(L, b);

    return 4;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_FindHandler2[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_FindHandler2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_FindHandler2[1] = {{ wxLua_wxImage_FindHandler2, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxImage_FindHandler2 }};
//     static wxImageHandler* FindHandler(long imageType)
static int LUACALL wxLua_wxImage_FindHandler2(lua_State *L)
{
    // long imageType
    long imageType = (long)wxlua_getnumbertype(L, 1);
    // call FindHandler
    wxImageHandler* returns = (wxImageHandler*)wxImage::FindHandler(imageType);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImageHandler);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_FindHandler1[] = { &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_FindHandler1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_FindHandler1[1] = {{ wxLua_wxImage_FindHandler1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxImage_FindHandler1 }};
//     static wxImageHandler* FindHandler(const wxString& extension, long imageType)
static int LUACALL wxLua_wxImage_FindHandler1(lua_State *L)
{
    // long imageType
    long imageType = (long)wxlua_getnumbertype(L, 2);
    // const wxString extension
    const wxString extension = wxlua_getwxStringtype(L, 1);
    // call FindHandler
    wxImageHandler* returns = (wxImageHandler*)wxImage::FindHandler(extension, imageType);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImageHandler);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_FindHandler[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxImage_FindHandler(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_FindHandler[1] = {{ wxLua_wxImage_FindHandler, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxImage_FindHandler }};
//     static wxImageHandler* FindHandler(const wxString& name)
static int LUACALL wxLua_wxImage_FindHandler(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call FindHandler
    wxImageHandler* returns = (wxImageHandler*)wxImage::FindHandler(name);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImageHandler);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_FindHandlerMime[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxImage_FindHandlerMime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_FindHandlerMime[1] = {{ wxLua_wxImage_FindHandlerMime, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxImage_FindHandlerMime }};
//     static wxImageHandler* FindHandlerMime(const wxString& mimetype)
static int LUACALL wxLua_wxImage_FindHandlerMime(lua_State *L)
{
    // const wxString mimetype
    const wxString mimetype = wxlua_getwxStringtype(L, 1);
    // call FindHandlerMime
    wxImageHandler* returns = (wxImageHandler*)wxImage::FindHandlerMime(mimetype);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImageHandler);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetAlpha[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_GetAlpha(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetAlpha[1] = {{ wxLua_wxImage_GetAlpha, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_GetAlpha }};
//     unsigned char GetAlpha(int x, int y) const
static int LUACALL wxLua_wxImage_GetAlpha(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call GetAlpha
    unsigned char returns = (self->GetAlpha(x, y));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetBlue[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_GetBlue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetBlue[1] = {{ wxLua_wxImage_GetBlue, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_GetBlue }};
//     unsigned char GetBlue(int x, int y) const
static int LUACALL wxLua_wxImage_GetBlue(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call GetBlue
    unsigned char returns = (self->GetBlue(x, y));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetData[] = { &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxImage_GetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetData[1] = {{ wxLua_wxImage_GetData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImage_GetData }};
// %override wxLua_wxImage_GetData
//     unsigned char* GetData() const
static int LUACALL wxLua_wxImage_GetData(lua_State *L)
{
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call GetData
    char* returns = (char*)self->GetData();
    // push the result pointer
    lua_pushlstring(L, returns, self->GetWidth()*self->GetHeight()*3);

    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetGreen[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_GetGreen(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetGreen[1] = {{ wxLua_wxImage_GetGreen, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_GetGreen }};
//     unsigned char GetGreen(int x, int y) const
static int LUACALL wxLua_wxImage_GetGreen(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call GetGreen
    unsigned char returns = (self->GetGreen(x, y));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
static int LUACALL wxLua_wxImage_GetHandlers(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetHandlers[1] = {{ wxLua_wxImage_GetHandlers, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxList& GetHandlers()
static int LUACALL wxLua_wxImage_GetHandlers(lua_State *L)
{
    // call GetHandlers
    wxList* returns = &wxImage::GetHandlers();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxList);

    return 1;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetHeight[] = { &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxImage_GetHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetHeight[1] = {{ wxLua_wxImage_GetHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImage_GetHeight }};
//     int GetHeight() const
static int LUACALL wxLua_wxImage_GetHeight(lua_State *L)
{
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call GetHeight
    int returns = (self->GetHeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetImageCount1[] = { &wxluatype_wxInputStream, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_GetImageCount1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetImageCount1[1] = {{ wxLua_wxImage_GetImageCount1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxImage_GetImageCount1 }};
//     static int GetImageCount(wxInputStream& stream, long type = wxBITMAP_TYPE_ANY)
static int LUACALL wxLua_wxImage_GetImageCount1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long type = wxBITMAP_TYPE_ANY
    long type = (argCount >= 2 ? (long)wxlua_getnumbertype(L, 2) : wxBITMAP_TYPE_ANY);
    // wxInputStream stream
    wxInputStream * stream = (wxInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxInputStream);
    // call GetImageCount
    int returns = (wxImage::GetImageCount(*stream, type));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetImageCount[] = { &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_GetImageCount(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetImageCount[1] = {{ wxLua_wxImage_GetImageCount, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxImage_GetImageCount }};
//     static int GetImageCount(const wxString& filename, long type = wxBITMAP_TYPE_ANY)
static int LUACALL wxLua_wxImage_GetImageCount(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long type = wxBITMAP_TYPE_ANY
    long type = (argCount >= 2 ? (long)wxlua_getnumbertype(L, 2) : wxBITMAP_TYPE_ANY);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 1);
    // call GetImageCount
    int returns = (wxImage::GetImageCount(filename, type));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static int LUACALL wxLua_wxImage_GetImageExtWildcard(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetImageExtWildcard[1] = {{ wxLua_wxImage_GetImageExtWildcard, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxString GetImageExtWildcard()
static int LUACALL wxLua_wxImage_GetImageExtWildcard(lua_State *L)
{
    // call GetImageExtWildcard
    wxString returns = (wxImage::GetImageExtWildcard());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetMaskBlue[] = { &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxImage_GetMaskBlue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetMaskBlue[1] = {{ wxLua_wxImage_GetMaskBlue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImage_GetMaskBlue }};
//     unsigned char GetMaskBlue() const
static int LUACALL wxLua_wxImage_GetMaskBlue(lua_State *L)
{
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call GetMaskBlue
    unsigned char returns = (self->GetMaskBlue());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetMaskGreen[] = { &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxImage_GetMaskGreen(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetMaskGreen[1] = {{ wxLua_wxImage_GetMaskGreen, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImage_GetMaskGreen }};
//     unsigned char GetMaskGreen() const
static int LUACALL wxLua_wxImage_GetMaskGreen(lua_State *L)
{
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call GetMaskGreen
    unsigned char returns = (self->GetMaskGreen());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetMaskRed[] = { &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxImage_GetMaskRed(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetMaskRed[1] = {{ wxLua_wxImage_GetMaskRed, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImage_GetMaskRed }};
//     unsigned char GetMaskRed() const
static int LUACALL wxLua_wxImage_GetMaskRed(lua_State *L)
{
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call GetMaskRed
    unsigned char returns = (self->GetMaskRed());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetOption[] = { &wxluatype_wxImage, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxImage_GetOption(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetOption[1] = {{ wxLua_wxImage_GetOption, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImage_GetOption }};
//     wxString GetOption(const wxString &name) const
static int LUACALL wxLua_wxImage_GetOption(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call GetOption
    wxString returns = (self->GetOption(name));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetOptionInt[] = { &wxluatype_wxImage, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxImage_GetOptionInt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetOptionInt[1] = {{ wxLua_wxImage_GetOptionInt, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImage_GetOptionInt }};
//     int GetOptionInt(const wxString &name) const
static int LUACALL wxLua_wxImage_GetOptionInt(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call GetOptionInt
    int returns = (self->GetOptionInt(name));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetOrFindMaskColour[] = { &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxImage_GetOrFindMaskColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetOrFindMaskColour[1] = {{ wxLua_wxImage_GetOrFindMaskColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImage_GetOrFindMaskColour }};
// %override wxLua_wxImage_GetOrFindMaskColour
// bool GetOrFindMaskColour(unsigned char *r, unsigned char *g, unsigned char *b) const
static int LUACALL wxLua_wxImage_GetOrFindMaskColour(lua_State *L)
{
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call FindFirstUnusedColour
    unsigned char r = 0, g = 0, b = 0;
    bool returns = self->GetOrFindMaskColour(&r, &g, &b);
    // push the result flag
    lua_pushboolean(L, returns);
    lua_pushnumber(L, r);
    lua_pushnumber(L, g);
    lua_pushnumber(L, b);

    return 4;
}



#if (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetPalette[] = { &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxImage_GetPalette(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetPalette[1] = {{ wxLua_wxImage_GetPalette, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImage_GetPalette }};
//     wxPalette GetPalette() const
static int LUACALL wxLua_wxImage_GetPalette(lua_State *L)
{
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call GetPalette
    // allocate a new object using the copy constructor
    wxPalette* returns = new wxPalette(self->GetPalette());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxPalette*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPalette);

    return 1;
}

#endif // (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetRed[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_GetRed(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetRed[1] = {{ wxLua_wxImage_GetRed, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_GetRed }};
//     unsigned char GetRed(int x, int y) const
static int LUACALL wxLua_wxImage_GetRed(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call GetRed
    unsigned char returns = (self->GetRed(x, y));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetSubImage[] = { &wxluatype_wxImage, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxImage_GetSubImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetSubImage[1] = {{ wxLua_wxImage_GetSubImage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImage_GetSubImage }};
//     wxImage GetSubImage(const wxRect& rect) const
static int LUACALL wxLua_wxImage_GetSubImage(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call GetSubImage
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->GetSubImage(*rect));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxImage*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_GetWidth[] = { &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxImage_GetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetWidth[1] = {{ wxLua_wxImage_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImage_GetWidth }};
//     int GetWidth() const
static int LUACALL wxLua_wxImage_GetWidth(lua_State *L)
{
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call GetWidth
    int returns = (self->GetWidth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_HSVtoRGB[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_HSVtoRGB(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_HSVtoRGB[1] = {{ wxLua_wxImage_HSVtoRGB, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxImage_HSVtoRGB }};
// %override wxLua_wxImage_HSVtoRGB
//     static int HSVtoRGB(double h, double s, double v)
static int LUACALL wxLua_wxImage_HSVtoRGB(lua_State *L)
{
    // double v
    double v = (double)wxlua_getnumbertype(L, 4);
    // double s
    double s = (double)wxlua_getnumbertype(L, 3);
    // double h
    double h = (double)wxlua_getnumbertype(L, 2);
    // call HSVtoRGB
    wxImage::RGBValue rgbValue = wxImage::HSVtoRGB(wxImage::HSVValue(h, s, v));
    // push the result number
    lua_pushnumber(L, rgbValue.red);
    lua_pushnumber(L, rgbValue.green);
    lua_pushnumber(L, rgbValue.blue);

    return 3;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_HasAlpha[] = { &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxImage_HasAlpha(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_HasAlpha[1] = {{ wxLua_wxImage_HasAlpha, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImage_HasAlpha }};
//     bool HasAlpha() const
static int LUACALL wxLua_wxImage_HasAlpha(lua_State *L)
{
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call HasAlpha
    bool returns = (self->HasAlpha());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_HasMask[] = { &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxImage_HasMask(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_HasMask[1] = {{ wxLua_wxImage_HasMask, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImage_HasMask }};
//     bool HasMask() const
static int LUACALL wxLua_wxImage_HasMask(lua_State *L)
{
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call HasMask
    bool returns = (self->HasMask());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_HasOption[] = { &wxluatype_wxImage, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxImage_HasOption(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_HasOption[1] = {{ wxLua_wxImage_HasOption, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImage_HasOption }};
//     int HasOption(const wxString &name) const
static int LUACALL wxLua_wxImage_HasOption(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call HasOption
    int returns = (self->HasOption(name));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_InitAlpha[] = { &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxImage_InitAlpha(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_InitAlpha[1] = {{ wxLua_wxImage_InitAlpha, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImage_InitAlpha }};
//     void InitAlpha()
static int LUACALL wxLua_wxImage_InitAlpha(lua_State *L)
{
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call InitAlpha
    self->InitAlpha();

    return 0;
}

static int LUACALL wxLua_wxImage_InitStandardHandlers(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_InitStandardHandlers[1] = {{ wxLua_wxImage_InitStandardHandlers, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void InitStandardHandlers()
static int LUACALL wxLua_wxImage_InitStandardHandlers(lua_State *L)
{
    // call InitStandardHandlers
    wxImage::InitStandardHandlers();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_InsertHandler[] = { &wxluatype_wxImageHandler, NULL };
static int LUACALL wxLua_wxImage_InsertHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_InsertHandler[1] = {{ wxLua_wxImage_InsertHandler, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxImage_InsertHandler }};
//     static void InsertHandler(%ungc wxImageHandler* handler)
static int LUACALL wxLua_wxImage_InsertHandler(lua_State *L)
{
    // wxImageHandler handler
    wxImageHandler * handler = (wxImageHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHandler);
    if (wxluaO_isgcobject(L, handler)) wxluaO_undeletegcobject(L, handler);
    // call InsertHandler
    wxImage::InsertHandler(handler);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_IsTransparent[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxImage_IsTransparent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_IsTransparent[1] = {{ wxLua_wxImage_IsTransparent, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxImage_IsTransparent }};
//     bool IsTransparent(int x, int y, unsigned char threshold = 128) const
static int LUACALL wxLua_wxImage_IsTransparent(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // unsigned char threshold = 128
    unsigned char threshold = (argCount >= 4 ? (unsigned char)wxlua_getuintegertype(L, 4) : 128);
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call IsTransparent
    bool returns = (self->IsTransparent(x, y, threshold));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_LoadFile3[] = { &wxluatype_wxImage, &wxluatype_wxInputStream, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_LoadFile3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_LoadFile3[1] = {{ wxLua_wxImage_LoadFile3, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxImage_LoadFile3 }};
//     bool LoadFile(wxInputStream& stream, const wxString& mimetype, int index = -1)
static int LUACALL wxLua_wxImage_LoadFile3(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int index = -1
    int index = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // const wxString mimetype
    const wxString mimetype = wxlua_getwxStringtype(L, 3);
    // wxInputStream stream
    wxInputStream * stream = (wxInputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxInputStream);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call LoadFile
    bool returns = (self->LoadFile(*stream, mimetype, index));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_LoadFile2[] = { &wxluatype_wxImage, &wxluatype_wxInputStream, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_LoadFile2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_LoadFile2[1] = {{ wxLua_wxImage_LoadFile2, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxImage_LoadFile2 }};
//     bool LoadFile(wxInputStream& stream, long type = wxBITMAP_TYPE_ANY, int index = -1)
static int LUACALL wxLua_wxImage_LoadFile2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int index = -1
    int index = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // long type = wxBITMAP_TYPE_ANY
    long type = (argCount >= 3 ? (long)wxlua_getnumbertype(L, 3) : wxBITMAP_TYPE_ANY);
    // wxInputStream stream
    wxInputStream * stream = (wxInputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxInputStream);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call LoadFile
    bool returns = (self->LoadFile(*stream, type, index));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_LoadFile1[] = { &wxluatype_wxImage, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_LoadFile1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_LoadFile1[1] = {{ wxLua_wxImage_LoadFile1, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxImage_LoadFile1 }};
//     bool LoadFile(const wxString& name, const wxString& mimetype, int index = -1)
static int LUACALL wxLua_wxImage_LoadFile1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int index = -1
    int index = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // const wxString mimetype
    const wxString mimetype = wxlua_getwxStringtype(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call LoadFile
    bool returns = (self->LoadFile(name, mimetype, index));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_LoadFile[] = { &wxluatype_wxImage, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_LoadFile(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_LoadFile[1] = {{ wxLua_wxImage_LoadFile, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxImage_LoadFile }};
//     bool LoadFile(const wxString& name, long type = wxBITMAP_TYPE_ANY, int index = -1)
static int LUACALL wxLua_wxImage_LoadFile(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int index = -1
    int index = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // long type = wxBITMAP_TYPE_ANY
    long type = (argCount >= 3 ? (long)wxlua_getnumbertype(L, 3) : wxBITMAP_TYPE_ANY);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call LoadFile
    bool returns = (self->LoadFile(name, type, index));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_Mirror[] = { &wxluatype_wxImage, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxImage_Mirror(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Mirror[1] = {{ wxLua_wxImage_Mirror, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxImage_Mirror }};
//     wxImage Mirror(bool horizontally = true) const
static int LUACALL wxLua_wxImage_Mirror(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool horizontally = true
    bool horizontally = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call Mirror
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->Mirror(horizontally));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxImage*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_Ok[] = { &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxImage_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Ok[1] = {{ wxLua_wxImage_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImage_Ok }};
//     bool Ok() const
static int LUACALL wxLua_wxImage_Ok(lua_State *L)
{
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_RGBtoHSV[] = { &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxImage_RGBtoHSV(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_RGBtoHSV[1] = {{ wxLua_wxImage_RGBtoHSV, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxImage_RGBtoHSV }};
// %override wxLua_wxImage_RGBtoHSV
//     static int RGBtoHSV(unsigned char r, unsigned char g, unsigned char b)
static int LUACALL wxLua_wxImage_RGBtoHSV(lua_State *L)
{
    // unsigned char b
    unsigned char b = (char)wxlua_getnumbertype(L, 4);
    // unsigned char g
    unsigned char g = (char)wxlua_getnumbertype(L, 3);
    // unsigned char r
    unsigned char r = (char)wxlua_getnumbertype(L, 2);
    // call HSVtoRGB
    wxImage::HSVValue hsvValue = wxImage::RGBtoHSV(wxImage::RGBValue(r, g, b));
    // push the result number
    lua_pushnumber(L, hsvValue.hue);
    lua_pushnumber(L, hsvValue.saturation);
    lua_pushnumber(L, hsvValue.value);

    return 3;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_RemoveHandler[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxImage_RemoveHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_RemoveHandler[1] = {{ wxLua_wxImage_RemoveHandler, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxImage_RemoveHandler }};
//     static bool RemoveHandler(const wxString& name)
static int LUACALL wxLua_wxImage_RemoveHandler(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call RemoveHandler
    bool returns = (wxImage::RemoveHandler(name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_Replace[] = { &wxluatype_wxImage, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxImage_Replace(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Replace[1] = {{ wxLua_wxImage_Replace, WXLUAMETHOD_METHOD, 7, 7, s_wxluatypeArray_wxLua_wxImage_Replace }};
//     void Replace(unsigned char r1, unsigned char g1, unsigned char b1, unsigned char r2, unsigned char g2, unsigned char b2)
static int LUACALL wxLua_wxImage_Replace(lua_State *L)
{
    // unsigned char b2
    unsigned char b2 = (unsigned char)wxlua_getuintegertype(L, 7);
    // unsigned char g2
    unsigned char g2 = (unsigned char)wxlua_getuintegertype(L, 6);
    // unsigned char r2
    unsigned char r2 = (unsigned char)wxlua_getuintegertype(L, 5);
    // unsigned char b1
    unsigned char b1 = (unsigned char)wxlua_getuintegertype(L, 4);
    // unsigned char g1
    unsigned char g1 = (unsigned char)wxlua_getuintegertype(L, 3);
    // unsigned char r1
    unsigned char r1 = (unsigned char)wxlua_getuintegertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call Replace
    self->Replace(r1, g1, b1, r2, g2, b2);

    return 0;
}


#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_ResampleBicubic[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_ResampleBicubic(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_ResampleBicubic[1] = {{ wxLua_wxImage_ResampleBicubic, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_ResampleBicubic }};
//     %wxchkver_2_8 wxImage ResampleBicubic(int width, int height) const
static int LUACALL wxLua_wxImage_ResampleBicubic(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call ResampleBicubic
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->ResampleBicubic(width, height));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxImage*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_ResampleBox[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_ResampleBox(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_ResampleBox[1] = {{ wxLua_wxImage_ResampleBox, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_ResampleBox }};
//     %wxchkver_2_8 wxImage ResampleBox(int width, int height) const
static int LUACALL wxLua_wxImage_ResampleBox(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call ResampleBox
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->ResampleBox(width, height));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxImage*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_Rescale1[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_Rescale1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Rescale1[1] = {{ wxLua_wxImage_Rescale1, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxImage_Rescale1 }};
//     %wxchkver_2_8 wxImage& Rescale( int width, int height, int quality = wxIMAGE_QUALITY_NORMAL )
static int LUACALL wxLua_wxImage_Rescale1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int quality = wxIMAGE_QUALITY_NORMAL
    int quality = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxIMAGE_QUALITY_NORMAL);
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call Rescale
    wxImage* returns = &self->Rescale(width, height, quality);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE))
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_Rescale[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_Rescale(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Rescale[1] = {{ wxLua_wxImage_Rescale, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_Rescale }};
//     !%wxchkver_2_8 wxImage& Rescale(int width, int height)
static int LUACALL wxLua_wxImage_Rescale(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call Rescale
    wxImage* returns = &self->Rescale(width, height);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE))

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_Resize[] = { &wxluatype_wxImage, &wxluatype_wxSize, &wxluatype_wxPoint, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_Resize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Resize[1] = {{ wxLua_wxImage_Resize, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxImage_Resize }};
//     wxImage& Resize(const wxSize& size, const wxPoint& pos, int red = -1, int green = -1, int blue = -1)
static int LUACALL wxLua_wxImage_Resize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int blue = -1
    int blue = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int green = -1
    int green = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // int red = -1
    int red = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint);
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call Resize
    wxImage* returns = &self->Resize(*size, *pos, red, green, blue);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_Rotate[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_TBOOLEAN, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxImage_Rotate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Rotate[1] = {{ wxLua_wxImage_Rotate, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxImage_Rotate }};
//     wxImage Rotate(double angle, const wxPoint& rotationCentre, bool interpolating = true, wxPoint* offsetAfterRotation = NULL)
static int LUACALL wxLua_wxImage_Rotate(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPoint offsetAfterRotation = NULL
    wxPoint * offsetAfterRotation = (argCount >= 5 ? (wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : NULL);
    // bool interpolating = true
    bool interpolating = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // const wxPoint rotationCentre
    const wxPoint * rotationCentre = (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint);
    // double angle
    double angle = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call Rotate
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->Rotate(angle, *rotationCentre, interpolating, offsetAfterRotation));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxImage*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_Rotate90[] = { &wxluatype_wxImage, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxImage_Rotate90(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Rotate90[1] = {{ wxLua_wxImage_Rotate90, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxImage_Rotate90 }};
//     wxImage Rotate90(bool clockwise = true) const
static int LUACALL wxLua_wxImage_Rotate90(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool clockwise = true
    bool clockwise = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call Rotate90
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->Rotate90(clockwise));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxImage*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_RotateHue[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_RotateHue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_RotateHue[1] = {{ wxLua_wxImage_RotateHue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImage_RotateHue }};
//     void RotateHue(double angle)
static int LUACALL wxLua_wxImage_RotateHue(lua_State *L)
{
    // double angle
    double angle = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call RotateHue
    self->RotateHue(angle);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_SaveFile2[] = { &wxluatype_wxImage, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxImage_SaveFile2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SaveFile2[1] = {{ wxLua_wxImage_SaveFile2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_SaveFile2 }};
//     bool SaveFile(const wxString& name, const wxString& mimetype)
static int LUACALL wxLua_wxImage_SaveFile2(lua_State *L)
{
    // const wxString mimetype
    const wxString mimetype = wxlua_getwxStringtype(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call SaveFile
    bool returns = (self->SaveFile(name, mimetype));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_SaveFile1[] = { &wxluatype_wxImage, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_SaveFile1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SaveFile1[1] = {{ wxLua_wxImage_SaveFile1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_SaveFile1 }};
//     bool SaveFile(const wxString& name, int type)
static int LUACALL wxLua_wxImage_SaveFile1(lua_State *L)
{
    // int type
    int type = (int)wxlua_getnumbertype(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call SaveFile
    bool returns = (self->SaveFile(name, type));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_SaveFile[] = { &wxluatype_wxImage, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxImage_SaveFile(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SaveFile[1] = {{ wxLua_wxImage_SaveFile, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImage_SaveFile }};
//     bool SaveFile(const wxString& name)
static int LUACALL wxLua_wxImage_SaveFile(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call SaveFile
    bool returns = (self->SaveFile(name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_Scale1[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_Scale1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Scale1[1] = {{ wxLua_wxImage_Scale1, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxImage_Scale1 }};
//     %wxchkver_2_8 wxImage Scale( int width, int height, int quality = wxIMAGE_QUALITY_NORMAL ) const
static int LUACALL wxLua_wxImage_Scale1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int quality = wxIMAGE_QUALITY_NORMAL
    int quality = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxIMAGE_QUALITY_NORMAL);
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call Scale
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->Scale(width, height, quality));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxImage*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE))
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_Scale[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_Scale(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Scale[1] = {{ wxLua_wxImage_Scale, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_Scale }};
//     !%wxchkver_2_8 wxImage Scale(int width, int height) const
static int LUACALL wxLua_wxImage_Scale(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call Scale
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->Scale(width, height));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxImage*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE))

#define wxLua_wxImage_SetAlpha1 wxLua_wxImage_SetAlphaData
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_SetAlpha1[] = { &wxluatype_wxImage, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxImage_SetAlpha1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SetAlpha1[1] = {{ wxLua_wxImage_SetAlpha1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImage_SetAlpha1 }};
// %override wxLua_wxImage_SetAlphaData
// void SetAlpha(unsigned char *alpha = NULL,bool static_data = false)
static int LUACALL wxLua_wxImage_SetAlphaData(lua_State *L)
{
    // unsigned char *data
    size_t len = 0;
    unsigned char *data = (unsigned char *)lua_tolstring(L, 2, &len);
    // get this
    wxImage *self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call SetData
    if ((len == 0) || !self->Ok()) wxlua_argerrormsg(L, wxT("Invalid data or wxImage to call SetAlphaData() to."));
    // don't actually call SetAlpha since it takes ownership of data
    // just copy it to the image
    self->SetAlpha(NULL); // the wxImage has created the alpha channel
    size_t size = 3*self->GetWidth()*self->GetHeight();
    memcpy(self->GetAlpha(), data, wxMin(len, size));
    // return the number of parameters
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_SetAlpha[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxImage_SetAlpha(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SetAlpha[1] = {{ wxLua_wxImage_SetAlpha, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxImage_SetAlpha }};
//     void SetAlpha(int x, int y, unsigned char alpha)
static int LUACALL wxLua_wxImage_SetAlpha(lua_State *L)
{
    // unsigned char alpha
    unsigned char alpha = (unsigned char)wxlua_getuintegertype(L, 4);
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call SetAlpha
    self->SetAlpha(x, y, alpha);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_SetData[] = { &wxluatype_wxImage, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxImage_SetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SetData[1] = {{ wxLua_wxImage_SetData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImage_SetData }};
// %override wxLua_wxImage_SetData
// void SetData(unsigned char *data)
static int LUACALL wxLua_wxImage_SetData(lua_State *L)
{
    // unsigned char *data
    size_t len = 0;
    unsigned char *data = (unsigned char *)lua_tolstring(L, 2, &len);
    // get this
    wxImage *self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call SetData
    if ((len == 0) || !self->Ok()) wxlua_argerrormsg(L, wxT("Invalid data or wxImage to call SetData() on."));
    // don't actually call SetData since it takes ownership of data
    // just copy it to the image
    size_t size = 3*self->GetWidth()*self->GetHeight();
    memcpy(self->GetData(), data, wxMin(len, size));
    // return the number of parameters
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_SetMask[] = { &wxluatype_wxImage, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxImage_SetMask(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SetMask[1] = {{ wxLua_wxImage_SetMask, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxImage_SetMask }};
//     void SetMask(bool hasMask = true)
static int LUACALL wxLua_wxImage_SetMask(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool hasMask = true
    bool hasMask = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call SetMask
    self->SetMask(hasMask);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_SetMaskColour[] = { &wxluatype_wxImage, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxImage_SetMaskColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SetMaskColour[1] = {{ wxLua_wxImage_SetMaskColour, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxImage_SetMaskColour }};
//     void SetMaskColour(unsigned char red, unsigned char blue, unsigned char green)
static int LUACALL wxLua_wxImage_SetMaskColour(lua_State *L)
{
    // unsigned char green
    unsigned char green = (unsigned char)wxlua_getuintegertype(L, 4);
    // unsigned char blue
    unsigned char blue = (unsigned char)wxlua_getuintegertype(L, 3);
    // unsigned char red
    unsigned char red = (unsigned char)wxlua_getuintegertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call SetMaskColour
    self->SetMaskColour(red, blue, green);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_SetMaskFromImage[] = { &wxluatype_wxImage, &wxluatype_wxImage, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxImage_SetMaskFromImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SetMaskFromImage[1] = {{ wxLua_wxImage_SetMaskFromImage, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxImage_SetMaskFromImage }};
//     bool SetMaskFromImage(const wxImage& mask, unsigned char mr, unsigned char mg, unsigned char mb)
static int LUACALL wxLua_wxImage_SetMaskFromImage(lua_State *L)
{
    // unsigned char mb
    unsigned char mb = (unsigned char)wxlua_getuintegertype(L, 5);
    // unsigned char mg
    unsigned char mg = (unsigned char)wxlua_getuintegertype(L, 4);
    // unsigned char mr
    unsigned char mr = (unsigned char)wxlua_getuintegertype(L, 3);
    // const wxImage mask
    const wxImage * mask = (const wxImage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImage);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call SetMaskFromImage
    bool returns = (self->SetMaskFromImage(*mask, mr, mg, mb));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_SetOption1[] = { &wxluatype_wxImage, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_SetOption1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SetOption1[1] = {{ wxLua_wxImage_SetOption1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_SetOption1 }};
//     void SetOption(const wxString &name, int value)
static int LUACALL wxLua_wxImage_SetOption1(lua_State *L)
{
    // int value
    int value = (int)wxlua_getnumbertype(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call SetOption
    self->SetOption(name, value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_SetOption[] = { &wxluatype_wxImage, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxImage_SetOption(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SetOption[1] = {{ wxLua_wxImage_SetOption, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_SetOption }};
//     void SetOption(const wxString &name, const wxString &value)
static int LUACALL wxLua_wxImage_SetOption(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call SetOption
    self->SetOption(name, value);

    return 0;
}


#if (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_SetPalette[] = { &wxluatype_wxImage, &wxluatype_wxPalette, NULL };
static int LUACALL wxLua_wxImage_SetPalette(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SetPalette[1] = {{ wxLua_wxImage_SetPalette, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImage_SetPalette }};
//     void SetPalette(const wxPalette& palette)
static int LUACALL wxLua_wxImage_SetPalette(lua_State *L)
{
    // const wxPalette palette
    const wxPalette * palette = (const wxPalette *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPalette);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call SetPalette
    self->SetPalette(*palette);

    return 0;
}

#endif // (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_SetRGB1[] = { &wxluatype_wxImage, &wxluatype_wxRect, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxImage_SetRGB1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SetRGB1[1] = {{ wxLua_wxImage_SetRGB1, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxImage_SetRGB1 }};
//     void SetRGB(wxRect& rect, unsigned char red, unsigned char green, unsigned char blue)
static int LUACALL wxLua_wxImage_SetRGB1(lua_State *L)
{
    // unsigned char blue
    unsigned char blue = (unsigned char)wxlua_getuintegertype(L, 5);
    // unsigned char green
    unsigned char green = (unsigned char)wxlua_getuintegertype(L, 4);
    // unsigned char red
    unsigned char red = (unsigned char)wxlua_getuintegertype(L, 3);
    // wxRect rect
    wxRect * rect = (wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call SetRGB
    self->SetRGB(*rect, red, green, blue);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_SetRGB[] = { &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxImage_SetRGB(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SetRGB[1] = {{ wxLua_wxImage_SetRGB, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxImage_SetRGB }};
//     void SetRGB(int x, int y, unsigned char red, unsigned char green, unsigned char blue)
static int LUACALL wxLua_wxImage_SetRGB(lua_State *L)
{
    // unsigned char blue
    unsigned char blue = (unsigned char)wxlua_getuintegertype(L, 6);
    // unsigned char green
    unsigned char green = (unsigned char)wxlua_getuintegertype(L, 5);
    // unsigned char red
    unsigned char red = (unsigned char)wxlua_getuintegertype(L, 4);
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call SetRGB
    self->SetRGB(x, y, red, green, blue);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_Size[] = { &wxluatype_wxImage, &wxluatype_wxSize, &wxluatype_wxPoint, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_Size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Size[1] = {{ wxLua_wxImage_Size, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxImage_Size }};
//     wxImage Size(const wxSize& size, const wxPoint& pos, int red = -1, int green = -1, int blue = -1) const
static int LUACALL wxLua_wxImage_Size(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int blue = -1
    int blue = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int green = -1
    int green = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // int red = -1
    int red = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint);
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call Size
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->Size(*size, *pos, red, green, blue));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxImage*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_delete[] = { &wxluatype_wxImage, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxImage_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_op_set[] = { &wxluatype_wxImage, &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxImage_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_op_set[1] = {{ wxLua_wxImage_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImage_op_set }};
//     %operator wxImage& operator=(const wxImage& image)
static int LUACALL wxLua_wxImage_op_set(lua_State *L)
{
    // const wxImage image
    const wxImage * image = (const wxImage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImage);
    // get this
    wxImage * self = (wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call op_set
    (*self)=(*image);
    wxImage* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
#define wxLua_wxImage_constructor5 wxLua_wxImageFromBitmap_constructor
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_constructor5[] = { &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxImage_constructor5(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_constructor5[1] = {{ wxLua_wxImage_constructor5, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxImage_constructor5 }};
// %override wxLua_wxImageFromBitmap_constructor
// %constructor wxImageFromBitmap(const wxBitmap& bitmap)
static int LUACALL wxLua_wxImageFromBitmap_constructor(lua_State *L)
{
    // const wxBitmap& bitmap
    const wxBitmap *bitmap = (wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call constructor
    wxImage *returns = new wxImage(bitmap->ConvertToImage());
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);
    // return the number of parameters
    return 1;
}


#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

#define wxLua_wxImage_constructor4 wxLua_wxImageFromData_constructor
static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_constructor4[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxImage_constructor4(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_constructor4[1] = {{ wxLua_wxImage_constructor4, WXLUAMETHOD_CONSTRUCTOR, 3, 4, s_wxluatypeArray_wxLua_wxImage_constructor4 }};
// %override wxLua_wxImageFromData_constructor
// %constructor wxImageFromData(int width, int height, unsigned char* data, bool static_data = false)
static int LUACALL wxLua_wxImageFromData_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool static_data = false
    bool static_data = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : false);
    // unsigned char* data
    unsigned char *data = (unsigned char *)lua_tostring(L, 3);
    // int height
    int height = (int)wxlua_getintegertype(L, 2);
    // int width
    int width = (int)wxlua_getintegertype(L, 1);
    // call constructor
    wxImage *returns = new wxImage(width, height, data, static_data);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);
    // return the number of parameters
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_constructor3[] = { &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImage_constructor3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_constructor3[1] = {{ wxLua_wxImage_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxImage_constructor3 }};
//     wxImage(const wxString& name, long type = wxBITMAP_TYPE_ANY)
static int LUACALL wxLua_wxImage_constructor3(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long type = wxBITMAP_TYPE_ANY
    long type = (argCount >= 2 ? (long)wxlua_getnumbertype(L, 2) : wxBITMAP_TYPE_ANY);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxImage* returns = new wxImage(name, type);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_constructor2[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxImage_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_constructor2[1] = {{ wxLua_wxImage_constructor2, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxImage_constructor2 }};
//     wxImage(int width, int height, bool clear=true)
static int LUACALL wxLua_wxImage_constructor2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool clear = true
    bool clear = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // int height
    int height = (int)wxlua_getnumbertype(L, 2);
    // int width
    int width = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxImage* returns = new wxImage(width, height, clear);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImage_constructor1[] = { &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxImage_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_constructor1[1] = {{ wxLua_wxImage_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxImage_constructor1 }};
//     wxImage(const wxImage& image)
static int LUACALL wxLua_wxImage_constructor1(lua_State *L)
{
    // const wxImage image
    const wxImage * image = (const wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call constructor
    wxImage* returns = new wxImage(*image);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

static int LUACALL wxLua_wxImage_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_constructor[1] = {{ wxLua_wxImage_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxImage()
static int LUACALL wxLua_wxImage_constructor(lua_State *L)
{
    // call constructor
    wxImage* returns = new wxImage();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}




#if (wxLUA_USE_wxImage && wxUSE_IMAGE)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_FindHandler_overload[] =
{
    { wxLua_wxImage_FindHandler2, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxImage_FindHandler2 },
    { wxLua_wxImage_FindHandler1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxImage_FindHandler1 },
    { wxLua_wxImage_FindHandler, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxImage_FindHandler },
};
static int s_wxluafunc_wxLua_wxImage_FindHandler_overload_count = sizeof(s_wxluafunc_wxLua_wxImage_FindHandler_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE)

#if ((wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||(wxLUA_USE_wxImage && wxUSE_IMAGE)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_GetImageCount_overload[] =
{

#if (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { wxLua_wxImage_GetImageCount1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxImage_GetImageCount1 },
#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { wxLua_wxImage_GetImageCount, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxImage_GetImageCount },
};
static int s_wxluafunc_wxLua_wxImage_GetImageCount_overload_count = sizeof(s_wxluafunc_wxLua_wxImage_GetImageCount_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_LoadFile_overload[] =
{

#if (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { wxLua_wxImage_LoadFile3, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxImage_LoadFile3 },
#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

#if (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { wxLua_wxImage_LoadFile2, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxImage_LoadFile2 },
#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { wxLua_wxImage_LoadFile1, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxImage_LoadFile1 },
    { wxLua_wxImage_LoadFile, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxImage_LoadFile },
};
static int s_wxluafunc_wxLua_wxImage_LoadFile_overload_count = sizeof(s_wxluafunc_wxLua_wxImage_LoadFile_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||(wxLUA_USE_wxImage && wxUSE_IMAGE)

#if (((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Rescale_overload[] =
{

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { wxLua_wxImage_Rescale1, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxImage_Rescale1 },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE))
    { wxLua_wxImage_Rescale, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_Rescale },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE))
};
static int s_wxluafunc_wxLua_wxImage_Rescale_overload_count = sizeof(s_wxluafunc_wxLua_wxImage_Rescale_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)))

#if (wxLUA_USE_wxImage && wxUSE_IMAGE)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SaveFile_overload[] =
{
    { wxLua_wxImage_SaveFile2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_SaveFile2 },
    { wxLua_wxImage_SaveFile1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_SaveFile1 },
    { wxLua_wxImage_SaveFile, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImage_SaveFile },
};
static int s_wxluafunc_wxLua_wxImage_SaveFile_overload_count = sizeof(s_wxluafunc_wxLua_wxImage_SaveFile_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE)

#if (((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_Scale_overload[] =
{

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { wxLua_wxImage_Scale1, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxImage_Scale1 },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE))
    { wxLua_wxImage_Scale, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_Scale },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE))
};
static int s_wxluafunc_wxLua_wxImage_Scale_overload_count = sizeof(s_wxluafunc_wxLua_wxImage_Scale_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)))

#if (wxLUA_USE_wxImage && wxUSE_IMAGE)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SetAlpha_overload[] =
{
    { wxLua_wxImage_SetAlpha1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImage_SetAlpha1 },
    { wxLua_wxImage_SetAlpha, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxImage_SetAlpha },
};
static int s_wxluafunc_wxLua_wxImage_SetAlpha_overload_count = sizeof(s_wxluafunc_wxLua_wxImage_SetAlpha_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SetOption_overload[] =
{
    { wxLua_wxImage_SetOption1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_SetOption1 },
    { wxLua_wxImage_SetOption, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImage_SetOption },
};
static int s_wxluafunc_wxLua_wxImage_SetOption_overload_count = sizeof(s_wxluafunc_wxLua_wxImage_SetOption_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE)

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||(wxLUA_USE_wxImage && wxUSE_IMAGE)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_SetRGB_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { wxLua_wxImage_SetRGB1, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxImage_SetRGB1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { wxLua_wxImage_SetRGB, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxImage_SetRGB },
};
static int s_wxluafunc_wxLua_wxImage_SetRGB_overload_count = sizeof(s_wxluafunc_wxLua_wxImage_SetRGB_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||(wxLUA_USE_wxImage && wxUSE_IMAGE)

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||(wxLUA_USE_wxImage && wxUSE_IMAGE)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImage_constructor_overload[] =
{

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { wxLua_wxImage_constructor5, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxImage_constructor5 },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { wxLua_wxImage_constructor4, WXLUAMETHOD_CONSTRUCTOR, 3, 4, s_wxluatypeArray_wxLua_wxImage_constructor4 },
    { wxLua_wxImage_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxImage_constructor3 },
    { wxLua_wxImage_constructor2, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxImage_constructor2 },
    { wxLua_wxImage_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxImage_constructor1 },
    { wxLua_wxImage_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxImage_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxImage_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||(wxLUA_USE_wxImage && wxUSE_IMAGE)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxImage_methods[] = {
    { "AddHandler", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxImage_AddHandler, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "Blur", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_Blur, 1, NULL },
    { "BlurHorizontal", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_BlurHorizontal, 1, NULL },
    { "BlurVertical", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_BlurVertical, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

    { "CleanUpHandlers", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxImage_CleanUpHandlers, 1, NULL },
    { "ComputeHistogram", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_ComputeHistogram, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "ConvertToGreyscale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_ConvertToGreyscale, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

    { "ConvertToMono", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_ConvertToMono, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_Copy, 1, NULL },
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_Create, 1, NULL },
    { "Destroy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_Destroy, 1, NULL },
    { "FindFirstUnusedColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_FindFirstUnusedColour, 1, NULL },

#if (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "FindHandler", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxImage_FindHandler_overload, s_wxluafunc_wxLua_wxImage_FindHandler_overload_count, 0 },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE)

    { "FindHandlerMime", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxImage_FindHandlerMime, 1, NULL },
    { "GetAlpha", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_GetAlpha, 1, NULL },
    { "GetBlue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_GetBlue, 1, NULL },
    { "GetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_GetData, 1, NULL },
    { "GetGreen", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_GetGreen, 1, NULL },

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "GetHandlers", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxImage_GetHandlers, 1, NULL },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

    { "GetHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_GetHeight, 1, NULL },

#if ((wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||(wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "GetImageCount", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxImage_GetImageCount_overload, s_wxluafunc_wxLua_wxImage_GetImageCount_overload_count, 0 },
#endif // ((wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||(wxLUA_USE_wxImage && wxUSE_IMAGE)

    { "GetImageExtWildcard", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxImage_GetImageExtWildcard, 1, NULL },
    { "GetMaskBlue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_GetMaskBlue, 1, NULL },
    { "GetMaskGreen", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_GetMaskGreen, 1, NULL },
    { "GetMaskRed", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_GetMaskRed, 1, NULL },
    { "GetOption", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_GetOption, 1, NULL },
    { "GetOptionInt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_GetOptionInt, 1, NULL },
    { "GetOrFindMaskColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_GetOrFindMaskColour, 1, NULL },

#if (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "GetPalette", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_GetPalette, 1, NULL },
#endif // (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

    { "GetRed", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_GetRed, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "GetSubImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_GetSubImage, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

    { "GetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_GetWidth, 1, NULL },
    { "HSVtoRGB", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxImage_HSVtoRGB, 1, NULL },
    { "HasAlpha", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_HasAlpha, 1, NULL },
    { "HasMask", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_HasMask, 1, NULL },
    { "HasOption", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_HasOption, 1, NULL },
    { "InitAlpha", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_InitAlpha, 1, NULL },
    { "InitStandardHandlers", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxImage_InitStandardHandlers, 1, NULL },
    { "InsertHandler", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxImage_InsertHandler, 1, NULL },
    { "IsTransparent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_IsTransparent, 1, NULL },

#if ((wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||(wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "LoadFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_LoadFile_overload, s_wxluafunc_wxLua_wxImage_LoadFile_overload_count, 0 },
#endif // ((wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||(wxLUA_USE_wxImage && wxUSE_IMAGE)

    { "Mirror", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_Mirror, 1, NULL },
    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_Ok, 1, NULL },
    { "RGBtoHSV", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxImage_RGBtoHSV, 1, NULL },
    { "RemoveHandler", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxImage_RemoveHandler, 1, NULL },
    { "Replace", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_Replace, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "ResampleBicubic", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_ResampleBicubic, 1, NULL },
    { "ResampleBox", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_ResampleBox, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

#if (((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)))
    { "Rescale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_Rescale_overload, s_wxluafunc_wxLua_wxImage_Rescale_overload_count, 0 },
#endif // (((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)))

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "Resize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_Resize, 1, NULL },
    { "Rotate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_Rotate, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

    { "Rotate90", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_Rotate90, 1, NULL },
    { "RotateHue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_RotateHue, 1, NULL },

#if (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "SaveFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_SaveFile_overload, s_wxluafunc_wxLua_wxImage_SaveFile_overload_count, 0 },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE)

#if (((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)))
    { "Scale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_Scale_overload, s_wxluafunc_wxLua_wxImage_Scale_overload_count, 0 },
#endif // (((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxImage && wxUSE_IMAGE)))

#if (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "SetAlpha", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_SetAlpha_overload, s_wxluafunc_wxLua_wxImage_SetAlpha_overload_count, 0 },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE)

    { "SetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_SetData, 1, NULL },
    { "SetMask", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_SetMask, 1, NULL },
    { "SetMaskColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_SetMaskColour, 1, NULL },
    { "SetMaskFromImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_SetMaskFromImage, 1, NULL },

#if (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "SetOption", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_SetOption_overload, s_wxluafunc_wxLua_wxImage_SetOption_overload_count, 0 },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE)

#if (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "SetPalette", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_SetPalette, 1, NULL },
#endif // (wxLUA_USE_wxPalette && wxUSE_PALETTE) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||(wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "SetRGB", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_SetRGB_overload, s_wxluafunc_wxLua_wxImage_SetRGB_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||(wxLUA_USE_wxImage && wxUSE_IMAGE)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "Size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_Size, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxImage_delete, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImage_op_set, 1, NULL },

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||(wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "wxImage", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxImage_constructor_overload, s_wxluafunc_wxLua_wxImage_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxImage && wxUSE_IMAGE))||(wxLUA_USE_wxImage && wxUSE_IMAGE)

    { 0, 0, 0, 0 },
};

int wxImage_methodCount = sizeof(wxImage_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxImage && wxUSE_IMAGE


#if wxLUA_USE_wxImage && wxUSE_IMAGE
// ---------------------------------------------------------------------------
// Bind class wxImageHistogramEntry
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxImageHistogramEntry'
int wxluatype_wxImageHistogramEntry = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogramEntry_Get_index[] = { &wxluatype_wxImageHistogramEntry, NULL };
static int LUACALL wxLua_wxImageHistogramEntry_Get_index(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogramEntry_Get_index[1] = {{ wxLua_wxImageHistogramEntry_Get_index, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImageHistogramEntry_Get_index }};
//     %member unsigned long index // GetIndex() only, SetIndex(idx) is not allowed
static int LUACALL wxLua_wxImageHistogramEntry_Get_index(lua_State *L)
{
    // get this
    wxImageHistogramEntry *self = (wxImageHistogramEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogramEntry);
    // push the result number
    lua_pushnumber(L, self->index);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogramEntry_Get_value[] = { &wxluatype_wxImageHistogramEntry, NULL };
static int LUACALL wxLua_wxImageHistogramEntry_Get_value(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogramEntry_Get_value[1] = {{ wxLua_wxImageHistogramEntry_Get_value, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImageHistogramEntry_Get_value }};
//     %member unsigned long value // GetValue() and SetValue(val)
static int LUACALL wxLua_wxImageHistogramEntry_Get_value(lua_State *L)
{
    // get this
    wxImageHistogramEntry *self = (wxImageHistogramEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogramEntry);
    // push the result number
    lua_pushnumber(L, self->value);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogramEntry_Set_index[] = { &wxluatype_wxImageHistogramEntry, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImageHistogramEntry_Set_index(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogramEntry_Set_index[1] = {{ wxLua_wxImageHistogramEntry_Set_index, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageHistogramEntry_Set_index }};
//     %member unsigned long index // GetIndex() only, SetIndex(idx) is not allowed
static int LUACALL wxLua_wxImageHistogramEntry_Set_index(lua_State *L)
{
    // get the number value
    long val = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxImageHistogramEntry *self = (wxImageHistogramEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogramEntry);
    self->index = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogramEntry_Set_value[] = { &wxluatype_wxImageHistogramEntry, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImageHistogramEntry_Set_value(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogramEntry_Set_value[1] = {{ wxLua_wxImageHistogramEntry_Set_value, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageHistogramEntry_Set_value }};
//     %member unsigned long value // GetValue() and SetValue(val)
static int LUACALL wxLua_wxImageHistogramEntry_Set_value(lua_State *L)
{
    // get the number value
    long val = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxImageHistogramEntry *self = (wxImageHistogramEntry *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogramEntry);
    self->value = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogramEntry_delete[] = { &wxluatype_wxImageHistogramEntry, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogramEntry_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxImageHistogramEntry_delete }};

static int LUACALL wxLua_wxImageHistogramEntry_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogramEntry_constructor[1] = {{ wxLua_wxImageHistogramEntry_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxImageHistogramEntry()
static int LUACALL wxLua_wxImageHistogramEntry_constructor(lua_State *L)
{
    // call constructor
    wxImageHistogramEntry* returns = new wxImageHistogramEntry();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxImageHistogramEntry((wxImageHistogramEntry*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImageHistogramEntry);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxImageHistogramEntry_methods[] = {
    // %member    { "Get_index", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogramEntry_Get_index, 1, NULL },
    // %member    { "Get_value", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogramEntry_Get_value, 1, NULL },
    // %member    { "Set_index", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogramEntry_Set_index, 1, NULL },
    // %member    { "Set_value", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogramEntry_Set_value, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxImageHistogramEntry_delete, 1, NULL },
    { "index", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxImageHistogramEntry_Set_index, 1, NULL },
    { "index", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxImageHistogramEntry_Get_index, 1, NULL },
    { "value", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxImageHistogramEntry_Set_value, 1, NULL },
    { "value", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxImageHistogramEntry_Get_value, 1, NULL },
    { "wxImageHistogramEntry", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxImageHistogramEntry_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxImageHistogramEntry_methodCount = sizeof(wxImageHistogramEntry_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxImage && wxUSE_IMAGE


#if wxLUA_USE_wxImage && wxUSE_IMAGE
// ---------------------------------------------------------------------------
// Bind class wxImageHistogram::iterator
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxImageHistogram::iterator'
int wxluatype_wxImageHistogram_iterator = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_iterator_Get_first[] = { &wxluatype_wxImageHistogram_iterator, NULL };
static int LUACALL wxLua_wxImageHistogram_iterator_Get_first(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_iterator_Get_first[1] = {{ wxLua_wxImageHistogram_iterator_Get_first, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImageHistogram_iterator_Get_first }};
// %override wxLua_wxImageHistogram_iterator_Get_first
//     %member long first
static int LUACALL wxLua_wxImageHistogram_iterator_Get_first(lua_State *L)
{
    // get this
    wxImageHistogram::iterator *self = (wxImageHistogram::iterator *) wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogram_iterator);
    // push the result number
    lua_pushnumber(L, (*self)->first); // *** need to cast self to object from pointer
    // return the number of parameters
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_iterator_Get_second[] = { &wxluatype_wxImageHistogram_iterator, NULL };
static int LUACALL wxLua_wxImageHistogram_iterator_Get_second(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_iterator_Get_second[1] = {{ wxLua_wxImageHistogram_iterator_Get_second, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImageHistogram_iterator_Get_second }};
// %override wxLua_wxImageHistogram_iterator_Get_second
//     %member wxImageHistogramEntry second
static int LUACALL wxLua_wxImageHistogram_iterator_Get_second(lua_State *L)
{
    // get this
    wxImageHistogram::iterator *self = (wxImageHistogram::iterator *) wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogram_iterator);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &(*self)->second, wxluatype_wxImageHistogramEntry); // *** need to cast self to object from pointer
    // return the number of parameters
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_iterator_Set_first[] = { &wxluatype_wxImageHistogram_iterator, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImageHistogram_iterator_Set_first(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_iterator_Set_first[1] = {{ wxLua_wxImageHistogram_iterator_Set_first, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageHistogram_iterator_Set_first }};
// %override wxLua_wxImageHistogram_iterator_Set_first
//     %member long first
static int LUACALL wxLua_wxImageHistogram_iterator_Set_first(lua_State *L)
{
    wxlua_argerrormsg(L, wxT("You cannot set the first element of a wxHashTable, do not use wxImageHistogram::iterator::SetFirst()."));
    return 0;
/*
    // get the number value
    long val = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxImageHistogram::iterator *self = (wxImageHistogram::iterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogram_iterator);
    (*self)->first = val; // *** need to cast self to object from pointer
    // return the number of parameters
    return 0;
*/
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_iterator_Set_second[] = { &wxluatype_wxImageHistogram_iterator, &wxluatype_wxImageHistogramEntry, NULL };
static int LUACALL wxLua_wxImageHistogram_iterator_Set_second(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_iterator_Set_second[1] = {{ wxLua_wxImageHistogram_iterator_Set_second, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageHistogram_iterator_Set_second }};
// %override wxLua_wxImageHistogram_iterator_Set_second
//     %member wxImageHistogramEntry second
static int LUACALL wxLua_wxImageHistogram_iterator_Set_second(lua_State *L)
{
    // get the data type value
    wxImageHistogramEntry* val = (wxImageHistogramEntry*)wxluaT_getuserdatatype(L, 2, wxluatype_wxImageHistogramEntry);
    // get this
    wxImageHistogram::iterator *self = (wxImageHistogram::iterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogram_iterator);
    (*self)->second = *val; // *** need to cast self to object from pointer
    // return the number of parameters
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_iterator_delete[] = { &wxluatype_wxImageHistogram_iterator, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_iterator_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxImageHistogram_iterator_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_iterator_op_eq[] = { &wxluatype_wxImageHistogram_iterator, &wxluatype_wxImageHistogram_iterator, NULL };
static int LUACALL wxLua_wxImageHistogram_iterator_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_iterator_op_eq[1] = {{ wxLua_wxImageHistogram_iterator_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageHistogram_iterator_op_eq }};
//     %operator bool operator==(const wxImageHistogram::iterator& other) const
static int LUACALL wxLua_wxImageHistogram_iterator_op_eq(lua_State *L)
{
    // const wxImageHistogram::iterator other
    const wxImageHistogram::iterator * other = (const wxImageHistogram::iterator *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImageHistogram_iterator);
    // get this
    wxImageHistogram::iterator * self = (wxImageHistogram::iterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogram_iterator);
    // call op_eq
    bool returns = ((*self)==(*other));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_iterator_op_inc[] = { &wxluatype_wxImageHistogram_iterator, NULL };
static int LUACALL wxLua_wxImageHistogram_iterator_op_inc(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_iterator_op_inc[1] = {{ wxLua_wxImageHistogram_iterator_op_inc, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImageHistogram_iterator_op_inc }};
//     %operator wxImageHistogram::iterator& operator++()
static int LUACALL wxLua_wxImageHistogram_iterator_op_inc(lua_State *L)
{
    // get this
    wxImageHistogram::iterator * self = (wxImageHistogram::iterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogram_iterator);
    // call op_inc
    wxImageHistogram::iterator* returns = &((*self)++);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImageHistogram_iterator);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxImageHistogram_iterator_methods[] = {
    // %member    { "Get_first", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogram_iterator_Get_first, 1, NULL },
    // %member    { "Get_second", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogram_iterator_Get_second, 1, NULL },
    // %member    { "Set_first", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogram_iterator_Set_first, 1, NULL },
    // %member    { "Set_second", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogram_iterator_Set_second, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxImageHistogram_iterator_delete, 1, NULL },
    { "first", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxImageHistogram_iterator_Set_first, 1, NULL },
    { "first", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxImageHistogram_iterator_Get_first, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogram_iterator_op_eq, 1, NULL },
    { "op_inc", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogram_iterator_op_inc, 1, NULL },
    { "second", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxImageHistogram_iterator_Set_second, 1, NULL },
    { "second", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxImageHistogram_iterator_Get_second, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxImageHistogram_iterator_methodCount = sizeof(wxImageHistogram_iterator_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxImage && wxUSE_IMAGE


#if wxLUA_USE_wxImage && wxUSE_IMAGE
// ---------------------------------------------------------------------------
// Bind class wxImageHistogram
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxImageHistogram'
int wxluatype_wxImageHistogram = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_MakeKey[] = { &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxImageHistogram_MakeKey(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_MakeKey[1] = {{ wxLua_wxImageHistogram_MakeKey, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxImageHistogram_MakeKey }};
//     static unsigned long MakeKey(unsigned char r, unsigned char g, unsigned char b)
static int LUACALL wxLua_wxImageHistogram_MakeKey(lua_State *L)
{
    // unsigned char b
    unsigned char b = (unsigned char)wxlua_getuintegertype(L, 3);
    // unsigned char g
    unsigned char g = (unsigned char)wxlua_getuintegertype(L, 2);
    // unsigned char r
    unsigned char r = (unsigned char)wxlua_getuintegertype(L, 1);
    // call MakeKey
    unsigned long returns = (wxImageHistogram::MakeKey(r, g, b));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_begin[] = { &wxluatype_wxImageHistogram, NULL };
static int LUACALL wxLua_wxImageHistogram_begin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_begin[1] = {{ wxLua_wxImageHistogram_begin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImageHistogram_begin }};
//     const wxImageHistogram::iterator begin() const
static int LUACALL wxLua_wxImageHistogram_begin(lua_State *L)
{
    // get this
    wxImageHistogram * self = (wxImageHistogram *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogram);
    // call begin
    // allocate a new object using the copy constructor
    const wxImageHistogram::iterator* returns = new wxImageHistogram::iterator(self->begin());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxImageHistogram_iterator((wxImageHistogram::iterator*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImageHistogram_iterator);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_clear[] = { &wxluatype_wxImageHistogram, NULL };
static int LUACALL wxLua_wxImageHistogram_clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_clear[1] = {{ wxLua_wxImageHistogram_clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImageHistogram_clear }};
//     void clear()
static int LUACALL wxLua_wxImageHistogram_clear(lua_State *L)
{
    // get this
    wxImageHistogram * self = (wxImageHistogram *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogram);
    // call clear
    self->clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_count[] = { &wxluatype_wxImageHistogram, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImageHistogram_count(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_count[1] = {{ wxLua_wxImageHistogram_count, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageHistogram_count }};
//     size_t count(long key) const
static int LUACALL wxLua_wxImageHistogram_count(lua_State *L)
{
    // long key
    long key = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxImageHistogram * self = (wxImageHistogram *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogram);
    // call count
    size_t returns = (self->count(key));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_delete[] = { &wxluatype_wxImageHistogram, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxImageHistogram_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_empty[] = { &wxluatype_wxImageHistogram, NULL };
static int LUACALL wxLua_wxImageHistogram_empty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_empty[1] = {{ wxLua_wxImageHistogram_empty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImageHistogram_empty }};
//     bool empty() const
static int LUACALL wxLua_wxImageHistogram_empty(lua_State *L)
{
    // get this
    wxImageHistogram * self = (wxImageHistogram *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogram);
    // call empty
    bool returns = (self->empty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_end[] = { &wxluatype_wxImageHistogram, NULL };
static int LUACALL wxLua_wxImageHistogram_end(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_end[1] = {{ wxLua_wxImageHistogram_end, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImageHistogram_end }};
//     const wxImageHistogram::iterator end() const
static int LUACALL wxLua_wxImageHistogram_end(lua_State *L)
{
    // get this
    wxImageHistogram * self = (wxImageHistogram *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogram);
    // call end
    // allocate a new object using the copy constructor
    const wxImageHistogram::iterator* returns = new wxImageHistogram::iterator(self->end());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxImageHistogram_iterator((wxImageHistogram::iterator*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImageHistogram_iterator);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_erase[] = { &wxluatype_wxImageHistogram, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImageHistogram_erase(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_erase[1] = {{ wxLua_wxImageHistogram_erase, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageHistogram_erase }};
//     size_t erase(long key)
static int LUACALL wxLua_wxImageHistogram_erase(lua_State *L)
{
    // long key
    long key = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxImageHistogram * self = (wxImageHistogram *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogram);
    // call erase
    size_t returns = (self->erase(key));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_find[] = { &wxluatype_wxImageHistogram, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImageHistogram_find(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_find[1] = {{ wxLua_wxImageHistogram_find, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageHistogram_find }};
//     wxImageHistogram::iterator find(long key)
static int LUACALL wxLua_wxImageHistogram_find(lua_State *L)
{
    // long key
    long key = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxImageHistogram * self = (wxImageHistogram *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogram);
    // call find
    // allocate a new object using the copy constructor
    wxImageHistogram::iterator* returns = new wxImageHistogram::iterator(self->find(key));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxImageHistogram_iterator((wxImageHistogram::iterator*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImageHistogram_iterator);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHistogram_size[] = { &wxluatype_wxImageHistogram, NULL };
static int LUACALL wxLua_wxImageHistogram_size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_size[1] = {{ wxLua_wxImageHistogram_size, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImageHistogram_size }};
//     size_t size() const
static int LUACALL wxLua_wxImageHistogram_size(lua_State *L)
{
    // get this
    wxImageHistogram * self = (wxImageHistogram *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHistogram);
    // call size
    size_t returns = (self->size());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static int LUACALL wxLua_wxImageHistogram_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHistogram_constructor[1] = {{ wxLua_wxImageHistogram_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxImageHistogram()
static int LUACALL wxLua_wxImageHistogram_constructor(lua_State *L)
{
    // call constructor
    wxImageHistogram* returns = new wxImageHistogram();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxImageHistogram((wxImageHistogram*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImageHistogram);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxImageHistogram_methods[] = {
    { "MakeKey", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxImageHistogram_MakeKey, 1, NULL },
    { "begin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogram_begin, 1, NULL },
    { "clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogram_clear, 1, NULL },
    { "count", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogram_count, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxImageHistogram_delete, 1, NULL },
    { "empty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogram_empty, 1, NULL },
    { "end", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogram_end, 1, NULL },
    { "erase", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogram_erase, 1, NULL },
    { "find", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogram_find, 1, NULL },
    { "size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHistogram_size, 1, NULL },
    { "wxImageHistogram", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxImageHistogram_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxImageHistogram_methodCount = sizeof(wxImageHistogram_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxImage && wxUSE_IMAGE


#if wxLUA_USE_wxImage && wxUSE_IMAGE
// ---------------------------------------------------------------------------
// Bind class wxQuantize
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxQuantize'
int wxluatype_wxQuantize = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxQuantize_Quantize[] = { &wxluatype_wxImage, &wxluatype_wxImage, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxQuantize_Quantize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQuantize_Quantize[1] = {{ wxLua_wxQuantize_Quantize, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 4, s_wxluatypeArray_wxLua_wxQuantize_Quantize }};
// %override wxLua_wxQuantize_Quantize
//     static bool Quantize(const wxImage& src, wxImage& dest, wxPalette** pPalette, int desiredNoColours = 236, unsigned char** eightBitData = 0, int flags = wxQUANTIZE_INCLUDE_WINDOWS_COLOURS|wxQUANTIZE_FILL_DESTINATION_IMAGE|wxQUANTIZE_RETURN_8BIT_DATA);
static int LUACALL wxLua_wxQuantize_Quantize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxQUANTIZE_INCLUDE_WINDOWS_COLOURS | wxQUANTIZE_FILL_DESTINATION_IMAGE | wxQUANTIZE_RETURN_8BIT_DATA
    int flags = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 4) : wxQUANTIZE_INCLUDE_WINDOWS_COLOURS | wxQUANTIZE_FILL_DESTINATION_IMAGE | wxQUANTIZE_RETURN_8BIT_DATA);
    // int desiredNoColours = 236
    int desiredNoColours = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 3) : 236);
    // wxImage dest
    wxImage * dest = (wxImage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImage);
    // const wxImage src
    const wxImage * src = (const wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call Quantize
    bool returns = (wxQuantize::Quantize(*src, *dest, NULL, desiredNoColours, NULL, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}





// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxQuantize_methods[] = {
    { "Quantize", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxQuantize_Quantize, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxQuantize_methodCount = sizeof(wxQuantize_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxImage && wxUSE_IMAGE


#if wxLUA_USE_wxImage && wxUSE_IMAGE
// ---------------------------------------------------------------------------
// Bind class wxImageHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxImageHandler'
int wxluatype_wxImageHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHandler_GetExtension[] = { &wxluatype_wxImageHandler, NULL };
static int LUACALL wxLua_wxImageHandler_GetExtension(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHandler_GetExtension[1] = {{ wxLua_wxImageHandler_GetExtension, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImageHandler_GetExtension }};
//     wxString GetExtension() const
static int LUACALL wxLua_wxImageHandler_GetExtension(lua_State *L)
{
    // get this
    wxImageHandler * self = (wxImageHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHandler);
    // call GetExtension
    wxString returns = (self->GetExtension());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHandler_GetImageCount[] = { &wxluatype_wxImageHandler, &wxluatype_wxInputStream, NULL };
static int LUACALL wxLua_wxImageHandler_GetImageCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHandler_GetImageCount[1] = {{ wxLua_wxImageHandler_GetImageCount, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageHandler_GetImageCount }};
//     int GetImageCount(wxInputStream& stream)
static int LUACALL wxLua_wxImageHandler_GetImageCount(lua_State *L)
{
    // wxInputStream stream
    wxInputStream * stream = (wxInputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxInputStream);
    // get this
    wxImageHandler * self = (wxImageHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHandler);
    // call GetImageCount
    int returns = (self->GetImageCount(*stream));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHandler_GetMimeType[] = { &wxluatype_wxImageHandler, NULL };
static int LUACALL wxLua_wxImageHandler_GetMimeType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHandler_GetMimeType[1] = {{ wxLua_wxImageHandler_GetMimeType, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImageHandler_GetMimeType }};
//     wxString GetMimeType() const
static int LUACALL wxLua_wxImageHandler_GetMimeType(lua_State *L)
{
    // get this
    wxImageHandler * self = (wxImageHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHandler);
    // call GetMimeType
    wxString returns = (self->GetMimeType());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHandler_GetName[] = { &wxluatype_wxImageHandler, NULL };
static int LUACALL wxLua_wxImageHandler_GetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHandler_GetName[1] = {{ wxLua_wxImageHandler_GetName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImageHandler_GetName }};
//     wxString GetName() const
static int LUACALL wxLua_wxImageHandler_GetName(lua_State *L)
{
    // get this
    wxImageHandler * self = (wxImageHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHandler);
    // call GetName
    wxString returns = (self->GetName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHandler_GetType[] = { &wxluatype_wxImageHandler, NULL };
static int LUACALL wxLua_wxImageHandler_GetType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHandler_GetType[1] = {{ wxLua_wxImageHandler_GetType, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxImageHandler_GetType }};
//     long GetType() const
static int LUACALL wxLua_wxImageHandler_GetType(lua_State *L)
{
    // get this
    wxImageHandler * self = (wxImageHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHandler);
    // call GetType
    long  returns = (self->GetType());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHandler_LoadFile[] = { &wxluatype_wxImageHandler, &wxluatype_wxImage, &wxluatype_wxInputStream, &wxluatype_TBOOLEAN, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImageHandler_LoadFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHandler_LoadFile[1] = {{ wxLua_wxImageHandler_LoadFile, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxImageHandler_LoadFile }};
//     bool LoadFile(wxImage* image, wxInputStream& stream, bool verbose=true, int index=0)
static int LUACALL wxLua_wxImageHandler_LoadFile(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int index = 0
    int index = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // bool verbose = true
    bool verbose = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // wxInputStream stream
    wxInputStream * stream = (wxInputStream *)wxluaT_getuserdatatype(L, 3, wxluatype_wxInputStream);
    // wxImage image
    wxImage * image = (wxImage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImage);
    // get this
    wxImageHandler * self = (wxImageHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHandler);
    // call LoadFile
    bool returns = (self->LoadFile(image, *stream, verbose, index));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHandler_SaveFile[] = { &wxluatype_wxImageHandler, &wxluatype_wxImage, &wxluatype_wxOutputStream, NULL };
static int LUACALL wxLua_wxImageHandler_SaveFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHandler_SaveFile[1] = {{ wxLua_wxImageHandler_SaveFile, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxImageHandler_SaveFile }};
//     bool SaveFile(wxImage* image, wxOutputStream& stream)
static int LUACALL wxLua_wxImageHandler_SaveFile(lua_State *L)
{
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 3, wxluatype_wxOutputStream);
    // wxImage image
    wxImage * image = (wxImage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImage);
    // get this
    wxImageHandler * self = (wxImageHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHandler);
    // call SaveFile
    bool returns = (self->SaveFile(image, *stream));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHandler_SetExtension[] = { &wxluatype_wxImageHandler, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxImageHandler_SetExtension(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHandler_SetExtension[1] = {{ wxLua_wxImageHandler_SetExtension, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageHandler_SetExtension }};
//     void SetExtension(const wxString& extension)
static int LUACALL wxLua_wxImageHandler_SetExtension(lua_State *L)
{
    // const wxString extension
    const wxString extension = wxlua_getwxStringtype(L, 2);
    // get this
    wxImageHandler * self = (wxImageHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHandler);
    // call SetExtension
    self->SetExtension(extension);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHandler_SetMimeType[] = { &wxluatype_wxImageHandler, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxImageHandler_SetMimeType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHandler_SetMimeType[1] = {{ wxLua_wxImageHandler_SetMimeType, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageHandler_SetMimeType }};
//     void SetMimeType(const wxString& mimetype)
static int LUACALL wxLua_wxImageHandler_SetMimeType(lua_State *L)
{
    // const wxString mimetype
    const wxString mimetype = wxlua_getwxStringtype(L, 2);
    // get this
    wxImageHandler * self = (wxImageHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHandler);
    // call SetMimeType
    self->SetMimeType(mimetype);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHandler_SetName[] = { &wxluatype_wxImageHandler, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxImageHandler_SetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHandler_SetName[1] = {{ wxLua_wxImageHandler_SetName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageHandler_SetName }};
//     void SetName(const wxString& name)
static int LUACALL wxLua_wxImageHandler_SetName(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxImageHandler * self = (wxImageHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHandler);
    // call SetName
    self->SetName(name);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHandler_SetType[] = { &wxluatype_wxImageHandler, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxImageHandler_SetType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHandler_SetType[1] = {{ wxLua_wxImageHandler_SetType, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxImageHandler_SetType }};
//     void SetType(long type)
static int LUACALL wxLua_wxImageHandler_SetType(lua_State *L)
{
    // long type
    long type = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxImageHandler * self = (wxImageHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImageHandler);
    // call SetType
    self->SetType(type);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxImageHandler_delete[] = { &wxluatype_wxImageHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxImageHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxImageHandler_delete }};




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxImageHandler_methods[] = {
    { "GetExtension", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHandler_GetExtension, 1, NULL },

#if (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "GetImageCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHandler_GetImageCount, 1, NULL },
#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

    { "GetMimeType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHandler_GetMimeType, 1, NULL },
    { "GetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHandler_GetName, 1, NULL },
    { "GetType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHandler_GetType, 1, NULL },

#if (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "LoadFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHandler_LoadFile, 1, NULL },
    { "SaveFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHandler_SaveFile, 1, NULL },
#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

    { "SetExtension", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHandler_SetExtension, 1, NULL },
    { "SetMimeType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHandler_SetMimeType, 1, NULL },
    { "SetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHandler_SetName, 1, NULL },
    { "SetType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxImageHandler_SetType, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxImageHandler_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxImageHandler_methodCount = sizeof(wxImageHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxImage && wxUSE_IMAGE


#if wxLUA_USE_wxImage && wxUSE_IMAGE
// ---------------------------------------------------------------------------
// Bind class wxBMPHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxBMPHandler'
int wxluatype_wxBMPHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxBMPHandler_delete[] = { &wxluatype_wxBMPHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBMPHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxBMPHandler_delete }};

static int LUACALL wxLua_wxBMPHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBMPHandler_constructor[1] = {{ wxLua_wxBMPHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxBMPHandler()
static int LUACALL wxLua_wxBMPHandler_constructor(lua_State *L)
{
    // call constructor
    wxBMPHandler* returns = new wxBMPHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBMPHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxBMPHandler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxBMPHandler_delete, 1, NULL },
    { "wxBMPHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxBMPHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxBMPHandler_methodCount = sizeof(wxBMPHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxImage && wxUSE_IMAGE


#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_ICO_CUR)
// ---------------------------------------------------------------------------
// Bind class wxICOHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxICOHandler'
int wxluatype_wxICOHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxICOHandler_delete[] = { &wxluatype_wxICOHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxICOHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxICOHandler_delete }};

static int LUACALL wxLua_wxICOHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxICOHandler_constructor[1] = {{ wxLua_wxICOHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxICOHandler()
static int LUACALL wxLua_wxICOHandler_constructor(lua_State *L)
{
    // call constructor
    wxICOHandler* returns = new wxICOHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxICOHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxICOHandler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxICOHandler_delete, 1, NULL },
    { "wxICOHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxICOHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxICOHandler_methodCount = sizeof(wxICOHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_ICO_CUR)


#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_ICO_CUR)
// ---------------------------------------------------------------------------
// Bind class wxCURHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxCURHandler'
int wxluatype_wxCURHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxCURHandler_delete[] = { &wxluatype_wxCURHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCURHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxCURHandler_delete }};

static int LUACALL wxLua_wxCURHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCURHandler_constructor[1] = {{ wxLua_wxCURHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxCURHandler()
static int LUACALL wxLua_wxCURHandler_constructor(lua_State *L)
{
    // call constructor
    wxCURHandler* returns = new wxCURHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCURHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxCURHandler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxCURHandler_delete, 1, NULL },
    { "wxCURHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxCURHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxCURHandler_methodCount = sizeof(wxCURHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_ICO_CUR)


#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_ICO_CUR)
// ---------------------------------------------------------------------------
// Bind class wxANIHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxANIHandler'
int wxluatype_wxANIHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxANIHandler_delete[] = { &wxluatype_wxANIHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxANIHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxANIHandler_delete }};

static int LUACALL wxLua_wxANIHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxANIHandler_constructor[1] = {{ wxLua_wxANIHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxANIHandler()
static int LUACALL wxLua_wxANIHandler_constructor(lua_State *L)
{
    // call constructor
    wxANIHandler* returns = new wxANIHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxANIHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxANIHandler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxANIHandler_delete, 1, NULL },
    { "wxANIHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxANIHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxANIHandler_methodCount = sizeof(wxANIHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_ICO_CUR)


#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_IFF)
// ---------------------------------------------------------------------------
// Bind class wxIFFHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxIFFHandler'
int wxluatype_wxIFFHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxIFFHandler_delete[] = { &wxluatype_wxIFFHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIFFHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxIFFHandler_delete }};

static int LUACALL wxLua_wxIFFHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIFFHandler_constructor[1] = {{ wxLua_wxIFFHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxIFFHandler()
static int LUACALL wxLua_wxIFFHandler_constructor(lua_State *L)
{
    // call constructor
    wxIFFHandler* returns = new wxIFFHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIFFHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxIFFHandler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxIFFHandler_delete, 1, NULL },
    { "wxIFFHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxIFFHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxIFFHandler_methodCount = sizeof(wxIFFHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_IFF)


#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_GIF)
// ---------------------------------------------------------------------------
// Bind class wxGIFHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGIFHandler'
int wxluatype_wxGIFHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGIFHandler_delete[] = { &wxluatype_wxGIFHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGIFHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGIFHandler_delete }};

static int LUACALL wxLua_wxGIFHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGIFHandler_constructor[1] = {{ wxLua_wxGIFHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxGIFHandler()
static int LUACALL wxLua_wxGIFHandler_constructor(lua_State *L)
{
    // call constructor
    wxGIFHandler* returns = new wxGIFHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGIFHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGIFHandler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGIFHandler_delete, 1, NULL },
    { "wxGIFHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGIFHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGIFHandler_methodCount = sizeof(wxGIFHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_GIF)


#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_LIBJPEG)
// ---------------------------------------------------------------------------
// Bind class wxJPEGHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxJPEGHandler'
int wxluatype_wxJPEGHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxJPEGHandler_delete[] = { &wxluatype_wxJPEGHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJPEGHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxJPEGHandler_delete }};

static int LUACALL wxLua_wxJPEGHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJPEGHandler_constructor[1] = {{ wxLua_wxJPEGHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxJPEGHandler()
static int LUACALL wxLua_wxJPEGHandler_constructor(lua_State *L)
{
    // call constructor
    wxJPEGHandler* returns = new wxJPEGHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxJPEGHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxJPEGHandler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxJPEGHandler_delete, 1, NULL },
    { "wxJPEGHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxJPEGHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxJPEGHandler_methodCount = sizeof(wxJPEGHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_LIBJPEG)


#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_PCX)
// ---------------------------------------------------------------------------
// Bind class wxPCXHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPCXHandler'
int wxluatype_wxPCXHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxPCXHandler_delete[] = { &wxluatype_wxPCXHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPCXHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxPCXHandler_delete }};

static int LUACALL wxLua_wxPCXHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPCXHandler_constructor[1] = {{ wxLua_wxPCXHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxPCXHandler()
static int LUACALL wxLua_wxPCXHandler_constructor(lua_State *L)
{
    // call constructor
    wxPCXHandler* returns = new wxPCXHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPCXHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPCXHandler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxPCXHandler_delete, 1, NULL },
    { "wxPCXHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxPCXHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxPCXHandler_methodCount = sizeof(wxPCXHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_PCX)


#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_LIBPNG)
// ---------------------------------------------------------------------------
// Bind class wxPNGHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPNGHandler'
int wxluatype_wxPNGHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxPNGHandler_delete[] = { &wxluatype_wxPNGHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPNGHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxPNGHandler_delete }};

static int LUACALL wxLua_wxPNGHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPNGHandler_constructor[1] = {{ wxLua_wxPNGHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxPNGHandler()
static int LUACALL wxLua_wxPNGHandler_constructor(lua_State *L)
{
    // call constructor
    wxPNGHandler* returns = new wxPNGHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPNGHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPNGHandler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxPNGHandler_delete, 1, NULL },
    { "wxPNGHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxPNGHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxPNGHandler_methodCount = sizeof(wxPNGHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_LIBPNG)


#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_PNM)
// ---------------------------------------------------------------------------
// Bind class wxPNMHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPNMHandler'
int wxluatype_wxPNMHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxPNMHandler_delete[] = { &wxluatype_wxPNMHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPNMHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxPNMHandler_delete }};

static int LUACALL wxLua_wxPNMHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPNMHandler_constructor[1] = {{ wxLua_wxPNMHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxPNMHandler()
static int LUACALL wxLua_wxPNMHandler_constructor(lua_State *L)
{
    // call constructor
    wxPNMHandler* returns = new wxPNMHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPNMHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPNMHandler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxPNMHandler_delete, 1, NULL },
    { "wxPNMHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxPNMHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxPNMHandler_methodCount = sizeof(wxPNMHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_PNM)


#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_LIBTIFF)
// ---------------------------------------------------------------------------
// Bind class wxTIFFHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTIFFHandler'
int wxluatype_wxTIFFHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTIFFHandler_delete[] = { &wxluatype_wxTIFFHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTIFFHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTIFFHandler_delete }};

static int LUACALL wxLua_wxTIFFHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTIFFHandler_constructor[1] = {{ wxLua_wxTIFFHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTIFFHandler()
static int LUACALL wxLua_wxTIFFHandler_constructor(lua_State *L)
{
    // call constructor
    wxTIFFHandler* returns = new wxTIFFHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTIFFHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTIFFHandler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTIFFHandler_delete, 1, NULL },
    { "wxTIFFHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTIFFHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTIFFHandler_methodCount = sizeof(wxTIFFHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxUSE_LIBTIFF)


#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxCHECK_VERSION(2,8,0) && wxUSE_TGA)
// ---------------------------------------------------------------------------
// Bind class wxTGAHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTGAHandler'
int wxluatype_wxTGAHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTGAHandler_delete[] = { &wxluatype_wxTGAHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTGAHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTGAHandler_delete }};

static int LUACALL wxLua_wxTGAHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTGAHandler_constructor[1] = {{ wxLua_wxTGAHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTGAHandler()
static int LUACALL wxLua_wxTGAHandler_constructor(lua_State *L)
{
    // call constructor
    wxTGAHandler* returns = new wxTGAHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTGAHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTGAHandler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTGAHandler_delete, 1, NULL },
    { "wxTGAHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTGAHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTGAHandler_methodCount = sizeof(wxTGAHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxCHECK_VERSION(2,8,0) && wxUSE_TGA)


#if wxLUA_USE_wxImage && wxUSE_IMAGE
// ---------------------------------------------------------------------------
// Bind class wxXPMHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxXPMHandler'
int wxluatype_wxXPMHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxXPMHandler_delete[] = { &wxluatype_wxXPMHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxXPMHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxXPMHandler_delete }};

static int LUACALL wxLua_wxXPMHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxXPMHandler_constructor[1] = {{ wxLua_wxXPMHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxXPMHandler()
static int LUACALL wxLua_wxXPMHandler_constructor(lua_State *L)
{
    // call constructor
    wxXPMHandler* returns = new wxXPMHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxXPMHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxXPMHandler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxXPMHandler_delete, 1, NULL },
    { "wxXPMHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxXPMHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxXPMHandler_methodCount = sizeof(wxXPMHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxImage && wxUSE_IMAGE


#if wxLUA_USE_wxArtProvider
// ---------------------------------------------------------------------------
// Bind class wxArtProvider
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxArtProvider'
int wxluatype_wxArtProvider = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxArtProvider) && ((wxLUA_USE_wxArtProvider) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxArtProvider_Delete[] = { &wxluatype_wxArtProvider, NULL };
static int LUACALL wxLua_wxArtProvider_Delete(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArtProvider_Delete[1] = {{ wxLua_wxArtProvider_Delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxArtProvider_Delete }};
//         static bool Delete(%ungc wxArtProvider *provider)
static int LUACALL wxLua_wxArtProvider_Delete(lua_State *L)
{
    // wxArtProvider provider
    wxArtProvider * provider = (wxArtProvider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArtProvider);
    if (wxluaO_isgcobject(L, provider)) wxluaO_undeletegcobject(L, provider);
    // call Delete
    bool returns = (wxArtProvider::Delete(provider));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxArtProvider) && ((wxLUA_USE_wxArtProvider) && (wxCHECK_VERSION(2,8,0)))

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxArtProvider)
static wxLuaArgType s_wxluatypeArray_wxLua_wxArtProvider_GetBitmap[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxArtProvider_GetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArtProvider_GetBitmap[1] = {{ wxLua_wxArtProvider_GetBitmap, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 3, s_wxluatypeArray_wxLua_wxArtProvider_GetBitmap }};
//     static wxBitmap GetBitmap(const wxString& id, const wxString& client = wxART_OTHER, const wxSize& size = wxDefaultSize)
static int LUACALL wxLua_wxArtProvider_GetBitmap(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 3 ? (const wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize) : &wxDefaultSize);
    // const wxString client = wxART_OTHER
    const wxString client = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxART_OTHER));
    // const wxString id
    const wxString id = wxlua_getwxStringtype(L, 1);
    // call GetBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(wxArtProvider::GetBitmap(id, client, *size));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxArtProvider)

#if ((wxLUA_USE_wxIcon) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxArtProvider)
static wxLuaArgType s_wxluatypeArray_wxLua_wxArtProvider_GetIcon[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxArtProvider_GetIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArtProvider_GetIcon[1] = {{ wxLua_wxArtProvider_GetIcon, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 3, s_wxluatypeArray_wxLua_wxArtProvider_GetIcon }};
//     static wxIcon GetIcon(const wxString& id, const wxString& client = wxART_OTHER, const wxSize& size = wxDefaultSize)
static int LUACALL wxLua_wxArtProvider_GetIcon(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 3 ? (const wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize) : &wxDefaultSize);
    // const wxString client = wxART_OTHER
    const wxString client = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxART_OTHER));
    // const wxString id
    const wxString id = wxlua_getwxStringtype(L, 1);
    // call GetIcon
    // allocate a new object using the copy constructor
    wxIcon* returns = new wxIcon(wxArtProvider::GetIcon(id, client, *size));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxIcon*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // ((wxLUA_USE_wxIcon) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxArtProvider)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxArtProvider)
static wxLuaArgType s_wxluatypeArray_wxLua_wxArtProvider_GetSizeHint[] = { &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxArtProvider_GetSizeHint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArtProvider_GetSizeHint[1] = {{ wxLua_wxArtProvider_GetSizeHint, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxArtProvider_GetSizeHint }};
//     static wxSize GetSizeHint(const wxString& client, bool platform_dependent = false)
static int LUACALL wxLua_wxArtProvider_GetSizeHint(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool platform_dependent = false
    bool platform_dependent = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // const wxString client
    const wxString client = wxlua_getwxStringtype(L, 1);
    // call GetSizeHint
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(wxArtProvider::GetSizeHint(client, platform_dependent));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxArtProvider)

#if (wxLUA_USE_wxArtProvider) && ((wxLUA_USE_wxArtProvider) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxArtProvider_Insert[] = { &wxluatype_wxArtProvider, NULL };
static int LUACALL wxLua_wxArtProvider_Insert(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArtProvider_Insert[1] = {{ wxLua_wxArtProvider_Insert, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxArtProvider_Insert }};
//         static void Insert(%ungc wxArtProvider *provider)
static int LUACALL wxLua_wxArtProvider_Insert(lua_State *L)
{
    // wxArtProvider provider
    wxArtProvider * provider = (wxArtProvider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArtProvider);
    if (wxluaO_isgcobject(L, provider)) wxluaO_undeletegcobject(L, provider);
    // call Insert
    wxArtProvider::Insert(provider);

    return 0;
}

#endif // (wxLUA_USE_wxArtProvider) && ((wxLUA_USE_wxArtProvider) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxArtProvider) && (wxCHECK_VERSION(2,8,0))
static int LUACALL wxLua_wxArtProvider_Pop(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArtProvider_Pop[1] = {{ wxLua_wxArtProvider_Pop, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//         static bool Pop()
static int LUACALL wxLua_wxArtProvider_Pop(lua_State *L)
{
    // call Pop
    bool returns = (wxArtProvider::Pop());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxArtProvider) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxArtProvider) && ((wxLUA_USE_wxArtProvider) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxArtProvider_Push[] = { &wxluatype_wxArtProvider, NULL };
static int LUACALL wxLua_wxArtProvider_Push(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArtProvider_Push[1] = {{ wxLua_wxArtProvider_Push, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxArtProvider_Push }};
//         static void Push(%ungc wxArtProvider *provider)
static int LUACALL wxLua_wxArtProvider_Push(lua_State *L)
{
    // wxArtProvider provider
    wxArtProvider * provider = (wxArtProvider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArtProvider);
    if (wxluaO_isgcobject(L, provider)) wxluaO_undeletegcobject(L, provider);
    // call Push
    wxArtProvider::Push(provider);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArtProvider_Remove[] = { &wxluatype_wxArtProvider, NULL };
static int LUACALL wxLua_wxArtProvider_Remove(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArtProvider_Remove[1] = {{ wxLua_wxArtProvider_Remove, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxArtProvider_Remove }};
//         static bool Remove(%gc wxArtProvider *provider) // FIXME - mem leak if not found
static int LUACALL wxLua_wxArtProvider_Remove(lua_State *L)
{
    // wxArtProvider provider
    wxArtProvider * provider = (wxArtProvider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArtProvider);
    if (!wxluaO_isgcobject(L, provider)) wxluaO_addgcobject(L, provider);
    // call Remove
    bool returns = (wxArtProvider::Remove(provider));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxArtProvider) && ((wxLUA_USE_wxArtProvider) && (wxCHECK_VERSION(2,8,0)))



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxArtProvider_methods[] = {
#if (wxLUA_USE_wxArtProvider) && ((wxLUA_USE_wxArtProvider) && (wxCHECK_VERSION(2,8,0)))
    { "Delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxArtProvider_Delete, 1, NULL },
#endif // (wxLUA_USE_wxArtProvider) && ((wxLUA_USE_wxArtProvider) && (wxCHECK_VERSION(2,8,0)))

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxArtProvider)
    { "GetBitmap", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxArtProvider_GetBitmap, 1, NULL },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxArtProvider)

#if ((wxLUA_USE_wxIcon) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxArtProvider)
    { "GetIcon", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxArtProvider_GetIcon, 1, NULL },
#endif // ((wxLUA_USE_wxIcon) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxArtProvider)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxArtProvider)
    { "GetSizeHint", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxArtProvider_GetSizeHint, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxArtProvider)

#if (wxLUA_USE_wxArtProvider) && ((wxLUA_USE_wxArtProvider) && (wxCHECK_VERSION(2,8,0)))
    { "Insert", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxArtProvider_Insert, 1, NULL },
#endif // (wxLUA_USE_wxArtProvider) && ((wxLUA_USE_wxArtProvider) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxArtProvider) && (wxCHECK_VERSION(2,8,0))
    { "Pop", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxArtProvider_Pop, 1, NULL },
#endif // (wxLUA_USE_wxArtProvider) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxArtProvider) && ((wxLUA_USE_wxArtProvider) && (wxCHECK_VERSION(2,8,0)))
    { "Push", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxArtProvider_Push, 1, NULL },
    { "Remove", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxArtProvider_Remove, 1, NULL },
#endif // (wxLUA_USE_wxArtProvider) && ((wxLUA_USE_wxArtProvider) && (wxCHECK_VERSION(2,8,0)))

    { 0, 0, 0, 0 },
};

int wxArtProvider_methodCount = sizeof(wxArtProvider_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxArtProvider


#if wxLUA_USE_wxArtProvider
// ---------------------------------------------------------------------------
// Bind class wxLuaArtProvider
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLuaArtProvider'
int wxluatype_wxLuaArtProvider = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxArtProvider)
static wxLuaArgType s_wxluatypeArray_wxLua_wxLuaArtProvider_CreateBitmap[] = { &wxluatype_wxLuaArtProvider, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxLuaArtProvider_CreateBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLuaArtProvider_CreateBitmap[1] = {{ wxLua_wxLuaArtProvider_CreateBitmap, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxLuaArtProvider_CreateBitmap }};
//     virtual wxBitmap CreateBitmap(const wxString& id, const wxString& client, const wxSize& size);
static int LUACALL wxLua_wxLuaArtProvider_CreateBitmap(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize);
    // const wxString client
    const wxString client = wxlua_getwxStringtype(L, 3);
    // const wxString id
    const wxString id = wxlua_getwxStringtype(L, 2);
    // get this
    wxLuaArtProvider * self = (wxLuaArtProvider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLuaArtProvider);
    // call CreateBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->CreateBitmap(id, client, *size));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxArtProvider)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxArtProvider)
static wxLuaArgType s_wxluatypeArray_wxLua_wxLuaArtProvider_DoGetSizeHint[] = { &wxluatype_wxLuaArtProvider, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLuaArtProvider_DoGetSizeHint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLuaArtProvider_DoGetSizeHint[1] = {{ wxLua_wxLuaArtProvider_DoGetSizeHint, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxLuaArtProvider_DoGetSizeHint }};
//     virtual wxSize DoGetSizeHint(const wxString& client) // { return GetSizeHint(client, true); }
static int LUACALL wxLua_wxLuaArtProvider_DoGetSizeHint(lua_State *L)
{
    // const wxString client
    const wxString client = wxlua_getwxStringtype(L, 2);
    // get this
    wxLuaArtProvider * self = (wxLuaArtProvider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLuaArtProvider);
    // call DoGetSizeHint
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->DoGetSizeHint(client));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxArtProvider)

static wxLuaArgType s_wxluatypeArray_wxLua_wxLuaArtProvider_delete[] = { &wxluatype_wxLuaArtProvider, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLuaArtProvider_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxLuaArtProvider_delete }};

static int LUACALL wxLua_wxLuaArtProvider_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLuaArtProvider_constructor[1] = {{ wxLua_wxLuaArtProvider_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
// %override wxLua_wxLuaArtProvider_constructor
//     wxLuaArtprovider()
static int LUACALL wxLua_wxLuaArtProvider_constructor(lua_State *L)
{
    wxLuaState wxlState(L);

    // call constructor
    wxLuaArtProvider *returns = new wxLuaArtProvider(wxlState);
    // add to tracked memory list
    wxluaO_addgcobject(L, (wxLuaArtProvider *)returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLuaArtProvider);

    return 1;
}





// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLuaArtProvider_methods[] = {
#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxArtProvider)
    { "CreateBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLuaArtProvider_CreateBitmap, 1, NULL },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxArtProvider)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxArtProvider)
    { "DoGetSizeHint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLuaArtProvider_DoGetSizeHint, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxArtProvider)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxLuaArtProvider_delete, 1, NULL },
    { "wxLuaArtProvider", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLuaArtProvider_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxLuaArtProvider_methodCount = sizeof(wxLuaArtProvider_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxArtProvider

