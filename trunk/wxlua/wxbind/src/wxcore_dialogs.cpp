// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxcore_dialogs.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxcore_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif



#if wxLUA_USE_wxDialog
// ---------------------------------------------------------------------------
// Bind class wxDialog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDialog'
int wxluatype_wxDialog = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDialog)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDialog_Create[] = { &wxluatype_wxDialog, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDialog_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDialog_Create[1] = {{ wxLua_wxDialog_Create, WXLUAMETHOD_METHOD, 4, 8, s_wxluatypeArray_wxLua_wxDialog_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_DIALOG_STYLE, const wxString& name = "wxDialog")
static int LUACALL wxLua_wxDialog_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxDialog"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxDialog")));
    // long style = wxDEFAULT_DIALOG_STYLE
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxDEFAULT_DIALOG_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 4);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxDialog * self = (wxDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDialog);
    // call Create
    bool returns = (self->Create(parent, id, title, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDialog)

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))) && ((wxUSE_BUTTON) && (wxLUA_USE_wxDialog))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDialog_CreateButtonSizer[] = { &wxluatype_wxDialog, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDialog_CreateButtonSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDialog_CreateButtonSizer[1] = {{ wxLua_wxDialog_CreateButtonSizer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDialog_CreateButtonSizer }};
//     wxUSE_BUTTON wxSizer* CreateButtonSizer(long flags)
static int LUACALL wxLua_wxDialog_CreateButtonSizer(lua_State *L)
{
    // long flags
    long flags = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxDialog * self = (wxDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDialog);
    // call CreateButtonSizer
    wxSizer* returns = (wxSizer*)self->CreateButtonSizer(flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizer);

    return 1;
}

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))) && ((wxUSE_BUTTON) && (wxLUA_USE_wxDialog))

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0) && wxUSE_BUTTON) && (wxLUA_USE_wxDialog))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDialog_CreateSeparatedButtonSizer[] = { &wxluatype_wxDialog, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDialog_CreateSeparatedButtonSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDialog_CreateSeparatedButtonSizer[1] = {{ wxLua_wxDialog_CreateSeparatedButtonSizer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDialog_CreateSeparatedButtonSizer }};
//     %wxchkver_2_8&&wxUSE_BUTTON wxSizer *CreateSeparatedButtonSizer(long flags)
static int LUACALL wxLua_wxDialog_CreateSeparatedButtonSizer(lua_State *L)
{
    // long flags
    long flags = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxDialog * self = (wxDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDialog);
    // call CreateSeparatedButtonSizer
    wxSizer* returns = (wxSizer*)self->CreateSeparatedButtonSizer(flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizer);

    return 1;
}

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0) && wxUSE_BUTTON) && (wxLUA_USE_wxDialog))

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_BUTTON)) && ((wxUSE_BUTTON) && (wxLUA_USE_wxDialog))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDialog_CreateStdDialogButtonSizer[] = { &wxluatype_wxDialog, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDialog_CreateStdDialogButtonSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDialog_CreateStdDialogButtonSizer[1] = {{ wxLua_wxDialog_CreateStdDialogButtonSizer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDialog_CreateStdDialogButtonSizer }};
//     wxUSE_BUTTON wxStdDialogButtonSizer* CreateStdDialogButtonSizer(long flags)
static int LUACALL wxLua_wxDialog_CreateStdDialogButtonSizer(lua_State *L)
{
    // long flags
    long flags = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxDialog * self = (wxDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDialog);
    // call CreateStdDialogButtonSizer
    wxStdDialogButtonSizer* returns = (wxStdDialogButtonSizer*)self->CreateStdDialogButtonSizer(flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStdDialogButtonSizer);

    return 1;
}

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_BUTTON)) && ((wxUSE_BUTTON) && (wxLUA_USE_wxDialog))

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))) && ((wxUSE_STATTEXT) && (wxLUA_USE_wxDialog))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDialog_CreateTextSizer[] = { &wxluatype_wxDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDialog_CreateTextSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDialog_CreateTextSizer[1] = {{ wxLua_wxDialog_CreateTextSizer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDialog_CreateTextSizer }};
//     wxUSE_STATTEXT wxSizer *CreateTextSizer( const wxString &message )
static int LUACALL wxLua_wxDialog_CreateTextSizer(lua_State *L)
{
    // const wxString message
    const wxString message = wxlua_getwxStringtype(L, 2);
    // get this
    wxDialog * self = (wxDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDialog);
    // call CreateTextSizer
    wxSizer* returns = (wxSizer*)self->CreateTextSizer(message);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizer);

    return 1;
}

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))) && ((wxUSE_STATTEXT) && (wxLUA_USE_wxDialog))

static wxLuaArgType s_wxluatypeArray_wxLua_wxDialog_EndModal[] = { &wxluatype_wxDialog, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDialog_EndModal(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDialog_EndModal[1] = {{ wxLua_wxDialog_EndModal, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDialog_EndModal }};
//     void EndModal(int retCode)
static int LUACALL wxLua_wxDialog_EndModal(lua_State *L)
{
    // int retCode
    int retCode = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDialog * self = (wxDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDialog);
    // call EndModal
    self->EndModal(retCode);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDialog_GetReturnCode[] = { &wxluatype_wxDialog, NULL };
static int LUACALL wxLua_wxDialog_GetReturnCode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDialog_GetReturnCode[1] = {{ wxLua_wxDialog_GetReturnCode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDialog_GetReturnCode }};
//     int GetReturnCode()
static int LUACALL wxLua_wxDialog_GetReturnCode(lua_State *L)
{
    // get this
    wxDialog * self = (wxDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDialog);
    // call GetReturnCode
    int returns = (self->GetReturnCode());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDialog_IsModal[] = { &wxluatype_wxDialog, NULL };
static int LUACALL wxLua_wxDialog_IsModal(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDialog_IsModal[1] = {{ wxLua_wxDialog_IsModal, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDialog_IsModal }};
//     bool IsModal() const
static int LUACALL wxLua_wxDialog_IsModal(lua_State *L)
{
    // get this
    wxDialog * self = (wxDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDialog);
    // call IsModal
    bool returns = (self->IsModal());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDialog_SetReturnCode[] = { &wxluatype_wxDialog, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDialog_SetReturnCode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDialog_SetReturnCode[1] = {{ wxLua_wxDialog_SetReturnCode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDialog_SetReturnCode }};
//     void SetReturnCode(int retCode)
static int LUACALL wxLua_wxDialog_SetReturnCode(lua_State *L)
{
    // int retCode
    int retCode = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDialog * self = (wxDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDialog);
    // call SetReturnCode
    self->SetReturnCode(retCode);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDialog_ShowModal[] = { &wxluatype_wxDialog, NULL };
static int LUACALL wxLua_wxDialog_ShowModal(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDialog_ShowModal[1] = {{ wxLua_wxDialog_ShowModal, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDialog_ShowModal }};
//     int ShowModal()
static int LUACALL wxLua_wxDialog_ShowModal(lua_State *L)
{
    // get this
    wxDialog * self = (wxDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDialog);
    // call ShowModal
    int returns = (self->ShowModal());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDialog)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDialog_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDialog_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDialog_constructor1[1] = {{ wxLua_wxDialog_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 7, s_wxluatypeArray_wxLua_wxDialog_constructor1 }};
//     wxDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_DIALOG_STYLE, const wxString& name = "wxDialog")
static int LUACALL wxLua_wxDialog_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxDialog"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxDialog")));
    // long style = wxDEFAULT_DIALOG_STYLE
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxDEFAULT_DIALOG_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 3);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxDialog* returns = new wxDialog(parent, id, title, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDialog);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDialog)

static int LUACALL wxLua_wxDialog_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDialog_constructor[1] = {{ wxLua_wxDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDialog()
static int LUACALL wxLua_wxDialog_constructor(lua_State *L)
{
    // call constructor
    wxDialog* returns = new wxDialog();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDialog);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDialog))||(wxLUA_USE_wxDialog)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDialog_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDialog)
    { wxLua_wxDialog_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 7, s_wxluatypeArray_wxLua_wxDialog_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDialog)
    { wxLua_wxDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxDialog_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxDialog_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDialog))||(wxLUA_USE_wxDialog)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDialog_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDialog)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDialog_Create, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDialog)

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))) && ((wxUSE_BUTTON) && (wxLUA_USE_wxDialog))
    { "CreateButtonSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDialog_CreateButtonSizer, 1, NULL },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))) && ((wxUSE_BUTTON) && (wxLUA_USE_wxDialog))

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0) && wxUSE_BUTTON) && (wxLUA_USE_wxDialog))
    { "CreateSeparatedButtonSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDialog_CreateSeparatedButtonSizer, 1, NULL },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0) && wxUSE_BUTTON) && (wxLUA_USE_wxDialog))

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_BUTTON)) && ((wxUSE_BUTTON) && (wxLUA_USE_wxDialog))
    { "CreateStdDialogButtonSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDialog_CreateStdDialogButtonSizer, 1, NULL },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)) && (wxUSE_BUTTON)) && ((wxUSE_BUTTON) && (wxLUA_USE_wxDialog))

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))) && ((wxUSE_STATTEXT) && (wxLUA_USE_wxDialog))
    { "CreateTextSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDialog_CreateTextSizer, 1, NULL },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))) && ((wxUSE_STATTEXT) && (wxLUA_USE_wxDialog))

    { "EndModal", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDialog_EndModal, 1, NULL },
    { "GetReturnCode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDialog_GetReturnCode, 1, NULL },
    { "IsModal", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDialog_IsModal, 1, NULL },
    { "SetReturnCode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDialog_SetReturnCode, 1, NULL },
    { "ShowModal", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDialog_ShowModal, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDialog))||(wxLUA_USE_wxDialog)
    { "wxDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDialog_constructor_overload, s_wxluafunc_wxLua_wxDialog_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDialog))||(wxLUA_USE_wxDialog)

    { 0, 0, 0, 0 },
};

int wxDialog_methodCount = sizeof(wxDialog_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDialog


#if wxLUA_USE_wxColourDialog && wxUSE_COLOURDLG
// ---------------------------------------------------------------------------
// Bind class wxColourDialog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxColourDialog'
int wxluatype_wxColourDialog = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxColourDialog_GetColourData[] = { &wxluatype_wxColourDialog, NULL };
static int LUACALL wxLua_wxColourDialog_GetColourData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourDialog_GetColourData[1] = {{ wxLua_wxColourDialog_GetColourData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxColourDialog_GetColourData }};
//     wxColourData& GetColourData()
static int LUACALL wxLua_wxColourDialog_GetColourData(lua_State *L)
{
    // get this
    wxColourDialog * self = (wxColourDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourDialog);
    // call GetColourData
    wxColourData* returns = &self->GetColourData();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColourData);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxColourDialog_constructor[] = { &wxluatype_wxWindow, &wxluatype_wxColourData, NULL };
static int LUACALL wxLua_wxColourDialog_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourDialog_constructor[1] = {{ wxLua_wxColourDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxColourDialog_constructor }};
//     wxColourDialog(wxWindow* parent, wxColourData* data = NULL)
static int LUACALL wxLua_wxColourDialog_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxColourData data = NULL
    wxColourData * data = (argCount >= 2 ? (wxColourData *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColourData) : NULL);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxColourDialog* returns = new wxColourDialog(parent, data);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColourDialog);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxColourDialog_methods[] = {
    { "GetColourData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColourDialog_GetColourData, 1, NULL },
    { "wxColourDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxColourDialog_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxColourDialog_methodCount = sizeof(wxColourDialog_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxColourDialog && wxUSE_COLOURDLG


#if wxLUA_USE_wxColourDialog && wxUSE_COLOURDLG
// ---------------------------------------------------------------------------
// Bind class wxColourData
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxColourData'
int wxluatype_wxColourData = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxColourData_GetChooseFull[] = { &wxluatype_wxColourData, NULL };
static int LUACALL wxLua_wxColourData_GetChooseFull(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourData_GetChooseFull[1] = {{ wxLua_wxColourData_GetChooseFull, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxColourData_GetChooseFull }};
//     bool GetChooseFull() const
static int LUACALL wxLua_wxColourData_GetChooseFull(lua_State *L)
{
    // get this
    wxColourData * self = (wxColourData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourData);
    // call GetChooseFull
    bool returns = (self->GetChooseFull());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxColourDialog && wxUSE_COLOURDLG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxColourData_GetColour[] = { &wxluatype_wxColourData, NULL };
static int LUACALL wxLua_wxColourData_GetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourData_GetColour[1] = {{ wxLua_wxColourData_GetColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxColourData_GetColour }};
//     wxColour GetColour() const
static int LUACALL wxLua_wxColourData_GetColour(lua_State *L)
{
    // get this
    wxColourData * self = (wxColourData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourData);
    // call GetColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxColourData_GetCustomColour[] = { &wxluatype_wxColourData, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxColourData_GetCustomColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourData_GetCustomColour[1] = {{ wxLua_wxColourData_GetCustomColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxColourData_GetCustomColour }};
//     wxColour GetCustomColour(int i) const
static int LUACALL wxLua_wxColourData_GetCustomColour(lua_State *L)
{
    // int i
    int i = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxColourData * self = (wxColourData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourData);
    // call GetCustomColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetCustomColour(i));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxColourDialog && wxUSE_COLOURDLG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxColourData_SetChooseFull[] = { &wxluatype_wxColourData, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxColourData_SetChooseFull(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourData_SetChooseFull[1] = {{ wxLua_wxColourData_SetChooseFull, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxColourData_SetChooseFull }};
//     void SetChooseFull(bool flag)
static int LUACALL wxLua_wxColourData_SetChooseFull(lua_State *L)
{
    // bool flag
    bool flag = wxlua_getbooleantype(L, 2);
    // get this
    wxColourData * self = (wxColourData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourData);
    // call SetChooseFull
    self->SetChooseFull(flag);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxColourDialog && wxUSE_COLOURDLG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxColourData_SetColour[] = { &wxluatype_wxColourData, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxColourData_SetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourData_SetColour[1] = {{ wxLua_wxColourData_SetColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxColourData_SetColour }};
//     void SetColour(wxColour &colour)
static int LUACALL wxLua_wxColourData_SetColour(lua_State *L)
{
    // wxColour colour
    wxColour * colour = (wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxColourData * self = (wxColourData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourData);
    // call SetColour
    self->SetColour(*colour);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxColourData_SetCustomColour[] = { &wxluatype_wxColourData, &wxluatype_TNUMBER, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxColourData_SetCustomColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourData_SetCustomColour[1] = {{ wxLua_wxColourData_SetCustomColour, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxColourData_SetCustomColour }};
//     void SetCustomColour(int i, wxColour &colour)
static int LUACALL wxLua_wxColourData_SetCustomColour(lua_State *L)
{
    // wxColour colour
    wxColour * colour = (wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // int i
    int i = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxColourData * self = (wxColourData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourData);
    // call SetCustomColour
    self->SetCustomColour(i, *colour);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxColourDialog && wxUSE_COLOURDLG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxColourData_delete[] = { &wxluatype_wxColourData, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourData_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxColourData_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxColourData_constructor1[] = { &wxluatype_wxColourData, NULL };
static int LUACALL wxLua_wxColourData_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourData_constructor1[1] = {{ wxLua_wxColourData_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxColourData_constructor1 }};
//     wxColourData(const wxColourData& cData)
static int LUACALL wxLua_wxColourData_constructor1(lua_State *L)
{
    // const wxColourData cData
    const wxColourData * cData = (const wxColourData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourData);
    // call constructor
    wxColourData* returns = new wxColourData(*cData);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColourData);

    return 1;
}

static int LUACALL wxLua_wxColourData_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourData_constructor[1] = {{ wxLua_wxColourData_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxColourData()
static int LUACALL wxLua_wxColourData_constructor(lua_State *L)
{
    // call constructor
    wxColourData* returns = new wxColourData();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColourData);

    return 1;
}




#if (wxLUA_USE_wxColourDialog && wxUSE_COLOURDLG)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourData_constructor_overload[] =
{
    { wxLua_wxColourData_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxColourData_constructor1 },
    { wxLua_wxColourData_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxColourData_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxColourData_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxColourDialog && wxUSE_COLOURDLG)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxColourData_methods[] = {
    { "GetChooseFull", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColourData_GetChooseFull, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxColourDialog && wxUSE_COLOURDLG)
    { "GetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColourData_GetColour, 1, NULL },
    { "GetCustomColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColourData_GetCustomColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxColourDialog && wxUSE_COLOURDLG)

    { "SetChooseFull", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColourData_SetChooseFull, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxColourDialog && wxUSE_COLOURDLG)
    { "SetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColourData_SetColour, 1, NULL },
    { "SetCustomColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColourData_SetCustomColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxColourDialog && wxUSE_COLOURDLG)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxColourData_delete, 1, NULL },

#if (wxLUA_USE_wxColourDialog && wxUSE_COLOURDLG)
    { "wxColourData", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxColourData_constructor_overload, s_wxluafunc_wxLua_wxColourData_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxColourDialog && wxUSE_COLOURDLG)

    { 0, 0, 0, 0 },
};

int wxColourData_methodCount = sizeof(wxColourData_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxColourDialog && wxUSE_COLOURDLG


#if wxLUA_USE_wxFileDialog && wxUSE_FILEDLG
// ---------------------------------------------------------------------------
// Bind class wxFileDialog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFileDialog'
int wxluatype_wxFileDialog = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_GetDirectory[] = { &wxluatype_wxFileDialog, NULL };
static int LUACALL wxLua_wxFileDialog_GetDirectory(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_GetDirectory[1] = {{ wxLua_wxFileDialog_GetDirectory, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileDialog_GetDirectory }};
//     wxString GetDirectory() const
static int LUACALL wxLua_wxFileDialog_GetDirectory(lua_State *L)
{
    // get this
    wxFileDialog * self = (wxFileDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDialog);
    // call GetDirectory
    wxString returns = (self->GetDirectory());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_GetFilename[] = { &wxluatype_wxFileDialog, NULL };
static int LUACALL wxLua_wxFileDialog_GetFilename(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_GetFilename[1] = {{ wxLua_wxFileDialog_GetFilename, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileDialog_GetFilename }};
//     wxString GetFilename() const
static int LUACALL wxLua_wxFileDialog_GetFilename(lua_State *L)
{
    // get this
    wxFileDialog * self = (wxFileDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDialog);
    // call GetFilename
    wxString returns = (self->GetFilename());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_GetFilenames[] = { &wxluatype_wxFileDialog, NULL };
static int LUACALL wxLua_wxFileDialog_GetFilenames(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_GetFilenames[1] = {{ wxLua_wxFileDialog_GetFilenames, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileDialog_GetFilenames }};
// %override wxLua_wxFileDialog_GetFilenames
// void GetFilenames(wxArrayString& filenames) const
static int LUACALL wxLua_wxFileDialog_GetFilenames(lua_State *L)
{
    wxArrayString fileNames;
    wxFileDialog *self = (wxFileDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDialog);
    // call GetPaths
    self->GetFilenames(fileNames);
    // return values
    wxlua_pushwxArrayStringtable(L, fileNames);
    // return the number of parameters
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_GetFilterIndex[] = { &wxluatype_wxFileDialog, NULL };
static int LUACALL wxLua_wxFileDialog_GetFilterIndex(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_GetFilterIndex[1] = {{ wxLua_wxFileDialog_GetFilterIndex, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileDialog_GetFilterIndex }};
//     int GetFilterIndex() const
static int LUACALL wxLua_wxFileDialog_GetFilterIndex(lua_State *L)
{
    // get this
    wxFileDialog * self = (wxFileDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDialog);
    // call GetFilterIndex
    int returns = (self->GetFilterIndex());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_GetMessage[] = { &wxluatype_wxFileDialog, NULL };
static int LUACALL wxLua_wxFileDialog_GetMessage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_GetMessage[1] = {{ wxLua_wxFileDialog_GetMessage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileDialog_GetMessage }};
//     wxString GetMessage() const
static int LUACALL wxLua_wxFileDialog_GetMessage(lua_State *L)
{
    // get this
    wxFileDialog * self = (wxFileDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDialog);
    // call GetMessage
    wxString returns = (self->GetMessage());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_GetPath[] = { &wxluatype_wxFileDialog, NULL };
static int LUACALL wxLua_wxFileDialog_GetPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_GetPath[1] = {{ wxLua_wxFileDialog_GetPath, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileDialog_GetPath }};
//     wxString GetPath() const
static int LUACALL wxLua_wxFileDialog_GetPath(lua_State *L)
{
    // get this
    wxFileDialog * self = (wxFileDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDialog);
    // call GetPath
    wxString returns = (self->GetPath());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_GetPaths[] = { &wxluatype_wxFileDialog, NULL };
static int LUACALL wxLua_wxFileDialog_GetPaths(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_GetPaths[1] = {{ wxLua_wxFileDialog_GetPaths, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileDialog_GetPaths }};
// %override wxLua_wxFileDialog_GetPaths
// void GetPaths(wxArrayString& paths) const
static int LUACALL wxLua_wxFileDialog_GetPaths(lua_State *L)
{
    wxArrayString paths;
    wxFileDialog *self = (wxFileDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDialog);
    // call GetPaths
    self->GetPaths(paths);
    // return values
    wxlua_pushwxArrayStringtable(L, paths);
    // return the number of parameters
    return 1;
}



#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_GetStyle[] = { &wxluatype_wxFileDialog, NULL };
static int LUACALL wxLua_wxFileDialog_GetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_GetStyle[1] = {{ wxLua_wxFileDialog_GetStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileDialog_GetStyle }};
//     !%wxchkver_2_8 long GetStyle() const
static int LUACALL wxLua_wxFileDialog_GetStyle(lua_State *L)
{
    // get this
    wxFileDialog * self = (wxFileDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDialog);
    // call GetStyle
    long  returns = (self->GetStyle());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_GetWildcard[] = { &wxluatype_wxFileDialog, NULL };
static int LUACALL wxLua_wxFileDialog_GetWildcard(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_GetWildcard[1] = {{ wxLua_wxFileDialog_GetWildcard, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileDialog_GetWildcard }};
//     wxString GetWildcard() const
static int LUACALL wxLua_wxFileDialog_GetWildcard(lua_State *L)
{
    // get this
    wxFileDialog * self = (wxFileDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDialog);
    // call GetWildcard
    wxString returns = (self->GetWildcard());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_SetDirectory[] = { &wxluatype_wxFileDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileDialog_SetDirectory(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_SetDirectory[1] = {{ wxLua_wxFileDialog_SetDirectory, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileDialog_SetDirectory }};
//     void SetDirectory(const wxString& directory)
static int LUACALL wxLua_wxFileDialog_SetDirectory(lua_State *L)
{
    // const wxString directory
    const wxString directory = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileDialog * self = (wxFileDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDialog);
    // call SetDirectory
    self->SetDirectory(directory);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_SetFilename[] = { &wxluatype_wxFileDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileDialog_SetFilename(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_SetFilename[1] = {{ wxLua_wxFileDialog_SetFilename, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileDialog_SetFilename }};
//     void SetFilename(const wxString& setfilename)
static int LUACALL wxLua_wxFileDialog_SetFilename(lua_State *L)
{
    // const wxString setfilename
    const wxString setfilename = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileDialog * self = (wxFileDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDialog);
    // call SetFilename
    self->SetFilename(setfilename);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_SetFilterIndex[] = { &wxluatype_wxFileDialog, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFileDialog_SetFilterIndex(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_SetFilterIndex[1] = {{ wxLua_wxFileDialog_SetFilterIndex, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileDialog_SetFilterIndex }};
//     void SetFilterIndex(int filterIndex)
static int LUACALL wxLua_wxFileDialog_SetFilterIndex(lua_State *L)
{
    // int filterIndex
    int filterIndex = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxFileDialog * self = (wxFileDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDialog);
    // call SetFilterIndex
    self->SetFilterIndex(filterIndex);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_SetMessage[] = { &wxluatype_wxFileDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileDialog_SetMessage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_SetMessage[1] = {{ wxLua_wxFileDialog_SetMessage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileDialog_SetMessage }};
//     void SetMessage(const wxString& message)
static int LUACALL wxLua_wxFileDialog_SetMessage(lua_State *L)
{
    // const wxString message
    const wxString message = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileDialog * self = (wxFileDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDialog);
    // call SetMessage
    self->SetMessage(message);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_SetPath[] = { &wxluatype_wxFileDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileDialog_SetPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_SetPath[1] = {{ wxLua_wxFileDialog_SetPath, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileDialog_SetPath }};
//     void SetPath(const wxString& path)
static int LUACALL wxLua_wxFileDialog_SetPath(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileDialog * self = (wxFileDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDialog);
    // call SetPath
    self->SetPath(path);

    return 0;
}


#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_SetStyle[] = { &wxluatype_wxFileDialog, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFileDialog_SetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_SetStyle[1] = {{ wxLua_wxFileDialog_SetStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileDialog_SetStyle }};
//     !%wxchkver_2_8 void SetStyle(long style)
static int LUACALL wxLua_wxFileDialog_SetStyle(lua_State *L)
{
    // long style
    long style = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxFileDialog * self = (wxFileDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDialog);
    // call SetStyle
    self->SetStyle(style);

    return 0;
}

#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_SetWildcard[] = { &wxluatype_wxFileDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileDialog_SetWildcard(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_SetWildcard[1] = {{ wxLua_wxFileDialog_SetWildcard, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileDialog_SetWildcard }};
//     void SetWildcard(const wxString& wildCard)
static int LUACALL wxLua_wxFileDialog_SetWildcard(lua_State *L)
{
    // const wxString wildCard
    const wxString wildCard = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileDialog * self = (wxFileDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDialog);
    // call SetWildcard
    self->SetWildcard(wildCard);

    return 0;
}


#if (((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_constructor[] = { &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileDialog_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_constructor[1] = {{ wxLua_wxFileDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 9, s_wxluatypeArray_wxLua_wxFileDialog_constructor }};
//     %not_overload %wxchkver_2_8 wxFileDialog(wxWindow *parent, const wxString& message = wxFileSelectorPromptStr, const wxString& defaultDir = "", const wxString& defaultFile = "", const wxString& wildCard = wxFileSelectorDefaultWildcardStr, long style = wxFD_DEFAULT_STYLE, const wxPoint& pos = wxDefaultPosition, const wxSize& sz = wxDefaultSize, const wxString& name = "wxFileDialog")
static int LUACALL wxLua_wxFileDialog_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxFileDialog"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxFileDialog")));
    // const wxSize sz = wxDefaultSize
    const wxSize * sz = (argCount >= 8 ? (const wxSize *)wxluaT_getuserdatatype(L, 8, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 7 ? (const wxPoint *)wxluaT_getuserdatatype(L, 7, wxluatype_wxPoint) : &wxDefaultPosition);
    // long style = wxFD_DEFAULT_STYLE
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxFD_DEFAULT_STYLE);
    // const wxString wildCard = wxFileSelectorDefaultWildcardStr
    const wxString wildCard = (argCount >= 5 ? wxlua_getwxStringtype(L, 5) : wxString(wxFileSelectorDefaultWildcardStr));
    // const wxString defaultFile = ""
    const wxString defaultFile = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // const wxString defaultDir = ""
    const wxString defaultDir = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString message = wxFileSelectorPromptStr
    const wxString message = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxFileSelectorPromptStr));
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxFileDialog* returns = new wxFileDialog(parent, message, defaultDir, defaultFile, wildCard, style, *pos, *sz, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileDialog);

    return 1;
}

#endif // (((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)

#if ((wxLUA_USE_wxPointSizeRect) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG))) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDialog_constructor[] = { &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxFileDialog_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDialog_constructor[1] = {{ wxLua_wxFileDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 7, s_wxluatypeArray_wxLua_wxFileDialog_constructor }};
//     %not_overload !%wxchkver_2_8 wxFileDialog(wxWindow* parent, const wxString& message = "Choose a file", const wxString& defaultDir = "", const wxString& defaultFile = "", const wxString& wildcard = "*.*", long style = 0, const wxPoint& pos = wxDefaultPosition)
static int LUACALL wxLua_wxFileDialog_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 7 ? (const wxPoint *)wxluaT_getuserdatatype(L, 7, wxluatype_wxPoint) : &wxDefaultPosition);
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxString wildcard = "*.*"
    const wxString wildcard = (argCount >= 5 ? wxlua_getwxStringtype(L, 5) : wxString(wxT("*.*")));
    // const wxString defaultFile = ""
    const wxString defaultFile = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // const wxString defaultDir = ""
    const wxString defaultDir = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString message = "Choose a file"
    const wxString message = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxT("Choose a file")));
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxFileDialog* returns = new wxFileDialog(parent, message, defaultDir, defaultFile, wildcard, style, *pos);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileDialog);

    return 1;
}

#endif // ((wxLUA_USE_wxPointSizeRect) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG))) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFileDialog_methods[] = {
    { "GetDirectory", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDialog_GetDirectory, 1, NULL },
    { "GetFilename", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDialog_GetFilename, 1, NULL },
    { "GetFilenames", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDialog_GetFilenames, 1, NULL },
    { "GetFilterIndex", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDialog_GetFilterIndex, 1, NULL },
    { "GetMessage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDialog_GetMessage, 1, NULL },
    { "GetPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDialog_GetPath, 1, NULL },
    { "GetPaths", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDialog_GetPaths, 1, NULL },

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)
    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDialog_GetStyle, 1, NULL },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)

    { "GetWildcard", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDialog_GetWildcard, 1, NULL },
    { "SetDirectory", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDialog_SetDirectory, 1, NULL },
    { "SetFilename", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDialog_SetFilename, 1, NULL },
    { "SetFilterIndex", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDialog_SetFilterIndex, 1, NULL },
    { "SetMessage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDialog_SetMessage, 1, NULL },
    { "SetPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDialog_SetPath, 1, NULL },

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)
    { "SetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDialog_SetStyle, 1, NULL },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)

    { "SetWildcard", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDialog_SetWildcard, 1, NULL },

#if (((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)
    { "wxFileDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFileDialog_constructor, 1, NULL },
#elif ((wxLUA_USE_wxPointSizeRect) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG))) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)
    { "wxFileDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFileDialog_constructor, 1, NULL },
#endif // ((wxLUA_USE_wxPointSizeRect) && ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG))) && (wxLUA_USE_wxFileDialog && wxUSE_FILEDLG)
    { 0, 0, 0, 0 },
};

int wxFileDialog_methodCount = sizeof(wxFileDialog_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxFileDialog && wxUSE_FILEDLG


#if wxLUA_USE_wxDirDialog && wxUSE_DIRDLG
// ---------------------------------------------------------------------------
// Bind class wxDirDialog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDirDialog'
int wxluatype_wxDirDialog = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDirDialog_GetMessage[] = { &wxluatype_wxDirDialog, NULL };
static int LUACALL wxLua_wxDirDialog_GetMessage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDirDialog_GetMessage[1] = {{ wxLua_wxDirDialog_GetMessage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDirDialog_GetMessage }};
//     wxString GetMessage() const
static int LUACALL wxLua_wxDirDialog_GetMessage(lua_State *L)
{
    // get this
    wxDirDialog * self = (wxDirDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDirDialog);
    // call GetMessage
    wxString returns = (self->GetMessage());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDirDialog_GetPath[] = { &wxluatype_wxDirDialog, NULL };
static int LUACALL wxLua_wxDirDialog_GetPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDirDialog_GetPath[1] = {{ wxLua_wxDirDialog_GetPath, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDirDialog_GetPath }};
//     wxString GetPath() const
static int LUACALL wxLua_wxDirDialog_GetPath(lua_State *L)
{
    // get this
    wxDirDialog * self = (wxDirDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDirDialog);
    // call GetPath
    wxString returns = (self->GetPath());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDirDialog && wxUSE_DIRDLG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDirDialog_GetStyle[] = { &wxluatype_wxDirDialog, NULL };
static int LUACALL wxLua_wxDirDialog_GetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDirDialog_GetStyle[1] = {{ wxLua_wxDirDialog_GetStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDirDialog_GetStyle }};
//     !%wxchkver_2_8 long GetStyle() const
static int LUACALL wxLua_wxDirDialog_GetStyle(lua_State *L)
{
    // get this
    wxDirDialog * self = (wxDirDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDirDialog);
    // call GetStyle
    long  returns = (self->GetStyle());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDirDialog && wxUSE_DIRDLG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDirDialog_SetMessage[] = { &wxluatype_wxDirDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDirDialog_SetMessage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDirDialog_SetMessage[1] = {{ wxLua_wxDirDialog_SetMessage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDirDialog_SetMessage }};
//     void SetMessage(const wxString& message)
static int LUACALL wxLua_wxDirDialog_SetMessage(lua_State *L)
{
    // const wxString message
    const wxString message = wxlua_getwxStringtype(L, 2);
    // get this
    wxDirDialog * self = (wxDirDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDirDialog);
    // call SetMessage
    self->SetMessage(message);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDirDialog_SetPath[] = { &wxluatype_wxDirDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDirDialog_SetPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDirDialog_SetPath[1] = {{ wxLua_wxDirDialog_SetPath, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDirDialog_SetPath }};
//     void SetPath(const wxString& path)
static int LUACALL wxLua_wxDirDialog_SetPath(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxDirDialog * self = (wxDirDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDirDialog);
    // call SetPath
    self->SetPath(path);

    return 0;
}


#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDirDialog && wxUSE_DIRDLG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDirDialog_SetStyle[] = { &wxluatype_wxDirDialog, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDirDialog_SetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDirDialog_SetStyle[1] = {{ wxLua_wxDirDialog_SetStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDirDialog_SetStyle }};
//     !%wxchkver_2_8 void SetStyle(long style)
static int LUACALL wxLua_wxDirDialog_SetStyle(lua_State *L)
{
    // long style
    long style = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxDirDialog * self = (wxDirDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDirDialog);
    // call SetStyle
    self->SetStyle(style);

    return 0;
}

#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDirDialog && wxUSE_DIRDLG)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDirDialog && wxUSE_DIRDLG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDirDialog_constructor[] = { &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxDirDialog_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDirDialog_constructor[1] = {{ wxLua_wxDirDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxDirDialog_constructor }};
//     wxDirDialog(wxWindow* parent, const wxString& message = "Choose a directory", const wxString& defaultPath = "", long style = 0, const wxPoint& pos = wxDefaultPosition)
static int LUACALL wxLua_wxDirDialog_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // long style = 0
    long style = (argCount >= 4 ? (long)wxlua_getnumbertype(L, 4) : 0);
    // const wxString defaultPath = ""
    const wxString defaultPath = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString message = "Choose a directory"
    const wxString message = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxT("Choose a directory")));
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxDirDialog* returns = new wxDirDialog(parent, message, defaultPath, style, *pos);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDirDialog);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDirDialog && wxUSE_DIRDLG)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDirDialog_methods[] = {
    { "GetMessage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDirDialog_GetMessage, 1, NULL },
    { "GetPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDirDialog_GetPath, 1, NULL },

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDirDialog && wxUSE_DIRDLG)
    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDirDialog_GetStyle, 1, NULL },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDirDialog && wxUSE_DIRDLG)

    { "SetMessage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDirDialog_SetMessage, 1, NULL },
    { "SetPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDirDialog_SetPath, 1, NULL },

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDirDialog && wxUSE_DIRDLG)
    { "SetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDirDialog_SetStyle, 1, NULL },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDirDialog && wxUSE_DIRDLG)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDirDialog && wxUSE_DIRDLG)
    { "wxDirDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDirDialog_constructor, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDirDialog && wxUSE_DIRDLG)

    { 0, 0, 0, 0 },
};

int wxDirDialog_methodCount = sizeof(wxDirDialog_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDirDialog && wxUSE_DIRDLG


#if wxLUA_USE_wxMessageDialog && wxUSE_MSGDLG
// ---------------------------------------------------------------------------
// Bind class wxMessageDialog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMessageDialog'
int wxluatype_wxMessageDialog = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxMessageDialog && wxUSE_MSGDLG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxMessageDialog_constructor[] = { &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxMessageDialog_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMessageDialog_constructor[1] = {{ wxLua_wxMessageDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 5, s_wxluatypeArray_wxLua_wxMessageDialog_constructor }};
//     wxMessageDialog(wxWindow* parent, const wxString& message, const wxString& caption = "Message box", long style = wxOK | wxCANCEL | wxCENTRE, const wxPoint& pos = wxDefaultPosition)
static int LUACALL wxLua_wxMessageDialog_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // long style = wxOK | wxCANCEL | wxCENTRE
    long style = (argCount >= 4 ? (long)wxlua_getnumbertype(L, 4) : wxOK | wxCANCEL | wxCENTRE);
    // const wxString caption = "Message box"
    const wxString caption = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxT("Message box")));
    // const wxString message
    const wxString message = wxlua_getwxStringtype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxMessageDialog* returns = new wxMessageDialog(parent, message, caption, style, *pos);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMessageDialog);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxMessageDialog && wxUSE_MSGDLG)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMessageDialog_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxMessageDialog && wxUSE_MSGDLG)
    { "wxMessageDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMessageDialog_constructor, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxMessageDialog && wxUSE_MSGDLG)

    { 0, 0, 0, 0 },
};

int wxMessageDialog_methodCount = sizeof(wxMessageDialog_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxMessageDialog && wxUSE_MSGDLG


#if wxUSE_CHOICEDLG && wxLUA_USE_wxMultiChoiceDialog
// ---------------------------------------------------------------------------
// Bind class wxMultiChoiceDialog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMultiChoiceDialog'
int wxluatype_wxMultiChoiceDialog = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxArrayInt) && (wxUSE_CHOICEDLG && wxLUA_USE_wxMultiChoiceDialog)
static wxLuaArgType s_wxluatypeArray_wxLua_wxMultiChoiceDialog_GetSelections[] = { &wxluatype_wxMultiChoiceDialog, NULL };
static int LUACALL wxLua_wxMultiChoiceDialog_GetSelections(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMultiChoiceDialog_GetSelections[1] = {{ wxLua_wxMultiChoiceDialog_GetSelections, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMultiChoiceDialog_GetSelections }};
//     wxArrayInt GetSelections() const // FIXME
static int LUACALL wxLua_wxMultiChoiceDialog_GetSelections(lua_State *L)
{
    // get this
    wxMultiChoiceDialog * self = (wxMultiChoiceDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMultiChoiceDialog);
    // call GetSelections
    // allocate a new object using the copy constructor
    wxArrayInt* returns = new wxArrayInt(self->GetSelections());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxArrayInt((wxArrayInt*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayInt);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMultiChoiceDialog_SetSelections[] = { &wxluatype_wxMultiChoiceDialog, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxMultiChoiceDialog_SetSelections(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMultiChoiceDialog_SetSelections[1] = {{ wxLua_wxMultiChoiceDialog_SetSelections, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMultiChoiceDialog_SetSelections }};
//     void SetSelections(const wxArrayInt& selections) const // FIXME
static int LUACALL wxLua_wxMultiChoiceDialog_SetSelections(lua_State *L)
{
    // const wxArrayInt selections
    wxLuaSmartwxArrayInt selections = wxlua_getwxArrayInt(L, 2);
    // get this
    wxMultiChoiceDialog * self = (wxMultiChoiceDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMultiChoiceDialog);
    // call SetSelections
    self->SetSelections(selections);

    return 0;
}

#endif // (wxLUA_USE_wxArrayInt) && (wxUSE_CHOICEDLG && wxLUA_USE_wxMultiChoiceDialog)

#if ((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxPointSizeRect)) && (wxUSE_CHOICEDLG && wxLUA_USE_wxMultiChoiceDialog)
static wxLuaArgType s_wxluatypeArray_wxLua_wxMultiChoiceDialog_constructor[] = { &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxArrayString, &wxluatype_TNUMBER, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxMultiChoiceDialog_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMultiChoiceDialog_constructor[1] = {{ wxLua_wxMultiChoiceDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 4, 6, s_wxluatypeArray_wxLua_wxMultiChoiceDialog_constructor }};
//     wxMultiChoiceDialog(wxWindow* parent, const wxString& message, const wxString& caption, const wxArrayString& choices, long style = wxCHOICEDLG_STYLE, const wxPoint& pos = wxDefaultPosition)
static int LUACALL wxLua_wxMultiChoiceDialog_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 6 ? (const wxPoint *)wxluaT_getuserdatatype(L, 6, wxluatype_wxPoint) : &wxDefaultPosition);
    // long style = wxCHOICEDLG_STYLE
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxCHOICEDLG_STYLE);
    // const wxArrayString choices
    wxLuaSmartwxArrayString choices = wxlua_getwxArrayString(L, 4);
    // const wxString caption
    const wxString caption = wxlua_getwxStringtype(L, 3);
    // const wxString message
    const wxString message = wxlua_getwxStringtype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxMultiChoiceDialog* returns = new wxMultiChoiceDialog(parent, message, caption, choices, style, *pos);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMultiChoiceDialog);

    return 1;
}

#endif // ((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxPointSizeRect)) && (wxUSE_CHOICEDLG && wxLUA_USE_wxMultiChoiceDialog)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMultiChoiceDialog_methods[] = {
#if (wxLUA_USE_wxArrayInt) && (wxUSE_CHOICEDLG && wxLUA_USE_wxMultiChoiceDialog)
    { "GetSelections", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMultiChoiceDialog_GetSelections, 1, NULL },
    { "SetSelections", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMultiChoiceDialog_SetSelections, 1, NULL },
#endif // (wxLUA_USE_wxArrayInt) && (wxUSE_CHOICEDLG && wxLUA_USE_wxMultiChoiceDialog)

#if ((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxPointSizeRect)) && (wxUSE_CHOICEDLG && wxLUA_USE_wxMultiChoiceDialog)
    { "wxMultiChoiceDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMultiChoiceDialog_constructor, 1, NULL },
#endif // ((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxPointSizeRect)) && (wxUSE_CHOICEDLG && wxLUA_USE_wxMultiChoiceDialog)

    { 0, 0, 0, 0 },
};

int wxMultiChoiceDialog_methodCount = sizeof(wxMultiChoiceDialog_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_CHOICEDLG && wxLUA_USE_wxMultiChoiceDialog


#if wxUSE_CHOICEDLG && wxLUA_USE_wxSingleChoiceDialog
// ---------------------------------------------------------------------------
// Bind class wxSingleChoiceDialog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSingleChoiceDialog'
int wxluatype_wxSingleChoiceDialog = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSingleChoiceDialog_GetSelection[] = { &wxluatype_wxSingleChoiceDialog, NULL };
static int LUACALL wxLua_wxSingleChoiceDialog_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSingleChoiceDialog_GetSelection[1] = {{ wxLua_wxSingleChoiceDialog_GetSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSingleChoiceDialog_GetSelection }};
//     int GetSelection() const
static int LUACALL wxLua_wxSingleChoiceDialog_GetSelection(lua_State *L)
{
    // get this
    wxSingleChoiceDialog * self = (wxSingleChoiceDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSingleChoiceDialog);
    // call GetSelection
    int returns = (self->GetSelection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSingleChoiceDialog_GetStringSelection[] = { &wxluatype_wxSingleChoiceDialog, NULL };
static int LUACALL wxLua_wxSingleChoiceDialog_GetStringSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSingleChoiceDialog_GetStringSelection[1] = {{ wxLua_wxSingleChoiceDialog_GetStringSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSingleChoiceDialog_GetStringSelection }};
//     wxString GetStringSelection() const
static int LUACALL wxLua_wxSingleChoiceDialog_GetStringSelection(lua_State *L)
{
    // get this
    wxSingleChoiceDialog * self = (wxSingleChoiceDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSingleChoiceDialog);
    // call GetStringSelection
    wxString returns = (self->GetStringSelection());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSingleChoiceDialog_SetSelection[] = { &wxluatype_wxSingleChoiceDialog, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSingleChoiceDialog_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSingleChoiceDialog_SetSelection[1] = {{ wxLua_wxSingleChoiceDialog_SetSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSingleChoiceDialog_SetSelection }};
//     void SetSelection(int selection) const
static int LUACALL wxLua_wxSingleChoiceDialog_SetSelection(lua_State *L)
{
    // int selection
    int selection = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSingleChoiceDialog * self = (wxSingleChoiceDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSingleChoiceDialog);
    // call SetSelection
    self->SetSelection(selection);

    return 0;
}


#if ((wxUSE_CHOICEDLG && wxLUA_USE_wxSingleChoiceDialog) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSingleChoiceDialog_constructor[] = { &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxArrayString, &wxluatype_TNUMBER, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxSingleChoiceDialog_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSingleChoiceDialog_constructor[1] = {{ wxLua_wxSingleChoiceDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 4, 6, s_wxluatypeArray_wxLua_wxSingleChoiceDialog_constructor }};
// %override wxLua_wxSingleChoiceDialog_constructor
//     wxSingleChoiceDialog(wxWindow* parent, const wxString& message, const wxString& caption, const wxArrayString& choices, long style = wxCHOICEDLG_STYLE, const wxPoint& pos = wxDefaultPosition)
static int LUACALL wxLua_wxSingleChoiceDialog_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 6 ? (const wxPoint *)wxluaT_getuserdatatype(L, 6, wxluatype_wxPoint) : &wxDefaultPosition);
    // long style = wxCHOICEDLG_STYLE
    long style = (argCount >= 5 ? (long)wxlua_getintegertype(L, 5) : wxCHOICEDLG_STYLE);
    // const wxArrayString choices
    wxLuaSmartwxArrayString choices = wxlua_getwxArrayString(L, 4);
    // const wxString caption
    const wxString caption = wxlua_getwxStringtype(L, 3);
    // const wxString message
    const wxString message = wxlua_getwxStringtype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxSingleChoiceDialog *returns = new wxSingleChoiceDialog(parent, message, caption, choices, NULL, style, *pos);
    // add to tracked window list
    if (returns && returns->IsKindOf(CLASSINFO(wxWindow)))
        wxluaW_addtrackedwindow(L, (wxWindow*)returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSingleChoiceDialog);

    return 1;
}


#endif // ((wxUSE_CHOICEDLG && wxLUA_USE_wxSingleChoiceDialog) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSingleChoiceDialog_methods[] = {
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSingleChoiceDialog_GetSelection, 1, NULL },
    { "GetStringSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSingleChoiceDialog_GetStringSelection, 1, NULL },
    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSingleChoiceDialog_SetSelection, 1, NULL },

#if ((wxUSE_CHOICEDLG && wxLUA_USE_wxSingleChoiceDialog) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)
    { "wxSingleChoiceDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSingleChoiceDialog_constructor, 1, NULL },
#endif // ((wxUSE_CHOICEDLG && wxLUA_USE_wxSingleChoiceDialog) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)

    { 0, 0, 0, 0 },
};

int wxSingleChoiceDialog_methodCount = sizeof(wxSingleChoiceDialog_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_CHOICEDLG && wxLUA_USE_wxSingleChoiceDialog


#if wxUSE_TEXTDLG && wxLUA_USE_wxTextEntryDialog
// ---------------------------------------------------------------------------
// Bind class wxTextEntryDialog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextEntryDialog'
int wxluatype_wxTextEntryDialog = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryDialog_GetValue[] = { &wxluatype_wxTextEntryDialog, NULL };
static int LUACALL wxLua_wxTextEntryDialog_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryDialog_GetValue[1] = {{ wxLua_wxTextEntryDialog_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextEntryDialog_GetValue }};
//     wxString GetValue() const
static int LUACALL wxLua_wxTextEntryDialog_GetValue(lua_State *L)
{
    // get this
    wxTextEntryDialog * self = (wxTextEntryDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryDialog);
    // call GetValue
    wxString returns = (self->GetValue());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryDialog_SetValue[] = { &wxluatype_wxTextEntryDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextEntryDialog_SetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryDialog_SetValue[1] = {{ wxLua_wxTextEntryDialog_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextEntryDialog_SetValue }};
//     void SetValue(const wxString& value)
static int LUACALL wxLua_wxTextEntryDialog_SetValue(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextEntryDialog * self = (wxTextEntryDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextEntryDialog);
    // call SetValue
    self->SetValue(value);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxUSE_TEXTDLG && wxLUA_USE_wxTextEntryDialog)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextEntryDialog_constructor[] = { &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxTextEntryDialog_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextEntryDialog_constructor[1] = {{ wxLua_wxTextEntryDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxTextEntryDialog_constructor }};
//     wxTextEntryDialog(wxWindow* parent, const wxString& message, const wxString& caption = "Please enter text", const wxString& defaultValue = "", long style = wxOK | wxCANCEL | wxCENTRE, const wxPoint& pos = wxDefaultPosition)
static int LUACALL wxLua_wxTextEntryDialog_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 6 ? (const wxPoint *)wxluaT_getuserdatatype(L, 6, wxluatype_wxPoint) : &wxDefaultPosition);
    // long style = wxOK | wxCANCEL | wxCENTRE
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxOK | wxCANCEL | wxCENTRE);
    // const wxString defaultValue = ""
    const wxString defaultValue = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // const wxString caption = "Please enter text"
    const wxString caption = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxT("Please enter text")));
    // const wxString message
    const wxString message = wxlua_getwxStringtype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxTextEntryDialog* returns = new wxTextEntryDialog(parent, message, caption, defaultValue, style, *pos);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextEntryDialog);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxUSE_TEXTDLG && wxLUA_USE_wxTextEntryDialog)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextEntryDialog_methods[] = {
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryDialog_GetValue, 1, NULL },
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextEntryDialog_SetValue, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxUSE_TEXTDLG && wxLUA_USE_wxTextEntryDialog)
    { "wxTextEntryDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTextEntryDialog_constructor, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxUSE_TEXTDLG && wxLUA_USE_wxTextEntryDialog)

    { 0, 0, 0, 0 },
};

int wxTextEntryDialog_methodCount = sizeof(wxTextEntryDialog_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_TEXTDLG && wxLUA_USE_wxTextEntryDialog


#if wxUSE_TEXTDLG && wxLUA_USE_wxTextEntryDialog
// ---------------------------------------------------------------------------
// Bind class wxPasswordEntryDialog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPasswordEntryDialog'
int wxluatype_wxPasswordEntryDialog = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxUSE_TEXTDLG && wxLUA_USE_wxTextEntryDialog)
static wxLuaArgType s_wxluatypeArray_wxLua_wxPasswordEntryDialog_constructor[] = { &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxPasswordEntryDialog_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPasswordEntryDialog_constructor[1] = {{ wxLua_wxPasswordEntryDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxPasswordEntryDialog_constructor }};
//     wxPasswordEntryDialog(wxWindow *parent, const wxString& message, const wxString& caption = wxGetPasswordFromUserPromptStr, const wxString& value = "", long style = wxTextEntryDialogStyle, const wxPoint& pos = wxDefaultPosition)
static int LUACALL wxLua_wxPasswordEntryDialog_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 6 ? (const wxPoint *)wxluaT_getuserdatatype(L, 6, wxluatype_wxPoint) : &wxDefaultPosition);
    // long style = wxTextEntryDialogStyle
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxTextEntryDialogStyle);
    // const wxString value = ""
    const wxString value = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // const wxString caption = wxGetPasswordFromUserPromptStr
    const wxString caption = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxGetPasswordFromUserPromptStr));
    // const wxString message
    const wxString message = wxlua_getwxStringtype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxPasswordEntryDialog* returns = new wxPasswordEntryDialog(parent, message, caption, value, style, *pos);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPasswordEntryDialog);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxUSE_TEXTDLG && wxLUA_USE_wxTextEntryDialog)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPasswordEntryDialog_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxUSE_TEXTDLG && wxLUA_USE_wxTextEntryDialog)
    { "wxPasswordEntryDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxPasswordEntryDialog_constructor, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxUSE_TEXTDLG && wxLUA_USE_wxTextEntryDialog)

    { 0, 0, 0, 0 },
};

int wxPasswordEntryDialog_methodCount = sizeof(wxPasswordEntryDialog_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_TEXTDLG && wxLUA_USE_wxTextEntryDialog


#if wxUSE_FONTDLG && wxLUA_USE_wxFontDialog
// ---------------------------------------------------------------------------
// Bind class wxFontDialog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFontDialog'
int wxluatype_wxFontDialog = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontDialog_GetFontData[] = { &wxluatype_wxFontDialog, NULL };
static int LUACALL wxLua_wxFontDialog_GetFontData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontDialog_GetFontData[1] = {{ wxLua_wxFontDialog_GetFontData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFontDialog_GetFontData }};
//     wxFontData& GetFontData()
static int LUACALL wxLua_wxFontDialog_GetFontData(lua_State *L)
{
    // get this
    wxFontDialog * self = (wxFontDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontDialog);
    // call GetFontData
    wxFontData* returns = &self->GetFontData();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFontData);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontDialog_constructor[] = { &wxluatype_wxWindow, &wxluatype_wxFontData, NULL };
static int LUACALL wxLua_wxFontDialog_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontDialog_constructor[1] = {{ wxLua_wxFontDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxFontDialog_constructor }};
//     wxFontDialog(wxWindow* parent, const wxFontData& data)
static int LUACALL wxLua_wxFontDialog_constructor(lua_State *L)
{
    // const wxFontData data
    const wxFontData * data = (const wxFontData *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFontData);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxFontDialog* returns = new wxFontDialog(parent, *data);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFontDialog);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFontDialog_methods[] = {
    { "GetFontData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontDialog_GetFontData, 1, NULL },
    { "wxFontDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFontDialog_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxFontDialog_methodCount = sizeof(wxFontDialog_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_FONTDLG && wxLUA_USE_wxFontDialog


#if wxUSE_FONTDLG && wxLUA_USE_wxFontDialog
// ---------------------------------------------------------------------------
// Bind class wxFontData
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFontData'
int wxluatype_wxFontData = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontData_EnableEffects[] = { &wxluatype_wxFontData, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxFontData_EnableEffects(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_EnableEffects[1] = {{ wxLua_wxFontData_EnableEffects, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFontData_EnableEffects }};
//     void EnableEffects(bool enable)
static int LUACALL wxLua_wxFontData_EnableEffects(lua_State *L)
{
    // bool enable
    bool enable = wxlua_getbooleantype(L, 2);
    // get this
    wxFontData * self = (wxFontData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontData);
    // call EnableEffects
    self->EnableEffects(enable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontData_GetAllowSymbols[] = { &wxluatype_wxFontData, NULL };
static int LUACALL wxLua_wxFontData_GetAllowSymbols(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_GetAllowSymbols[1] = {{ wxLua_wxFontData_GetAllowSymbols, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFontData_GetAllowSymbols }};
//     bool GetAllowSymbols()
static int LUACALL wxLua_wxFontData_GetAllowSymbols(lua_State *L)
{
    // get this
    wxFontData * self = (wxFontData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontData);
    // call GetAllowSymbols
    bool returns = (self->GetAllowSymbols());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxFont) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontData_GetChosenFont[] = { &wxluatype_wxFontData, NULL };
static int LUACALL wxLua_wxFontData_GetChosenFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_GetChosenFont[1] = {{ wxLua_wxFontData_GetChosenFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFontData_GetChosenFont }};
//     wxFont GetChosenFont()
static int LUACALL wxLua_wxFontData_GetChosenFont(lua_State *L)
{
    // get this
    wxFontData * self = (wxFontData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontData);
    // call GetChosenFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetChosenFont());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxFont*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)

#if (wxLUA_USE_wxColourPenBrush) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontData_GetColour[] = { &wxluatype_wxFontData, NULL };
static int LUACALL wxLua_wxFontData_GetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_GetColour[1] = {{ wxLua_wxFontData_GetColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFontData_GetColour }};
//     wxColour GetColour()
static int LUACALL wxLua_wxFontData_GetColour(lua_State *L)
{
    // get this
    wxFontData * self = (wxFontData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontData);
    // call GetColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontData_GetEnableEffects[] = { &wxluatype_wxFontData, NULL };
static int LUACALL wxLua_wxFontData_GetEnableEffects(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_GetEnableEffects[1] = {{ wxLua_wxFontData_GetEnableEffects, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFontData_GetEnableEffects }};
//     bool GetEnableEffects()
static int LUACALL wxLua_wxFontData_GetEnableEffects(lua_State *L)
{
    // get this
    wxFontData * self = (wxFontData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontData);
    // call GetEnableEffects
    bool returns = (self->GetEnableEffects());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxFont) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontData_GetInitialFont[] = { &wxluatype_wxFontData, NULL };
static int LUACALL wxLua_wxFontData_GetInitialFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_GetInitialFont[1] = {{ wxLua_wxFontData_GetInitialFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFontData_GetInitialFont }};
//     wxFont GetInitialFont()
static int LUACALL wxLua_wxFontData_GetInitialFont(lua_State *L)
{
    // get this
    wxFontData * self = (wxFontData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontData);
    // call GetInitialFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetInitialFont());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxFont*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontData_GetShowHelp[] = { &wxluatype_wxFontData, NULL };
static int LUACALL wxLua_wxFontData_GetShowHelp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_GetShowHelp[1] = {{ wxLua_wxFontData_GetShowHelp, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFontData_GetShowHelp }};
//     bool GetShowHelp()
static int LUACALL wxLua_wxFontData_GetShowHelp(lua_State *L)
{
    // get this
    wxFontData * self = (wxFontData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontData);
    // call GetShowHelp
    bool returns = (self->GetShowHelp());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontData_SetAllowSymbols[] = { &wxluatype_wxFontData, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxFontData_SetAllowSymbols(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_SetAllowSymbols[1] = {{ wxLua_wxFontData_SetAllowSymbols, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFontData_SetAllowSymbols }};
//     void SetAllowSymbols(bool allowSymbols)
static int LUACALL wxLua_wxFontData_SetAllowSymbols(lua_State *L)
{
    // bool allowSymbols
    bool allowSymbols = wxlua_getbooleantype(L, 2);
    // get this
    wxFontData * self = (wxFontData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontData);
    // call SetAllowSymbols
    self->SetAllowSymbols(allowSymbols);

    return 0;
}


#if (wxLUA_USE_wxFont) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontData_SetChosenFont[] = { &wxluatype_wxFontData, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFontData_SetChosenFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_SetChosenFont[1] = {{ wxLua_wxFontData_SetChosenFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFontData_SetChosenFont }};
//     void SetChosenFont(const wxFont &font)
static int LUACALL wxLua_wxFontData_SetChosenFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxFontData * self = (wxFontData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontData);
    // call SetChosenFont
    self->SetChosenFont(*font);

    return 0;
}

#endif // (wxLUA_USE_wxFont) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)

#if (wxLUA_USE_wxColourPenBrush) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontData_SetColour[] = { &wxluatype_wxFontData, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxFontData_SetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_SetColour[1] = {{ wxLua_wxFontData_SetColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFontData_SetColour }};
//     void SetColour(const wxColour &colour)
static int LUACALL wxLua_wxFontData_SetColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxFontData * self = (wxFontData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontData);
    // call SetColour
    self->SetColour(*colour);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)

#if (wxLUA_USE_wxFont) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontData_SetInitialFont[] = { &wxluatype_wxFontData, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFontData_SetInitialFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_SetInitialFont[1] = {{ wxLua_wxFontData_SetInitialFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFontData_SetInitialFont }};
//     void SetInitialFont(const wxFont &font)
static int LUACALL wxLua_wxFontData_SetInitialFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxFontData * self = (wxFontData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontData);
    // call SetInitialFont
    self->SetInitialFont(*font);

    return 0;
}

#endif // (wxLUA_USE_wxFont) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontData_SetRange[] = { &wxluatype_wxFontData, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFontData_SetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_SetRange[1] = {{ wxLua_wxFontData_SetRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxFontData_SetRange }};
//     void SetRange(int minimum, int maximum)
static int LUACALL wxLua_wxFontData_SetRange(lua_State *L)
{
    // int maximum
    int maximum = (int)wxlua_getnumbertype(L, 3);
    // int minimum
    int minimum = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxFontData * self = (wxFontData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontData);
    // call SetRange
    self->SetRange(minimum, maximum);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontData_SetShowHelp[] = { &wxluatype_wxFontData, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxFontData_SetShowHelp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_SetShowHelp[1] = {{ wxLua_wxFontData_SetShowHelp, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFontData_SetShowHelp }};
//     void SetShowHelp(bool showHelp)
static int LUACALL wxLua_wxFontData_SetShowHelp(lua_State *L)
{
    // bool showHelp
    bool showHelp = wxlua_getbooleantype(L, 2);
    // get this
    wxFontData * self = (wxFontData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontData);
    // call SetShowHelp
    self->SetShowHelp(showHelp);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontData_delete[] = { &wxluatype_wxFontData, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFontData_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontData_constructor1[] = { &wxluatype_wxFontData, NULL };
static int LUACALL wxLua_wxFontData_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_constructor1[1] = {{ wxLua_wxFontData_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFontData_constructor1 }};
//     wxFontData(const wxFontData& data)
static int LUACALL wxLua_wxFontData_constructor1(lua_State *L)
{
    // const wxFontData data
    const wxFontData * data = (const wxFontData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontData);
    // call constructor
    wxFontData* returns = new wxFontData(*data);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFontData);

    return 1;
}

static int LUACALL wxLua_wxFontData_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_constructor[1] = {{ wxLua_wxFontData_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxFontData()
static int LUACALL wxLua_wxFontData_constructor(lua_State *L)
{
    // call constructor
    wxFontData* returns = new wxFontData();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFontData);

    return 1;
}




#if (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontData_constructor_overload[] =
{
    { wxLua_wxFontData_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFontData_constructor1 },
    { wxLua_wxFontData_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxFontData_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxFontData_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFontData_methods[] = {
    { "EnableEffects", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontData_EnableEffects, 1, NULL },
    { "GetAllowSymbols", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontData_GetAllowSymbols, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)
    { "GetChosenFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontData_GetChosenFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)

#if (wxLUA_USE_wxColourPenBrush) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)
    { "GetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontData_GetColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)

    { "GetEnableEffects", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontData_GetEnableEffects, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)
    { "GetInitialFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontData_GetInitialFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)

    { "GetShowHelp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontData_GetShowHelp, 1, NULL },
    { "SetAllowSymbols", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontData_SetAllowSymbols, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)
    { "SetChosenFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontData_SetChosenFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)

#if (wxLUA_USE_wxColourPenBrush) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)
    { "SetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontData_SetColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)

#if (wxLUA_USE_wxFont) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)
    { "SetInitialFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontData_SetInitialFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)

    { "SetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontData_SetRange, 1, NULL },
    { "SetShowHelp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontData_SetShowHelp, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFontData_delete, 1, NULL },

#if (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)
    { "wxFontData", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFontData_constructor_overload, s_wxluafunc_wxLua_wxFontData_constructor_overload_count, 0 },
#endif // (wxUSE_FONTDLG && wxLUA_USE_wxFontDialog)

    { 0, 0, 0, 0 },
};

int wxFontData_methodCount = sizeof(wxFontData_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_FONTDLG && wxLUA_USE_wxFontDialog


#if wxUSE_FINDREPLDLG && wxLUA_USE_wxFindReplaceDialog
// ---------------------------------------------------------------------------
// Bind class wxFindReplaceDialog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFindReplaceDialog'
int wxluatype_wxFindReplaceDialog = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindReplaceDialog_Create[] = { &wxluatype_wxFindReplaceDialog, &wxluatype_wxWindow, &wxluatype_wxFindReplaceData, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFindReplaceDialog_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindReplaceDialog_Create[1] = {{ wxLua_wxFindReplaceDialog_Create, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxFindReplaceDialog_Create }};
//     bool Create(wxWindow *parent, wxFindReplaceData *findData, const wxString &title, int style = 0)
static int LUACALL wxLua_wxFindReplaceDialog_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int style = 0
    int style = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 4);
    // wxFindReplaceData findData
    wxFindReplaceData * findData = (wxFindReplaceData *)wxluaT_getuserdatatype(L, 3, wxluatype_wxFindReplaceData);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxFindReplaceDialog * self = (wxFindReplaceDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFindReplaceDialog);
    // call Create
    bool returns = (self->Create(parent, findData, title, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindReplaceDialog_GetData[] = { &wxluatype_wxFindReplaceDialog, NULL };
static int LUACALL wxLua_wxFindReplaceDialog_GetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindReplaceDialog_GetData[1] = {{ wxLua_wxFindReplaceDialog_GetData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFindReplaceDialog_GetData }};
//     const wxFindReplaceData *GetData()
static int LUACALL wxLua_wxFindReplaceDialog_GetData(lua_State *L)
{
    // get this
    wxFindReplaceDialog * self = (wxFindReplaceDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFindReplaceDialog);
    // call GetData
    const wxFindReplaceData* returns = (const wxFindReplaceData*)self->GetData();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFindReplaceData);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindReplaceDialog_SetData[] = { &wxluatype_wxFindReplaceDialog, &wxluatype_wxFindReplaceData, NULL };
static int LUACALL wxLua_wxFindReplaceDialog_SetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindReplaceDialog_SetData[1] = {{ wxLua_wxFindReplaceDialog_SetData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFindReplaceDialog_SetData }};
//     void    SetData(wxFindReplaceData *findData)
static int LUACALL wxLua_wxFindReplaceDialog_SetData(lua_State *L)
{
    // wxFindReplaceData findData
    wxFindReplaceData * findData = (wxFindReplaceData *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFindReplaceData);
    // get this
    wxFindReplaceDialog * self = (wxFindReplaceDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFindReplaceDialog);
    // call SetData
    self->SetData(findData);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindReplaceDialog_constructor1[] = { &wxluatype_wxWindow, &wxluatype_wxFindReplaceData, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFindReplaceDialog_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindReplaceDialog_constructor1[1] = {{ wxLua_wxFindReplaceDialog_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 4, s_wxluatypeArray_wxLua_wxFindReplaceDialog_constructor1 }};
//     wxFindReplaceDialog(wxWindow *parent, wxFindReplaceData *findData, const wxString &title, int style = 0)
static int LUACALL wxLua_wxFindReplaceDialog_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int style = 0
    int style = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 3);
    // wxFindReplaceData findData
    wxFindReplaceData * findData = (wxFindReplaceData *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFindReplaceData);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxFindReplaceDialog* returns = new wxFindReplaceDialog(parent, findData, title, style);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFindReplaceDialog);

    return 1;
}

static int LUACALL wxLua_wxFindReplaceDialog_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindReplaceDialog_constructor[1] = {{ wxLua_wxFindReplaceDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxFindReplaceDialog()
static int LUACALL wxLua_wxFindReplaceDialog_constructor(lua_State *L)
{
    // call constructor
    wxFindReplaceDialog* returns = new wxFindReplaceDialog();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFindReplaceDialog);

    return 1;
}




#if (wxUSE_FINDREPLDLG && wxLUA_USE_wxFindReplaceDialog)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindReplaceDialog_constructor_overload[] =
{
    { wxLua_wxFindReplaceDialog_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 4, s_wxluatypeArray_wxLua_wxFindReplaceDialog_constructor1 },
    { wxLua_wxFindReplaceDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxFindReplaceDialog_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxFindReplaceDialog_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxUSE_FINDREPLDLG && wxLUA_USE_wxFindReplaceDialog)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFindReplaceDialog_methods[] = {
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFindReplaceDialog_Create, 1, NULL },
    { "GetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFindReplaceDialog_GetData, 1, NULL },
    { "SetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFindReplaceDialog_SetData, 1, NULL },

#if (wxUSE_FINDREPLDLG && wxLUA_USE_wxFindReplaceDialog)
    { "wxFindReplaceDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFindReplaceDialog_constructor_overload, s_wxluafunc_wxLua_wxFindReplaceDialog_constructor_overload_count, 0 },
#endif // (wxUSE_FINDREPLDLG && wxLUA_USE_wxFindReplaceDialog)

    { 0, 0, 0, 0 },
};

int wxFindReplaceDialog_methodCount = sizeof(wxFindReplaceDialog_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_FINDREPLDLG && wxLUA_USE_wxFindReplaceDialog


#if wxUSE_FINDREPLDLG && wxLUA_USE_wxFindReplaceDialog
// ---------------------------------------------------------------------------
// Bind class wxFindReplaceData
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFindReplaceData'
int wxluatype_wxFindReplaceData = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindReplaceData_GetFindString[] = { &wxluatype_wxFindReplaceData, NULL };
static int LUACALL wxLua_wxFindReplaceData_GetFindString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindReplaceData_GetFindString[1] = {{ wxLua_wxFindReplaceData_GetFindString, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFindReplaceData_GetFindString }};
//     wxString GetFindString()
static int LUACALL wxLua_wxFindReplaceData_GetFindString(lua_State *L)
{
    // get this
    wxFindReplaceData * self = (wxFindReplaceData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFindReplaceData);
    // call GetFindString
    wxString returns = (self->GetFindString());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindReplaceData_GetFlags[] = { &wxluatype_wxFindReplaceData, NULL };
static int LUACALL wxLua_wxFindReplaceData_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindReplaceData_GetFlags[1] = {{ wxLua_wxFindReplaceData_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFindReplaceData_GetFlags }};
//     int     GetFlags()
static int LUACALL wxLua_wxFindReplaceData_GetFlags(lua_State *L)
{
    // get this
    wxFindReplaceData * self = (wxFindReplaceData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFindReplaceData);
    // call GetFlags
    int returns = (self->GetFlags());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindReplaceData_GetReplaceString[] = { &wxluatype_wxFindReplaceData, NULL };
static int LUACALL wxLua_wxFindReplaceData_GetReplaceString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindReplaceData_GetReplaceString[1] = {{ wxLua_wxFindReplaceData_GetReplaceString, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFindReplaceData_GetReplaceString }};
//     wxString GetReplaceString()
static int LUACALL wxLua_wxFindReplaceData_GetReplaceString(lua_State *L)
{
    // get this
    wxFindReplaceData * self = (wxFindReplaceData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFindReplaceData);
    // call GetReplaceString
    wxString returns = (self->GetReplaceString());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindReplaceData_SetFindString[] = { &wxluatype_wxFindReplaceData, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFindReplaceData_SetFindString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindReplaceData_SetFindString[1] = {{ wxLua_wxFindReplaceData_SetFindString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFindReplaceData_SetFindString }};
//     void    SetFindString(const wxString& string)
static int LUACALL wxLua_wxFindReplaceData_SetFindString(lua_State *L)
{
    // const wxString string
    const wxString string = wxlua_getwxStringtype(L, 2);
    // get this
    wxFindReplaceData * self = (wxFindReplaceData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFindReplaceData);
    // call SetFindString
    self->SetFindString(string);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindReplaceData_SetFlags[] = { &wxluatype_wxFindReplaceData, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFindReplaceData_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindReplaceData_SetFlags[1] = {{ wxLua_wxFindReplaceData_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFindReplaceData_SetFlags }};
//     void    SetFlags(int flags)
static int LUACALL wxLua_wxFindReplaceData_SetFlags(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxFindReplaceData * self = (wxFindReplaceData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFindReplaceData);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindReplaceData_SetReplaceString[] = { &wxluatype_wxFindReplaceData, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFindReplaceData_SetReplaceString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindReplaceData_SetReplaceString[1] = {{ wxLua_wxFindReplaceData_SetReplaceString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFindReplaceData_SetReplaceString }};
//     void    SetReplaceString(const wxString& string)
static int LUACALL wxLua_wxFindReplaceData_SetReplaceString(lua_State *L)
{
    // const wxString string
    const wxString string = wxlua_getwxStringtype(L, 2);
    // get this
    wxFindReplaceData * self = (wxFindReplaceData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFindReplaceData);
    // call SetReplaceString
    self->SetReplaceString(string);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindReplaceData_delete[] = { &wxluatype_wxFindReplaceData, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindReplaceData_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFindReplaceData_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindReplaceData_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFindReplaceData_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindReplaceData_constructor[1] = {{ wxLua_wxFindReplaceData_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxFindReplaceData_constructor }};
//     wxFindReplaceData(int flags = 0)
static int LUACALL wxLua_wxFindReplaceData_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxFindReplaceData* returns = new wxFindReplaceData(flags);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFindReplaceData);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFindReplaceData_methods[] = {
    { "GetFindString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFindReplaceData_GetFindString, 1, NULL },
    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFindReplaceData_GetFlags, 1, NULL },
    { "GetReplaceString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFindReplaceData_GetReplaceString, 1, NULL },
    { "SetFindString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFindReplaceData_SetFindString, 1, NULL },
    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFindReplaceData_SetFlags, 1, NULL },
    { "SetReplaceString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFindReplaceData_SetReplaceString, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFindReplaceData_delete, 1, NULL },
    { "wxFindReplaceData", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFindReplaceData_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxFindReplaceData_methodCount = sizeof(wxFindReplaceData_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_FINDREPLDLG && wxLUA_USE_wxFindReplaceDialog


#if wxUSE_FINDREPLDLG && wxLUA_USE_wxFindReplaceDialog
// ---------------------------------------------------------------------------
// Bind class wxFindDialogEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFindDialogEvent'
int wxluatype_wxFindDialogEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindDialogEvent_GetDialog[] = { &wxluatype_wxFindDialogEvent, NULL };
static int LUACALL wxLua_wxFindDialogEvent_GetDialog(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindDialogEvent_GetDialog[1] = {{ wxLua_wxFindDialogEvent_GetDialog, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFindDialogEvent_GetDialog }};
//     wxFindReplaceDialog *GetDialog()
static int LUACALL wxLua_wxFindDialogEvent_GetDialog(lua_State *L)
{
    // get this
    wxFindDialogEvent * self = (wxFindDialogEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFindDialogEvent);
    // call GetDialog
    wxFindReplaceDialog* returns = (wxFindReplaceDialog*)self->GetDialog();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFindReplaceDialog);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindDialogEvent_GetFindString[] = { &wxluatype_wxFindDialogEvent, NULL };
static int LUACALL wxLua_wxFindDialogEvent_GetFindString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindDialogEvent_GetFindString[1] = {{ wxLua_wxFindDialogEvent_GetFindString, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFindDialogEvent_GetFindString }};
//     wxString GetFindString()
static int LUACALL wxLua_wxFindDialogEvent_GetFindString(lua_State *L)
{
    // get this
    wxFindDialogEvent * self = (wxFindDialogEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFindDialogEvent);
    // call GetFindString
    wxString returns = (self->GetFindString());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindDialogEvent_GetFlags[] = { &wxluatype_wxFindDialogEvent, NULL };
static int LUACALL wxLua_wxFindDialogEvent_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindDialogEvent_GetFlags[1] = {{ wxLua_wxFindDialogEvent_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFindDialogEvent_GetFlags }};
//     int      GetFlags()
static int LUACALL wxLua_wxFindDialogEvent_GetFlags(lua_State *L)
{
    // get this
    wxFindDialogEvent * self = (wxFindDialogEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFindDialogEvent);
    // call GetFlags
    int returns = (self->GetFlags());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindDialogEvent_GetReplaceString[] = { &wxluatype_wxFindDialogEvent, NULL };
static int LUACALL wxLua_wxFindDialogEvent_GetReplaceString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindDialogEvent_GetReplaceString[1] = {{ wxLua_wxFindDialogEvent_GetReplaceString, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFindDialogEvent_GetReplaceString }};
//     wxString GetReplaceString()
static int LUACALL wxLua_wxFindDialogEvent_GetReplaceString(lua_State *L)
{
    // get this
    wxFindDialogEvent * self = (wxFindDialogEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFindDialogEvent);
    // call GetReplaceString
    wxString returns = (self->GetReplaceString());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindDialogEvent_SetFindString[] = { &wxluatype_wxFindDialogEvent, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFindDialogEvent_SetFindString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindDialogEvent_SetFindString[1] = {{ wxLua_wxFindDialogEvent_SetFindString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFindDialogEvent_SetFindString }};
//     void     SetFindString(const wxString& str)
static int LUACALL wxLua_wxFindDialogEvent_SetFindString(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 2);
    // get this
    wxFindDialogEvent * self = (wxFindDialogEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFindDialogEvent);
    // call SetFindString
    self->SetFindString(str);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindDialogEvent_SetFlags[] = { &wxluatype_wxFindDialogEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFindDialogEvent_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindDialogEvent_SetFlags[1] = {{ wxLua_wxFindDialogEvent_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFindDialogEvent_SetFlags }};
//     void     SetFlags(int flags)
static int LUACALL wxLua_wxFindDialogEvent_SetFlags(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxFindDialogEvent * self = (wxFindDialogEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFindDialogEvent);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindDialogEvent_SetReplaceString[] = { &wxluatype_wxFindDialogEvent, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFindDialogEvent_SetReplaceString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindDialogEvent_SetReplaceString[1] = {{ wxLua_wxFindDialogEvent_SetReplaceString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFindDialogEvent_SetReplaceString }};
//     void     SetReplaceString(const wxString& str)
static int LUACALL wxLua_wxFindDialogEvent_SetReplaceString(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 2);
    // get this
    wxFindDialogEvent * self = (wxFindDialogEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFindDialogEvent);
    // call SetReplaceString
    self->SetReplaceString(str);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindDialogEvent_delete[] = { &wxluatype_wxFindDialogEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindDialogEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFindDialogEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxFindDialogEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFindDialogEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFindDialogEvent_constructor[1] = {{ wxLua_wxFindDialogEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxFindDialogEvent_constructor }};
//     wxFindDialogEvent(wxEventType commandType = wxEVT_NULL, int id = 0)
static int LUACALL wxLua_wxFindDialogEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType commandType = wxEVT_NULL
    wxEventType commandType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxFindDialogEvent* returns = new wxFindDialogEvent(commandType, id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFindDialogEvent);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFindDialogEvent_methods[] = {
    { "GetDialog", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFindDialogEvent_GetDialog, 1, NULL },
    { "GetFindString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFindDialogEvent_GetFindString, 1, NULL },
    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFindDialogEvent_GetFlags, 1, NULL },
    { "GetReplaceString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFindDialogEvent_GetReplaceString, 1, NULL },
    { "SetFindString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFindDialogEvent_SetFindString, 1, NULL },
    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFindDialogEvent_SetFlags, 1, NULL },
    { "SetReplaceString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFindDialogEvent_SetReplaceString, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFindDialogEvent_delete, 1, NULL },
    { "wxFindDialogEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFindDialogEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxFindDialogEvent_methodCount = sizeof(wxFindDialogEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_FINDREPLDLG && wxLUA_USE_wxFindReplaceDialog


#if wxUSE_PROGRESSDLG && wxLUA_USE_wxProgressDialog
// ---------------------------------------------------------------------------
// Bind class wxProgressDialog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxProgressDialog'
int wxluatype_wxProgressDialog = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxProgressDialog_Resume[] = { &wxluatype_wxProgressDialog, NULL };
static int LUACALL wxLua_wxProgressDialog_Resume(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxProgressDialog_Resume[1] = {{ wxLua_wxProgressDialog_Resume, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxProgressDialog_Resume }};
//     void    Resume()
static int LUACALL wxLua_wxProgressDialog_Resume(lua_State *L)
{
    // get this
    wxProgressDialog * self = (wxProgressDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxProgressDialog);
    // call Resume
    self->Resume();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxProgressDialog_Update[] = { &wxluatype_wxProgressDialog, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxProgressDialog_Update(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxProgressDialog_Update[1] = {{ wxLua_wxProgressDialog_Update, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxProgressDialog_Update }};
// %override wxLua_wxProgressDialog_Update
//     bool    Update(int value = -1, const wxString &newmsg = "")
static int LUACALL wxLua_wxProgressDialog_Update(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString newmsg = ""
    const wxString newmsg = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // int value = -1
    int value = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : -1);
    // get this
    wxProgressDialog * self = (wxProgressDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxProgressDialog);
    // call Update
    bool skip = false;
    bool returns = self->Update(value, newmsg, &skip);
    // push the result flag
    lua_pushboolean(L, returns);
    lua_pushboolean(L, skip);

    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxProgressDialog_constructor[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxProgressDialog_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxProgressDialog_constructor[1] = {{ wxLua_wxProgressDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 5, s_wxluatypeArray_wxLua_wxProgressDialog_constructor }};
//     wxProgressDialog(const wxString& title, const wxString& message, int maximum = 100, wxWindow* parent = NULL, int style = wxPD_AUTO_HIDE | wxPD_APP_MODAL)
static int LUACALL wxLua_wxProgressDialog_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int style = wxPD_AUTO_HIDE | wxPD_APP_MODAL
    int style = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxPD_AUTO_HIDE | wxPD_APP_MODAL);
    // wxWindow parent = NULL
    wxWindow * parent = (argCount >= 4 ? (wxWindow *)wxluaT_getuserdatatype(L, 4, wxluatype_wxWindow) : NULL);
    // int maximum = 100
    int maximum = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 100);
    // const wxString message
    const wxString message = wxlua_getwxStringtype(L, 2);
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxProgressDialog* returns = new wxProgressDialog(title, message, maximum, parent, style);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxProgressDialog);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxProgressDialog_methods[] = {
    { "Resume", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxProgressDialog_Resume, 1, NULL },
    { "Update", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxProgressDialog_Update, 1, NULL },
    { "wxProgressDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxProgressDialog_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxProgressDialog_methodCount = sizeof(wxProgressDialog_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_PROGRESSDLG && wxLUA_USE_wxProgressDialog

