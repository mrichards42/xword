// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxbase_config.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxbase_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif



#if wxLUA_USE_wxConfig && wxUSE_CONFIG
// ---------------------------------------------------------------------------
// Bind class wxConfigBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxConfigBase'
int wxluatype_wxConfigBase = WXLUA_TUNKNOWN;

static int LUACALL wxLua_wxConfigBase_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_Create[1] = {{ wxLua_wxConfigBase_Create, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxConfigBase* Create()
static int LUACALL wxLua_wxConfigBase_Create(lua_State *L)
{
    // call Create
    wxConfigBase* returns = (wxConfigBase*)wxConfigBase::Create();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxConfigBase);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_DeleteAll[] = { &wxluatype_wxConfigBase, NULL };
static int LUACALL wxLua_wxConfigBase_DeleteAll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_DeleteAll[1] = {{ wxLua_wxConfigBase_DeleteAll, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxConfigBase_DeleteAll }};
//     bool DeleteAll()
static int LUACALL wxLua_wxConfigBase_DeleteAll(lua_State *L)
{
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call DeleteAll
    bool returns = (self->DeleteAll());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_DeleteEntry[] = { &wxluatype_wxConfigBase, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxConfigBase_DeleteEntry(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_DeleteEntry[1] = {{ wxLua_wxConfigBase_DeleteEntry, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxConfigBase_DeleteEntry }};
//     bool DeleteEntry(const wxString& key, bool bDeleteGroupIfEmpty = true)
static int LUACALL wxLua_wxConfigBase_DeleteEntry(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool bDeleteGroupIfEmpty = true
    bool bDeleteGroupIfEmpty = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxString key
    const wxString key = wxlua_getwxStringtype(L, 2);
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call DeleteEntry
    bool returns = (self->DeleteEntry(key, bDeleteGroupIfEmpty));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_DeleteGroup[] = { &wxluatype_wxConfigBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxConfigBase_DeleteGroup(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_DeleteGroup[1] = {{ wxLua_wxConfigBase_DeleteGroup, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxConfigBase_DeleteGroup }};
//     bool DeleteGroup(const wxString& key)
static int LUACALL wxLua_wxConfigBase_DeleteGroup(lua_State *L)
{
    // const wxString key
    const wxString key = wxlua_getwxStringtype(L, 2);
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call DeleteGroup
    bool returns = (self->DeleteGroup(key));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static int LUACALL wxLua_wxConfigBase_DontCreateOnDemand(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_DontCreateOnDemand[1] = {{ wxLua_wxConfigBase_DontCreateOnDemand, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void DontCreateOnDemand()
static int LUACALL wxLua_wxConfigBase_DontCreateOnDemand(lua_State *L)
{
    // call DontCreateOnDemand
    wxConfigBase::DontCreateOnDemand();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_Exists[] = { &wxluatype_wxConfigBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxConfigBase_Exists(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_Exists[1] = {{ wxLua_wxConfigBase_Exists, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxConfigBase_Exists }};
//     bool Exists(wxString& strName) const
static int LUACALL wxLua_wxConfigBase_Exists(lua_State *L)
{
    // wxString strName
    wxString strName = wxlua_getwxStringtype(L, 2);
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call Exists
    bool returns = (self->Exists(strName));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_Flush[] = { &wxluatype_wxConfigBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxConfigBase_Flush(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_Flush[1] = {{ wxLua_wxConfigBase_Flush, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxConfigBase_Flush }};
//     bool Flush(bool bCurrentOnly = false)
static int LUACALL wxLua_wxConfigBase_Flush(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool bCurrentOnly = false
    bool bCurrentOnly = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call Flush
    bool returns = (self->Flush(bCurrentOnly));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_Get[] = { &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxConfigBase_Get(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_Get[1] = {{ wxLua_wxConfigBase_Get, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxConfigBase_Get }};
//     static wxConfigBase* Get(bool CreateOnDemand = true)
static int LUACALL wxLua_wxConfigBase_Get(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool CreateOnDemand = true
    bool CreateOnDemand = (argCount >= 1 ? wxlua_getbooleantype(L, 1) : true);
    // call Get
    wxConfigBase* returns = (wxConfigBase*)wxConfigBase::Get(CreateOnDemand);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxConfigBase);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_GetAppName[] = { &wxluatype_wxConfigBase, NULL };
static int LUACALL wxLua_wxConfigBase_GetAppName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_GetAppName[1] = {{ wxLua_wxConfigBase_GetAppName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxConfigBase_GetAppName }};
//     wxString GetAppName() const
static int LUACALL wxLua_wxConfigBase_GetAppName(lua_State *L)
{
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call GetAppName
    wxString returns = (self->GetAppName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_GetEntryType[] = { &wxluatype_wxConfigBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxConfigBase_GetEntryType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_GetEntryType[1] = {{ wxLua_wxConfigBase_GetEntryType, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxConfigBase_GetEntryType }};
//     wxConfigBase::EntryType GetEntryType(const wxString& name) const
static int LUACALL wxLua_wxConfigBase_GetEntryType(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call GetEntryType
    wxConfigBase::EntryType returns = (self->GetEntryType(name));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_GetFirstEntry[] = { &wxluatype_wxConfigBase, NULL };
static int LUACALL wxLua_wxConfigBase_GetFirstEntry(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_GetFirstEntry[1] = {{ wxLua_wxConfigBase_GetFirstEntry, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxConfigBase_GetFirstEntry }};
// %override wxLua_wxConfigBase_GetFirstEntry
// bool GetFirstEntry(wxString& str, long& index) const
static int LUACALL wxLua_wxConfigBase_GetFirstEntry(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // these are optional and are not used anyway
    long     index = (argCount >= 3 ? (long)wxlua_getintegertype(L, 3) : 0);
    wxString str   = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // get this
    wxConfig *self = (wxConfig *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call GetFirstEntry
    bool returns = self->GetFirstEntry(str, index);
    // push the result number
    lua_pushboolean(L, returns);
    // push the next string
    wxlua_pushwxString(L, str);
    // push the next index
    lua_pushnumber(L, index);
    // return the number of parameters
    return 3;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_GetFirstGroup[] = { &wxluatype_wxConfigBase, NULL };
static int LUACALL wxLua_wxConfigBase_GetFirstGroup(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_GetFirstGroup[1] = {{ wxLua_wxConfigBase_GetFirstGroup, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxConfigBase_GetFirstGroup }};
// %override wxLua_wxConfigBase_GetFirstGroup
// bool GetFirstGroup(wxString& str, long& index) const
static int LUACALL wxLua_wxConfigBase_GetFirstGroup(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // these are optional and are not used anyway
    long     index = (argCount >= 3 ? (long)wxlua_getintegertype(L, 3) : 0);
    wxString str   = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // get this
    wxConfig *self = (wxConfig *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call GetFirstGroup
    bool returns = self->GetFirstGroup(str, index);
    // push the result number
    lua_pushboolean(L, returns);
    // push the result string
    wxlua_pushwxString(L, str);
    // push the next index
    lua_pushnumber(L, index);
    // return the number of parameters
    return 3;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_GetNextEntry[] = { &wxluatype_wxConfigBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxConfigBase_GetNextEntry(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_GetNextEntry[1] = {{ wxLua_wxConfigBase_GetNextEntry, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxConfigBase_GetNextEntry }};
// %override wxLua_wxConfigBase_GetNextEntry
// bool GetNextEntry(wxString& str, long& index) const
static int LUACALL wxLua_wxConfigBase_GetNextEntry(lua_State *L)
{
    // only the number is needed
    long     index = (long)wxlua_getintegertype(L, 2);
    wxString str;
    // get this
    wxConfig *self = (wxConfig *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call GetNextEntry
    bool returns = self->GetNextEntry(str, index);
    // push the result number
    lua_pushboolean(L, returns);
    // push the result string
    wxlua_pushwxString(L, str);
    // push the next index
    lua_pushnumber(L, index);
    // return the number of parameters
    return 3;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_GetNextGroup[] = { &wxluatype_wxConfigBase, NULL };
static int LUACALL wxLua_wxConfigBase_GetNextGroup(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_GetNextGroup[1] = {{ wxLua_wxConfigBase_GetNextGroup, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxConfigBase_GetNextGroup }};
// %override wxLua_wxConfigBase_GetNextGroup
// bool GetNextGroup(wxString& str, long& index) const
static int LUACALL wxLua_wxConfigBase_GetNextGroup(lua_State *L)
{
    // only the number is needed
    long     index = (long)wxlua_getintegertype(L, 2);
    wxString str;
    // get this
    wxConfig *self = (wxConfig *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call GetNextGroup
    bool returns = self->GetNextGroup(str, index);
    // push the result number
    lua_pushboolean(L, returns);
    // push the next result string
    wxlua_pushwxString(L, str);
    // push the next index
    lua_pushnumber(L, index);
    // return the number of parameters
    return 3;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_GetNumberOfEntries[] = { &wxluatype_wxConfigBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxConfigBase_GetNumberOfEntries(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_GetNumberOfEntries[1] = {{ wxLua_wxConfigBase_GetNumberOfEntries, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxConfigBase_GetNumberOfEntries }};
//     unsigned int GetNumberOfEntries(bool bRecursive = false) const
static int LUACALL wxLua_wxConfigBase_GetNumberOfEntries(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool bRecursive = false
    bool bRecursive = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call GetNumberOfEntries
    unsigned int returns = (self->GetNumberOfEntries(bRecursive));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_GetNumberOfGroups[] = { &wxluatype_wxConfigBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxConfigBase_GetNumberOfGroups(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_GetNumberOfGroups[1] = {{ wxLua_wxConfigBase_GetNumberOfGroups, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxConfigBase_GetNumberOfGroups }};
//     unsigned int GetNumberOfGroups(bool bRecursive = false) const
static int LUACALL wxLua_wxConfigBase_GetNumberOfGroups(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool bRecursive = false
    bool bRecursive = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call GetNumberOfGroups
    unsigned int returns = (self->GetNumberOfGroups(bRecursive));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_GetPath[] = { &wxluatype_wxConfigBase, NULL };
static int LUACALL wxLua_wxConfigBase_GetPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_GetPath[1] = {{ wxLua_wxConfigBase_GetPath, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxConfigBase_GetPath }};
//     const wxString& GetPath() const
static int LUACALL wxLua_wxConfigBase_GetPath(lua_State *L)
{
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call GetPath
    wxString returns = (self->GetPath());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_GetVendorName[] = { &wxluatype_wxConfigBase, NULL };
static int LUACALL wxLua_wxConfigBase_GetVendorName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_GetVendorName[1] = {{ wxLua_wxConfigBase_GetVendorName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxConfigBase_GetVendorName }};
//     wxString GetVendorName() const
static int LUACALL wxLua_wxConfigBase_GetVendorName(lua_State *L)
{
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call GetVendorName
    wxString returns = (self->GetVendorName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_HasEntry[] = { &wxluatype_wxConfigBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxConfigBase_HasEntry(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_HasEntry[1] = {{ wxLua_wxConfigBase_HasEntry, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxConfigBase_HasEntry }};
//     bool HasEntry(wxString& strName) const
static int LUACALL wxLua_wxConfigBase_HasEntry(lua_State *L)
{
    // wxString strName
    wxString strName = wxlua_getwxStringtype(L, 2);
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call HasEntry
    bool returns = (self->HasEntry(strName));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_HasGroup[] = { &wxluatype_wxConfigBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxConfigBase_HasGroup(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_HasGroup[1] = {{ wxLua_wxConfigBase_HasGroup, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxConfigBase_HasGroup }};
//     bool HasGroup(const wxString& strName) const
static int LUACALL wxLua_wxConfigBase_HasGroup(lua_State *L)
{
    // const wxString strName
    const wxString strName = wxlua_getwxStringtype(L, 2);
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call HasGroup
    bool returns = (self->HasGroup(strName));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_IsExpandingEnvVars[] = { &wxluatype_wxConfigBase, NULL };
static int LUACALL wxLua_wxConfigBase_IsExpandingEnvVars(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_IsExpandingEnvVars[1] = {{ wxLua_wxConfigBase_IsExpandingEnvVars, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxConfigBase_IsExpandingEnvVars }};
//     bool IsExpandingEnvVars() const
static int LUACALL wxLua_wxConfigBase_IsExpandingEnvVars(lua_State *L)
{
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call IsExpandingEnvVars
    bool returns = (self->IsExpandingEnvVars());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_IsRecordingDefaults[] = { &wxluatype_wxConfigBase, NULL };
static int LUACALL wxLua_wxConfigBase_IsRecordingDefaults(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_IsRecordingDefaults[1] = {{ wxLua_wxConfigBase_IsRecordingDefaults, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxConfigBase_IsRecordingDefaults }};
//     bool IsRecordingDefaults() const
static int LUACALL wxLua_wxConfigBase_IsRecordingDefaults(lua_State *L)
{
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call IsRecordingDefaults
    bool returns = (self->IsRecordingDefaults());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#define wxLua_wxConfigBase_Read1 wxLua_wxConfigBase_ReadFloat
static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_Read1[] = { &wxluatype_wxConfigBase, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxConfigBase_Read1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_Read1[1] = {{ wxLua_wxConfigBase_Read1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxConfigBase_Read1 }};
// %override wxLua_wxConfigBase_ReadFloat
// %rename ReadFloat bool Read(const wxString&  key, double* d, double defaultVal = 0) const
static int LUACALL wxLua_wxConfigBase_ReadFloat(lua_State *L)
{
    double returns = 0;
    // get number of arguments
    int argCount = lua_gettop(L);
    // double defaultVal = 0
    double defaultVal = (argCount >= 3 ? (double)wxlua_getnumbertype(L, 3) : 0);
    // const wxString& key
    wxString key = wxlua_getwxStringtype(L, 2);
    // get this
    wxConfigBase *self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call Read
    bool ret = self->Read(key, &returns, defaultVal);
    // push the result bool
    lua_pushboolean(L, ret);
    // push the result number
    lua_pushnumber(L, returns);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_Read[] = { &wxluatype_wxConfigBase, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxConfigBase_Read(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_Read[1] = {{ wxLua_wxConfigBase_Read, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxConfigBase_Read }};
// %override wxLua_wxConfigBase_Read
// bool Read(const wxString& key, wxString* str, const wxString& defaultVal = wxEmptyString) const
static int LUACALL wxLua_wxConfigBase_Read(lua_State *L)
{
    wxString returns;
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxString defaultVal
    wxString defaultVal = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString& key
    wxString key = wxlua_getwxStringtype(L, 2);
    // get this
    wxConfigBase *self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call Read
    bool ret = self->Read(key, &returns, defaultVal);
    // push the result bool
    lua_pushboolean(L, ret);
    // push the result string
    wxlua_pushwxString(L, returns);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_RenameEntry[] = { &wxluatype_wxConfigBase, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxConfigBase_RenameEntry(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_RenameEntry[1] = {{ wxLua_wxConfigBase_RenameEntry, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxConfigBase_RenameEntry }};
//     bool RenameEntry(const wxString& oldName, const wxString& newName)
static int LUACALL wxLua_wxConfigBase_RenameEntry(lua_State *L)
{
    // const wxString newName
    const wxString newName = wxlua_getwxStringtype(L, 3);
    // const wxString oldName
    const wxString oldName = wxlua_getwxStringtype(L, 2);
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call RenameEntry
    bool returns = (self->RenameEntry(oldName, newName));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_RenameGroup[] = { &wxluatype_wxConfigBase, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxConfigBase_RenameGroup(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_RenameGroup[1] = {{ wxLua_wxConfigBase_RenameGroup, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxConfigBase_RenameGroup }};
//     bool RenameGroup(const wxString& oldName, const wxString& newName)
static int LUACALL wxLua_wxConfigBase_RenameGroup(lua_State *L)
{
    // const wxString newName
    const wxString newName = wxlua_getwxStringtype(L, 3);
    // const wxString oldName
    const wxString oldName = wxlua_getwxStringtype(L, 2);
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call RenameGroup
    bool returns = (self->RenameGroup(oldName, newName));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_Set[] = { &wxluatype_wxConfigBase, NULL };
static int LUACALL wxLua_wxConfigBase_Set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_Set[1] = {{ wxLua_wxConfigBase_Set, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxConfigBase_Set }};
//     static %gc wxConfigBase* Set(%ungc wxConfigBase *pConfig = NULL)
static int LUACALL wxLua_wxConfigBase_Set(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxConfigBase pConfig = NULL
    wxConfigBase * pConfig = (argCount >= 1 ? (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase) : NULL);
    if (wxluaO_isgcobject(L, pConfig)) wxluaO_undeletegcobject(L, pConfig);
    // call Set
    wxConfigBase* returns = (wxConfigBase*)wxConfigBase::Set(pConfig);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxConfigBase(returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxConfigBase);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_SetExpandEnvVars[] = { &wxluatype_wxConfigBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxConfigBase_SetExpandEnvVars(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_SetExpandEnvVars[1] = {{ wxLua_wxConfigBase_SetExpandEnvVars, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxConfigBase_SetExpandEnvVars }};
//     void SetExpandEnvVars(bool bDoIt = true)
static int LUACALL wxLua_wxConfigBase_SetExpandEnvVars(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool bDoIt = true
    bool bDoIt = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call SetExpandEnvVars
    self->SetExpandEnvVars(bDoIt);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_SetPath[] = { &wxluatype_wxConfigBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxConfigBase_SetPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_SetPath[1] = {{ wxLua_wxConfigBase_SetPath, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxConfigBase_SetPath }};
//     void SetPath(const wxString& strPath)
static int LUACALL wxLua_wxConfigBase_SetPath(lua_State *L)
{
    // const wxString strPath
    const wxString strPath = wxlua_getwxStringtype(L, 2);
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call SetPath
    self->SetPath(strPath);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_SetRecordDefaults[] = { &wxluatype_wxConfigBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxConfigBase_SetRecordDefaults(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_SetRecordDefaults[1] = {{ wxLua_wxConfigBase_SetRecordDefaults, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxConfigBase_SetRecordDefaults }};
//     void SetRecordDefaults(bool bDoIt = true)
static int LUACALL wxLua_wxConfigBase_SetRecordDefaults(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool bDoIt = true
    bool bDoIt = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call SetRecordDefaults
    self->SetRecordDefaults(bDoIt);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_Write1[] = { &wxluatype_wxConfigBase, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxConfigBase_Write1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_Write1[1] = {{ wxLua_wxConfigBase_Write1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxConfigBase_Write1 }};
//     bool Write(const wxString &key, double value)
static int LUACALL wxLua_wxConfigBase_Write1(lua_State *L)
{
    // double value
    double value = (double)wxlua_getnumbertype(L, 3);
    // const wxString key
    const wxString key = wxlua_getwxStringtype(L, 2);
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call Write
    bool returns = (self->Write(key, value));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_Write[] = { &wxluatype_wxConfigBase, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxConfigBase_Write(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_Write[1] = {{ wxLua_wxConfigBase_Write, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxConfigBase_Write }};
//     bool Write(const wxString& key, wxString &value)
static int LUACALL wxLua_wxConfigBase_Write(lua_State *L)
{
    // wxString value
    wxString value = wxlua_getwxStringtype(L, 3);
    // const wxString key
    const wxString key = wxlua_getwxStringtype(L, 2);
    // get this
    wxConfigBase * self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call Write
    bool returns = (self->Write(key, value));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigBase_delete[] = { &wxluatype_wxConfigBase, NULL };
static int LUACALL wxLua_wxConfigBase_delete(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_delete[1] = {{ wxLua_wxConfigBase_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxConfigBase_delete }};
// %override wxLua_wxConfigBase_delete
// void delete()
static int LUACALL wxLua_wxConfigBase_delete(lua_State *L)
{
    // get this
    wxConfigBase *self = (wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);

    if (wxConfigBase::Get(false) == self) // clear us from the wxConfigBase
        wxConfigBase::Set(NULL);

    // we may not be tracked, but delete us anyway
    if (!wxluaO_deletegcobject(L, lua_touserdata(L, 1), self, WXLUA_DELETE_OBJECT_ALL))
        delete self;

    // return the number of parameters
    return 0;
}





#if (wxLUA_USE_wxConfig && wxUSE_CONFIG)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_Read_overload[] =
{
    { wxLua_wxConfigBase_Read1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxConfigBase_Read1 },
    { wxLua_wxConfigBase_Read, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxConfigBase_Read },
};
static int s_wxluafunc_wxLua_wxConfigBase_Read_overload_count = sizeof(s_wxluafunc_wxLua_wxConfigBase_Read_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigBase_Write_overload[] =
{
    { wxLua_wxConfigBase_Write1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxConfigBase_Write1 },
    { wxLua_wxConfigBase_Write, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxConfigBase_Write },
};
static int s_wxluafunc_wxLua_wxConfigBase_Write_overload_count = sizeof(s_wxluafunc_wxLua_wxConfigBase_Write_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxConfig && wxUSE_CONFIG)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxConfigBase_methods[] = {
    { "Create", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxConfigBase_Create, 1, NULL },
    { "DeleteAll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_DeleteAll, 1, NULL },
    { "DeleteEntry", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_DeleteEntry, 1, NULL },
    { "DeleteGroup", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_DeleteGroup, 1, NULL },
    { "DontCreateOnDemand", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxConfigBase_DontCreateOnDemand, 1, NULL },
    { "Exists", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_Exists, 1, NULL },
    { "Flush", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_Flush, 1, NULL },
    { "Get", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxConfigBase_Get, 1, NULL },
    { "GetAppName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_GetAppName, 1, NULL },
    { "GetEntryType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_GetEntryType, 1, NULL },
    { "GetFirstEntry", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_GetFirstEntry, 1, NULL },
    { "GetFirstGroup", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_GetFirstGroup, 1, NULL },
    { "GetNextEntry", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_GetNextEntry, 1, NULL },
    { "GetNextGroup", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_GetNextGroup, 1, NULL },
    { "GetNumberOfEntries", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_GetNumberOfEntries, 1, NULL },
    { "GetNumberOfGroups", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_GetNumberOfGroups, 1, NULL },
    { "GetPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_GetPath, 1, NULL },
    { "GetVendorName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_GetVendorName, 1, NULL },
    { "HasEntry", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_HasEntry, 1, NULL },
    { "HasGroup", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_HasGroup, 1, NULL },
    { "IsExpandingEnvVars", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_IsExpandingEnvVars, 1, NULL },
    { "IsRecordingDefaults", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_IsRecordingDefaults, 1, NULL },

#if (wxLUA_USE_wxConfig && wxUSE_CONFIG)
    { "Read", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_Read_overload, s_wxluafunc_wxLua_wxConfigBase_Read_overload_count, 0 },
#endif // (wxLUA_USE_wxConfig && wxUSE_CONFIG)

    { "RenameEntry", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_RenameEntry, 1, NULL },
    { "RenameGroup", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_RenameGroup, 1, NULL },
    { "Set", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxConfigBase_Set, 1, NULL },
    { "SetExpandEnvVars", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_SetExpandEnvVars, 1, NULL },
    { "SetPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_SetPath, 1, NULL },
    { "SetRecordDefaults", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_SetRecordDefaults, 1, NULL },

#if (wxLUA_USE_wxConfig && wxUSE_CONFIG)
    { "Write", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigBase_Write_overload, s_wxluafunc_wxLua_wxConfigBase_Write_overload_count, 0 },
#endif // (wxLUA_USE_wxConfig && wxUSE_CONFIG)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxConfigBase_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxConfigBase_methodCount = sizeof(wxConfigBase_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxConfigBase_enums[] = {
#if wxLUA_USE_wxConfig && wxUSE_CONFIG
        { "Type_Boolean", wxConfigBase::Type_Boolean },
        { "Type_Float", wxConfigBase::Type_Float },
        { "Type_Integer", wxConfigBase::Type_Integer },
        { "Type_String", wxConfigBase::Type_String },
        { "Type_Unknown", wxConfigBase::Type_Unknown },
#endif // wxLUA_USE_wxConfig && wxUSE_CONFIG

    { NULL, 0, },
};
int wxConfigBase_enumCount = sizeof(wxConfigBase_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // wxLUA_USE_wxConfig && wxUSE_CONFIG


#if wxLUA_USE_wxConfig && wxUSE_CONFIG
// ---------------------------------------------------------------------------
// Bind class wxConfig
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxConfig'
int wxluatype_wxConfig = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfig_delete[] = { &wxluatype_wxConfig, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfig_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxConfig_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfig_constructor[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxConfig_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfig_constructor[1] = {{ wxLua_wxConfig_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 5, s_wxluatypeArray_wxLua_wxConfig_constructor }};
//     wxConfig(const wxString& appName = "", const wxString& vendorName = "", const wxString& localFilename = "", const wxString& globalFilename = "", long style = 0)
static int LUACALL wxLua_wxConfig_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = 0
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : 0);
    // const wxString globalFilename = ""
    const wxString globalFilename = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // const wxString localFilename = ""
    const wxString localFilename = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString vendorName = ""
    const wxString vendorName = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // const wxString appName = ""
    const wxString appName = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxConfig* returns = new wxConfig(appName, vendorName, localFilename, globalFilename, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxConfig((wxConfig*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxConfig);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxConfig_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxConfig_delete, 1, NULL },
    { "wxConfig", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxConfig_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxConfig_methodCount = sizeof(wxConfig_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxConfig && wxUSE_CONFIG


#if wxLUA_USE_wxConfig && wxUSE_CONFIG
// ---------------------------------------------------------------------------
// Bind class wxFileConfig
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFileConfig'
int wxluatype_wxFileConfig = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileConfig_SetUmask[] = { &wxluatype_wxFileConfig, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFileConfig_SetUmask(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileConfig_SetUmask[1] = {{ wxLua_wxFileConfig_SetUmask, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileConfig_SetUmask }};
//     void SetUmask(int mode)
static int LUACALL wxLua_wxFileConfig_SetUmask(lua_State *L)
{
    // int mode
    int mode = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxFileConfig * self = (wxFileConfig *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileConfig);
    // call SetUmask
    self->SetUmask(mode);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileConfig_delete[] = { &wxluatype_wxFileConfig, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileConfig_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFileConfig_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileConfig_constructor[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFileConfig_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileConfig_constructor[1] = {{ wxLua_wxFileConfig_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 5, s_wxluatypeArray_wxLua_wxFileConfig_constructor }};
//     wxFileConfig(const wxString& appName = "", const wxString& vendorName = "", const wxString& localFilename = "", const wxString& globalFilename = "", long style = wxCONFIG_USE_LOCAL_FILE | wxCONFIG_USE_GLOBAL_FILE) //, wxMBConv& conv = wxConvUTF8)
static int LUACALL wxLua_wxFileConfig_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = wxCONFIG_USE_LOCAL_FILE | wxCONFIG_USE_GLOBAL_FILE
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxCONFIG_USE_LOCAL_FILE | wxCONFIG_USE_GLOBAL_FILE);
    // const wxString globalFilename = ""
    const wxString globalFilename = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // const wxString localFilename = ""
    const wxString localFilename = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString vendorName = ""
    const wxString vendorName = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // const wxString appName = ""
    const wxString appName = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxFileConfig* returns = new wxFileConfig(appName, vendorName, localFilename, globalFilename, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileConfig((wxFileConfig*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileConfig);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFileConfig_methods[] = {
    { "SetUmask", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileConfig_SetUmask, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFileConfig_delete, 1, NULL },
    { "wxFileConfig", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFileConfig_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxFileConfig_methodCount = sizeof(wxFileConfig_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxConfig && wxUSE_CONFIG


#if wxLUA_USE_wxConfig && wxUSE_CONFIG
// ---------------------------------------------------------------------------
// Bind class wxMemoryConfig
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMemoryConfig'
int wxluatype_wxMemoryConfig = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxMemoryConfig_delete[] = { &wxluatype_wxMemoryConfig, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMemoryConfig_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxMemoryConfig_delete }};

static int LUACALL wxLua_wxMemoryConfig_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMemoryConfig_constructor[1] = {{ wxLua_wxMemoryConfig_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxMemoryConfig()
static int LUACALL wxLua_wxMemoryConfig_constructor(lua_State *L)
{
    // call constructor
    wxMemoryConfig* returns = new wxMemoryConfig();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxMemoryConfig((wxMemoryConfig*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMemoryConfig);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMemoryConfig_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxMemoryConfig_delete, 1, NULL },
    { "wxMemoryConfig", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMemoryConfig_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxMemoryConfig_methodCount = sizeof(wxMemoryConfig_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxConfig && wxUSE_CONFIG


#if wxLUA_USE_wxConfig && wxUSE_CONFIG
// ---------------------------------------------------------------------------
// Bind class wxConfigPathChanger
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxConfigPathChanger'
int wxluatype_wxConfigPathChanger = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigPathChanger_Name[] = { &wxluatype_wxConfigPathChanger, NULL };
static int LUACALL wxLua_wxConfigPathChanger_Name(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigPathChanger_Name[1] = {{ wxLua_wxConfigPathChanger_Name, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxConfigPathChanger_Name }};
//     wxString Name() const
static int LUACALL wxLua_wxConfigPathChanger_Name(lua_State *L)
{
    // get this
    wxConfigPathChanger * self = (wxConfigPathChanger *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigPathChanger);
    // call Name
    wxString returns = (self->Name());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxConfig && wxUSE_CONFIG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigPathChanger_UpdateIfDeleted[] = { &wxluatype_wxConfigPathChanger, NULL };
static int LUACALL wxLua_wxConfigPathChanger_UpdateIfDeleted(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigPathChanger_UpdateIfDeleted[1] = {{ wxLua_wxConfigPathChanger_UpdateIfDeleted, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxConfigPathChanger_UpdateIfDeleted }};
//     %wxchkver_2_8 void UpdateIfDeleted()
static int LUACALL wxLua_wxConfigPathChanger_UpdateIfDeleted(lua_State *L)
{
    // get this
    wxConfigPathChanger * self = (wxConfigPathChanger *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigPathChanger);
    // call UpdateIfDeleted
    self->UpdateIfDeleted();

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxConfig && wxUSE_CONFIG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigPathChanger_delete[] = { &wxluatype_wxConfigPathChanger, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigPathChanger_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxConfigPathChanger_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxConfigPathChanger_constructor[] = { &wxluatype_wxConfigBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxConfigPathChanger_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxConfigPathChanger_constructor[1] = {{ wxLua_wxConfigPathChanger_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxConfigPathChanger_constructor }};
//     wxConfigPathChanger(const wxConfigBase *pContainer, const wxString& strEntry)
static int LUACALL wxLua_wxConfigPathChanger_constructor(lua_State *L)
{
    // const wxString strEntry
    const wxString strEntry = wxlua_getwxStringtype(L, 2);
    // const wxConfigBase pContainer
    const wxConfigBase * pContainer = (const wxConfigBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxConfigBase);
    // call constructor
    wxConfigPathChanger* returns = new wxConfigPathChanger(pContainer, strEntry);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxConfigPathChanger((wxConfigPathChanger*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxConfigPathChanger);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxConfigPathChanger_methods[] = {
    { "Name", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigPathChanger_Name, 1, NULL },

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxConfig && wxUSE_CONFIG)
    { "UpdateIfDeleted", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxConfigPathChanger_UpdateIfDeleted, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxConfig && wxUSE_CONFIG)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxConfigPathChanger_delete, 1, NULL },
    { "wxConfigPathChanger", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxConfigPathChanger_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxConfigPathChanger_methodCount = sizeof(wxConfigPathChanger_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxConfig && wxUSE_CONFIG

