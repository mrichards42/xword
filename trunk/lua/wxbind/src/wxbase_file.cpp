// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxbase_file.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxbase_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif



#if wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxStandardPaths
// ---------------------------------------------------------------------------
// Bind class wxStandardPaths
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxStandardPaths'
int wxluatype_wxStandardPaths = WXLUA_TUNKNOWN;

static int LUACALL wxLua_wxStandardPaths_Get(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStandardPaths_Get[1] = {{ wxLua_wxStandardPaths_Get, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
// %override wxLua_wxStandardPaths_Get
//     static wxStandardPaths& Get();
static int LUACALL wxLua_wxStandardPaths_Get(lua_State *L)
{
    // call Get
    wxStandardPathsBase *returns = &wxStandardPaths::Get();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStandardPaths);

    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxStandardPaths_GetConfigDir[] = { &wxluatype_wxStandardPaths, NULL };
static int LUACALL wxLua_wxStandardPaths_GetConfigDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStandardPaths_GetConfigDir[1] = {{ wxLua_wxStandardPaths_GetConfigDir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStandardPaths_GetConfigDir }};
//     virtual wxString GetConfigDir() const
static int LUACALL wxLua_wxStandardPaths_GetConfigDir(lua_State *L)
{
    // get this
    wxStandardPaths * self = (wxStandardPaths *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStandardPaths);
    // call GetConfigDir
    wxString returns = (self->GetConfigDir());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStandardPaths_GetDataDir[] = { &wxluatype_wxStandardPaths, NULL };
static int LUACALL wxLua_wxStandardPaths_GetDataDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStandardPaths_GetDataDir[1] = {{ wxLua_wxStandardPaths_GetDataDir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStandardPaths_GetDataDir }};
//     virtual wxString GetDataDir() const
static int LUACALL wxLua_wxStandardPaths_GetDataDir(lua_State *L)
{
    // get this
    wxStandardPaths * self = (wxStandardPaths *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStandardPaths);
    // call GetDataDir
    wxString returns = (self->GetDataDir());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStandardPaths_GetDocumentsDir[] = { &wxluatype_wxStandardPaths, NULL };
static int LUACALL wxLua_wxStandardPaths_GetDocumentsDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStandardPaths_GetDocumentsDir[1] = {{ wxLua_wxStandardPaths_GetDocumentsDir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStandardPaths_GetDocumentsDir }};
//     virtual wxString GetDocumentsDir() const
static int LUACALL wxLua_wxStandardPaths_GetDocumentsDir(lua_State *L)
{
    // get this
    wxStandardPaths * self = (wxStandardPaths *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStandardPaths);
    // call GetDocumentsDir
    wxString returns = (self->GetDocumentsDir());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStandardPaths_GetExecutablePath[] = { &wxluatype_wxStandardPaths, NULL };
static int LUACALL wxLua_wxStandardPaths_GetExecutablePath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStandardPaths_GetExecutablePath[1] = {{ wxLua_wxStandardPaths_GetExecutablePath, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStandardPaths_GetExecutablePath }};
//     virtual wxString GetExecutablePath() const
static int LUACALL wxLua_wxStandardPaths_GetExecutablePath(lua_State *L)
{
    // get this
    wxStandardPaths * self = (wxStandardPaths *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStandardPaths);
    // call GetExecutablePath
    wxString returns = (self->GetExecutablePath());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStandardPaths_GetLocalDataDir[] = { &wxluatype_wxStandardPaths, NULL };
static int LUACALL wxLua_wxStandardPaths_GetLocalDataDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStandardPaths_GetLocalDataDir[1] = {{ wxLua_wxStandardPaths_GetLocalDataDir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStandardPaths_GetLocalDataDir }};
//     virtual wxString GetLocalDataDir() const
static int LUACALL wxLua_wxStandardPaths_GetLocalDataDir(lua_State *L)
{
    // get this
    wxStandardPaths * self = (wxStandardPaths *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStandardPaths);
    // call GetLocalDataDir
    wxString returns = (self->GetLocalDataDir());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStandardPaths_GetLocalizedResourcesDir[] = { &wxluatype_wxStandardPaths, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxStandardPaths_GetLocalizedResourcesDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStandardPaths_GetLocalizedResourcesDir[1] = {{ wxLua_wxStandardPaths_GetLocalizedResourcesDir, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxStandardPaths_GetLocalizedResourcesDir }};
//     virtual wxString GetLocalizedResourcesDir(const wxString& lang, wxStandardPaths::ResourceCat category = wxStandardPaths::ResourceCat_None) const
static int LUACALL wxLua_wxStandardPaths_GetLocalizedResourcesDir(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxStandardPaths::ResourceCat category = wxStandardPaths::ResourceCat_None
    wxStandardPaths::ResourceCat category = (argCount >= 3 ? (wxStandardPaths::ResourceCat)wxlua_getenumtype(L, 3) : wxStandardPaths::ResourceCat_None);
    // const wxString lang
    const wxString lang = wxlua_getwxStringtype(L, 2);
    // get this
    wxStandardPaths * self = (wxStandardPaths *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStandardPaths);
    // call GetLocalizedResourcesDir
    wxString returns = (self->GetLocalizedResourcesDir(lang, category));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStandardPaths_GetPluginsDir[] = { &wxluatype_wxStandardPaths, NULL };
static int LUACALL wxLua_wxStandardPaths_GetPluginsDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStandardPaths_GetPluginsDir[1] = {{ wxLua_wxStandardPaths_GetPluginsDir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStandardPaths_GetPluginsDir }};
//     virtual wxString GetPluginsDir() const
static int LUACALL wxLua_wxStandardPaths_GetPluginsDir(lua_State *L)
{
    // get this
    wxStandardPaths * self = (wxStandardPaths *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStandardPaths);
    // call GetPluginsDir
    wxString returns = (self->GetPluginsDir());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStandardPaths_GetResourcesDir[] = { &wxluatype_wxStandardPaths, NULL };
static int LUACALL wxLua_wxStandardPaths_GetResourcesDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStandardPaths_GetResourcesDir[1] = {{ wxLua_wxStandardPaths_GetResourcesDir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStandardPaths_GetResourcesDir }};
//     virtual wxString GetResourcesDir() const
static int LUACALL wxLua_wxStandardPaths_GetResourcesDir(lua_State *L)
{
    // get this
    wxStandardPaths * self = (wxStandardPaths *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStandardPaths);
    // call GetResourcesDir
    wxString returns = (self->GetResourcesDir());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStandardPaths_GetTempDir[] = { &wxluatype_wxStandardPaths, NULL };
static int LUACALL wxLua_wxStandardPaths_GetTempDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStandardPaths_GetTempDir[1] = {{ wxLua_wxStandardPaths_GetTempDir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStandardPaths_GetTempDir }};
//     virtual wxString GetTempDir() const;
static int LUACALL wxLua_wxStandardPaths_GetTempDir(lua_State *L)
{
    // get this
    wxStandardPaths * self = (wxStandardPaths *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStandardPaths);
    // call GetTempDir
    wxString returns = (self->GetTempDir());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStandardPaths_GetUserConfigDir[] = { &wxluatype_wxStandardPaths, NULL };
static int LUACALL wxLua_wxStandardPaths_GetUserConfigDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStandardPaths_GetUserConfigDir[1] = {{ wxLua_wxStandardPaths_GetUserConfigDir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStandardPaths_GetUserConfigDir }};
//     virtual wxString GetUserConfigDir() const
static int LUACALL wxLua_wxStandardPaths_GetUserConfigDir(lua_State *L)
{
    // get this
    wxStandardPaths * self = (wxStandardPaths *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStandardPaths);
    // call GetUserConfigDir
    wxString returns = (self->GetUserConfigDir());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStandardPaths_GetUserDataDir[] = { &wxluatype_wxStandardPaths, NULL };
static int LUACALL wxLua_wxStandardPaths_GetUserDataDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStandardPaths_GetUserDataDir[1] = {{ wxLua_wxStandardPaths_GetUserDataDir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStandardPaths_GetUserDataDir }};
//     virtual wxString GetUserDataDir() const
static int LUACALL wxLua_wxStandardPaths_GetUserDataDir(lua_State *L)
{
    // get this
    wxStandardPaths * self = (wxStandardPaths *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStandardPaths);
    // call GetUserDataDir
    wxString returns = (self->GetUserDataDir());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStandardPaths_GetUserLocalDataDir[] = { &wxluatype_wxStandardPaths, NULL };
static int LUACALL wxLua_wxStandardPaths_GetUserLocalDataDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStandardPaths_GetUserLocalDataDir[1] = {{ wxLua_wxStandardPaths_GetUserLocalDataDir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStandardPaths_GetUserLocalDataDir }};
//     virtual wxString GetUserLocalDataDir() const
static int LUACALL wxLua_wxStandardPaths_GetUserLocalDataDir(lua_State *L)
{
    // get this
    wxStandardPaths * self = (wxStandardPaths *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStandardPaths);
    // call GetUserLocalDataDir
    wxString returns = (self->GetUserLocalDataDir());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxStandardPaths_methods[] = {
    { "Get", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxStandardPaths_Get, 1, NULL },
    { "GetConfigDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStandardPaths_GetConfigDir, 1, NULL },
    { "GetDataDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStandardPaths_GetDataDir, 1, NULL },
    { "GetDocumentsDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStandardPaths_GetDocumentsDir, 1, NULL },
    { "GetExecutablePath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStandardPaths_GetExecutablePath, 1, NULL },
    { "GetLocalDataDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStandardPaths_GetLocalDataDir, 1, NULL },
    { "GetLocalizedResourcesDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStandardPaths_GetLocalizedResourcesDir, 1, NULL },
    { "GetPluginsDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStandardPaths_GetPluginsDir, 1, NULL },
    { "GetResourcesDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStandardPaths_GetResourcesDir, 1, NULL },
    { "GetTempDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStandardPaths_GetTempDir, 1, NULL },
    { "GetUserConfigDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStandardPaths_GetUserConfigDir, 1, NULL },
    { "GetUserDataDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStandardPaths_GetUserDataDir, 1, NULL },
    { "GetUserLocalDataDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStandardPaths_GetUserLocalDataDir, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxStandardPaths_methodCount = sizeof(wxStandardPaths_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxStandardPaths_enums[] = {
#if wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxStandardPaths
        { "ResourceCat_Max", wxStandardPaths::ResourceCat_Max },
        { "ResourceCat_Messages", wxStandardPaths::ResourceCat_Messages },
        { "ResourceCat_None", wxStandardPaths::ResourceCat_None },
#endif // wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxStandardPaths

    { NULL, 0, },
};
int wxStandardPaths_enumCount = sizeof(wxStandardPaths_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxStandardPaths

// ---------------------------------------------------------------------------
// Bind class wxPathList
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPathList'
int wxluatype_wxPathList = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxArrayString) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxPathList_Add2[] = { &wxluatype_wxPathList, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxPathList_Add2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPathList_Add2[1] = {{ wxLua_wxPathList_Add2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPathList_Add2 }};
//     %wxchkver_2_8 void Add(const wxArrayString& paths)
static int LUACALL wxLua_wxPathList_Add2(lua_State *L)
{
    // const wxArrayString paths
    wxLuaSmartwxArrayString paths = wxlua_getwxArrayString(L, 2);
    // get this
    wxPathList * self = (wxPathList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPathList);
    // call Add
    self->Add(paths);

    return 0;
}

#endif // (wxLUA_USE_wxArrayString) && (wxCHECK_VERSION(2,8,0))

#if wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxPathList_Add1[] = { &wxluatype_wxPathList, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxPathList_Add1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPathList_Add1[1] = {{ wxLua_wxPathList_Add1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPathList_Add1 }};
//     %wxchkver_2_8 bool Add(const wxString& path)
static int LUACALL wxLua_wxPathList_Add1(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxPathList * self = (wxPathList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPathList);
    // call Add
    bool returns = (self->Add(path));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // wxCHECK_VERSION(2,8,0)

#if !wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxPathList_Add[] = { &wxluatype_wxPathList, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxPathList_Add(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPathList_Add[1] = {{ wxLua_wxPathList_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPathList_Add }};
//     !%wxchkver_2_8 void Add(const wxString& path)
static int LUACALL wxLua_wxPathList_Add(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxPathList * self = (wxPathList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPathList);
    // call Add
    self->Add(path);

    return 0;
}

#endif // !wxCHECK_VERSION(2,8,0)

static wxLuaArgType s_wxluatypeArray_wxLua_wxPathList_AddEnvList[] = { &wxluatype_wxPathList, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxPathList_AddEnvList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPathList_AddEnvList[1] = {{ wxLua_wxPathList_AddEnvList, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPathList_AddEnvList }};
//     void AddEnvList(const wxString& envVariable)
static int LUACALL wxLua_wxPathList_AddEnvList(lua_State *L)
{
    // const wxString envVariable
    const wxString envVariable = wxlua_getwxStringtype(L, 2);
    // get this
    wxPathList * self = (wxPathList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPathList);
    // call AddEnvList
    self->AddEnvList(envVariable);

    return 0;
}


#if wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxPathList_EnsureFileAccessible[] = { &wxluatype_wxPathList, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxPathList_EnsureFileAccessible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPathList_EnsureFileAccessible[1] = {{ wxLua_wxPathList_EnsureFileAccessible, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPathList_EnsureFileAccessible }};
//     %not_overload %wxchkver_2_8 bool EnsureFileAccessible(const wxString& path)
static int LUACALL wxLua_wxPathList_EnsureFileAccessible(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxPathList * self = (wxPathList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPathList);
    // call EnsureFileAccessible
    bool returns = (self->EnsureFileAccessible(path));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // wxCHECK_VERSION(2,8,0)

#if !wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxPathList_EnsureFileAccessible[] = { &wxluatype_wxPathList, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxPathList_EnsureFileAccessible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPathList_EnsureFileAccessible[1] = {{ wxLua_wxPathList_EnsureFileAccessible, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPathList_EnsureFileAccessible }};
//     %not_overload !%wxchkver_2_8 void EnsureFileAccessible(const wxString& path)
static int LUACALL wxLua_wxPathList_EnsureFileAccessible(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxPathList * self = (wxPathList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPathList);
    // call EnsureFileAccessible
    self->EnsureFileAccessible(path);

    return 0;
}

#endif // !wxCHECK_VERSION(2,8,0)

static wxLuaArgType s_wxluatypeArray_wxLua_wxPathList_FindAbsoluteValidPath[] = { &wxluatype_wxPathList, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxPathList_FindAbsoluteValidPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPathList_FindAbsoluteValidPath[1] = {{ wxLua_wxPathList_FindAbsoluteValidPath, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPathList_FindAbsoluteValidPath }};
//     wxString FindAbsoluteValidPath(const wxString& filename) const
static int LUACALL wxLua_wxPathList_FindAbsoluteValidPath(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxPathList * self = (wxPathList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPathList);
    // call FindAbsoluteValidPath
    wxString returns = (self->FindAbsoluteValidPath(filename));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPathList_FindValidPath[] = { &wxluatype_wxPathList, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxPathList_FindValidPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPathList_FindValidPath[1] = {{ wxLua_wxPathList_FindValidPath, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPathList_FindValidPath }};
//     wxString FindValidPath(const wxString& filename) const
static int LUACALL wxLua_wxPathList_FindValidPath(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxPathList * self = (wxPathList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPathList);
    // call FindValidPath
    wxString returns = (self->FindValidPath(filename));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPathList_delete[] = { &wxluatype_wxPathList, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPathList_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxPathList_delete }};

static int LUACALL wxLua_wxPathList_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPathList_constructor[1] = {{ wxLua_wxPathList_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxPathList()
static int LUACALL wxLua_wxPathList_constructor(lua_State *L)
{
    // call constructor
    wxPathList* returns = new wxPathList();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPathList((wxPathList*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPathList);

    return 1;
}



#if ((wxLUA_USE_wxArrayString) && (wxCHECK_VERSION(2,8,0)))||(wxCHECK_VERSION(2,8,0))||(!wxCHECK_VERSION(2,8,0))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPathList_Add_overload[] =
{

#if (wxLUA_USE_wxArrayString) && (wxCHECK_VERSION(2,8,0))
    { wxLua_wxPathList_Add2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPathList_Add2 },
#endif // (wxLUA_USE_wxArrayString) && (wxCHECK_VERSION(2,8,0))

#if wxCHECK_VERSION(2,8,0)
    { wxLua_wxPathList_Add1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPathList_Add1 },
#endif // wxCHECK_VERSION(2,8,0)

#if !wxCHECK_VERSION(2,8,0)
    { wxLua_wxPathList_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPathList_Add },
#endif // !wxCHECK_VERSION(2,8,0)
};
static int s_wxluafunc_wxLua_wxPathList_Add_overload_count = sizeof(s_wxluafunc_wxLua_wxPathList_Add_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxArrayString) && (wxCHECK_VERSION(2,8,0)))||(wxCHECK_VERSION(2,8,0))||(!wxCHECK_VERSION(2,8,0))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPathList_methods[] = {
#if ((wxLUA_USE_wxArrayString) && (wxCHECK_VERSION(2,8,0)))||(wxCHECK_VERSION(2,8,0))||(!wxCHECK_VERSION(2,8,0))
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPathList_Add_overload, s_wxluafunc_wxLua_wxPathList_Add_overload_count, 0 },
#endif // ((wxLUA_USE_wxArrayString) && (wxCHECK_VERSION(2,8,0)))||(wxCHECK_VERSION(2,8,0))||(!wxCHECK_VERSION(2,8,0))

    { "AddEnvList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPathList_AddEnvList, 1, NULL },

#if wxCHECK_VERSION(2,8,0)
    { "EnsureFileAccessible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPathList_EnsureFileAccessible, 1, NULL },
#elif !wxCHECK_VERSION(2,8,0)
    { "EnsureFileAccessible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPathList_EnsureFileAccessible, 1, NULL },
#endif // !wxCHECK_VERSION(2,8,0)
    { "FindAbsoluteValidPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPathList_FindAbsoluteValidPath, 1, NULL },
    { "FindValidPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPathList_FindValidPath, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxPathList_delete, 1, NULL },
    { "wxPathList", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxPathList_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxPathList_methodCount = sizeof(wxPathList_methods)/sizeof(wxLuaBindMethod) - 1;



#if wxLUA_USE_wxFileName
// ---------------------------------------------------------------------------
// Bind class wxFileName
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFileName'
int wxluatype_wxFileName = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_AppendDir[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_AppendDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_AppendDir[1] = {{ wxLua_wxFileName_AppendDir, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileName_AppendDir }};
//     void AppendDir(const wxString& dir)
static int LUACALL wxLua_wxFileName_AppendDir(lua_State *L)
{
    // const wxString dir
    const wxString dir = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call AppendDir
    self->AppendDir(dir);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_Assign4[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_Assign4(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_Assign4[1] = {{ wxLua_wxFileName_Assign4, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxFileName_Assign4 }};
//     void Assign(const wxString& path, const wxString& name, const wxString& ext, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_Assign4(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 5 ? (wxPathFormat)wxlua_getenumtype(L, 5) : wxPATH_NATIVE);
    // const wxString ext
    const wxString ext = wxlua_getwxStringtype(L, 4);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 3);
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call Assign
    self->Assign(path, name, ext, format);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_Assign3[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_Assign3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_Assign3[1] = {{ wxLua_wxFileName_Assign3, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxFileName_Assign3 }};
//     void Assign(const wxString& path, const wxString& name, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_Assign3(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 4 ? (wxPathFormat)wxlua_getenumtype(L, 4) : wxPATH_NATIVE);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 3);
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call Assign
    self->Assign(path, name, format);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_Assign2[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_Assign2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_Assign2[1] = {{ wxLua_wxFileName_Assign2, WXLUAMETHOD_METHOD, 5, 6, s_wxluatypeArray_wxLua_wxFileName_Assign2 }};
//     void Assign(const wxString& volume, const wxString& path, const wxString& name, const wxString& ext, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_Assign2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 6 ? (wxPathFormat)wxlua_getenumtype(L, 6) : wxPATH_NATIVE);
    // const wxString ext
    const wxString ext = wxlua_getwxStringtype(L, 5);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 4);
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 3);
    // const wxString volume
    const wxString volume = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call Assign
    self->Assign(volume, path, name, ext, format);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_Assign1[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_Assign1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_Assign1[1] = {{ wxLua_wxFileName_Assign1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFileName_Assign1 }};
//     void Assign(const wxString& fullpath, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_Assign1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 3 ? (wxPathFormat)wxlua_getenumtype(L, 3) : wxPATH_NATIVE);
    // const wxString fullpath
    const wxString fullpath = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call Assign
    self->Assign(fullpath, format);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_Assign[] = { &wxluatype_wxFileName, &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_Assign(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_Assign[1] = {{ wxLua_wxFileName_Assign, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileName_Assign }};
//     void Assign(const wxFileName& filepath)
static int LUACALL wxLua_wxFileName_Assign(lua_State *L)
{
    // const wxFileName filepath
    const wxFileName * filepath = (const wxFileName *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFileName);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call Assign
    self->Assign(*filepath);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_AssignCwd[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_AssignCwd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_AssignCwd[1] = {{ wxLua_wxFileName_AssignCwd, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxFileName_AssignCwd }};
//     void AssignCwd(const wxString& volume = "")
static int LUACALL wxLua_wxFileName_AssignCwd(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString volume = ""
    const wxString volume = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call AssignCwd
    self->AssignCwd(volume);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_AssignDir[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_AssignDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_AssignDir[1] = {{ wxLua_wxFileName_AssignDir, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFileName_AssignDir }};
//     void AssignDir(const wxString& dir, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_AssignDir(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 3 ? (wxPathFormat)wxlua_getenumtype(L, 3) : wxPATH_NATIVE);
    // const wxString dir
    const wxString dir = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call AssignDir
    self->AssignDir(dir, format);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_AssignHomeDir[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_AssignHomeDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_AssignHomeDir[1] = {{ wxLua_wxFileName_AssignHomeDir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_AssignHomeDir }};
//     void AssignHomeDir()
static int LUACALL wxLua_wxFileName_AssignHomeDir(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call AssignHomeDir
    self->AssignHomeDir();

    return 0;
}


#if (wxLUA_USE_wxFile && wxUSE_FILE) && ((wxCHECK_VERSION(2,8,0) && wxUSE_FILE) && (wxLUA_USE_wxFileName))
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_AssignTempFileName2[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, &wxluatype_wxFile, NULL };
static int LUACALL wxLua_wxFileName_AssignTempFileName2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_AssignTempFileName2[1] = {{ wxLua_wxFileName_AssignTempFileName2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxFileName_AssignTempFileName2 }};
//     %wxchkver_2_8&&wxUSE_FILE void AssignTempFileName(const wxString& prefix, wxFile *fileTemp)
static int LUACALL wxLua_wxFileName_AssignTempFileName2(lua_State *L)
{
    // wxFile fileTemp
    wxFile * fileTemp = (wxFile *)wxluaT_getuserdatatype(L, 3, wxluatype_wxFile);
    // const wxString prefix
    const wxString prefix = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call AssignTempFileName
    self->AssignTempFileName(prefix, fileTemp);

    return 0;
}

#endif // (wxLUA_USE_wxFile && wxUSE_FILE) && ((wxCHECK_VERSION(2,8,0) && wxUSE_FILE) && (wxLUA_USE_wxFileName))

#if (wxCHECK_VERSION(2,8,0) && (wxUSE_FILE || wxUSE_FFILE )) && (wxLUA_USE_wxFileName)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_AssignTempFileName1[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_AssignTempFileName1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_AssignTempFileName1[1] = {{ wxLua_wxFileName_AssignTempFileName1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileName_AssignTempFileName1 }};
//     %wxchkver_2_8&&(wxUSE_FILE||wxUSE_FFILE) void AssignTempFileName(const wxString& prefix)
static int LUACALL wxLua_wxFileName_AssignTempFileName1(lua_State *L)
{
    // const wxString prefix
    const wxString prefix = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call AssignTempFileName
    self->AssignTempFileName(prefix);

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,0) && (wxUSE_FILE || wxUSE_FFILE )) && (wxLUA_USE_wxFileName)

#if ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileName)) && (wxLUA_USE_wxFile && wxUSE_FILE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_AssignTempFileName[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, &wxluatype_wxFile, NULL };
static int LUACALL wxLua_wxFileName_AssignTempFileName(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_AssignTempFileName[1] = {{ wxLua_wxFileName_AssignTempFileName, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFileName_AssignTempFileName }};
//     !%wxchkver_2_8 void AssignTempFileName(const wxString& prefix, wxFile *fileTemp = NULL)
static int LUACALL wxLua_wxFileName_AssignTempFileName(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxFile fileTemp = NULL
    wxFile * fileTemp = (argCount >= 3 ? (wxFile *)wxluaT_getuserdatatype(L, 3, wxluatype_wxFile) : NULL);
    // const wxString prefix
    const wxString prefix = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call AssignTempFileName
    self->AssignTempFileName(prefix, fileTemp);

    return 0;
}

#endif // ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileName)) && (wxLUA_USE_wxFile && wxUSE_FILE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_Clear[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_Clear[1] = {{ wxLua_wxFileName_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_Clear }};
//     void Clear()
static int LUACALL wxLua_wxFileName_Clear(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_ClearExt[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_ClearExt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_ClearExt[1] = {{ wxLua_wxFileName_ClearExt, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_ClearExt }};
//     void ClearExt()
static int LUACALL wxLua_wxFileName_ClearExt(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call ClearExt
    self->ClearExt();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_DirExists1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_DirExists1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_DirExists1[1] = {{ wxLua_wxFileName_DirExists1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_DirExists1 }};
//     static bool DirExists(const wxString& dir)
static int LUACALL wxLua_wxFileName_DirExists1(lua_State *L)
{
    // const wxString dir
    const wxString dir = wxlua_getwxStringtype(L, 1);
    // call DirExists
    bool returns = (wxFileName::DirExists(dir));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_DirExists[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_DirExists(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_DirExists[1] = {{ wxLua_wxFileName_DirExists, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_DirExists }};
//     bool DirExists()
static int LUACALL wxLua_wxFileName_DirExists(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call DirExists
    bool returns = (self->DirExists());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_DirName[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_DirName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_DirName[1] = {{ wxLua_wxFileName_DirName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_DirName }};
//     static wxFileName DirName(const wxString& dir)
static int LUACALL wxLua_wxFileName_DirName(lua_State *L)
{
    // const wxString dir
    const wxString dir = wxlua_getwxStringtype(L, 1);
    // call DirName
    // allocate a new object using the copy constructor
    wxFileName* returns = new wxFileName(wxFileName::DirName(dir));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileName((wxFileName*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileName);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_FileExists1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_FileExists1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_FileExists1[1] = {{ wxLua_wxFileName_FileExists1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_FileExists1 }};
//     static bool FileExists(const wxString& file)
static int LUACALL wxLua_wxFileName_FileExists1(lua_State *L)
{
    // const wxString file
    const wxString file = wxlua_getwxStringtype(L, 1);
    // call FileExists
    bool returns = (wxFileName::FileExists(file));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_FileExists[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_FileExists(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_FileExists[1] = {{ wxLua_wxFileName_FileExists, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_FileExists }};
//     bool FileExists()
static int LUACALL wxLua_wxFileName_FileExists(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call FileExists
    bool returns = (self->FileExists());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_FileName[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_FileName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_FileName[1] = {{ wxLua_wxFileName_FileName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_FileName }};
//     static wxFileName FileName(const wxString& file)
static int LUACALL wxLua_wxFileName_FileName(lua_State *L)
{
    // const wxString file
    const wxString file = wxlua_getwxStringtype(L, 1);
    // call FileName
    // allocate a new object using the copy constructor
    wxFileName* returns = new wxFileName(wxFileName::FileName(file));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileName((wxFileName*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileName);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetCwd[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_GetCwd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetCwd[1] = {{ wxLua_wxFileName_GetCwd, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxFileName_GetCwd }};
//     static wxString GetCwd(const wxString& volume = "")
static int LUACALL wxLua_wxFileName_GetCwd(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString volume = ""
    const wxString volume = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call GetCwd
    wxString returns = (wxFileName::GetCwd(volume));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetDirCount[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_GetDirCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetDirCount[1] = {{ wxLua_wxFileName_GetDirCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_GetDirCount }};
//     int GetDirCount() const
static int LUACALL wxLua_wxFileName_GetDirCount(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call GetDirCount
    int returns = (self->GetDirCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxFileName)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetDirs[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_GetDirs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetDirs[1] = {{ wxLua_wxFileName_GetDirs, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_GetDirs }};
// %override wxLua_wxFileName_GetDirs
//     const wxArrayString& GetDirs() const
static int LUACALL wxLua_wxFileName_GetDirs(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call GetDirs
    wxArrayString returns = self->GetDirs();
    // push the result datatype
    wxlua_pushwxArrayStringtable(L, returns);

    return 1;
}


#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxFileName)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetExt[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_GetExt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetExt[1] = {{ wxLua_wxFileName_GetExt, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_GetExt }};
//     wxString GetExt() const
static int LUACALL wxLua_wxFileName_GetExt(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call GetExt
    wxString returns = (self->GetExt());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetForbiddenChars[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_GetForbiddenChars(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetForbiddenChars[1] = {{ wxLua_wxFileName_GetForbiddenChars, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxFileName_GetForbiddenChars }};
//     static wxString GetForbiddenChars(wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_GetForbiddenChars(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 1 ? (wxPathFormat)wxlua_getenumtype(L, 1) : wxPATH_NATIVE);
    // call GetForbiddenChars
    wxString returns = (wxFileName::GetForbiddenChars(format));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetFormat[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_GetFormat(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetFormat[1] = {{ wxLua_wxFileName_GetFormat, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxFileName_GetFormat }};
//     static wxPathFormat GetFormat(wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_GetFormat(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 1 ? (wxPathFormat)wxlua_getenumtype(L, 1) : wxPATH_NATIVE);
    // call GetFormat
    wxPathFormat returns = (wxFileName::GetFormat(format));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetFullName[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_GetFullName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetFullName[1] = {{ wxLua_wxFileName_GetFullName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_GetFullName }};
//     wxString GetFullName() const
static int LUACALL wxLua_wxFileName_GetFullName(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call GetFullName
    wxString returns = (self->GetFullName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetFullPath[] = { &wxluatype_wxFileName, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_GetFullPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetFullPath[1] = {{ wxLua_wxFileName_GetFullPath, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxFileName_GetFullPath }};
//     wxString GetFullPath(wxPathFormat format = wxPATH_NATIVE) const
static int LUACALL wxLua_wxFileName_GetFullPath(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat)wxlua_getenumtype(L, 2) : wxPATH_NATIVE);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call GetFullPath
    wxString returns = (self->GetFullPath(format));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static int LUACALL wxLua_wxFileName_GetHomeDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetHomeDir[1] = {{ wxLua_wxFileName_GetHomeDir, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxString GetHomeDir()
static int LUACALL wxLua_wxFileName_GetHomeDir(lua_State *L)
{
    // call GetHomeDir
    wxString returns = (wxFileName::GetHomeDir());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileName)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetHumanReadableSize[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFileName_GetHumanReadableSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetHumanReadableSize[1] = {{ wxLua_wxFileName_GetHumanReadableSize, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxFileName_GetHumanReadableSize }};
//     %wxchkver_2_8 wxString GetHumanReadableSize(const wxString &nullsize = "Not available", int precision = 1) const
static int LUACALL wxLua_wxFileName_GetHumanReadableSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int precision = 1
    int precision = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 1);
    // const wxString nullsize = "Not available"
    const wxString nullsize = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxT("Not available")));
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call GetHumanReadableSize
    wxString returns = (self->GetHumanReadableSize(nullsize, precision));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileName)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetLongPath[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_GetLongPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetLongPath[1] = {{ wxLua_wxFileName_GetLongPath, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_GetLongPath }};
//     wxString GetLongPath() const
static int LUACALL wxLua_wxFileName_GetLongPath(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call GetLongPath
    wxString returns = (self->GetLongPath());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxFileName)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetModificationTime[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_GetModificationTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetModificationTime[1] = {{ wxLua_wxFileName_GetModificationTime, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_GetModificationTime }};
//     wxDateTime GetModificationTime() const
static int LUACALL wxLua_wxFileName_GetModificationTime(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call GetModificationTime
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->GetModificationTime());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxFileName)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetName[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_GetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetName[1] = {{ wxLua_wxFileName_GetName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_GetName }};
//     wxString GetName() const
static int LUACALL wxLua_wxFileName_GetName(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call GetName
    wxString returns = (self->GetName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetPath[] = { &wxluatype_wxFileName, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_GetPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetPath[1] = {{ wxLua_wxFileName_GetPath, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxFileName_GetPath }};
//     wxString GetPath(int flags = 0, wxPathFormat format = wxPATH_NATIVE) const
static int LUACALL wxLua_wxFileName_GetPath(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 3 ? (wxPathFormat)wxlua_getenumtype(L, 3) : wxPATH_NATIVE);
    // int flags = 0
    int flags = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call GetPath
    wxString returns = (self->GetPath(flags, format));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetPathSeparator[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_GetPathSeparator(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetPathSeparator[1] = {{ wxLua_wxFileName_GetPathSeparator, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxFileName_GetPathSeparator }};
//     static int GetPathSeparator(wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_GetPathSeparator(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 1 ? (wxPathFormat)wxlua_getenumtype(L, 1) : wxPATH_NATIVE);
    // call GetPathSeparator
    int returns = (wxFileName::GetPathSeparator(format));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetPathSeparators[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_GetPathSeparators(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetPathSeparators[1] = {{ wxLua_wxFileName_GetPathSeparators, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxFileName_GetPathSeparators }};
//     static wxString GetPathSeparators(wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_GetPathSeparators(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 1 ? (wxPathFormat)wxlua_getenumtype(L, 1) : wxPATH_NATIVE);
    // call GetPathSeparators
    wxString returns = (wxFileName::GetPathSeparators(format));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetPathTerminators[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_GetPathTerminators(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetPathTerminators[1] = {{ wxLua_wxFileName_GetPathTerminators, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxFileName_GetPathTerminators }};
//     static wxString  GetPathTerminators(wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_GetPathTerminators(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 1 ? (wxPathFormat)wxlua_getenumtype(L, 1) : wxPATH_NATIVE);
    // call GetPathTerminators
    wxString returns = (wxFileName::GetPathTerminators(format));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetPathWithSep[] = { &wxluatype_wxFileName, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_GetPathWithSep(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetPathWithSep[1] = {{ wxLua_wxFileName_GetPathWithSep, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxFileName_GetPathWithSep }};
//     wxString GetPathWithSep(wxPathFormat format = wxPATH_NATIVE ) const
static int LUACALL wxLua_wxFileName_GetPathWithSep(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat)wxlua_getenumtype(L, 2) : wxPATH_NATIVE);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call GetPathWithSep
    wxString returns = (self->GetPathWithSep(format));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetShortPath[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_GetShortPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetShortPath[1] = {{ wxLua_wxFileName_GetShortPath, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_GetShortPath }};
//     wxString GetShortPath() const
static int LUACALL wxLua_wxFileName_GetShortPath(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call GetShortPath
    wxString returns = (self->GetShortPath());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))) && (wxUSE_LONGLONG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetSize1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_GetSize1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetSize1[1] = {{ wxLua_wxFileName_GetSize1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_GetSize1 }};
//         static wxULongLong GetSize(const wxString &file)
static int LUACALL wxLua_wxFileName_GetSize1(lua_State *L)
{
    // const wxString file
    const wxString file = wxlua_getwxStringtype(L, 1);
    // call GetSize
    // allocate a new object using the copy constructor
    wxULongLong* returns = new wxULongLong(wxFileName::GetSize(file));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxULongLong((wxULongLong*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxULongLong);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetSize[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_GetSize(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetSize[1] = {{ wxLua_wxFileName_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_GetSize }};
//         wxULongLong GetSize() const
static int LUACALL wxLua_wxFileName_GetSize(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call GetSize
    // allocate a new object using the copy constructor
    wxULongLong* returns = new wxULongLong(self->GetSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxULongLong((wxULongLong*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxULongLong);

    return 1;
}

#endif // ((wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))) && (wxUSE_LONGLONG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetTimes[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_GetTimes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetTimes[1] = {{ wxLua_wxFileName_GetTimes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_GetTimes }};
// %override wxLua_wxFileName_GetTimes
// bool GetTimes(wxDateTime* dtAccess, wxDateTime* dtMod, wxDateTime* dtCreate) const
static int LUACALL wxLua_wxFileName_GetTimes(lua_State *L)
{
    wxDateTime *dtCreate = new wxDateTime();
    wxDateTime *dtMod = new wxDateTime();
    wxDateTime *dtAccess= new wxDateTime();
    // get this
    wxFileName *self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call GetTimes
    bool returns = self->GetTimes(dtAccess, dtMod, dtCreate);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)dtAccess, new wxLua_wxObject_wxDateTime(dtAccess));
    wxluaO_addgcobject(L, (void*)dtMod, new wxLua_wxObject_wxDateTime(dtMod));
    wxluaO_addgcobject(L, (void*)dtCreate, new wxLua_wxObject_wxDateTime(dtCreate));
    // push the constructed class pointers
    wxluaT_pushuserdatatype(L, dtAccess, wxluatype_wxDateTime);
    wxluaT_pushuserdatatype(L, dtMod, wxluatype_wxDateTime);
    wxluaT_pushuserdatatype(L, dtCreate, wxluatype_wxDateTime);
    // push the result flag
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 4;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetVolume[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_GetVolume(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetVolume[1] = {{ wxLua_wxFileName_GetVolume, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_GetVolume }};
//     wxString GetVolume() const
static int LUACALL wxLua_wxFileName_GetVolume(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call GetVolume
    wxString returns = (self->GetVolume());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_GetVolumeSeparator[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_GetVolumeSeparator(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetVolumeSeparator[1] = {{ wxLua_wxFileName_GetVolumeSeparator, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxFileName_GetVolumeSeparator }};
//     static wxString GetVolumeSeparator(wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_GetVolumeSeparator(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 1 ? (wxPathFormat)wxlua_getenumtype(L, 1) : wxPATH_NATIVE);
    // call GetVolumeSeparator
    wxString returns = (wxFileName::GetVolumeSeparator(format));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_HasExt[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_HasExt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_HasExt[1] = {{ wxLua_wxFileName_HasExt, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_HasExt }};
//     bool HasExt() const
static int LUACALL wxLua_wxFileName_HasExt(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call HasExt
    bool returns = (self->HasExt());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_HasName[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_HasName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_HasName[1] = {{ wxLua_wxFileName_HasName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_HasName }};
//     bool HasName() const
static int LUACALL wxLua_wxFileName_HasName(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call HasName
    bool returns = (self->HasName());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_HasVolume[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_HasVolume(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_HasVolume[1] = {{ wxLua_wxFileName_HasVolume, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_HasVolume }};
//     bool HasVolume() const
static int LUACALL wxLua_wxFileName_HasVolume(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call HasVolume
    bool returns = (self->HasVolume());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_InsertDir[] = { &wxluatype_wxFileName, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_InsertDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_InsertDir[1] = {{ wxLua_wxFileName_InsertDir, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxFileName_InsertDir }};
//     void InsertDir(int before, const wxString& dir)
static int LUACALL wxLua_wxFileName_InsertDir(lua_State *L)
{
    // const wxString dir
    const wxString dir = wxlua_getwxStringtype(L, 3);
    // int before
    int before = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call InsertDir
    self->InsertDir(before, dir);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_IsAbsolute[] = { &wxluatype_wxFileName, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_IsAbsolute(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsAbsolute[1] = {{ wxLua_wxFileName_IsAbsolute, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxFileName_IsAbsolute }};
//     bool IsAbsolute(wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_IsAbsolute(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat)wxlua_getenumtype(L, 2) : wxPATH_NATIVE);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call IsAbsolute
    bool returns = (self->IsAbsolute(format));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_IsCaseSensitive[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_IsCaseSensitive(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsCaseSensitive[1] = {{ wxLua_wxFileName_IsCaseSensitive, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxFileName_IsCaseSensitive }};
//     static bool IsCaseSensitive(wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_IsCaseSensitive(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 1 ? (wxPathFormat)wxlua_getenumtype(L, 1) : wxPATH_NATIVE);
    // call IsCaseSensitive
    bool returns = (wxFileName::IsCaseSensitive(format));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_IsDir[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_IsDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsDir[1] = {{ wxLua_wxFileName_IsDir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsDir }};
//     bool IsDir() const
static int LUACALL wxLua_wxFileName_IsDir(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call IsDir
    bool returns = (self->IsDir());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_IsDirReadable1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_IsDirReadable1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsDirReadable1[1] = {{ wxLua_wxFileName_IsDirReadable1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsDirReadable1 }};
//         static bool IsDirReadable(const wxString &path)
static int LUACALL wxLua_wxFileName_IsDirReadable1(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 1);
    // call IsDirReadable
    bool returns = (wxFileName::IsDirReadable(path));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_IsDirReadable[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_IsDirReadable(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsDirReadable[1] = {{ wxLua_wxFileName_IsDirReadable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsDirReadable }};
//         bool IsDirReadable() const
static int LUACALL wxLua_wxFileName_IsDirReadable(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call IsDirReadable
    bool returns = (self->IsDirReadable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_IsDirWritable1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_IsDirWritable1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsDirWritable1[1] = {{ wxLua_wxFileName_IsDirWritable1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsDirWritable1 }};
//         static bool IsDirWritable(const wxString &path)
static int LUACALL wxLua_wxFileName_IsDirWritable1(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 1);
    // call IsDirWritable
    bool returns = (wxFileName::IsDirWritable(path));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_IsDirWritable[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_IsDirWritable(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsDirWritable[1] = {{ wxLua_wxFileName_IsDirWritable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsDirWritable }};
//         bool IsDirWritable() const
static int LUACALL wxLua_wxFileName_IsDirWritable(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call IsDirWritable
    bool returns = (self->IsDirWritable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_IsFileExecutable1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_IsFileExecutable1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsFileExecutable1[1] = {{ wxLua_wxFileName_IsFileExecutable1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsFileExecutable1 }};
//         static bool IsFileExecutable(const wxString &path)
static int LUACALL wxLua_wxFileName_IsFileExecutable1(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 1);
    // call IsFileExecutable
    bool returns = (wxFileName::IsFileExecutable(path));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_IsFileExecutable[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_IsFileExecutable(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsFileExecutable[1] = {{ wxLua_wxFileName_IsFileExecutable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsFileExecutable }};
//         bool IsFileExecutable() const
static int LUACALL wxLua_wxFileName_IsFileExecutable(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call IsFileExecutable
    bool returns = (self->IsFileExecutable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_IsFileReadable1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_IsFileReadable1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsFileReadable1[1] = {{ wxLua_wxFileName_IsFileReadable1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsFileReadable1 }};
//         static bool IsFileReadable(const wxString &path)
static int LUACALL wxLua_wxFileName_IsFileReadable1(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 1);
    // call IsFileReadable
    bool returns = (wxFileName::IsFileReadable(path));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_IsFileReadable[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_IsFileReadable(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsFileReadable[1] = {{ wxLua_wxFileName_IsFileReadable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsFileReadable }};
//         bool IsFileReadable() const
static int LUACALL wxLua_wxFileName_IsFileReadable(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call IsFileReadable
    bool returns = (self->IsFileReadable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_IsFileWritable1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_IsFileWritable1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsFileWritable1[1] = {{ wxLua_wxFileName_IsFileWritable1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsFileWritable1 }};
//         static bool IsFileWritable(const wxString &path)
static int LUACALL wxLua_wxFileName_IsFileWritable1(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 1);
    // call IsFileWritable
    bool returns = (wxFileName::IsFileWritable(path));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_IsFileWritable[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_IsFileWritable(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsFileWritable[1] = {{ wxLua_wxFileName_IsFileWritable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsFileWritable }};
//         bool IsFileWritable() const
static int LUACALL wxLua_wxFileName_IsFileWritable(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call IsFileWritable
    bool returns = (self->IsFileWritable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_IsOk[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsOk[1] = {{ wxLua_wxFileName_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsOk }};
//     bool IsOk() const
static int LUACALL wxLua_wxFileName_IsOk(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_IsPathSeparator[] = { &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_IsPathSeparator(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsPathSeparator[1] = {{ wxLua_wxFileName_IsPathSeparator, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxFileName_IsPathSeparator }};
//     static bool IsPathSeparator(int ch, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_IsPathSeparator(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat)wxlua_getenumtype(L, 2) : wxPATH_NATIVE);
    // int ch
    int ch = (int)wxlua_getnumbertype(L, 1);
    // call IsPathSeparator
    bool returns = (wxFileName::IsPathSeparator(ch, format));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_IsRelative[] = { &wxluatype_wxFileName, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_IsRelative(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsRelative[1] = {{ wxLua_wxFileName_IsRelative, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxFileName_IsRelative }};
//     bool IsRelative(wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_IsRelative(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat)wxlua_getenumtype(L, 2) : wxPATH_NATIVE);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call IsRelative
    bool returns = (self->IsRelative(format));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_MakeAbsolute[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_MakeAbsolute(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_MakeAbsolute[1] = {{ wxLua_wxFileName_MakeAbsolute, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxFileName_MakeAbsolute }};
//     bool MakeAbsolute(const wxString& cwd = "", wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_MakeAbsolute(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 3 ? (wxPathFormat)wxlua_getenumtype(L, 3) : wxPATH_NATIVE);
    // const wxString cwd = ""
    const wxString cwd = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call MakeAbsolute
    bool returns = (self->MakeAbsolute(cwd, format));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_MakeRelativeTo[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_MakeRelativeTo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_MakeRelativeTo[1] = {{ wxLua_wxFileName_MakeRelativeTo, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxFileName_MakeRelativeTo }};
//     bool MakeRelativeTo(const wxString& pathBase = "", wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_MakeRelativeTo(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 3 ? (wxPathFormat)wxlua_getenumtype(L, 3) : wxPATH_NATIVE);
    // const wxString pathBase = ""
    const wxString pathBase = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call MakeRelativeTo
    bool returns = (self->MakeRelativeTo(pathBase, format));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_Mkdir1[] = { &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFileName_Mkdir1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_Mkdir1[1] = {{ wxLua_wxFileName_Mkdir1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 3, s_wxluatypeArray_wxLua_wxFileName_Mkdir1 }};
//     static bool Mkdir(const wxString& dir, int perm = 4095, int flags = 0)
static int LUACALL wxLua_wxFileName_Mkdir1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int perm = 4095
    int perm = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 4095);
    // const wxString dir
    const wxString dir = wxlua_getwxStringtype(L, 1);
    // call Mkdir
    bool returns = (wxFileName::Mkdir(dir, perm, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_Mkdir[] = { &wxluatype_wxFileName, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFileName_Mkdir(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_Mkdir[1] = {{ wxLua_wxFileName_Mkdir, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxFileName_Mkdir }};
//     bool Mkdir(int perm = 4095, int flags = 0)
static int LUACALL wxLua_wxFileName_Mkdir(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int perm = 4095
    int perm = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 4095);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call Mkdir
    bool returns = (self->Mkdir(perm, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_Normalize[] = { &wxluatype_wxFileName, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_Normalize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_Normalize[1] = {{ wxLua_wxFileName_Normalize, WXLUAMETHOD_METHOD, 1, 4, s_wxluatypeArray_wxLua_wxFileName_Normalize }};
//     bool Normalize(int flags = wxPATH_NORM_ALL, const wxString& cwd = wxEmptyString, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_Normalize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 4 ? (wxPathFormat)wxlua_getenumtype(L, 4) : wxPATH_NATIVE);
    // const wxString cwd = wxEmptyString
    const wxString cwd = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // int flags = wxPATH_NORM_ALL
    int flags = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxPATH_NORM_ALL);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call Normalize
    bool returns = (self->Normalize(flags, cwd, format));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_PrependDir[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_PrependDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_PrependDir[1] = {{ wxLua_wxFileName_PrependDir, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileName_PrependDir }};
//     void PrependDir(const wxString& dir)
static int LUACALL wxLua_wxFileName_PrependDir(lua_State *L)
{
    // const wxString dir
    const wxString dir = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call PrependDir
    self->PrependDir(dir);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_RemoveDir[] = { &wxluatype_wxFileName, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFileName_RemoveDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_RemoveDir[1] = {{ wxLua_wxFileName_RemoveDir, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileName_RemoveDir }};
//     void RemoveDir(int pos)
static int LUACALL wxLua_wxFileName_RemoveDir(lua_State *L)
{
    // int pos
    int pos = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call RemoveDir
    self->RemoveDir(pos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_RemoveLastDir[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_RemoveLastDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_RemoveLastDir[1] = {{ wxLua_wxFileName_RemoveLastDir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_RemoveLastDir }};
//     void RemoveLastDir()
static int LUACALL wxLua_wxFileName_RemoveLastDir(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call RemoveLastDir
    self->RemoveLastDir();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_Rmdir1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_Rmdir1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_Rmdir1[1] = {{ wxLua_wxFileName_Rmdir1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_Rmdir1 }};
//     static bool Rmdir(const wxString& dir)
static int LUACALL wxLua_wxFileName_Rmdir1(lua_State *L)
{
    // const wxString dir
    const wxString dir = wxlua_getwxStringtype(L, 1);
    // call Rmdir
    bool returns = (wxFileName::Rmdir(dir));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_Rmdir[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_Rmdir(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_Rmdir[1] = {{ wxLua_wxFileName_Rmdir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_Rmdir }};
//     bool Rmdir()
static int LUACALL wxLua_wxFileName_Rmdir(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call Rmdir
    bool returns = (self->Rmdir());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_SameAs[] = { &wxluatype_wxFileName, &wxluatype_wxFileName, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_SameAs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_SameAs[1] = {{ wxLua_wxFileName_SameAs, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFileName_SameAs }};
//     bool SameAs(const wxFileName& filepath, wxPathFormat format = wxPATH_NATIVE) const
static int LUACALL wxLua_wxFileName_SameAs(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 3 ? (wxPathFormat)wxlua_getenumtype(L, 3) : wxPATH_NATIVE);
    // const wxFileName filepath
    const wxFileName * filepath = (const wxFileName *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFileName);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call SameAs
    bool returns = (self->SameAs(*filepath, format));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_SetCwd1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_SetCwd1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_SetCwd1[1] = {{ wxLua_wxFileName_SetCwd1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_SetCwd1 }};
//     static bool SetCwd(const wxString& cwd)
static int LUACALL wxLua_wxFileName_SetCwd1(lua_State *L)
{
    // const wxString cwd
    const wxString cwd = wxlua_getwxStringtype(L, 1);
    // call SetCwd
    bool returns = (wxFileName::SetCwd(cwd));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_SetCwd[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_SetCwd(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_SetCwd[1] = {{ wxLua_wxFileName_SetCwd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_SetCwd }};
//     bool SetCwd()
static int LUACALL wxLua_wxFileName_SetCwd(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call SetCwd
    bool returns = (self->SetCwd());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_SetEmptyExt[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_SetEmptyExt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_SetEmptyExt[1] = {{ wxLua_wxFileName_SetEmptyExt, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_SetEmptyExt }};
//     void SetEmptyExt()
static int LUACALL wxLua_wxFileName_SetEmptyExt(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call SetEmptyExt
    self->SetEmptyExt();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_SetExt[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_SetExt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_SetExt[1] = {{ wxLua_wxFileName_SetExt, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileName_SetExt }};
//     void SetExt(const wxString& ext)
static int LUACALL wxLua_wxFileName_SetExt(lua_State *L)
{
    // const wxString ext
    const wxString ext = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call SetExt
    self->SetExt(ext);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_SetFullName[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_SetFullName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_SetFullName[1] = {{ wxLua_wxFileName_SetFullName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileName_SetFullName }};
//     void SetFullName(const wxString& fullname)
static int LUACALL wxLua_wxFileName_SetFullName(lua_State *L)
{
    // const wxString fullname
    const wxString fullname = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call SetFullName
    self->SetFullName(fullname);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_SetName[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_SetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_SetName[1] = {{ wxLua_wxFileName_SetName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileName_SetName }};
//     void SetName(const wxString& name)
static int LUACALL wxLua_wxFileName_SetName(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call SetName
    self->SetName(name);

    return 0;
}


#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxFileName)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_SetTimes[] = { &wxluatype_wxFileName, &wxluatype_wxDateTime, &wxluatype_wxDateTime, &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxFileName_SetTimes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_SetTimes[1] = {{ wxLua_wxFileName_SetTimes, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxFileName_SetTimes }};
//     bool SetTimes(const wxDateTime* dtAccess, const wxDateTime* dtMod, const wxDateTime* dtCreate)
static int LUACALL wxLua_wxFileName_SetTimes(lua_State *L)
{
    // const wxDateTime dtCreate
    const wxDateTime * dtCreate = (const wxDateTime *)wxluaT_getuserdatatype(L, 4, wxluatype_wxDateTime);
    // const wxDateTime dtMod
    const wxDateTime * dtMod = (const wxDateTime *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDateTime);
    // const wxDateTime dtAccess
    const wxDateTime * dtAccess = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call SetTimes
    bool returns = (self->SetTimes(dtAccess, dtMod, dtCreate));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxFileName)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_SetVolume[] = { &wxluatype_wxFileName, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileName_SetVolume(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_SetVolume[1] = {{ wxLua_wxFileName_SetVolume, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileName_SetVolume }};
//     void SetVolume(const wxString& volume)
static int LUACALL wxLua_wxFileName_SetVolume(lua_State *L)
{
    // const wxString volume
    const wxString volume = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call SetVolume
    self->SetVolume(volume);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_SplitPath[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_SplitPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_SplitPath[1] = {{ wxLua_wxFileName_SplitPath, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxFileName_SplitPath }};
// %override wxLua_wxFileName_SplitPath
// static void SplitPath(const wxString& fullpath, wxString* volume, wxString* path, wxString* name, wxString* ext, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_SplitPath(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat)wxlua_getenumtype(L, 2) : wxPATH_NATIVE);
    wxString ext;
    wxString name;
    wxString path;
    // const wxString& fullpath
    wxString fullpath = wxlua_getwxStringtype(L, 1);
    // call SplitPath
    wxFileName::SplitPath(fullpath, &path, &name, &ext, format);
    // push the result strings
    wxlua_pushwxString(L, path);
    wxlua_pushwxString(L, name);
    wxlua_pushwxString(L, ext);
    // return the number of parameters
    return 3;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_SplitPathVolume[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_SplitPathVolume(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_SplitPathVolume[1] = {{ wxLua_wxFileName_SplitPathVolume, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxFileName_SplitPathVolume }};
// %override wxLua_wxFileName_SplitPathVolume
// static void SplitPath(const wxString& fullpath, wxString* volume, wxString* path, wxString* name, wxString* ext, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_SplitPathVolume(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat)wxlua_getenumtype(L, 2) : wxPATH_NATIVE);
    wxString ext;
    wxString name;
    wxString path;
    wxString volume;
    // const wxString& fullpath
    wxString fullpath = wxlua_getwxStringtype(L, 1);
    // call SplitPath
    wxFileName::SplitPath(fullpath, &volume, &path, &name, &ext, format);
    // push the result strings
    wxlua_pushwxString(L, volume);
    wxlua_pushwxString(L, path);
    wxlua_pushwxString(L, name);
    wxlua_pushwxString(L, ext);
    // return the number of parameters
    return 4;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_SplitVolume[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_SplitVolume(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_SplitVolume[1] = {{ wxLua_wxFileName_SplitVolume, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxFileName_SplitVolume }};
// %override wxLua_wxFileName_SplitVolume
//     static void SplitVolume(const wxString& fullpath, wxString* volume, wxString* path, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_SplitVolume(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat)wxlua_getenumtype(L, 2) : wxPATH_NATIVE);
    // const wxString fullpath
    const wxString fullpath = wxlua_getwxStringtype(L, 1);
    wxString volume;
    wxString path;
    // call SplitVolume
    wxFileName::SplitVolume(fullpath, &volume, &path, format);
    // push the result strings
    wxlua_pushwxString(L, volume);
    wxlua_pushwxString(L, path);
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_Touch[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_Touch(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_Touch[1] = {{ wxLua_wxFileName_Touch, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_Touch }};
//     bool Touch()
static int LUACALL wxLua_wxFileName_Touch(lua_State *L)
{
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call Touch
    bool returns = (self->Touch());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_delete[] = { &wxluatype_wxFileName, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFileName_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_op_eq[] = { &wxluatype_wxFileName, &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_op_eq[1] = {{ wxLua_wxFileName_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileName_op_eq }};
//     %operator bool operator==(const wxFileName& filename) const
static int LUACALL wxLua_wxFileName_op_eq(lua_State *L)
{
    // const wxFileName filename
    const wxFileName * filename = (const wxFileName *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFileName);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call op_eq
    bool returns = ((*self)==(*filename));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_op_set[] = { &wxluatype_wxFileName, &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_op_set[1] = {{ wxLua_wxFileName_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileName_op_set }};
//     %operator wxFileName& operator=(const wxFileName& filename)
static int LUACALL wxLua_wxFileName_op_set(lua_State *L)
{
    // const wxFileName filename
    const wxFileName * filename = (const wxFileName *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFileName);
    // get this
    wxFileName * self = (wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call op_set
    (*self)=(*filename);
    wxFileName* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileName);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_constructor4[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_constructor4(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_constructor4[1] = {{ wxLua_wxFileName_constructor4, WXLUAMETHOD_CONSTRUCTOR, 4, 5, s_wxluatypeArray_wxLua_wxFileName_constructor4 }};
//     wxFileName(const wxString& volume, const wxString& path, const wxString& name, const wxString& ext, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_constructor4(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 5 ? (wxPathFormat)wxlua_getenumtype(L, 5) : wxPATH_NATIVE);
    // const wxString ext
    const wxString ext = wxlua_getwxStringtype(L, 4);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 3);
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // const wxString volume
    const wxString volume = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxFileName* returns = new wxFileName(volume, path, name, ext, format);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileName((wxFileName*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileName);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_constructor3[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_constructor3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_constructor3[1] = {{ wxLua_wxFileName_constructor3, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxFileName_constructor3 }};
//     wxFileName(const wxString& path, const wxString& name, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_constructor3(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 3 ? (wxPathFormat)wxlua_getenumtype(L, 3) : wxPATH_NATIVE);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxFileName* returns = new wxFileName(path, name, format);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileName((wxFileName*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileName);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_constructor2[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFileName_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_constructor2[1] = {{ wxLua_wxFileName_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxFileName_constructor2 }};
//     wxFileName(const wxString& fullpath, wxPathFormat format = wxPATH_NATIVE)
static int LUACALL wxLua_wxFileName_constructor2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPathFormat format = wxPATH_NATIVE
    wxPathFormat format = (argCount >= 2 ? (wxPathFormat)wxlua_getenumtype(L, 2) : wxPATH_NATIVE);
    // const wxString fullpath
    const wxString fullpath = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxFileName* returns = new wxFileName(fullpath, format);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileName((wxFileName*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileName);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileName_constructor1[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileName_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_constructor1[1] = {{ wxLua_wxFileName_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFileName_constructor1 }};
//     wxFileName(const wxFileName& filename)
static int LUACALL wxLua_wxFileName_constructor1(lua_State *L)
{
    // const wxFileName filename
    const wxFileName * filename = (const wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call constructor
    wxFileName* returns = new wxFileName(*filename);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileName((wxFileName*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileName);

    return 1;
}

static int LUACALL wxLua_wxFileName_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_constructor[1] = {{ wxLua_wxFileName_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxFileName()
static int LUACALL wxLua_wxFileName_constructor(lua_State *L)
{
    // call constructor
    wxFileName* returns = new wxFileName();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileName((wxFileName*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileName);

    return 1;
}




#if (wxLUA_USE_wxFileName)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_Assign_overload[] =
{
    { wxLua_wxFileName_Assign4, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxFileName_Assign4 },
    { wxLua_wxFileName_Assign3, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxFileName_Assign3 },
    { wxLua_wxFileName_Assign2, WXLUAMETHOD_METHOD, 5, 6, s_wxluatypeArray_wxLua_wxFileName_Assign2 },
    { wxLua_wxFileName_Assign1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFileName_Assign1 },
    { wxLua_wxFileName_Assign, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileName_Assign },
};
static int s_wxluafunc_wxLua_wxFileName_Assign_overload_count = sizeof(s_wxluafunc_wxLua_wxFileName_Assign_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxFileName)

#if ((wxLUA_USE_wxFile && wxUSE_FILE) && ((wxCHECK_VERSION(2,8,0) && wxUSE_FILE) && (wxLUA_USE_wxFileName)))||((wxCHECK_VERSION(2,8,0) && (wxUSE_FILE || wxUSE_FFILE )) && (wxLUA_USE_wxFileName))||(((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileName)) && (wxLUA_USE_wxFile && wxUSE_FILE))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_AssignTempFileName_overload[] =
{

#if (wxLUA_USE_wxFile && wxUSE_FILE) && ((wxCHECK_VERSION(2,8,0) && wxUSE_FILE) && (wxLUA_USE_wxFileName))
    { wxLua_wxFileName_AssignTempFileName2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxFileName_AssignTempFileName2 },
#endif // (wxLUA_USE_wxFile && wxUSE_FILE) && ((wxCHECK_VERSION(2,8,0) && wxUSE_FILE) && (wxLUA_USE_wxFileName))

#if (wxCHECK_VERSION(2,8,0) && (wxUSE_FILE || wxUSE_FFILE )) && (wxLUA_USE_wxFileName)
    { wxLua_wxFileName_AssignTempFileName1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileName_AssignTempFileName1 },
#endif // (wxCHECK_VERSION(2,8,0) && (wxUSE_FILE || wxUSE_FFILE )) && (wxLUA_USE_wxFileName)

#if ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileName)) && (wxLUA_USE_wxFile && wxUSE_FILE)
    { wxLua_wxFileName_AssignTempFileName, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFileName_AssignTempFileName },
#endif // ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileName)) && (wxLUA_USE_wxFile && wxUSE_FILE)
};
static int s_wxluafunc_wxLua_wxFileName_AssignTempFileName_overload_count = sizeof(s_wxluafunc_wxLua_wxFileName_AssignTempFileName_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxFile && wxUSE_FILE) && ((wxCHECK_VERSION(2,8,0) && wxUSE_FILE) && (wxLUA_USE_wxFileName)))||((wxCHECK_VERSION(2,8,0) && (wxUSE_FILE || wxUSE_FFILE )) && (wxLUA_USE_wxFileName))||(((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileName)) && (wxLUA_USE_wxFile && wxUSE_FILE))

#if (wxLUA_USE_wxFileName)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_DirExists_overload[] =
{
    { wxLua_wxFileName_DirExists1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_DirExists1 },
    { wxLua_wxFileName_DirExists, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_DirExists },
};
static int s_wxluafunc_wxLua_wxFileName_DirExists_overload_count = sizeof(s_wxluafunc_wxLua_wxFileName_DirExists_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_FileExists_overload[] =
{
    { wxLua_wxFileName_FileExists1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_FileExists1 },
    { wxLua_wxFileName_FileExists, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_FileExists },
};
static int s_wxluafunc_wxLua_wxFileName_FileExists_overload_count = sizeof(s_wxluafunc_wxLua_wxFileName_FileExists_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxFileName)

#if (((wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))) && (wxUSE_LONGLONG))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_GetSize_overload[] =
{

#if ((wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))) && (wxUSE_LONGLONG)
    { wxLua_wxFileName_GetSize1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_GetSize1 },
#endif // ((wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))) && (wxUSE_LONGLONG)

#if ((wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))) && (wxUSE_LONGLONG)
    { wxLua_wxFileName_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_GetSize },
#endif // ((wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))) && (wxUSE_LONGLONG)
};
static int s_wxluafunc_wxLua_wxFileName_GetSize_overload_count = sizeof(s_wxluafunc_wxLua_wxFileName_GetSize_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))) && (wxUSE_LONGLONG))

#if ((wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsDirReadable_overload[] =
{

#if (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))
    { wxLua_wxFileName_IsDirReadable1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsDirReadable1 },
#endif // (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))
    { wxLua_wxFileName_IsDirReadable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsDirReadable },
#endif // (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))
};
static int s_wxluafunc_wxLua_wxFileName_IsDirReadable_overload_count = sizeof(s_wxluafunc_wxLua_wxFileName_IsDirReadable_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsDirWritable_overload[] =
{

#if (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))
    { wxLua_wxFileName_IsDirWritable1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsDirWritable1 },
#endif // (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))
    { wxLua_wxFileName_IsDirWritable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsDirWritable },
#endif // (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))
};
static int s_wxluafunc_wxLua_wxFileName_IsDirWritable_overload_count = sizeof(s_wxluafunc_wxLua_wxFileName_IsDirWritable_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsFileExecutable_overload[] =
{

#if (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))
    { wxLua_wxFileName_IsFileExecutable1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsFileExecutable1 },
#endif // (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))
    { wxLua_wxFileName_IsFileExecutable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsFileExecutable },
#endif // (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))
};
static int s_wxluafunc_wxLua_wxFileName_IsFileExecutable_overload_count = sizeof(s_wxluafunc_wxLua_wxFileName_IsFileExecutable_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsFileReadable_overload[] =
{

#if (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))
    { wxLua_wxFileName_IsFileReadable1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsFileReadable1 },
#endif // (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))
    { wxLua_wxFileName_IsFileReadable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsFileReadable },
#endif // (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))
};
static int s_wxluafunc_wxLua_wxFileName_IsFileReadable_overload_count = sizeof(s_wxluafunc_wxLua_wxFileName_IsFileReadable_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_IsFileWritable_overload[] =
{

#if (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))
    { wxLua_wxFileName_IsFileWritable1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsFileWritable1 },
#endif // (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))
    { wxLua_wxFileName_IsFileWritable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_IsFileWritable },
#endif // (wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))
};
static int s_wxluafunc_wxLua_wxFileName_IsFileWritable_overload_count = sizeof(s_wxluafunc_wxLua_wxFileName_IsFileWritable_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxFileName)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_Mkdir_overload[] =
{
    { wxLua_wxFileName_Mkdir1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 3, s_wxluatypeArray_wxLua_wxFileName_Mkdir1 },
    { wxLua_wxFileName_Mkdir, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxFileName_Mkdir },
};
static int s_wxluafunc_wxLua_wxFileName_Mkdir_overload_count = sizeof(s_wxluafunc_wxLua_wxFileName_Mkdir_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_Rmdir_overload[] =
{
    { wxLua_wxFileName_Rmdir1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_Rmdir1 },
    { wxLua_wxFileName_Rmdir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_Rmdir },
};
static int s_wxluafunc_wxLua_wxFileName_Rmdir_overload_count = sizeof(s_wxluafunc_wxLua_wxFileName_Rmdir_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_SetCwd_overload[] =
{
    { wxLua_wxFileName_SetCwd1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileName_SetCwd1 },
    { wxLua_wxFileName_SetCwd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileName_SetCwd },
};
static int s_wxluafunc_wxLua_wxFileName_SetCwd_overload_count = sizeof(s_wxluafunc_wxLua_wxFileName_SetCwd_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileName_constructor_overload[] =
{
    { wxLua_wxFileName_constructor4, WXLUAMETHOD_CONSTRUCTOR, 4, 5, s_wxluatypeArray_wxLua_wxFileName_constructor4 },
    { wxLua_wxFileName_constructor3, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxFileName_constructor3 },
    { wxLua_wxFileName_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxFileName_constructor2 },
    { wxLua_wxFileName_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFileName_constructor1 },
    { wxLua_wxFileName_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxFileName_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxFileName_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxFileName)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFileName_methods[] = {
    { "AppendDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_AppendDir, 1, NULL },

#if (wxLUA_USE_wxFileName)
    { "Assign", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_Assign_overload, s_wxluafunc_wxLua_wxFileName_Assign_overload_count, 0 },
#endif // (wxLUA_USE_wxFileName)

    { "AssignCwd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_AssignCwd, 1, NULL },
    { "AssignDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_AssignDir, 1, NULL },
    { "AssignHomeDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_AssignHomeDir, 1, NULL },

#if ((wxLUA_USE_wxFile && wxUSE_FILE) && ((wxCHECK_VERSION(2,8,0) && wxUSE_FILE) && (wxLUA_USE_wxFileName)))||((wxCHECK_VERSION(2,8,0) && (wxUSE_FILE || wxUSE_FFILE )) && (wxLUA_USE_wxFileName))||(((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileName)) && (wxLUA_USE_wxFile && wxUSE_FILE))
    { "AssignTempFileName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_AssignTempFileName_overload, s_wxluafunc_wxLua_wxFileName_AssignTempFileName_overload_count, 0 },
#endif // ((wxLUA_USE_wxFile && wxUSE_FILE) && ((wxCHECK_VERSION(2,8,0) && wxUSE_FILE) && (wxLUA_USE_wxFileName)))||((wxCHECK_VERSION(2,8,0) && (wxUSE_FILE || wxUSE_FFILE )) && (wxLUA_USE_wxFileName))||(((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileName)) && (wxLUA_USE_wxFile && wxUSE_FILE))

    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_Clear, 1, NULL },
    { "ClearExt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_ClearExt, 1, NULL },

#if (wxLUA_USE_wxFileName)
    { "DirExists", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_DirExists_overload, s_wxluafunc_wxLua_wxFileName_DirExists_overload_count, 0 },
#endif // (wxLUA_USE_wxFileName)

    { "DirName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_DirName, 1, NULL },

#if (wxLUA_USE_wxFileName)
    { "FileExists", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_FileExists_overload, s_wxluafunc_wxLua_wxFileName_FileExists_overload_count, 0 },
#endif // (wxLUA_USE_wxFileName)

    { "FileName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_FileName, 1, NULL },
    { "GetCwd", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_GetCwd, 1, NULL },
    { "GetDirCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_GetDirCount, 1, NULL },

#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxFileName)
    { "GetDirs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_GetDirs, 1, NULL },
#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxFileName)

    { "GetExt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_GetExt, 1, NULL },
    { "GetForbiddenChars", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_GetForbiddenChars, 1, NULL },
    { "GetFormat", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_GetFormat, 1, NULL },
    { "GetFullName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_GetFullName, 1, NULL },
    { "GetFullPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_GetFullPath, 1, NULL },
    { "GetHomeDir", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_GetHomeDir, 1, NULL },

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileName)
    { "GetHumanReadableSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_GetHumanReadableSize, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxFileName)

    { "GetLongPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_GetLongPath, 1, NULL },

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxFileName)
    { "GetModificationTime", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_GetModificationTime, 1, NULL },
#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxFileName)

    { "GetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_GetName, 1, NULL },
    { "GetPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_GetPath, 1, NULL },
    { "GetPathSeparator", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_GetPathSeparator, 1, NULL },
    { "GetPathSeparators", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_GetPathSeparators, 1, NULL },
    { "GetPathTerminators", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_GetPathTerminators, 1, NULL },
    { "GetPathWithSep", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_GetPathWithSep, 1, NULL },
    { "GetShortPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_GetShortPath, 1, NULL },

#if (((wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))) && (wxUSE_LONGLONG))
    { "GetSize", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_GetSize_overload, s_wxluafunc_wxLua_wxFileName_GetSize_overload_count, 0 },
#endif // (((wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0))) && (wxUSE_LONGLONG))

    { "GetTimes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_GetTimes, 1, NULL },
    { "GetVolume", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_GetVolume, 1, NULL },
    { "GetVolumeSeparator", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_GetVolumeSeparator, 1, NULL },
    { "HasExt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_HasExt, 1, NULL },
    { "HasName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_HasName, 1, NULL },
    { "HasVolume", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_HasVolume, 1, NULL },
    { "InsertDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_InsertDir, 1, NULL },
    { "IsAbsolute", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_IsAbsolute, 1, NULL },
    { "IsCaseSensitive", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_IsCaseSensitive, 1, NULL },
    { "IsDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_IsDir, 1, NULL },

#if ((wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0)))
    { "IsDirReadable", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_IsDirReadable_overload, s_wxluafunc_wxLua_wxFileName_IsDirReadable_overload_count, 0 },
    { "IsDirWritable", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_IsDirWritable_overload, s_wxluafunc_wxLua_wxFileName_IsDirWritable_overload_count, 0 },
    { "IsFileExecutable", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_IsFileExecutable_overload, s_wxluafunc_wxLua_wxFileName_IsFileExecutable_overload_count, 0 },
    { "IsFileReadable", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_IsFileReadable_overload, s_wxluafunc_wxLua_wxFileName_IsFileReadable_overload_count, 0 },
    { "IsFileWritable", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_IsFileWritable_overload, s_wxluafunc_wxLua_wxFileName_IsFileWritable_overload_count, 0 },
#endif // ((wxLUA_USE_wxFileName) && (wxCHECK_VERSION(2,8,0)))

    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_IsOk, 1, NULL },
    { "IsPathSeparator", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_IsPathSeparator, 1, NULL },
    { "IsRelative", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_IsRelative, 1, NULL },
    { "MakeAbsolute", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_MakeAbsolute, 1, NULL },
    { "MakeRelativeTo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_MakeRelativeTo, 1, NULL },

#if (wxLUA_USE_wxFileName)
    { "Mkdir", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_Mkdir_overload, s_wxluafunc_wxLua_wxFileName_Mkdir_overload_count, 0 },
#endif // (wxLUA_USE_wxFileName)

    { "Normalize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_Normalize, 1, NULL },
    { "PrependDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_PrependDir, 1, NULL },
    { "RemoveDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_RemoveDir, 1, NULL },
    { "RemoveLastDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_RemoveLastDir, 1, NULL },

#if (wxLUA_USE_wxFileName)
    { "Rmdir", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_Rmdir_overload, s_wxluafunc_wxLua_wxFileName_Rmdir_overload_count, 0 },
#endif // (wxLUA_USE_wxFileName)

    { "SameAs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_SameAs, 1, NULL },

#if (wxLUA_USE_wxFileName)
    { "SetCwd", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_SetCwd_overload, s_wxluafunc_wxLua_wxFileName_SetCwd_overload_count, 0 },
#endif // (wxLUA_USE_wxFileName)

    { "SetEmptyExt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_SetEmptyExt, 1, NULL },
    { "SetExt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_SetExt, 1, NULL },
    { "SetFullName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_SetFullName, 1, NULL },
    { "SetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_SetName, 1, NULL },

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxFileName)
    { "SetTimes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_SetTimes, 1, NULL },
#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && (wxLUA_USE_wxFileName)

    { "SetVolume", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_SetVolume, 1, NULL },
    { "SplitPath", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_SplitPath, 1, NULL },
    { "SplitPathVolume", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_SplitPathVolume, 1, NULL },
    { "SplitVolume", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileName_SplitVolume, 1, NULL },
    { "Touch", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_Touch, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFileName_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_op_eq, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileName_op_set, 1, NULL },

#if (wxLUA_USE_wxFileName)
    { "wxFileName", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFileName_constructor_overload, s_wxluafunc_wxLua_wxFileName_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxFileName)

    { 0, 0, 0, 0 },
};

int wxFileName_methodCount = sizeof(wxFileName_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxFileName


#if wxLUA_USE_wxFile && wxUSE_FILE
// ---------------------------------------------------------------------------
// Bind class wxFile
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFile'
int wxluatype_wxFile = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_Access[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFile_Access(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_Access[1] = {{ wxLua_wxFile_Access, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxFile_Access }};
//     static bool Access(const wxString& name, wxFile::OpenMode mode)
static int LUACALL wxLua_wxFile_Access(lua_State *L)
{
    // wxFile::OpenMode mode
    wxFile::OpenMode mode = (wxFile::OpenMode)wxlua_getenumtype(L, 2);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call Access
    bool returns = (wxFile::Access(name, mode));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_Attach[] = { &wxluatype_wxFile, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFile_Attach(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_Attach[1] = {{ wxLua_wxFile_Attach, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFile_Attach }};
//     void Attach(int fd)
static int LUACALL wxLua_wxFile_Attach(lua_State *L)
{
    // int fd
    int fd = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxFile * self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call Attach
    self->Attach(fd);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_Close[] = { &wxluatype_wxFile, NULL };
static int LUACALL wxLua_wxFile_Close(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_Close[1] = {{ wxLua_wxFile_Close, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFile_Close }};
//     void Close()
static int LUACALL wxLua_wxFile_Close(lua_State *L)
{
    // get this
    wxFile * self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call Close
    self->Close();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_Create[] = { &wxluatype_wxFile, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFile_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_Create[1] = {{ wxLua_wxFile_Create, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxFile_Create }};
//     bool Create(const wxString& filename, bool overwrite = false, int access = wxS_DEFAULT)
static int LUACALL wxLua_wxFile_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int access = wxS_DEFAULT
    int access = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxS_DEFAULT);
    // bool overwrite = false
    bool overwrite = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxFile * self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call Create
    bool returns = (self->Create(filename, overwrite, access));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_Detach[] = { &wxluatype_wxFile, NULL };
static int LUACALL wxLua_wxFile_Detach(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_Detach[1] = {{ wxLua_wxFile_Detach, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFile_Detach }};
//     void Detach()
static int LUACALL wxLua_wxFile_Detach(lua_State *L)
{
    // get this
    wxFile * self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call Detach
    self->Detach();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_Eof[] = { &wxluatype_wxFile, NULL };
static int LUACALL wxLua_wxFile_Eof(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_Eof[1] = {{ wxLua_wxFile_Eof, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFile_Eof }};
//     bool Eof() const
static int LUACALL wxLua_wxFile_Eof(lua_State *L)
{
    // get this
    wxFile * self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call Eof
    bool returns = (self->Eof());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_Exists[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFile_Exists(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_Exists[1] = {{ wxLua_wxFile_Exists, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFile_Exists }};
//     static bool Exists(const wxString& name)
static int LUACALL wxLua_wxFile_Exists(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call Exists
    bool returns = (wxFile::Exists(name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_Flush[] = { &wxluatype_wxFile, NULL };
static int LUACALL wxLua_wxFile_Flush(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_Flush[1] = {{ wxLua_wxFile_Flush, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFile_Flush }};
//     bool Flush()
static int LUACALL wxLua_wxFile_Flush(lua_State *L)
{
    // get this
    wxFile * self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call Flush
    bool returns = (self->Flush());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_GetKind[] = { &wxluatype_wxFile, NULL };
static int LUACALL wxLua_wxFile_GetKind(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_GetKind[1] = {{ wxLua_wxFile_GetKind, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFile_GetKind }};
//     wxFileKind GetKind() const
static int LUACALL wxLua_wxFile_GetKind(lua_State *L)
{
    // get this
    wxFile * self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call GetKind
    wxFileKind returns = (self->GetKind());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_IsOpened[] = { &wxluatype_wxFile, NULL };
static int LUACALL wxLua_wxFile_IsOpened(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_IsOpened[1] = {{ wxLua_wxFile_IsOpened, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFile_IsOpened }};
//     bool IsOpened() const
static int LUACALL wxLua_wxFile_IsOpened(lua_State *L)
{
    // get this
    wxFile * self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call IsOpened
    bool returns = (self->IsOpened());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_Length[] = { &wxluatype_wxFile, NULL };
static int LUACALL wxLua_wxFile_Length(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_Length[1] = {{ wxLua_wxFile_Length, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFile_Length }};
//     wxFileOffset Length() const
static int LUACALL wxLua_wxFile_Length(lua_State *L)
{
    // get this
    wxFile * self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call Length
    wxFileOffset returns = (self->Length());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_Open[] = { &wxluatype_wxFile, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFile_Open(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_Open[1] = {{ wxLua_wxFile_Open, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFile_Open }};
//     bool Open(const wxString& filename, wxFile::OpenMode mode = wxFile::read)
static int LUACALL wxLua_wxFile_Open(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxFile::OpenMode mode = wxFile::read
    wxFile::OpenMode mode = (argCount >= 3 ? (wxFile::OpenMode)wxlua_getenumtype(L, 3) : wxFile::read);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxFile * self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call Open
    bool returns = (self->Open(filename, mode));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_Read[] = { &wxluatype_wxFile, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFile_Read(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_Read[1] = {{ wxLua_wxFile_Read, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFile_Read }};
// %override wxLua_wxFile_Read
// unsigned int Read(void * buffer,  unsigned int count)
static int LUACALL wxLua_wxFile_Read(lua_State *L)
{
    // unsigned int count
    unsigned int count = (unsigned int)wxlua_getintegertype(L, 2);
    // void * buffer
    void *buffer = malloc(count);
    if (buffer != NULL)
    {
        // get this
        wxFile *self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
        // call Read
        unsigned int returns = self->Read(buffer, count);
        // push the result number
        lua_pushnumber(L, returns);
        lua_pushlstring(L, (const char *) buffer, returns);
        free(buffer);
        // return the number of parameters
        return 2;
    }
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_Seek[] = { &wxluatype_wxFile, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFile_Seek(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_Seek[1] = {{ wxLua_wxFile_Seek, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFile_Seek }};
//     wxFileOffset Seek(wxFileOffset offset, wxSeekMode mode = wxFromStart)
static int LUACALL wxLua_wxFile_Seek(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxSeekMode mode = wxFromStart
    wxSeekMode mode = (argCount >= 3 ? (wxSeekMode)wxlua_getenumtype(L, 3) : wxFromStart);
    // wxFileOffset offset
    wxFileOffset offset = (wxFileOffset)wxlua_getuintegertype(L, 2);
    // get this
    wxFile * self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call Seek
    wxFileOffset returns = (self->Seek(offset, mode));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_SeekEnd[] = { &wxluatype_wxFile, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFile_SeekEnd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_SeekEnd[1] = {{ wxLua_wxFile_SeekEnd, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxFile_SeekEnd }};
//     wxFileOffset SeekEnd(wxFileOffset offset = 0)
static int LUACALL wxLua_wxFile_SeekEnd(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxFileOffset offset = 0
    wxFileOffset offset = (argCount >= 2 ? (wxFileOffset)wxlua_getuintegertype(L, 2) : 0);
    // get this
    wxFile * self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call SeekEnd
    wxFileOffset returns = (self->SeekEnd(offset));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_Tell[] = { &wxluatype_wxFile, NULL };
static int LUACALL wxLua_wxFile_Tell(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_Tell[1] = {{ wxLua_wxFile_Tell, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFile_Tell }};
//     wxFileOffset Tell() const
static int LUACALL wxLua_wxFile_Tell(lua_State *L)
{
    // get this
    wxFile * self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call Tell
    wxFileOffset returns = (self->Tell());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_Write1[] = { &wxluatype_wxFile, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFile_Write1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_Write1[1] = {{ wxLua_wxFile_Write1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFile_Write1 }};
//     size_t Write(const wxString &str) //, const wxMBConv& conv = wxConvUTF8)
static int LUACALL wxLua_wxFile_Write1(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 2);
    // get this
    wxFile * self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call Write
    size_t returns = (self->Write(str));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_Write[] = { &wxluatype_wxFile, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFile_Write(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_Write[1] = {{ wxLua_wxFile_Write, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxFile_Write }};
// %override wxLua_wxFile_Write
// unsigned int Write(const void * buffer, unsigned int nbytes)
static int LUACALL wxLua_wxFile_Write(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // unsigned long nbytes
    unsigned long nbytes = (argCount >= 3 ? (unsigned long)wxlua_getintegertype(L, 3) : lua_strlen(L, 2));
    // const void * buffer
    const void *buffer = (const void *)lua_tostring(L, 2);
    // get this
    wxFile *self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call Write
    unsigned int returns = self->Write(buffer, nbytes);
    // push the result number
    lua_pushnumber(L, returns);
    // return the number of parameters
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_delete[] = { &wxluatype_wxFile, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFile_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_fd[] = { &wxluatype_wxFile, NULL };
static int LUACALL wxLua_wxFile_fd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_fd[1] = {{ wxLua_wxFile_fd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFile_fd }};
//     int fd() const
static int LUACALL wxLua_wxFile_fd(lua_State *L)
{
    // get this
    wxFile * self = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call fd
    int returns = (self->fd());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFile_constructor1[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFile_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_constructor1[1] = {{ wxLua_wxFile_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxFile_constructor1 }};
//     wxFile(const wxString& filename, wxFile::OpenMode mode = wxFile::read)
static int LUACALL wxLua_wxFile_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxFile::OpenMode mode = wxFile::read
    wxFile::OpenMode mode = (argCount >= 2 ? (wxFile::OpenMode)wxlua_getenumtype(L, 2) : wxFile::read);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxFile* returns = new wxFile(filename, mode);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFile((wxFile*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFile);

    return 1;
}

static int LUACALL wxLua_wxFile_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_constructor[1] = {{ wxLua_wxFile_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxFile()
static int LUACALL wxLua_wxFile_constructor(lua_State *L)
{
    // call constructor
    wxFile* returns = new wxFile();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFile((wxFile*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFile);

    return 1;
}




#if (wxLUA_USE_wxFile && wxUSE_FILE)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_Write_overload[] =
{
    { wxLua_wxFile_Write1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFile_Write1 },
    { wxLua_wxFile_Write, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxFile_Write },
};
static int s_wxluafunc_wxLua_wxFile_Write_overload_count = sizeof(s_wxluafunc_wxLua_wxFile_Write_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFile_constructor_overload[] =
{
    { wxLua_wxFile_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxFile_constructor1 },
    { wxLua_wxFile_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxFile_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxFile_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxFile && wxUSE_FILE)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFile_methods[] = {
    { "Access", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFile_Access, 1, NULL },
    { "Attach", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFile_Attach, 1, NULL },
    { "Close", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFile_Close, 1, NULL },
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFile_Create, 1, NULL },
    { "Detach", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFile_Detach, 1, NULL },
    { "Eof", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFile_Eof, 1, NULL },
    { "Exists", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFile_Exists, 1, NULL },
    { "Flush", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFile_Flush, 1, NULL },
    { "GetKind", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFile_GetKind, 1, NULL },
    { "IsOpened", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFile_IsOpened, 1, NULL },
    { "Length", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFile_Length, 1, NULL },
    { "Open", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFile_Open, 1, NULL },
    { "Read", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFile_Read, 1, NULL },
    { "Seek", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFile_Seek, 1, NULL },
    { "SeekEnd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFile_SeekEnd, 1, NULL },
    { "Tell", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFile_Tell, 1, NULL },

#if (wxLUA_USE_wxFile && wxUSE_FILE)
    { "Write", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFile_Write_overload, s_wxluafunc_wxLua_wxFile_Write_overload_count, 0 },
#endif // (wxLUA_USE_wxFile && wxUSE_FILE)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFile_delete, 1, NULL },
    { "fd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFile_fd, 1, NULL },

#if (wxLUA_USE_wxFile && wxUSE_FILE)
    { "wxFile", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFile_constructor_overload, s_wxluafunc_wxLua_wxFile_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxFile && wxUSE_FILE)

    { 0, 0, 0, 0 },
};

int wxFile_methodCount = sizeof(wxFile_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxFile_enums[] = {
#if wxLUA_USE_wxFile && wxUSE_FILE
        { "fd_invalid", wxFile::fd_invalid },
        { "fd_stderr", wxFile::fd_stderr },
        { "fd_stdin", wxFile::fd_stdin },
        { "fd_stdout", wxFile::fd_stdout },
        { "read", wxFile::read },
        { "read_write", wxFile::read_write },
        { "write", wxFile::write },
        { "write_append", wxFile::write_append },
        { "write_excl", wxFile::write_excl },
#endif // wxLUA_USE_wxFile && wxUSE_FILE

    { NULL, 0, },
};
int wxFile_enumCount = sizeof(wxFile_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // wxLUA_USE_wxFile && wxUSE_FILE


#if wxLUA_USE_wxFile && wxUSE_FILE
// ---------------------------------------------------------------------------
// Bind class wxTempFile
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTempFile'
int wxluatype_wxTempFile = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTempFile_Commit[] = { &wxluatype_wxTempFile, NULL };
static int LUACALL wxLua_wxTempFile_Commit(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTempFile_Commit[1] = {{ wxLua_wxTempFile_Commit, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTempFile_Commit }};
//     bool Commit()
static int LUACALL wxLua_wxTempFile_Commit(lua_State *L)
{
    // get this
    wxTempFile * self = (wxTempFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTempFile);
    // call Commit
    bool returns = (self->Commit());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTempFile_Discard[] = { &wxluatype_wxTempFile, NULL };
static int LUACALL wxLua_wxTempFile_Discard(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTempFile_Discard[1] = {{ wxLua_wxTempFile_Discard, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTempFile_Discard }};
//     void Discard();
static int LUACALL wxLua_wxTempFile_Discard(lua_State *L)
{
    // get this
    wxTempFile * self = (wxTempFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTempFile);
    // call Discard
    self->Discard();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTempFile_IsOpened[] = { &wxluatype_wxTempFile, NULL };
static int LUACALL wxLua_wxTempFile_IsOpened(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTempFile_IsOpened[1] = {{ wxLua_wxTempFile_IsOpened, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTempFile_IsOpened }};
//     bool IsOpened() const
static int LUACALL wxLua_wxTempFile_IsOpened(lua_State *L)
{
    // get this
    wxTempFile * self = (wxTempFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTempFile);
    // call IsOpened
    bool returns = (self->IsOpened());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTempFile_Length[] = { &wxluatype_wxTempFile, NULL };
static int LUACALL wxLua_wxTempFile_Length(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTempFile_Length[1] = {{ wxLua_wxTempFile_Length, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTempFile_Length }};
//     wxFileOffset Length() const
static int LUACALL wxLua_wxTempFile_Length(lua_State *L)
{
    // get this
    wxTempFile * self = (wxTempFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTempFile);
    // call Length
    wxFileOffset returns = (self->Length());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTempFile_Open[] = { &wxluatype_wxTempFile, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTempFile_Open(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTempFile_Open[1] = {{ wxLua_wxTempFile_Open, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTempFile_Open }};
//     bool Open(const wxString& strName)
static int LUACALL wxLua_wxTempFile_Open(lua_State *L)
{
    // const wxString strName
    const wxString strName = wxlua_getwxStringtype(L, 2);
    // get this
    wxTempFile * self = (wxTempFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTempFile);
    // call Open
    bool returns = (self->Open(strName));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTempFile_Seek[] = { &wxluatype_wxTempFile, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTempFile_Seek(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTempFile_Seek[1] = {{ wxLua_wxTempFile_Seek, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTempFile_Seek }};
//     wxFileOffset Seek(wxFileOffset ofs, wxSeekMode mode = wxFromStart)
static int LUACALL wxLua_wxTempFile_Seek(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxSeekMode mode = wxFromStart
    wxSeekMode mode = (argCount >= 3 ? (wxSeekMode)wxlua_getenumtype(L, 3) : wxFromStart);
    // wxFileOffset ofs
    wxFileOffset ofs = (wxFileOffset)wxlua_getuintegertype(L, 2);
    // get this
    wxTempFile * self = (wxTempFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTempFile);
    // call Seek
    wxFileOffset returns = (self->Seek(ofs, mode));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTempFile_Tell[] = { &wxluatype_wxTempFile, NULL };
static int LUACALL wxLua_wxTempFile_Tell(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTempFile_Tell[1] = {{ wxLua_wxTempFile_Tell, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTempFile_Tell }};
//     wxFileOffset Tell() const
static int LUACALL wxLua_wxTempFile_Tell(lua_State *L)
{
    // get this
    wxTempFile * self = (wxTempFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTempFile);
    // call Tell
    wxFileOffset returns = (self->Tell());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTempFile_Write[] = { &wxluatype_wxTempFile, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTempFile_Write(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTempFile_Write[1] = {{ wxLua_wxTempFile_Write, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTempFile_Write }};
//     bool Write(const wxString& str) //, const wxMBConv& conv = wxConvUTF8)
static int LUACALL wxLua_wxTempFile_Write(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 2);
    // get this
    wxTempFile * self = (wxTempFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTempFile);
    // call Write
    bool returns = (self->Write(str));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTempFile_delete[] = { &wxluatype_wxTempFile, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTempFile_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTempFile_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTempFile_constructor1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTempFile_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTempFile_constructor1[1] = {{ wxLua_wxTempFile_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxTempFile_constructor1 }};
//     wxTempFile(const wxString& strName)
static int LUACALL wxLua_wxTempFile_constructor1(lua_State *L)
{
    // const wxString strName
    const wxString strName = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxTempFile* returns = new wxTempFile(strName);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTempFile((wxTempFile*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTempFile);

    return 1;
}

static int LUACALL wxLua_wxTempFile_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTempFile_constructor[1] = {{ wxLua_wxTempFile_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTempFile()
static int LUACALL wxLua_wxTempFile_constructor(lua_State *L)
{
    // call constructor
    wxTempFile* returns = new wxTempFile();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTempFile((wxTempFile*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTempFile);

    return 1;
}




#if (wxLUA_USE_wxFile && wxUSE_FILE)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTempFile_constructor_overload[] =
{
    { wxLua_wxTempFile_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxTempFile_constructor1 },
    { wxLua_wxTempFile_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxTempFile_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxTempFile_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxFile && wxUSE_FILE)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTempFile_methods[] = {
    { "Commit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTempFile_Commit, 1, NULL },
    { "Discard", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTempFile_Discard, 1, NULL },
    { "IsOpened", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTempFile_IsOpened, 1, NULL },
    { "Length", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTempFile_Length, 1, NULL },
    { "Open", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTempFile_Open, 1, NULL },
    { "Seek", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTempFile_Seek, 1, NULL },
    { "Tell", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTempFile_Tell, 1, NULL },
    { "Write", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTempFile_Write, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTempFile_delete, 1, NULL },

#if (wxLUA_USE_wxFile && wxUSE_FILE)
    { "wxTempFile", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTempFile_constructor_overload, s_wxluafunc_wxLua_wxTempFile_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxFile && wxUSE_FILE)

    { 0, 0, 0, 0 },
};

int wxTempFile_methodCount = sizeof(wxTempFile_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxFile && wxUSE_FILE


#if wxLUA_USE_wxDir
// ---------------------------------------------------------------------------
// Bind class wxDir
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDir'
int wxluatype_wxDir = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDir_Exists[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDir_Exists(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDir_Exists[1] = {{ wxLua_wxDir_Exists, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxDir_Exists }};
//     static bool Exists(const wxString& dir)
static int LUACALL wxLua_wxDir_Exists(lua_State *L)
{
    // const wxString dir
    const wxString dir = wxlua_getwxStringtype(L, 1);
    // call Exists
    bool returns = (wxDir::Exists(dir));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxDir) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDir_FindFirst[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDir_FindFirst(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDir_FindFirst[1] = {{ wxLua_wxDir_FindFirst, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 3, s_wxluatypeArray_wxLua_wxDir_FindFirst }};
//         static wxString FindFirst(const wxString& dirname, const wxString& filespec, int flags = wxDIR_DEFAULT)
static int LUACALL wxLua_wxDir_FindFirst(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDIR_DEFAULT
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxDIR_DEFAULT);
    // const wxString filespec
    const wxString filespec = wxlua_getwxStringtype(L, 2);
    // const wxString dirname
    const wxString dirname = wxlua_getwxStringtype(L, 1);
    // call FindFirst
    wxString returns = (wxDir::FindFirst(dirname, filespec, flags));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxDir) && (wxCHECK_VERSION(2,8,0))

static wxLuaArgType s_wxluatypeArray_wxLua_wxDir_GetAllFiles[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDir_GetAllFiles(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDir_GetAllFiles[1] = {{ wxLua_wxDir_GetAllFiles, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 3, s_wxluatypeArray_wxLua_wxDir_GetAllFiles }};
// %override wxLua_wxDir_GetAllFiles
// static unsigned int GetAllFiles(const wxString& dirname, wxArrayString *files, const wxString& filespec = "", int flags = wxDIR_DEFAULT)
static int LUACALL wxLua_wxDir_GetAllFiles(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDIR_DEFAULT
    int flags = (argCount >= 4 ? (int)wxlua_getintegertype(L, 3) : wxDIR_DEFAULT);
    // const wxString& filespec = ""
    wxString filespec = (argCount >= 3 ? wxlua_getwxStringtype(L, 2) : wxString(wxT("")));
    // wxArrayString *files
    wxArrayString files;
    // const wxString& dirname
    wxString dirname = wxlua_getwxStringtype(L, 1);
    // call GetAllFiles
    unsigned int returns = wxDir::GetAllFiles(dirname, &files, filespec, flags);
    // push the result number
    lua_pushnumber(L, returns);
    wxlua_pushwxArrayStringtable(L, files);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxDir_GetFirst[] = { &wxluatype_wxDir, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDir_GetFirst(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDir_GetFirst[1] = {{ wxLua_wxDir_GetFirst, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxDir_GetFirst }};
// %override wxLua_wxDir_GetFirst
// bool GetFirst(wxString * filename, const wxString& filespec = "", int flags = wxDIR_DEFAULT) const
static int LUACALL wxLua_wxDir_GetFirst(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDIR_DEFAULT
    int flags = (argCount >= 3 ? (int)wxlua_getintegertype(L, 3) : wxDIR_DEFAULT);
    // const wxString& filespec = ""
    wxString filespec = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxT("")));
    // wxString * filename
    wxString filename;
    // get this
    wxDir *self = (wxDir *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDir);
    // call GetFirst
    bool returns = self->GetFirst(&filename, filespec, flags);
    lua_pushboolean(L, returns);
    // push the result number
    wxlua_pushwxString(L, filename);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxDir_GetName[] = { &wxluatype_wxDir, NULL };
static int LUACALL wxLua_wxDir_GetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDir_GetName[1] = {{ wxLua_wxDir_GetName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDir_GetName }};
//     wxString GetName() const
static int LUACALL wxLua_wxDir_GetName(lua_State *L)
{
    // get this
    wxDir * self = (wxDir *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDir);
    // call GetName
    wxString returns = (self->GetName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDir_GetNext[] = { &wxluatype_wxDir, NULL };
static int LUACALL wxLua_wxDir_GetNext(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDir_GetNext[1] = {{ wxLua_wxDir_GetNext, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDir_GetNext }};
// %override wxLua_wxDir_GetNext
// bool GetNext(wxString * filename) const
static int LUACALL wxLua_wxDir_GetNext(lua_State *L)
{
    // wxString * filename
    wxString filename;
    // get this
    wxDir *self = (wxDir *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDir);
    // call GetNext
    bool returns = self->GetNext(&filename);
    lua_pushboolean(L, returns);
    // push the result number
    wxlua_pushwxString(L, filename);
    // return the number of parameters
    return 2;
}



#if (wxUSE_LONGLONG) && ((wxLUA_USE_wxDir) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDir_GetTotalSize[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDir_GetTotalSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDir_GetTotalSize[1] = {{ wxLua_wxDir_GetTotalSize, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxDir_GetTotalSize }};
//         static wxULongLong GetTotalSize(const wxString &dir) //, wxArrayString *filesSkipped = NULL) FIXME override
static int LUACALL wxLua_wxDir_GetTotalSize(lua_State *L)
{
    // const wxString dir
    const wxString dir = wxlua_getwxStringtype(L, 1);
    // call GetTotalSize
    // allocate a new object using the copy constructor
    wxULongLong* returns = new wxULongLong(wxDir::GetTotalSize(dir));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxULongLong((wxULongLong*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxULongLong);

    return 1;
}

#endif // (wxUSE_LONGLONG) && ((wxLUA_USE_wxDir) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxDir_HasFiles[] = { &wxluatype_wxDir, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDir_HasFiles(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDir_HasFiles[1] = {{ wxLua_wxDir_HasFiles, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxDir_HasFiles }};
//     bool HasFiles(const wxString& filespec = "")
static int LUACALL wxLua_wxDir_HasFiles(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString filespec = ""
    const wxString filespec = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // get this
    wxDir * self = (wxDir *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDir);
    // call HasFiles
    bool returns = (self->HasFiles(filespec));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDir_HasSubDirs[] = { &wxluatype_wxDir, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDir_HasSubDirs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDir_HasSubDirs[1] = {{ wxLua_wxDir_HasSubDirs, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxDir_HasSubDirs }};
//     bool HasSubDirs(const wxString& dirspec = "")
static int LUACALL wxLua_wxDir_HasSubDirs(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString dirspec = ""
    const wxString dirspec = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // get this
    wxDir * self = (wxDir *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDir);
    // call HasSubDirs
    bool returns = (self->HasSubDirs(dirspec));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDir_IsOpened[] = { &wxluatype_wxDir, NULL };
static int LUACALL wxLua_wxDir_IsOpened(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDir_IsOpened[1] = {{ wxLua_wxDir_IsOpened, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDir_IsOpened }};
//     bool IsOpened() const
static int LUACALL wxLua_wxDir_IsOpened(lua_State *L)
{
    // get this
    wxDir * self = (wxDir *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDir);
    // call IsOpened
    bool returns = (self->IsOpened());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDir_Open[] = { &wxluatype_wxDir, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDir_Open(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDir_Open[1] = {{ wxLua_wxDir_Open, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDir_Open }};
//     bool Open(const wxString& dir)
static int LUACALL wxLua_wxDir_Open(lua_State *L)
{
    // const wxString dir
    const wxString dir = wxlua_getwxStringtype(L, 2);
    // get this
    wxDir * self = (wxDir *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDir);
    // call Open
    bool returns = (self->Open(dir));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDir_delete[] = { &wxluatype_wxDir, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDir_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDir_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxDir_constructor1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDir_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDir_constructor1[1] = {{ wxLua_wxDir_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDir_constructor1 }};
//     wxDir(const wxString& dir)
static int LUACALL wxLua_wxDir_constructor1(lua_State *L)
{
    // const wxString dir
    const wxString dir = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxDir* returns = new wxDir(dir);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDir((wxDir*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDir);

    return 1;
}

static int LUACALL wxLua_wxDir_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDir_constructor[1] = {{ wxLua_wxDir_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDir()
static int LUACALL wxLua_wxDir_constructor(lua_State *L)
{
    // call constructor
    wxDir* returns = new wxDir();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDir((wxDir*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDir);

    return 1;
}




#if (wxLUA_USE_wxDir)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDir_constructor_overload[] =
{
    { wxLua_wxDir_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDir_constructor1 },
    { wxLua_wxDir_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxDir_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxDir_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxDir)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDir_methods[] = {
    { "Exists", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDir_Exists, 1, NULL },

#if (wxLUA_USE_wxDir) && (wxCHECK_VERSION(2,8,0))
    { "FindFirst", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDir_FindFirst, 1, NULL },
#endif // (wxLUA_USE_wxDir) && (wxCHECK_VERSION(2,8,0))

    { "GetAllFiles", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDir_GetAllFiles, 1, NULL },
    { "GetFirst", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDir_GetFirst, 1, NULL },
    { "GetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDir_GetName, 1, NULL },
    { "GetNext", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDir_GetNext, 1, NULL },

#if (wxUSE_LONGLONG) && ((wxLUA_USE_wxDir) && (wxCHECK_VERSION(2,8,0)))
    { "GetTotalSize", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDir_GetTotalSize, 1, NULL },
#endif // (wxUSE_LONGLONG) && ((wxLUA_USE_wxDir) && (wxCHECK_VERSION(2,8,0)))

    { "HasFiles", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDir_HasFiles, 1, NULL },
    { "HasSubDirs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDir_HasSubDirs, 1, NULL },
    { "IsOpened", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDir_IsOpened, 1, NULL },
    { "Open", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDir_Open, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDir_delete, 1, NULL },

#if (wxLUA_USE_wxDir)
    { "wxDir", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDir_constructor_overload, s_wxluafunc_wxLua_wxDir_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxDir)

    { 0, 0, 0, 0 },
};

int wxDir_methodCount = sizeof(wxDir_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDir

// ---------------------------------------------------------------------------
// Bind class wxFileTypeInfo
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFileTypeInfo'
int wxluatype_wxFileTypeInfo = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileTypeInfo_GetDescription[] = { &wxluatype_wxFileTypeInfo, NULL };
static int LUACALL wxLua_wxFileTypeInfo_GetDescription(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileTypeInfo_GetDescription[1] = {{ wxLua_wxFileTypeInfo_GetDescription, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileTypeInfo_GetDescription }};
//     wxString GetDescription() const
static int LUACALL wxLua_wxFileTypeInfo_GetDescription(lua_State *L)
{
    // get this
    wxFileTypeInfo * self = (wxFileTypeInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileTypeInfo);
    // call GetDescription
    wxString returns = (self->GetDescription());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if wxLUA_USE_wxArrayString
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileTypeInfo_GetExtensions[] = { &wxluatype_wxFileTypeInfo, NULL };
static int LUACALL wxLua_wxFileTypeInfo_GetExtensions(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileTypeInfo_GetExtensions[1] = {{ wxLua_wxFileTypeInfo_GetExtensions, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileTypeInfo_GetExtensions }};
//     wxArrayString GetExtensions() const
static int LUACALL wxLua_wxFileTypeInfo_GetExtensions(lua_State *L)
{
    // get this
    wxFileTypeInfo * self = (wxFileTypeInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileTypeInfo);
    // call GetExtensions
    // allocate a new object using the copy constructor
    wxArrayString* returns = new wxArrayString(self->GetExtensions());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxArrayString((wxArrayString*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

#endif // wxLUA_USE_wxArrayString

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileTypeInfo_GetExtensionsCount[] = { &wxluatype_wxFileTypeInfo, NULL };
static int LUACALL wxLua_wxFileTypeInfo_GetExtensionsCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileTypeInfo_GetExtensionsCount[1] = {{ wxLua_wxFileTypeInfo_GetExtensionsCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileTypeInfo_GetExtensionsCount }};
//     size_t GetExtensionsCount() const
static int LUACALL wxLua_wxFileTypeInfo_GetExtensionsCount(lua_State *L)
{
    // get this
    wxFileTypeInfo * self = (wxFileTypeInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileTypeInfo);
    // call GetExtensionsCount
    size_t returns = (self->GetExtensionsCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileTypeInfo_GetIconFile[] = { &wxluatype_wxFileTypeInfo, NULL };
static int LUACALL wxLua_wxFileTypeInfo_GetIconFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileTypeInfo_GetIconFile[1] = {{ wxLua_wxFileTypeInfo_GetIconFile, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileTypeInfo_GetIconFile }};
//     wxString GetIconFile() const
static int LUACALL wxLua_wxFileTypeInfo_GetIconFile(lua_State *L)
{
    // get this
    wxFileTypeInfo * self = (wxFileTypeInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileTypeInfo);
    // call GetIconFile
    wxString returns = (self->GetIconFile());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileTypeInfo_GetIconIndex[] = { &wxluatype_wxFileTypeInfo, NULL };
static int LUACALL wxLua_wxFileTypeInfo_GetIconIndex(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileTypeInfo_GetIconIndex[1] = {{ wxLua_wxFileTypeInfo_GetIconIndex, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileTypeInfo_GetIconIndex }};
//     int GetIconIndex() const
static int LUACALL wxLua_wxFileTypeInfo_GetIconIndex(lua_State *L)
{
    // get this
    wxFileTypeInfo * self = (wxFileTypeInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileTypeInfo);
    // call GetIconIndex
    int returns = (self->GetIconIndex());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileTypeInfo_GetMimeType[] = { &wxluatype_wxFileTypeInfo, NULL };
static int LUACALL wxLua_wxFileTypeInfo_GetMimeType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileTypeInfo_GetMimeType[1] = {{ wxLua_wxFileTypeInfo_GetMimeType, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileTypeInfo_GetMimeType }};
//     wxString GetMimeType() const
static int LUACALL wxLua_wxFileTypeInfo_GetMimeType(lua_State *L)
{
    // get this
    wxFileTypeInfo * self = (wxFileTypeInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileTypeInfo);
    // call GetMimeType
    wxString returns = (self->GetMimeType());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileTypeInfo_GetOpenCommand[] = { &wxluatype_wxFileTypeInfo, NULL };
static int LUACALL wxLua_wxFileTypeInfo_GetOpenCommand(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileTypeInfo_GetOpenCommand[1] = {{ wxLua_wxFileTypeInfo_GetOpenCommand, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileTypeInfo_GetOpenCommand }};
//     wxString GetOpenCommand() const
static int LUACALL wxLua_wxFileTypeInfo_GetOpenCommand(lua_State *L)
{
    // get this
    wxFileTypeInfo * self = (wxFileTypeInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileTypeInfo);
    // call GetOpenCommand
    wxString returns = (self->GetOpenCommand());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileTypeInfo_GetPrintCommand[] = { &wxluatype_wxFileTypeInfo, NULL };
static int LUACALL wxLua_wxFileTypeInfo_GetPrintCommand(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileTypeInfo_GetPrintCommand[1] = {{ wxLua_wxFileTypeInfo_GetPrintCommand, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileTypeInfo_GetPrintCommand }};
//     wxString GetPrintCommand() const
static int LUACALL wxLua_wxFileTypeInfo_GetPrintCommand(lua_State *L)
{
    // get this
    wxFileTypeInfo * self = (wxFileTypeInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileTypeInfo);
    // call GetPrintCommand
    wxString returns = (self->GetPrintCommand());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileTypeInfo_GetShortDesc[] = { &wxluatype_wxFileTypeInfo, NULL };
static int LUACALL wxLua_wxFileTypeInfo_GetShortDesc(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileTypeInfo_GetShortDesc[1] = {{ wxLua_wxFileTypeInfo_GetShortDesc, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileTypeInfo_GetShortDesc }};
//     wxString GetShortDesc() const
static int LUACALL wxLua_wxFileTypeInfo_GetShortDesc(lua_State *L)
{
    // get this
    wxFileTypeInfo * self = (wxFileTypeInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileTypeInfo);
    // call GetShortDesc
    wxString returns = (self->GetShortDesc());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileTypeInfo_IsValid[] = { &wxluatype_wxFileTypeInfo, NULL };
static int LUACALL wxLua_wxFileTypeInfo_IsValid(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileTypeInfo_IsValid[1] = {{ wxLua_wxFileTypeInfo_IsValid, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileTypeInfo_IsValid }};
//     bool IsValid() const
static int LUACALL wxLua_wxFileTypeInfo_IsValid(lua_State *L)
{
    // get this
    wxFileTypeInfo * self = (wxFileTypeInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileTypeInfo);
    // call IsValid
    bool returns = (self->IsValid());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileTypeInfo_SetIcon[] = { &wxluatype_wxFileTypeInfo, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFileTypeInfo_SetIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileTypeInfo_SetIcon[1] = {{ wxLua_wxFileTypeInfo_SetIcon, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFileTypeInfo_SetIcon }};
//     void SetIcon(const wxString& iconFile, int iconIndex = 0)
static int LUACALL wxLua_wxFileTypeInfo_SetIcon(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int iconIndex = 0
    int iconIndex = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // const wxString iconFile
    const wxString iconFile = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileTypeInfo * self = (wxFileTypeInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileTypeInfo);
    // call SetIcon
    self->SetIcon(iconFile, iconIndex);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileTypeInfo_SetShortDesc[] = { &wxluatype_wxFileTypeInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileTypeInfo_SetShortDesc(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileTypeInfo_SetShortDesc[1] = {{ wxLua_wxFileTypeInfo_SetShortDesc, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileTypeInfo_SetShortDesc }};
//     void SetShortDesc(const wxString& shortDesc)
static int LUACALL wxLua_wxFileTypeInfo_SetShortDesc(lua_State *L)
{
    // const wxString shortDesc
    const wxString shortDesc = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileTypeInfo * self = (wxFileTypeInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileTypeInfo);
    // call SetShortDesc
    self->SetShortDesc(shortDesc);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileTypeInfo_delete[] = { &wxluatype_wxFileTypeInfo, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileTypeInfo_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFileTypeInfo_delete }};


#if wxLUA_USE_wxArrayString
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileTypeInfo_constructor[] = { &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxFileTypeInfo_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileTypeInfo_constructor[1] = {{ wxLua_wxFileTypeInfo_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFileTypeInfo_constructor }};
//     wxFileTypeInfo(const wxArrayString& sArray)
static int LUACALL wxLua_wxFileTypeInfo_constructor(lua_State *L)
{
    // const wxArrayString sArray
    wxLuaSmartwxArrayString sArray = wxlua_getwxArrayString(L, 1);
    // call constructor
    wxFileTypeInfo* returns = new wxFileTypeInfo(sArray);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileTypeInfo((wxFileTypeInfo*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileTypeInfo);

    return 1;
}

#endif // wxLUA_USE_wxArrayString

static int LUACALL wxLua_wxFileTypeInfo_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileTypeInfo_constructor1[1] = {{ wxLua_wxFileTypeInfo_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxFileTypeInfo()
static int LUACALL wxLua_wxFileTypeInfo_constructor1(lua_State *L)
{
    // call constructor
    wxFileTypeInfo* returns = new wxFileTypeInfo();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileTypeInfo((wxFileTypeInfo*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileTypeInfo);

    return 1;
}



#if (wxLUA_USE_wxArrayString)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileTypeInfo_constructor_overload[] =
{

#if wxLUA_USE_wxArrayString
    { wxLua_wxFileTypeInfo_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFileTypeInfo_constructor },
#endif // wxLUA_USE_wxArrayString
    { wxLua_wxFileTypeInfo_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxFileTypeInfo_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxFileTypeInfo_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxArrayString)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFileTypeInfo_methods[] = {
    { "GetDescription", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileTypeInfo_GetDescription, 1, NULL },

#if wxLUA_USE_wxArrayString
    { "GetExtensions", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileTypeInfo_GetExtensions, 1, NULL },
#endif // wxLUA_USE_wxArrayString

    { "GetExtensionsCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileTypeInfo_GetExtensionsCount, 1, NULL },
    { "GetIconFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileTypeInfo_GetIconFile, 1, NULL },
    { "GetIconIndex", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileTypeInfo_GetIconIndex, 1, NULL },
    { "GetMimeType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileTypeInfo_GetMimeType, 1, NULL },
    { "GetOpenCommand", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileTypeInfo_GetOpenCommand, 1, NULL },
    { "GetPrintCommand", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileTypeInfo_GetPrintCommand, 1, NULL },
    { "GetShortDesc", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileTypeInfo_GetShortDesc, 1, NULL },
    { "IsValid", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileTypeInfo_IsValid, 1, NULL },
    { "SetIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileTypeInfo_SetIcon, 1, NULL },
    { "SetShortDesc", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileTypeInfo_SetShortDesc, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFileTypeInfo_delete, 1, NULL },

#if (wxLUA_USE_wxArrayString)
    { "wxFileTypeInfo", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFileTypeInfo_constructor_overload, s_wxluafunc_wxLua_wxFileTypeInfo_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxArrayString)

    { 0, 0, 0, 0 },
};

int wxFileTypeInfo_methodCount = sizeof(wxFileTypeInfo_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxIconLocation
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxIconLocation'
int wxluatype_wxIconLocation = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxIconLocation_GetFileName[] = { &wxluatype_wxIconLocation, NULL };
static int LUACALL wxLua_wxIconLocation_GetFileName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconLocation_GetFileName[1] = {{ wxLua_wxIconLocation_GetFileName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIconLocation_GetFileName }};
//     const wxString& GetFileName() const
static int LUACALL wxLua_wxIconLocation_GetFileName(lua_State *L)
{
    // get this
    wxIconLocation * self = (wxIconLocation *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIconLocation);
    // call GetFileName
    wxString returns = (self->GetFileName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if defined(__WXMSW__)
static wxLuaArgType s_wxluatypeArray_wxLua_wxIconLocation_GetIndex[] = { &wxluatype_wxIconLocation, NULL };
static int LUACALL wxLua_wxIconLocation_GetIndex(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconLocation_GetIndex[1] = {{ wxLua_wxIconLocation_GetIndex, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIconLocation_GetIndex }};
//     %msw int GetIndex() const
static int LUACALL wxLua_wxIconLocation_GetIndex(lua_State *L)
{
    // get this
    wxIconLocation * self = (wxIconLocation *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIconLocation);
    // call GetIndex
    int returns = (self->GetIndex());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // defined(__WXMSW__)

static wxLuaArgType s_wxluatypeArray_wxLua_wxIconLocation_IsOk[] = { &wxluatype_wxIconLocation, NULL };
static int LUACALL wxLua_wxIconLocation_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconLocation_IsOk[1] = {{ wxLua_wxIconLocation_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxIconLocation_IsOk }};
//     bool IsOk() const
static int LUACALL wxLua_wxIconLocation_IsOk(lua_State *L)
{
    // get this
    wxIconLocation * self = (wxIconLocation *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIconLocation);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxIconLocation_SetFileName[] = { &wxluatype_wxIconLocation, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxIconLocation_SetFileName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconLocation_SetFileName[1] = {{ wxLua_wxIconLocation_SetFileName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIconLocation_SetFileName }};
//     void SetFileName(const wxString& filename)
static int LUACALL wxLua_wxIconLocation_SetFileName(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxIconLocation * self = (wxIconLocation *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIconLocation);
    // call SetFileName
    self->SetFileName(filename);

    return 0;
}


#if defined(__WXMSW__)
static wxLuaArgType s_wxluatypeArray_wxLua_wxIconLocation_SetIndex[] = { &wxluatype_wxIconLocation, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIconLocation_SetIndex(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconLocation_SetIndex[1] = {{ wxLua_wxIconLocation_SetIndex, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxIconLocation_SetIndex }};
//     %msw void SetIndex(int num)
static int LUACALL wxLua_wxIconLocation_SetIndex(lua_State *L)
{
    // int num
    int num = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxIconLocation * self = (wxIconLocation *)wxluaT_getuserdatatype(L, 1, wxluatype_wxIconLocation);
    // call SetIndex
    self->SetIndex(num);

    return 0;
}

#endif // defined(__WXMSW__)

static wxLuaArgType s_wxluatypeArray_wxLua_wxIconLocation_delete[] = { &wxluatype_wxIconLocation, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconLocation_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxIconLocation_delete }};


#if defined(__WXMSW__)
static wxLuaArgType s_wxluatypeArray_wxLua_wxIconLocation_constructor1[] = { &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxIconLocation_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconLocation_constructor1[1] = {{ wxLua_wxIconLocation_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxIconLocation_constructor1 }};
//     %msw wxIconLocation(const wxString& file = "", int num = 0)
static int LUACALL wxLua_wxIconLocation_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int num = 0
    int num = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // const wxString file = ""
    const wxString file = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxIconLocation* returns = new wxIconLocation(file, num);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxIconLocation((wxIconLocation*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIconLocation);

    return 1;
}

#endif // defined(__WXMSW__)

#if !defined(__WXMSW__)
static wxLuaArgType s_wxluatypeArray_wxLua_wxIconLocation_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxIconLocation_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconLocation_constructor[1] = {{ wxLua_wxIconLocation_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxIconLocation_constructor }};
//     !%msw wxIconLocation(const wxString& filename = "")
static int LUACALL wxLua_wxIconLocation_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString filename = ""
    const wxString filename = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxIconLocation* returns = new wxIconLocation(filename);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxIconLocation((wxIconLocation*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIconLocation);

    return 1;
}

#endif // !defined(__WXMSW__)



#if (defined(__WXMSW__))||(!defined(__WXMSW__))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxIconLocation_constructor_overload[] =
{

#if defined(__WXMSW__)
    { wxLua_wxIconLocation_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxIconLocation_constructor1 },
#endif // defined(__WXMSW__)

#if !defined(__WXMSW__)
    { wxLua_wxIconLocation_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxIconLocation_constructor },
#endif // !defined(__WXMSW__)
};
static int s_wxluafunc_wxLua_wxIconLocation_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxIconLocation_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (defined(__WXMSW__))||(!defined(__WXMSW__))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxIconLocation_methods[] = {
    { "GetFileName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIconLocation_GetFileName, 1, NULL },

#if defined(__WXMSW__)
    { "GetIndex", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIconLocation_GetIndex, 1, NULL },
#endif // defined(__WXMSW__)

    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIconLocation_IsOk, 1, NULL },
    { "SetFileName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIconLocation_SetFileName, 1, NULL },

#if defined(__WXMSW__)
    { "SetIndex", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxIconLocation_SetIndex, 1, NULL },
#endif // defined(__WXMSW__)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxIconLocation_delete, 1, NULL },

#if (defined(__WXMSW__))||(!defined(__WXMSW__))
    { "wxIconLocation", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxIconLocation_constructor_overload, s_wxluafunc_wxLua_wxIconLocation_constructor_overload_count, 0 },
#endif // (defined(__WXMSW__))||(!defined(__WXMSW__))

    { 0, 0, 0, 0 },
};

int wxIconLocation_methodCount = sizeof(wxIconLocation_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxFileType::MessageParameters
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFileType::MessageParameters'
int wxluatype_wxFileType_MessageParameters = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_MessageParameters_GetFileName[] = { &wxluatype_wxFileType_MessageParameters, NULL };
static int LUACALL wxLua_wxFileType_MessageParameters_GetFileName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_MessageParameters_GetFileName[1] = {{ wxLua_wxFileType_MessageParameters_GetFileName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileType_MessageParameters_GetFileName }};
//     wxString GetFileName() const
static int LUACALL wxLua_wxFileType_MessageParameters_GetFileName(lua_State *L)
{
    // get this
    wxFileType::MessageParameters * self = (wxFileType::MessageParameters *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileType_MessageParameters);
    // call GetFileName
    wxString returns = (self->GetFileName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_MessageParameters_GetMimeType[] = { &wxluatype_wxFileType_MessageParameters, NULL };
static int LUACALL wxLua_wxFileType_MessageParameters_GetMimeType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_MessageParameters_GetMimeType[1] = {{ wxLua_wxFileType_MessageParameters_GetMimeType, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileType_MessageParameters_GetMimeType }};
//     wxString GetMimeType() const
static int LUACALL wxLua_wxFileType_MessageParameters_GetMimeType(lua_State *L)
{
    // get this
    wxFileType::MessageParameters * self = (wxFileType::MessageParameters *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileType_MessageParameters);
    // call GetMimeType
    wxString returns = (self->GetMimeType());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_MessageParameters_GetParamValue[] = { &wxluatype_wxFileType_MessageParameters, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileType_MessageParameters_GetParamValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_MessageParameters_GetParamValue[1] = {{ wxLua_wxFileType_MessageParameters_GetParamValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileType_MessageParameters_GetParamValue }};
//     virtual wxString GetParamValue(const wxString& name) const
static int LUACALL wxLua_wxFileType_MessageParameters_GetParamValue(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileType::MessageParameters * self = (wxFileType::MessageParameters *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileType_MessageParameters);
    // call GetParamValue
    wxString returns = (self->GetParamValue(name));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_MessageParameters_delete[] = { &wxluatype_wxFileType_MessageParameters, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_MessageParameters_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFileType_MessageParameters_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_MessageParameters_constructor[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileType_MessageParameters_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_MessageParameters_constructor[1] = {{ wxLua_wxFileType_MessageParameters_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxFileType_MessageParameters_constructor }};
//     wxFileType::MessageParameters(const wxString& filename, const wxString& mimetype = "")
static int LUACALL wxLua_wxFileType_MessageParameters_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString mimetype = ""
    const wxString mimetype = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxFileType::MessageParameters* returns = new wxFileType::MessageParameters(filename, mimetype);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileType_MessageParameters((wxFileType::MessageParameters*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileType_MessageParameters);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFileType_MessageParameters_methods[] = {
    { "GetFileName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileType_MessageParameters_GetFileName, 1, NULL },
    { "GetMimeType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileType_MessageParameters_GetMimeType, 1, NULL },
    { "GetParamValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileType_MessageParameters_GetParamValue, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFileType_MessageParameters_delete, 1, NULL },
    { "wxFileType_MessageParameters", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFileType_MessageParameters_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxFileType_MessageParameters_methodCount = sizeof(wxFileType_MessageParameters_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxFileType
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFileType'
int wxluatype_wxFileType = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_ExpandCommand[] = { &wxluatype_TSTRING, &wxluatype_wxFileType_MessageParameters, NULL };
static int LUACALL wxLua_wxFileType_ExpandCommand(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_ExpandCommand[1] = {{ wxLua_wxFileType_ExpandCommand, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxFileType_ExpandCommand }};
//     static wxString ExpandCommand(const wxString& command, const wxFileType::MessageParameters& params);
static int LUACALL wxLua_wxFileType_ExpandCommand(lua_State *L)
{
    // const wxFileType::MessageParameters params
    const wxFileType::MessageParameters * params = (const wxFileType::MessageParameters *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFileType_MessageParameters);
    // const wxString command
    const wxString command = wxlua_getwxStringtype(L, 1);
    // call ExpandCommand
    wxString returns = (wxFileType::ExpandCommand(command, *params));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if wxLUA_USE_wxArrayString
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_GetAllCommands[] = { &wxluatype_wxFileType, &wxluatype_wxArrayString, &wxluatype_wxArrayString, &wxluatype_wxFileType_MessageParameters, NULL };
static int LUACALL wxLua_wxFileType_GetAllCommands(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_GetAllCommands[1] = {{ wxLua_wxFileType_GetAllCommands, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxFileType_GetAllCommands }};
//     size_t GetAllCommands(wxArrayString *verbs, wxArrayString *commands, const wxFileType::MessageParameters& params) const;
static int LUACALL wxLua_wxFileType_GetAllCommands(lua_State *L)
{
    // const wxFileType::MessageParameters params
    const wxFileType::MessageParameters * params = (const wxFileType::MessageParameters *)wxluaT_getuserdatatype(L, 4, wxluatype_wxFileType_MessageParameters);
    // wxArrayString commands
    wxArrayString * commands = (wxArrayString *)wxluaT_getuserdatatype(L, 3, wxluatype_wxArrayString);
    // wxArrayString verbs
    wxArrayString * verbs = (wxArrayString *)wxluaT_getuserdatatype(L, 2, wxluatype_wxArrayString);
    // get this
    wxFileType * self = (wxFileType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileType);
    // call GetAllCommands
    size_t returns = (self->GetAllCommands(verbs, commands, *params));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // wxLUA_USE_wxArrayString

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_GetDescription[] = { &wxluatype_wxFileType, NULL };
static int LUACALL wxLua_wxFileType_GetDescription(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_GetDescription[1] = {{ wxLua_wxFileType_GetDescription, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileType_GetDescription }};
// %override wxLua_wxFileType_GetDescription
//     bool GetDescription(wxString *desc) const;
static int LUACALL wxLua_wxFileType_GetDescription(lua_State *L)
{
    // wxString desc
    wxString desc; // = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileType * self = (wxFileType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileType);
    // call GetDescription
    bool returns = (self->GetDescription(&desc));
    // push the result flag
    lua_pushboolean(L, returns);
    wxlua_pushwxString(L, desc);

    return 2;
}



#if wxLUA_USE_wxArrayString
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_GetExtensions[] = { &wxluatype_wxFileType, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxFileType_GetExtensions(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_GetExtensions[1] = {{ wxLua_wxFileType_GetExtensions, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileType_GetExtensions }};
//     bool GetExtensions(wxArrayString& extensions);
static int LUACALL wxLua_wxFileType_GetExtensions(lua_State *L)
{
    // wxArrayString extensions
    wxArrayString * extensions = (wxArrayString *)wxluaT_getuserdatatype(L, 2, wxluatype_wxArrayString);
    // get this
    wxFileType * self = (wxFileType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileType);
    // call GetExtensions
    bool returns = (self->GetExtensions(*extensions));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // wxLUA_USE_wxArrayString

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_GetIcon[] = { &wxluatype_wxFileType, &wxluatype_wxIconLocation, NULL };
static int LUACALL wxLua_wxFileType_GetIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_GetIcon[1] = {{ wxLua_wxFileType_GetIcon, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileType_GetIcon }};
//     bool GetIcon(wxIconLocation *iconloc) const;
static int LUACALL wxLua_wxFileType_GetIcon(lua_State *L)
{
    // wxIconLocation iconloc
    wxIconLocation * iconloc = (wxIconLocation *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIconLocation);
    // get this
    wxFileType * self = (wxFileType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileType);
    // call GetIcon
    bool returns = (self->GetIcon(iconloc));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if wxLUA_USE_wxArrayString
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_GetMimeTypes[] = { &wxluatype_wxFileType, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxFileType_GetMimeTypes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_GetMimeTypes[1] = {{ wxLua_wxFileType_GetMimeTypes, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileType_GetMimeTypes }};
//     bool GetMimeTypes(wxArrayString& mimeTypes) const;
static int LUACALL wxLua_wxFileType_GetMimeTypes(lua_State *L)
{
    // wxArrayString mimeTypes
    wxArrayString * mimeTypes = (wxArrayString *)wxluaT_getuserdatatype(L, 2, wxluatype_wxArrayString);
    // get this
    wxFileType * self = (wxFileType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileType);
    // call GetMimeTypes
    bool returns = (self->GetMimeTypes(*mimeTypes));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // wxLUA_USE_wxArrayString

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_GetOpenCommand[] = { &wxluatype_wxFileType, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileType_GetOpenCommand(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_GetOpenCommand[1] = {{ wxLua_wxFileType_GetOpenCommand, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileType_GetOpenCommand }};
//     wxString GetOpenCommand(const wxString& filename) const;
static int LUACALL wxLua_wxFileType_GetOpenCommand(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileType * self = (wxFileType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileType);
    // call GetOpenCommand
    wxString returns = (self->GetOpenCommand(filename));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_GetPrintCommand[] = { &wxluatype_wxFileType, &wxluatype_wxFileType_MessageParameters, NULL };
static int LUACALL wxLua_wxFileType_GetPrintCommand(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_GetPrintCommand[1] = {{ wxLua_wxFileType_GetPrintCommand, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileType_GetPrintCommand }};
// %override wxLua_wxFileType_GetPrintCommand
//     bool GetPrintCommand(wxString *printCmd, const wxFileType::MessageParameters& params) const;
static int LUACALL wxLua_wxFileType_GetPrintCommand(lua_State *L)
{
    // const wxFileType::MessageParameters params
    const wxFileType::MessageParameters * params = (const wxFileType::MessageParameters *)wxluaT_getuserdatatype(L, 3, wxluatype_wxFileType_MessageParameters);
    // wxString printCmd
    wxString printCmd; // = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileType * self = (wxFileType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileType);
    // call GetPrintCommand
    bool returns = (self->GetPrintCommand(&printCmd, *params));
    // push the result flag
    lua_pushboolean(L, returns);
    wxlua_pushwxString(L, printCmd);

    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_SetCommand[] = { &wxluatype_wxFileType, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxFileType_SetCommand(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_SetCommand[1] = {{ wxLua_wxFileType_SetCommand, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxFileType_SetCommand }};
//     bool SetCommand(const wxString& cmd, const wxString& verb, bool overwriteprompt = true)
static int LUACALL wxLua_wxFileType_SetCommand(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool overwriteprompt = true
    bool overwriteprompt = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // const wxString verb
    const wxString verb = wxlua_getwxStringtype(L, 3);
    // const wxString cmd
    const wxString cmd = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileType * self = (wxFileType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileType);
    // call SetCommand
    bool returns = (self->SetCommand(cmd, verb, overwriteprompt));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_SetDefaultIcon[] = { &wxluatype_wxFileType, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFileType_SetDefaultIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_SetDefaultIcon[1] = {{ wxLua_wxFileType_SetDefaultIcon, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxFileType_SetDefaultIcon }};
//     bool SetDefaultIcon(const wxString& cmd = "", int index = 0)
static int LUACALL wxLua_wxFileType_SetDefaultIcon(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int index = 0
    int index = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // const wxString cmd = ""
    const wxString cmd = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // get this
    wxFileType * self = (wxFileType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileType);
    // call SetDefaultIcon
    bool returns = (self->SetDefaultIcon(cmd, index));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_Unassociate[] = { &wxluatype_wxFileType, NULL };
static int LUACALL wxLua_wxFileType_Unassociate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_Unassociate[1] = {{ wxLua_wxFileType_Unassociate, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileType_Unassociate }};
//     bool Unassociate();
static int LUACALL wxLua_wxFileType_Unassociate(lua_State *L)
{
    // get this
    wxFileType * self = (wxFileType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileType);
    // call Unassociate
    bool returns = (self->Unassociate());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_delete[] = { &wxluatype_wxFileType, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFileType_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileType_constructor[] = { &wxluatype_wxFileTypeInfo, NULL };
static int LUACALL wxLua_wxFileType_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileType_constructor[1] = {{ wxLua_wxFileType_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFileType_constructor }};
//     wxFileType(const wxFileTypeInfo& ftInfo)
static int LUACALL wxLua_wxFileType_constructor(lua_State *L)
{
    // const wxFileTypeInfo ftInfo
    const wxFileTypeInfo * ftInfo = (const wxFileTypeInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileTypeInfo);
    // call constructor
    wxFileType* returns = new wxFileType(*ftInfo);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileType((wxFileType*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileType);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFileType_methods[] = {
    { "ExpandCommand", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileType_ExpandCommand, 1, NULL },

#if wxLUA_USE_wxArrayString
    { "GetAllCommands", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileType_GetAllCommands, 1, NULL },
#endif // wxLUA_USE_wxArrayString

    { "GetDescription", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileType_GetDescription, 1, NULL },

#if wxLUA_USE_wxArrayString
    { "GetExtensions", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileType_GetExtensions, 1, NULL },
#endif // wxLUA_USE_wxArrayString

    { "GetIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileType_GetIcon, 1, NULL },

#if wxLUA_USE_wxArrayString
    { "GetMimeTypes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileType_GetMimeTypes, 1, NULL },
#endif // wxLUA_USE_wxArrayString

    { "GetOpenCommand", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileType_GetOpenCommand, 1, NULL },
    { "GetPrintCommand", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileType_GetPrintCommand, 1, NULL },
    { "SetCommand", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileType_SetCommand, 1, NULL },
    { "SetDefaultIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileType_SetDefaultIcon, 1, NULL },
    { "Unassociate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileType_Unassociate, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFileType_delete, 1, NULL },
    { "wxFileType", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFileType_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxFileType_methodCount = sizeof(wxFileType_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxMimeTypesManager
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMimeTypesManager'
int wxluatype_wxMimeTypesManager = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxMimeTypesManager_AddFallback[] = { &wxluatype_wxMimeTypesManager, &wxluatype_wxFileTypeInfo, NULL };
static int LUACALL wxLua_wxMimeTypesManager_AddFallback(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMimeTypesManager_AddFallback[1] = {{ wxLua_wxMimeTypesManager_AddFallback, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMimeTypesManager_AddFallback }};
//     void AddFallback(const wxFileTypeInfo& ft)
static int LUACALL wxLua_wxMimeTypesManager_AddFallback(lua_State *L)
{
    // const wxFileTypeInfo ft
    const wxFileTypeInfo * ft = (const wxFileTypeInfo *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFileTypeInfo);
    // get this
    wxMimeTypesManager * self = (wxMimeTypesManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMimeTypesManager);
    // call AddFallback
    self->AddFallback(*ft);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMimeTypesManager_Associate[] = { &wxluatype_wxMimeTypesManager, &wxluatype_wxFileTypeInfo, NULL };
static int LUACALL wxLua_wxMimeTypesManager_Associate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMimeTypesManager_Associate[1] = {{ wxLua_wxMimeTypesManager_Associate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMimeTypesManager_Associate }};
//     wxFileType *Associate(const wxFileTypeInfo& ftInfo)
static int LUACALL wxLua_wxMimeTypesManager_Associate(lua_State *L)
{
    // const wxFileTypeInfo ftInfo
    const wxFileTypeInfo * ftInfo = (const wxFileTypeInfo *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFileTypeInfo);
    // get this
    wxMimeTypesManager * self = (wxMimeTypesManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMimeTypesManager);
    // call Associate
    wxFileType* returns = (wxFileType*)self->Associate(*ftInfo);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileType);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMimeTypesManager_ClearData[] = { &wxluatype_wxMimeTypesManager, NULL };
static int LUACALL wxLua_wxMimeTypesManager_ClearData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMimeTypesManager_ClearData[1] = {{ wxLua_wxMimeTypesManager_ClearData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMimeTypesManager_ClearData }};
//     void ClearData();
static int LUACALL wxLua_wxMimeTypesManager_ClearData(lua_State *L)
{
    // get this
    wxMimeTypesManager * self = (wxMimeTypesManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMimeTypesManager);
    // call ClearData
    self->ClearData();

    return 0;
}


#if wxLUA_USE_wxArrayString
static wxLuaArgType s_wxluatypeArray_wxLua_wxMimeTypesManager_EnumAllFileTypes[] = { &wxluatype_wxMimeTypesManager, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxMimeTypesManager_EnumAllFileTypes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMimeTypesManager_EnumAllFileTypes[1] = {{ wxLua_wxMimeTypesManager_EnumAllFileTypes, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMimeTypesManager_EnumAllFileTypes }};
//     size_t EnumAllFileTypes(wxArrayString& mimetypes);
static int LUACALL wxLua_wxMimeTypesManager_EnumAllFileTypes(lua_State *L)
{
    // wxArrayString mimetypes
    wxArrayString * mimetypes = (wxArrayString *)wxluaT_getuserdatatype(L, 2, wxluatype_wxArrayString);
    // get this
    wxMimeTypesManager * self = (wxMimeTypesManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMimeTypesManager);
    // call EnumAllFileTypes
    size_t returns = (self->EnumAllFileTypes(*mimetypes));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // wxLUA_USE_wxArrayString

static wxLuaArgType s_wxluatypeArray_wxLua_wxMimeTypesManager_GetFileTypeFromExtension[] = { &wxluatype_wxMimeTypesManager, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMimeTypesManager_GetFileTypeFromExtension(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMimeTypesManager_GetFileTypeFromExtension[1] = {{ wxLua_wxMimeTypesManager_GetFileTypeFromExtension, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMimeTypesManager_GetFileTypeFromExtension }};
//     wxFileType *GetFileTypeFromExtension(const wxString& ext);
static int LUACALL wxLua_wxMimeTypesManager_GetFileTypeFromExtension(lua_State *L)
{
    // const wxString ext
    const wxString ext = wxlua_getwxStringtype(L, 2);
    // get this
    wxMimeTypesManager * self = (wxMimeTypesManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMimeTypesManager);
    // call GetFileTypeFromExtension
    wxFileType* returns = (wxFileType*)self->GetFileTypeFromExtension(ext);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileType);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMimeTypesManager_GetFileTypeFromMimeType[] = { &wxluatype_wxMimeTypesManager, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMimeTypesManager_GetFileTypeFromMimeType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMimeTypesManager_GetFileTypeFromMimeType[1] = {{ wxLua_wxMimeTypesManager_GetFileTypeFromMimeType, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMimeTypesManager_GetFileTypeFromMimeType }};
//     wxFileType *GetFileTypeFromMimeType(const wxString& mimeType);
static int LUACALL wxLua_wxMimeTypesManager_GetFileTypeFromMimeType(lua_State *L)
{
    // const wxString mimeType
    const wxString mimeType = wxlua_getwxStringtype(L, 2);
    // get this
    wxMimeTypesManager * self = (wxMimeTypesManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMimeTypesManager);
    // call GetFileTypeFromMimeType
    wxFileType* returns = (wxFileType*)self->GetFileTypeFromMimeType(mimeType);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileType);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMimeTypesManager_Initialize[] = { &wxluatype_wxMimeTypesManager, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMimeTypesManager_Initialize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMimeTypesManager_Initialize[1] = {{ wxLua_wxMimeTypesManager_Initialize, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxMimeTypesManager_Initialize }};
//     void Initialize(int mailcapStyle = wxMAILCAP_ALL, const wxString& extraDir = "");
static int LUACALL wxLua_wxMimeTypesManager_Initialize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString extraDir = ""
    const wxString extraDir = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // int mailcapStyle = wxMAILCAP_ALL
    int mailcapStyle = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxMAILCAP_ALL);
    // get this
    wxMimeTypesManager * self = (wxMimeTypesManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMimeTypesManager);
    // call Initialize
    self->Initialize(mailcapStyle, extraDir);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMimeTypesManager_IsOfType[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMimeTypesManager_IsOfType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMimeTypesManager_IsOfType[1] = {{ wxLua_wxMimeTypesManager_IsOfType, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxMimeTypesManager_IsOfType }};
//     static bool IsOfType(const wxString& mimeType, const wxString& wildcard);
static int LUACALL wxLua_wxMimeTypesManager_IsOfType(lua_State *L)
{
    // const wxString wildcard
    const wxString wildcard = wxlua_getwxStringtype(L, 2);
    // const wxString mimeType
    const wxString mimeType = wxlua_getwxStringtype(L, 1);
    // call IsOfType
    bool returns = (wxMimeTypesManager::IsOfType(mimeType, wildcard));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMimeTypesManager_ReadMailcap[] = { &wxluatype_wxMimeTypesManager, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxMimeTypesManager_ReadMailcap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMimeTypesManager_ReadMailcap[1] = {{ wxLua_wxMimeTypesManager_ReadMailcap, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxMimeTypesManager_ReadMailcap }};
//     bool ReadMailcap(const wxString& filename, bool fallback = false);
static int LUACALL wxLua_wxMimeTypesManager_ReadMailcap(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool fallback = false
    bool fallback = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxMimeTypesManager * self = (wxMimeTypesManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMimeTypesManager);
    // call ReadMailcap
    bool returns = (self->ReadMailcap(filename, fallback));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMimeTypesManager_ReadMimeTypes[] = { &wxluatype_wxMimeTypesManager, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMimeTypesManager_ReadMimeTypes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMimeTypesManager_ReadMimeTypes[1] = {{ wxLua_wxMimeTypesManager_ReadMimeTypes, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMimeTypesManager_ReadMimeTypes }};
//     bool ReadMimeTypes(const wxString& filename);
static int LUACALL wxLua_wxMimeTypesManager_ReadMimeTypes(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxMimeTypesManager * self = (wxMimeTypesManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMimeTypesManager);
    // call ReadMimeTypes
    bool returns = (self->ReadMimeTypes(filename));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMimeTypesManager_Unassociate[] = { &wxluatype_wxMimeTypesManager, &wxluatype_wxFileType, NULL };
static int LUACALL wxLua_wxMimeTypesManager_Unassociate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMimeTypesManager_Unassociate[1] = {{ wxLua_wxMimeTypesManager_Unassociate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMimeTypesManager_Unassociate }};
//     bool Unassociate(wxFileType *ft)
static int LUACALL wxLua_wxMimeTypesManager_Unassociate(lua_State *L)
{
    // wxFileType ft
    wxFileType * ft = (wxFileType *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFileType);
    // get this
    wxMimeTypesManager * self = (wxMimeTypesManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMimeTypesManager);
    // call Unassociate
    bool returns = (self->Unassociate(ft));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMimeTypesManager_methods[] = {
    { "AddFallback", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMimeTypesManager_AddFallback, 1, NULL },
    { "Associate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMimeTypesManager_Associate, 1, NULL },
    { "ClearData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMimeTypesManager_ClearData, 1, NULL },

#if wxLUA_USE_wxArrayString
    { "EnumAllFileTypes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMimeTypesManager_EnumAllFileTypes, 1, NULL },
#endif // wxLUA_USE_wxArrayString

    { "GetFileTypeFromExtension", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMimeTypesManager_GetFileTypeFromExtension, 1, NULL },
    { "GetFileTypeFromMimeType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMimeTypesManager_GetFileTypeFromMimeType, 1, NULL },
    { "Initialize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMimeTypesManager_Initialize, 1, NULL },
    { "IsOfType", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxMimeTypesManager_IsOfType, 1, NULL },
    { "ReadMailcap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMimeTypesManager_ReadMailcap, 1, NULL },
    { "ReadMimeTypes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMimeTypesManager_ReadMimeTypes, 1, NULL },
    { "Unassociate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMimeTypesManager_Unassociate, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxMimeTypesManager_methodCount = sizeof(wxMimeTypesManager_methods)/sizeof(wxLuaBindMethod) - 1;



#if wxUSE_STREAMS
// ---------------------------------------------------------------------------
// Bind class wxStreamBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxStreamBase'
int wxluatype_wxStreamBase = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxStreamBase_GetLastError[] = { &wxluatype_wxStreamBase, NULL };
static int LUACALL wxLua_wxStreamBase_GetLastError(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStreamBase_GetLastError[1] = {{ wxLua_wxStreamBase_GetLastError, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStreamBase_GetLastError }};
//     wxStreamError GetLastError() const
static int LUACALL wxLua_wxStreamBase_GetLastError(lua_State *L)
{
    // get this
    wxStreamBase * self = (wxStreamBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStreamBase);
    // call GetLastError
    wxStreamError returns = (self->GetLastError());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,6,0)) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxStreamBase_GetLength[] = { &wxluatype_wxStreamBase, NULL };
static int LUACALL wxLua_wxStreamBase_GetLength(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStreamBase_GetLength[1] = {{ wxLua_wxStreamBase_GetLength, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStreamBase_GetLength }};
//     %wxchkver_2_6 wxFileOffset GetLength() const
static int LUACALL wxLua_wxStreamBase_GetLength(lua_State *L)
{
    // get this
    wxStreamBase * self = (wxStreamBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStreamBase);
    // call GetLength
    wxFileOffset returns = (self->GetLength());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,6,0)) && (wxUSE_STREAMS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxStreamBase_GetSize[] = { &wxluatype_wxStreamBase, NULL };
static int LUACALL wxLua_wxStreamBase_GetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStreamBase_GetSize[1] = {{ wxLua_wxStreamBase_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStreamBase_GetSize }};
//     size_t GetSize() const
static int LUACALL wxLua_wxStreamBase_GetSize(lua_State *L)
{
    // get this
    wxStreamBase * self = (wxStreamBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStreamBase);
    // call GetSize
    size_t returns = (self->GetSize());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStreamBase_IsOk[] = { &wxluatype_wxStreamBase, NULL };
static int LUACALL wxLua_wxStreamBase_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStreamBase_IsOk[1] = {{ wxLua_wxStreamBase_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStreamBase_IsOk }};
//     bool IsOk() const
static int LUACALL wxLua_wxStreamBase_IsOk(lua_State *L)
{
    // get this
    wxStreamBase * self = (wxStreamBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStreamBase);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStreamBase_IsSeekable[] = { &wxluatype_wxStreamBase, NULL };
static int LUACALL wxLua_wxStreamBase_IsSeekable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStreamBase_IsSeekable[1] = {{ wxLua_wxStreamBase_IsSeekable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStreamBase_IsSeekable }};
//     bool IsSeekable() const
static int LUACALL wxLua_wxStreamBase_IsSeekable(lua_State *L)
{
    // get this
    wxStreamBase * self = (wxStreamBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStreamBase);
    // call IsSeekable
    bool returns = (self->IsSeekable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStreamBase_Reset[] = { &wxluatype_wxStreamBase, NULL };
static int LUACALL wxLua_wxStreamBase_Reset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStreamBase_Reset[1] = {{ wxLua_wxStreamBase_Reset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStreamBase_Reset }};
//     void Reset()
static int LUACALL wxLua_wxStreamBase_Reset(lua_State *L)
{
    // get this
    wxStreamBase * self = (wxStreamBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStreamBase);
    // call Reset
    self->Reset();

    return 0;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxStreamBase_methods[] = {
    { "GetLastError", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStreamBase_GetLastError, 1, NULL },

#if (wxCHECK_VERSION(2,6,0)) && (wxUSE_STREAMS)
    { "GetLength", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStreamBase_GetLength, 1, NULL },
#endif // (wxCHECK_VERSION(2,6,0)) && (wxUSE_STREAMS)

    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStreamBase_GetSize, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStreamBase_IsOk, 1, NULL },
    { "IsSeekable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStreamBase_IsSeekable, 1, NULL },
    { "Reset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStreamBase_Reset, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxStreamBase_methodCount = sizeof(wxStreamBase_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_STREAMS


#if wxUSE_STREAMS
// ---------------------------------------------------------------------------
// Bind class wxInputStream
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxInputStream'
int wxluatype_wxInputStream = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxInputStream_CanRead[] = { &wxluatype_wxInputStream, NULL };
static int LUACALL wxLua_wxInputStream_CanRead(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxInputStream_CanRead[1] = {{ wxLua_wxInputStream_CanRead, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxInputStream_CanRead }};
//     bool CanRead() const
static int LUACALL wxLua_wxInputStream_CanRead(lua_State *L)
{
    // get this
    wxInputStream * self = (wxInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxInputStream);
    // call CanRead
    bool returns = (self->CanRead());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxInputStream_Eof[] = { &wxluatype_wxInputStream, NULL };
static int LUACALL wxLua_wxInputStream_Eof(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxInputStream_Eof[1] = {{ wxLua_wxInputStream_Eof, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxInputStream_Eof }};
//     bool Eof()
static int LUACALL wxLua_wxInputStream_Eof(lua_State *L)
{
    // get this
    wxInputStream * self = (wxInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxInputStream);
    // call Eof
    bool returns = (self->Eof());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxInputStream_GetC[] = { &wxluatype_wxInputStream, NULL };
static int LUACALL wxLua_wxInputStream_GetC(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxInputStream_GetC[1] = {{ wxLua_wxInputStream_GetC, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxInputStream_GetC }};
//     char GetC()
static int LUACALL wxLua_wxInputStream_GetC(lua_State *L)
{
    // get this
    wxInputStream * self = (wxInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxInputStream);
    // call GetC
    char returns = (self->GetC());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxInputStream_LastRead[] = { &wxluatype_wxInputStream, NULL };
static int LUACALL wxLua_wxInputStream_LastRead(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxInputStream_LastRead[1] = {{ wxLua_wxInputStream_LastRead, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxInputStream_LastRead }};
//     size_t LastRead() const
static int LUACALL wxLua_wxInputStream_LastRead(lua_State *L)
{
    // get this
    wxInputStream * self = (wxInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxInputStream);
    // call LastRead
    size_t returns = (self->LastRead());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxInputStream_Peek[] = { &wxluatype_wxInputStream, NULL };
static int LUACALL wxLua_wxInputStream_Peek(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxInputStream_Peek[1] = {{ wxLua_wxInputStream_Peek, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxInputStream_Peek }};
//     char Peek()
static int LUACALL wxLua_wxInputStream_Peek(lua_State *L)
{
    // get this
    wxInputStream * self = (wxInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxInputStream);
    // call Peek
    char returns = (self->Peek());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxInputStream_Read1[] = { &wxluatype_wxInputStream, &wxluatype_wxOutputStream, NULL };
static int LUACALL wxLua_wxInputStream_Read1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxInputStream_Read1[1] = {{ wxLua_wxInputStream_Read1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxInputStream_Read1 }};
//     wxInputStream& Read(wxOutputStream& stream_in)
static int LUACALL wxLua_wxInputStream_Read1(lua_State *L)
{
    // wxOutputStream stream_in
    wxOutputStream * stream_in = (wxOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxOutputStream);
    // get this
    wxInputStream * self = (wxInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxInputStream);
    // call Read
    wxInputStream* returns = &self->Read(*stream_in);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxInputStream);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxInputStream_Read[] = { &wxluatype_wxInputStream, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxInputStream_Read(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxInputStream_Read[1] = {{ wxLua_wxInputStream_Read, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxInputStream_Read }};
// %override wxLua_wxInputStream_Read
// wxInputStream& Read(void *buffer, size_t size)
static int LUACALL wxLua_wxInputStream_Read(lua_State *L)
{
    // size_t size
    size_t size = (size_t)wxlua_getintegertype(L, 2);
    // void *buffer
    void *buffer = malloc(size);
    // get this
    wxInputStream *self = (wxInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxInputStream);
    if (buffer != NULL)
    {
        // call Read
        // wxInputStream *returns = & // we don't return wxInputStream
        self->Read(buffer, size);
        // only return the data that was read, they already have self
        //wxluaT_pushuserdatatype(L, returns, wxluatype_wxInputStream);
        lua_pushlstring(L, (const char *)buffer, size);
        free(buffer);
        return 1;
    }
    return 0;
}



#if (wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxInputStream_SeekI[] = { &wxluatype_wxInputStream, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxInputStream_SeekI(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxInputStream_SeekI[1] = {{ wxLua_wxInputStream_SeekI, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxInputStream_SeekI }};
//     wxFileOffset SeekI(wxFileOffset pos, wxSeekMode mode = wxFromStart)
static int LUACALL wxLua_wxInputStream_SeekI(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxSeekMode mode = wxFromStart
    wxSeekMode mode = (argCount >= 3 ? (wxSeekMode)wxlua_getenumtype(L, 3) : wxFromStart);
    // wxFileOffset pos
    wxFileOffset pos = (wxFileOffset)wxlua_getuintegertype(L, 2);
    // get this
    wxInputStream * self = (wxInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxInputStream);
    // call SeekI
    wxFileOffset returns = (self->SeekI(pos, mode));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxInputStream_TellI[] = { &wxluatype_wxInputStream, NULL };
static int LUACALL wxLua_wxInputStream_TellI(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxInputStream_TellI[1] = {{ wxLua_wxInputStream_TellI, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxInputStream_TellI }};
//     wxFileOffset TellI() const
static int LUACALL wxLua_wxInputStream_TellI(lua_State *L)
{
    // get this
    wxInputStream * self = (wxInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxInputStream);
    // call TellI
    wxFileOffset returns = (self->TellI());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxInputStream_Ungetch1[] = { &wxluatype_wxInputStream, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxInputStream_Ungetch1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxInputStream_Ungetch1[1] = {{ wxLua_wxInputStream_Ungetch1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxInputStream_Ungetch1 }};
//     bool Ungetch(char c)
static int LUACALL wxLua_wxInputStream_Ungetch1(lua_State *L)
{
    // char c
    char c = (char)wxlua_getnumbertype(L, 2);
    // get this
    wxInputStream * self = (wxInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxInputStream);
    // call Ungetch
    bool returns = (self->Ungetch(c));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#define wxLua_wxInputStream_Ungetch wxLua_wxInputStream_UngetchString
static wxLuaArgType s_wxluatypeArray_wxLua_wxInputStream_Ungetch[] = { &wxluatype_wxInputStream, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxInputStream_Ungetch(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxInputStream_Ungetch[1] = {{ wxLua_wxInputStream_Ungetch, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxInputStream_Ungetch }};
// %override wxLua_wxInputStream_UngetchString
// size_t Ungetch(const char* buffer, size_t size)
static int LUACALL wxLua_wxInputStream_UngetchString(lua_State *L)
{
    // size_t size
    size_t size = (size_t)wxlua_getintegertype(L, 3);
    // const char* buffer
    const char *buffer = (const char *)lua_tostring(L, 2);
    // get this
    wxInputStream *self = (wxInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxInputStream);
    // call Ungetch
    size_t returns = self->Ungetch(buffer, size);
    // push the result number
    lua_pushnumber(L, returns);
    // return the number of parameters
    return 1;
}





#if (wxUSE_STREAMS)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxInputStream_Read_overload[] =
{
    { wxLua_wxInputStream_Read1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxInputStream_Read1 },
    { wxLua_wxInputStream_Read, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxInputStream_Read },
};
static int s_wxluafunc_wxLua_wxInputStream_Read_overload_count = sizeof(s_wxluafunc_wxLua_wxInputStream_Read_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxInputStream_Ungetch_overload[] =
{
    { wxLua_wxInputStream_Ungetch1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxInputStream_Ungetch1 },
    { wxLua_wxInputStream_Ungetch, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxInputStream_Ungetch },
};
static int s_wxluafunc_wxLua_wxInputStream_Ungetch_overload_count = sizeof(s_wxluafunc_wxLua_wxInputStream_Ungetch_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxUSE_STREAMS)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxInputStream_methods[] = {
    { "CanRead", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxInputStream_CanRead, 1, NULL },
    { "Eof", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxInputStream_Eof, 1, NULL },
    { "GetC", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxInputStream_GetC, 1, NULL },
    { "LastRead", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxInputStream_LastRead, 1, NULL },
    { "Peek", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxInputStream_Peek, 1, NULL },

#if (wxUSE_STREAMS)
    { "Read", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxInputStream_Read_overload, s_wxluafunc_wxLua_wxInputStream_Read_overload_count, 0 },
#endif // (wxUSE_STREAMS)

#if (wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE)
    { "SeekI", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxInputStream_SeekI, 1, NULL },
#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE)

    { "TellI", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxInputStream_TellI, 1, NULL },

#if (wxUSE_STREAMS)
    { "Ungetch", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxInputStream_Ungetch_overload, s_wxluafunc_wxLua_wxInputStream_Ungetch_overload_count, 0 },
#endif // (wxUSE_STREAMS)

    { 0, 0, 0, 0 },
};

int wxInputStream_methodCount = sizeof(wxInputStream_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_STREAMS


#if wxUSE_STREAMS
// ---------------------------------------------------------------------------
// Bind class wxOutputStream
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxOutputStream'
int wxluatype_wxOutputStream = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxOutputStream_Close[] = { &wxluatype_wxOutputStream, NULL };
static int LUACALL wxLua_wxOutputStream_Close(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxOutputStream_Close[1] = {{ wxLua_wxOutputStream_Close, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxOutputStream_Close }};
//     bool Close()
static int LUACALL wxLua_wxOutputStream_Close(lua_State *L)
{
    // get this
    wxOutputStream * self = (wxOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxOutputStream);
    // call Close
    bool returns = (self->Close());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxOutputStream_LastWrite[] = { &wxluatype_wxOutputStream, NULL };
static int LUACALL wxLua_wxOutputStream_LastWrite(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxOutputStream_LastWrite[1] = {{ wxLua_wxOutputStream_LastWrite, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxOutputStream_LastWrite }};
//     size_t LastWrite() const
static int LUACALL wxLua_wxOutputStream_LastWrite(lua_State *L)
{
    // get this
    wxOutputStream * self = (wxOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxOutputStream);
    // call LastWrite
    size_t returns = (self->LastWrite());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxOutputStream_PutC[] = { &wxluatype_wxOutputStream, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxOutputStream_PutC(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxOutputStream_PutC[1] = {{ wxLua_wxOutputStream_PutC, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxOutputStream_PutC }};
//     void PutC(char c)
static int LUACALL wxLua_wxOutputStream_PutC(lua_State *L)
{
    // char c
    char c = (char)wxlua_getnumbertype(L, 2);
    // get this
    wxOutputStream * self = (wxOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxOutputStream);
    // call PutC
    self->PutC(c);

    return 0;
}


#if (wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxOutputStream_SeekO[] = { &wxluatype_wxOutputStream, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxOutputStream_SeekO(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxOutputStream_SeekO[1] = {{ wxLua_wxOutputStream_SeekO, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxOutputStream_SeekO }};
//     wxFileOffset SeekO(wxFileOffset pos, wxSeekMode mode = wxFromStart)
static int LUACALL wxLua_wxOutputStream_SeekO(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxSeekMode mode = wxFromStart
    wxSeekMode mode = (argCount >= 3 ? (wxSeekMode)wxlua_getenumtype(L, 3) : wxFromStart);
    // wxFileOffset pos
    wxFileOffset pos = (wxFileOffset)wxlua_getuintegertype(L, 2);
    // get this
    wxOutputStream * self = (wxOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxOutputStream);
    // call SeekO
    wxFileOffset returns = (self->SeekO(pos, mode));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxOutputStream_TellO[] = { &wxluatype_wxOutputStream, NULL };
static int LUACALL wxLua_wxOutputStream_TellO(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxOutputStream_TellO[1] = {{ wxLua_wxOutputStream_TellO, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxOutputStream_TellO }};
//     wxFileOffset TellO() const
static int LUACALL wxLua_wxOutputStream_TellO(lua_State *L)
{
    // get this
    wxOutputStream * self = (wxOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxOutputStream);
    // call TellO
    wxFileOffset returns = (self->TellO());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxOutputStream_Write1[] = { &wxluatype_wxOutputStream, &wxluatype_wxInputStream, NULL };
static int LUACALL wxLua_wxOutputStream_Write1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxOutputStream_Write1[1] = {{ wxLua_wxOutputStream_Write1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxOutputStream_Write1 }};
//     wxOutputStream& Write(wxInputStream& stream_in)
static int LUACALL wxLua_wxOutputStream_Write1(lua_State *L)
{
    // wxInputStream stream_in
    wxInputStream * stream_in = (wxInputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxInputStream);
    // get this
    wxOutputStream * self = (wxOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxOutputStream);
    // call Write
    wxOutputStream* returns = &self->Write(*stream_in);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxOutputStream);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxOutputStream_Write[] = { &wxluatype_wxOutputStream, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxOutputStream_Write(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxOutputStream_Write[1] = {{ wxLua_wxOutputStream_Write, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxOutputStream_Write }};
// %override wxLua_wxOutputStream_Write
// wxOutputStream& Write(const void *buffer, size_t size)
static int LUACALL wxLua_wxOutputStream_Write(lua_State *L)
{
    // size_t size
    size_t size = (size_t)wxlua_getintegertype(L, 3);
    // const void *buffer
    const void *buffer = (void *)lua_tostring(L, 2);
    // get this
    wxOutputStream *self = (wxOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxOutputStream);
    // call Write
    wxOutputStream *returns = &self->Write(buffer, size);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxOutputStream);
    // return the number of parameters
    return 1;
}





#if (wxUSE_STREAMS)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxOutputStream_Write_overload[] =
{
    { wxLua_wxOutputStream_Write1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxOutputStream_Write1 },
    { wxLua_wxOutputStream_Write, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxOutputStream_Write },
};
static int s_wxluafunc_wxLua_wxOutputStream_Write_overload_count = sizeof(s_wxluafunc_wxLua_wxOutputStream_Write_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxUSE_STREAMS)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxOutputStream_methods[] = {
    { "Close", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxOutputStream_Close, 1, NULL },
    { "LastWrite", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxOutputStream_LastWrite, 1, NULL },
    { "PutC", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxOutputStream_PutC, 1, NULL },

#if (wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE)
    { "SeekO", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxOutputStream_SeekO, 1, NULL },
#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE)

    { "TellO", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxOutputStream_TellO, 1, NULL },

#if (wxUSE_STREAMS)
    { "Write", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxOutputStream_Write_overload, s_wxluafunc_wxLua_wxOutputStream_Write_overload_count, 0 },
#endif // (wxUSE_STREAMS)

    { 0, 0, 0, 0 },
};

int wxOutputStream_methodCount = sizeof(wxOutputStream_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_STREAMS


#if wxUSE_STREAMS
// ---------------------------------------------------------------------------
// Bind class wxFileInputStream
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFileInputStream'
int wxluatype_wxFileInputStream = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileInputStream_Ok[] = { &wxluatype_wxFileInputStream, NULL };
static int LUACALL wxLua_wxFileInputStream_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileInputStream_Ok[1] = {{ wxLua_wxFileInputStream_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileInputStream_Ok }};
//     bool Ok() const
static int LUACALL wxLua_wxFileInputStream_Ok(lua_State *L)
{
    // get this
    wxFileInputStream * self = (wxFileInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileInputStream);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileInputStream_delete[] = { &wxluatype_wxFileInputStream, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileInputStream_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFileInputStream_delete }};


#if (wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileInputStream_constructor1[] = { &wxluatype_wxFile, NULL };
static int LUACALL wxLua_wxFileInputStream_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileInputStream_constructor1[1] = {{ wxLua_wxFileInputStream_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFileInputStream_constructor1 }};
//     wxFileInputStream(wxFile& file)
static int LUACALL wxLua_wxFileInputStream_constructor1(lua_State *L)
{
    // wxFile file
    wxFile * file = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call constructor
    wxFileInputStream* returns = new wxFileInputStream(*file);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileInputStream((wxFileInputStream*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileInputStream);

    return 1;
}

#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileInputStream_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileInputStream_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileInputStream_constructor[1] = {{ wxLua_wxFileInputStream_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFileInputStream_constructor }};
//     wxFileInputStream(const wxString& fileName)
static int LUACALL wxLua_wxFileInputStream_constructor(lua_State *L)
{
    // const wxString fileName
    const wxString fileName = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxFileInputStream* returns = new wxFileInputStream(fileName);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileInputStream((wxFileInputStream*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileInputStream);

    return 1;
}




#if ((wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE))||(wxUSE_STREAMS)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileInputStream_constructor_overload[] =
{

#if (wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE)
    { wxLua_wxFileInputStream_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFileInputStream_constructor1 },
#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE)
    { wxLua_wxFileInputStream_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFileInputStream_constructor },
};
static int s_wxluafunc_wxLua_wxFileInputStream_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxFileInputStream_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE))||(wxUSE_STREAMS)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFileInputStream_methods[] = {
    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileInputStream_Ok, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFileInputStream_delete, 1, NULL },

#if ((wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE))||(wxUSE_STREAMS)
    { "wxFileInputStream", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFileInputStream_constructor_overload, s_wxluafunc_wxLua_wxFileInputStream_constructor_overload_count, 0 },
#endif // ((wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE))||(wxUSE_STREAMS)

    { 0, 0, 0, 0 },
};

int wxFileInputStream_methodCount = sizeof(wxFileInputStream_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_STREAMS


#if wxUSE_STREAMS
// ---------------------------------------------------------------------------
// Bind class wxFileOutputStream
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFileOutputStream'
int wxluatype_wxFileOutputStream = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileOutputStream_Ok[] = { &wxluatype_wxFileOutputStream, NULL };
static int LUACALL wxLua_wxFileOutputStream_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileOutputStream_Ok[1] = {{ wxLua_wxFileOutputStream_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileOutputStream_Ok }};
//     bool Ok() const
static int LUACALL wxLua_wxFileOutputStream_Ok(lua_State *L)
{
    // get this
    wxFileOutputStream * self = (wxFileOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileOutputStream);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileOutputStream_delete[] = { &wxluatype_wxFileOutputStream, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileOutputStream_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFileOutputStream_delete }};


#if (wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileOutputStream_constructor1[] = { &wxluatype_wxFile, NULL };
static int LUACALL wxLua_wxFileOutputStream_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileOutputStream_constructor1[1] = {{ wxLua_wxFileOutputStream_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFileOutputStream_constructor1 }};
//     wxFileOutputStream(wxFile& file)
static int LUACALL wxLua_wxFileOutputStream_constructor1(lua_State *L)
{
    // wxFile file
    wxFile * file = (wxFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFile);
    // call constructor
    wxFileOutputStream* returns = new wxFileOutputStream(*file);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileOutputStream((wxFileOutputStream*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileOutputStream);

    return 1;
}

#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileOutputStream_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileOutputStream_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileOutputStream_constructor[1] = {{ wxLua_wxFileOutputStream_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFileOutputStream_constructor }};
//     wxFileOutputStream(const wxString& fileName)
static int LUACALL wxLua_wxFileOutputStream_constructor(lua_State *L)
{
    // const wxString fileName
    const wxString fileName = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxFileOutputStream* returns = new wxFileOutputStream(fileName);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileOutputStream((wxFileOutputStream*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileOutputStream);

    return 1;
}




#if ((wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE))||(wxUSE_STREAMS)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileOutputStream_constructor_overload[] =
{

#if (wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE)
    { wxLua_wxFileOutputStream_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFileOutputStream_constructor1 },
#endif // (wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE)
    { wxLua_wxFileOutputStream_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxFileOutputStream_constructor },
};
static int s_wxluafunc_wxLua_wxFileOutputStream_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxFileOutputStream_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE))||(wxUSE_STREAMS)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFileOutputStream_methods[] = {
    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileOutputStream_Ok, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFileOutputStream_delete, 1, NULL },

#if ((wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE))||(wxUSE_STREAMS)
    { "wxFileOutputStream", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFileOutputStream_constructor_overload, s_wxluafunc_wxLua_wxFileOutputStream_constructor_overload_count, 0 },
#endif // ((wxUSE_STREAMS) && (wxLUA_USE_wxFile && wxUSE_FILE))||(wxUSE_STREAMS)

    { 0, 0, 0, 0 },
};

int wxFileOutputStream_methodCount = sizeof(wxFileOutputStream_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_STREAMS


#if wxUSE_STREAMS
// ---------------------------------------------------------------------------
// Bind class wxMemoryInputStream
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMemoryInputStream'
int wxluatype_wxMemoryInputStream = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxMemoryInputStream_delete[] = { &wxluatype_wxMemoryInputStream, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMemoryInputStream_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxMemoryInputStream_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxMemoryInputStream_constructor[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxMemoryInputStream_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMemoryInputStream_constructor[1] = {{ wxLua_wxMemoryInputStream_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxMemoryInputStream_constructor }};
// %override wxLua_wxMemoryInputStream_constructor
//     wxMemoryInputStream(const char *data, size_t length)
static int LUACALL wxLua_wxMemoryInputStream_constructor(lua_State *L)
{
    // size_t length
    size_t length = (size_t)wxlua_getnumbertype(L, 2);
    // const char data
    const char* data = (const char*)wxlua_getstringtype(L, 1);
    // call constructor
    wxMemoryInputStream* returns = new wxMemoryInputStream(data, length);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxMemoryInputStream((wxMemoryInputStream*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMemoryInputStream);

    return 1;
}





// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMemoryInputStream_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxMemoryInputStream_delete, 1, NULL },
    { "wxMemoryInputStream", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMemoryInputStream_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxMemoryInputStream_methodCount = sizeof(wxMemoryInputStream_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_STREAMS


#if wxUSE_STREAMS
// ---------------------------------------------------------------------------
// Bind class wxDataInputStream
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataInputStream'
int wxluatype_wxDataInputStream = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataInputStream_BigEndianOrdered[] = { &wxluatype_wxDataInputStream, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDataInputStream_BigEndianOrdered(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataInputStream_BigEndianOrdered[1] = {{ wxLua_wxDataInputStream_BigEndianOrdered, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataInputStream_BigEndianOrdered }};
//     void BigEndianOrdered(bool be_order)
static int LUACALL wxLua_wxDataInputStream_BigEndianOrdered(lua_State *L)
{
    // bool be_order
    bool be_order = wxlua_getbooleantype(L, 2);
    // get this
    wxDataInputStream * self = (wxDataInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataInputStream);
    // call BigEndianOrdered
    self->BigEndianOrdered(be_order);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataInputStream_IsOk[] = { &wxluatype_wxDataInputStream, NULL };
static int LUACALL wxLua_wxDataInputStream_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataInputStream_IsOk[1] = {{ wxLua_wxDataInputStream_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataInputStream_IsOk }};
//     bool IsOk()
static int LUACALL wxLua_wxDataInputStream_IsOk(lua_State *L)
{
    // get this
    wxDataInputStream * self = (wxDataInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataInputStream);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataInputStream_Read16[] = { &wxluatype_wxDataInputStream, NULL };
static int LUACALL wxLua_wxDataInputStream_Read16(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataInputStream_Read16[1] = {{ wxLua_wxDataInputStream_Read16, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataInputStream_Read16 }};
//     wxUint16 Read16()
static int LUACALL wxLua_wxDataInputStream_Read16(lua_State *L)
{
    // get this
    wxDataInputStream * self = (wxDataInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataInputStream);
    // call Read16
    wxUint16 returns = (self->Read16());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataInputStream_Read32[] = { &wxluatype_wxDataInputStream, NULL };
static int LUACALL wxLua_wxDataInputStream_Read32(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataInputStream_Read32[1] = {{ wxLua_wxDataInputStream_Read32, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataInputStream_Read32 }};
//     wxUint32 Read32()
static int LUACALL wxLua_wxDataInputStream_Read32(lua_State *L)
{
    // get this
    wxDataInputStream * self = (wxDataInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataInputStream);
    // call Read32
    wxUint32 returns = (self->Read32());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataInputStream_Read8[] = { &wxluatype_wxDataInputStream, NULL };
static int LUACALL wxLua_wxDataInputStream_Read8(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataInputStream_Read8[1] = {{ wxLua_wxDataInputStream_Read8, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataInputStream_Read8 }};
//     wxUint8 Read8()
static int LUACALL wxLua_wxDataInputStream_Read8(lua_State *L)
{
    // get this
    wxDataInputStream * self = (wxDataInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataInputStream);
    // call Read8
    wxUint8 returns = (self->Read8());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataInputStream_ReadDouble[] = { &wxluatype_wxDataInputStream, NULL };
static int LUACALL wxLua_wxDataInputStream_ReadDouble(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataInputStream_ReadDouble[1] = {{ wxLua_wxDataInputStream_ReadDouble, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataInputStream_ReadDouble }};
//     double ReadDouble()
static int LUACALL wxLua_wxDataInputStream_ReadDouble(lua_State *L)
{
    // get this
    wxDataInputStream * self = (wxDataInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataInputStream);
    // call ReadDouble
    double returns = (self->ReadDouble());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataInputStream_ReadString[] = { &wxluatype_wxDataInputStream, NULL };
static int LUACALL wxLua_wxDataInputStream_ReadString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataInputStream_ReadString[1] = {{ wxLua_wxDataInputStream_ReadString, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataInputStream_ReadString }};
//     wxString ReadString()
static int LUACALL wxLua_wxDataInputStream_ReadString(lua_State *L)
{
    // get this
    wxDataInputStream * self = (wxDataInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataInputStream);
    // call ReadString
    wxString returns = (self->ReadString());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataInputStream_delete[] = { &wxluatype_wxDataInputStream, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataInputStream_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataInputStream_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataInputStream_constructor[] = { &wxluatype_wxInputStream, NULL };
static int LUACALL wxLua_wxDataInputStream_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataInputStream_constructor[1] = {{ wxLua_wxDataInputStream_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDataInputStream_constructor }};
//     wxDataInputStream(wxInputStream& s)
static int LUACALL wxLua_wxDataInputStream_constructor(lua_State *L)
{
    // wxInputStream s
    wxInputStream * s = (wxInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxInputStream);
    // call constructor
    wxDataInputStream* returns = new wxDataInputStream(*s);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDataInputStream((wxDataInputStream*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataInputStream);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataInputStream_methods[] = {
    { "BigEndianOrdered", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataInputStream_BigEndianOrdered, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataInputStream_IsOk, 1, NULL },
    { "Read16", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataInputStream_Read16, 1, NULL },
    { "Read32", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataInputStream_Read32, 1, NULL },
    { "Read8", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataInputStream_Read8, 1, NULL },
    { "ReadDouble", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataInputStream_ReadDouble, 1, NULL },
    { "ReadString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataInputStream_ReadString, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataInputStream_delete, 1, NULL },
    { "wxDataInputStream", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataInputStream_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataInputStream_methodCount = sizeof(wxDataInputStream_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_STREAMS


#if wxUSE_STREAMS
// ---------------------------------------------------------------------------
// Bind class wxDataOutputStream
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataOutputStream'
int wxluatype_wxDataOutputStream = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataOutputStream_BigEndianOrdered[] = { &wxluatype_wxDataOutputStream, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDataOutputStream_BigEndianOrdered(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataOutputStream_BigEndianOrdered[1] = {{ wxLua_wxDataOutputStream_BigEndianOrdered, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataOutputStream_BigEndianOrdered }};
//     void BigEndianOrdered(bool be_order)
static int LUACALL wxLua_wxDataOutputStream_BigEndianOrdered(lua_State *L)
{
    // bool be_order
    bool be_order = wxlua_getbooleantype(L, 2);
    // get this
    wxDataOutputStream * self = (wxDataOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataOutputStream);
    // call BigEndianOrdered
    self->BigEndianOrdered(be_order);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataOutputStream_IsOk[] = { &wxluatype_wxDataOutputStream, NULL };
static int LUACALL wxLua_wxDataOutputStream_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataOutputStream_IsOk[1] = {{ wxLua_wxDataOutputStream_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataOutputStream_IsOk }};
//     bool IsOk()
static int LUACALL wxLua_wxDataOutputStream_IsOk(lua_State *L)
{
    // get this
    wxDataOutputStream * self = (wxDataOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataOutputStream);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataOutputStream_Write16[] = { &wxluatype_wxDataOutputStream, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataOutputStream_Write16(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataOutputStream_Write16[1] = {{ wxLua_wxDataOutputStream_Write16, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataOutputStream_Write16 }};
//     void Write16(wxUint16 i)
static int LUACALL wxLua_wxDataOutputStream_Write16(lua_State *L)
{
    // wxUint16 i
    wxUint16 i = (wxUint16)wxlua_getuintegertype(L, 2);
    // get this
    wxDataOutputStream * self = (wxDataOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataOutputStream);
    // call Write16
    self->Write16(i);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataOutputStream_Write32[] = { &wxluatype_wxDataOutputStream, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataOutputStream_Write32(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataOutputStream_Write32[1] = {{ wxLua_wxDataOutputStream_Write32, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataOutputStream_Write32 }};
//     void Write32(wxUint32 i)
static int LUACALL wxLua_wxDataOutputStream_Write32(lua_State *L)
{
    // wxUint32 i
    wxUint32 i = (wxUint32)wxlua_getuintegertype(L, 2);
    // get this
    wxDataOutputStream * self = (wxDataOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataOutputStream);
    // call Write32
    self->Write32(i);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataOutputStream_Write8[] = { &wxluatype_wxDataOutputStream, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataOutputStream_Write8(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataOutputStream_Write8[1] = {{ wxLua_wxDataOutputStream_Write8, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataOutputStream_Write8 }};
//     void Write8(wxUint8 i)
static int LUACALL wxLua_wxDataOutputStream_Write8(lua_State *L)
{
    // wxUint8 i
    wxUint8 i = (wxUint8)wxlua_getuintegertype(L, 2);
    // get this
    wxDataOutputStream * self = (wxDataOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataOutputStream);
    // call Write8
    self->Write8(i);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataOutputStream_WriteDouble[] = { &wxluatype_wxDataOutputStream, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataOutputStream_WriteDouble(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataOutputStream_WriteDouble[1] = {{ wxLua_wxDataOutputStream_WriteDouble, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataOutputStream_WriteDouble }};
//     void WriteDouble(double d)
static int LUACALL wxLua_wxDataOutputStream_WriteDouble(lua_State *L)
{
    // double d
    double d = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxDataOutputStream * self = (wxDataOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataOutputStream);
    // call WriteDouble
    self->WriteDouble(d);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataOutputStream_WriteString[] = { &wxluatype_wxDataOutputStream, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDataOutputStream_WriteString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataOutputStream_WriteString[1] = {{ wxLua_wxDataOutputStream_WriteString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataOutputStream_WriteString }};
//     void WriteString(const wxString& string)
static int LUACALL wxLua_wxDataOutputStream_WriteString(lua_State *L)
{
    // const wxString string
    const wxString string = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataOutputStream * self = (wxDataOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataOutputStream);
    // call WriteString
    self->WriteString(string);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataOutputStream_delete[] = { &wxluatype_wxDataOutputStream, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataOutputStream_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataOutputStream_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataOutputStream_constructor[] = { &wxluatype_wxOutputStream, NULL };
static int LUACALL wxLua_wxDataOutputStream_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataOutputStream_constructor[1] = {{ wxLua_wxDataOutputStream_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDataOutputStream_constructor }};
//     wxDataOutputStream(wxOutputStream& s);
static int LUACALL wxLua_wxDataOutputStream_constructor(lua_State *L)
{
    // wxOutputStream s
    wxOutputStream * s = (wxOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxOutputStream);
    // call constructor
    wxDataOutputStream* returns = new wxDataOutputStream(*s);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDataOutputStream((wxDataOutputStream*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataOutputStream);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataOutputStream_methods[] = {
    { "BigEndianOrdered", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataOutputStream_BigEndianOrdered, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataOutputStream_IsOk, 1, NULL },
    { "Write16", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataOutputStream_Write16, 1, NULL },
    { "Write32", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataOutputStream_Write32, 1, NULL },
    { "Write8", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataOutputStream_Write8, 1, NULL },
    { "WriteDouble", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataOutputStream_WriteDouble, 1, NULL },
    { "WriteString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataOutputStream_WriteString, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataOutputStream_delete, 1, NULL },
    { "wxDataOutputStream", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataOutputStream_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataOutputStream_methodCount = sizeof(wxDataOutputStream_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_STREAMS


#if (wxUSE_STREAMS) && (wxUSE_FILESYSTEM)
// ---------------------------------------------------------------------------
// Bind class wxFSFile
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFSFile'
int wxluatype_wxFSFile = WXLUA_TUNKNOWN;

#if (wxUSE_STREAMS) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))
static wxLuaArgType s_wxluatypeArray_wxLua_wxFSFile_DetachStream[] = { &wxluatype_wxFSFile, NULL };
static int LUACALL wxLua_wxFSFile_DetachStream(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFSFile_DetachStream[1] = {{ wxLua_wxFSFile_DetachStream, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFSFile_DetachStream }};
//     %gc wxInputStream *DetachStream()
static int LUACALL wxLua_wxFSFile_DetachStream(lua_State *L)
{
    // get this
    wxFSFile * self = (wxFSFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFSFile);
    // call DetachStream
    wxInputStream* returns = (wxInputStream*)self->DetachStream();
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxInputStream(returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxInputStream);

    return 1;
}

#endif // (wxUSE_STREAMS) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))

static wxLuaArgType s_wxluatypeArray_wxLua_wxFSFile_GetAnchor[] = { &wxluatype_wxFSFile, NULL };
static int LUACALL wxLua_wxFSFile_GetAnchor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFSFile_GetAnchor[1] = {{ wxLua_wxFSFile_GetAnchor, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFSFile_GetAnchor }};
//     wxString GetAnchor() const
static int LUACALL wxLua_wxFSFile_GetAnchor(lua_State *L)
{
    // get this
    wxFSFile * self = (wxFSFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFSFile);
    // call GetAnchor
    wxString returns = (self->GetAnchor());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFSFile_GetLocation[] = { &wxluatype_wxFSFile, NULL };
static int LUACALL wxLua_wxFSFile_GetLocation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFSFile_GetLocation[1] = {{ wxLua_wxFSFile_GetLocation, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFSFile_GetLocation }};
//     wxString GetLocation() const
static int LUACALL wxLua_wxFSFile_GetLocation(lua_State *L)
{
    // get this
    wxFSFile * self = (wxFSFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFSFile);
    // call GetLocation
    wxString returns = (self->GetLocation());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFSFile_GetMimeType[] = { &wxluatype_wxFSFile, NULL };
static int LUACALL wxLua_wxFSFile_GetMimeType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFSFile_GetMimeType[1] = {{ wxLua_wxFSFile_GetMimeType, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFSFile_GetMimeType }};
//     wxString GetMimeType() const
static int LUACALL wxLua_wxFSFile_GetMimeType(lua_State *L)
{
    // get this
    wxFSFile * self = (wxFSFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFSFile);
    // call GetMimeType
    wxString returns = (self->GetMimeType());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))
static wxLuaArgType s_wxluatypeArray_wxLua_wxFSFile_GetModificationTime[] = { &wxluatype_wxFSFile, NULL };
static int LUACALL wxLua_wxFSFile_GetModificationTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFSFile_GetModificationTime[1] = {{ wxLua_wxFSFile_GetModificationTime, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFSFile_GetModificationTime }};
//     wxDateTime GetModificationTime() const
static int LUACALL wxLua_wxFSFile_GetModificationTime(lua_State *L)
{
    // get this
    wxFSFile * self = (wxFSFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFSFile);
    // call GetModificationTime
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->GetModificationTime());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDateTime((wxDateTime*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))

#if (wxUSE_STREAMS) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))
static wxLuaArgType s_wxluatypeArray_wxLua_wxFSFile_GetStream[] = { &wxluatype_wxFSFile, NULL };
static int LUACALL wxLua_wxFSFile_GetStream(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFSFile_GetStream[1] = {{ wxLua_wxFSFile_GetStream, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFSFile_GetStream }};
//     wxInputStream *GetStream() const
static int LUACALL wxLua_wxFSFile_GetStream(lua_State *L)
{
    // get this
    wxFSFile * self = (wxFSFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFSFile);
    // call GetStream
    wxInputStream* returns = (wxInputStream*)self->GetStream();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxInputStream);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFSFile_SetStream[] = { &wxluatype_wxFSFile, &wxluatype_wxInputStream, NULL };
static int LUACALL wxLua_wxFSFile_SetStream(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFSFile_SetStream[1] = {{ wxLua_wxFSFile_SetStream, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFSFile_SetStream }};
//     void SetStream(%ungc wxInputStream *stream)
static int LUACALL wxLua_wxFSFile_SetStream(lua_State *L)
{
    // wxInputStream stream
    wxInputStream * stream = (wxInputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxInputStream);
    if (wxluaO_isgcobject(L, stream)) wxluaO_undeletegcobject(L, stream);
    // get this
    wxFSFile * self = (wxFSFile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFSFile);
    // call SetStream
    self->SetStream(stream);

    return 0;
}

#endif // (wxUSE_STREAMS) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))

static wxLuaArgType s_wxluatypeArray_wxLua_wxFSFile_delete[] = { &wxluatype_wxFSFile, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFSFile_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFSFile_delete }};


#if (((wxUSE_STREAMS) && (wxUSE_FILESYSTEM)) && (wxUSE_STREAMS)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFSFile_constructor[] = { &wxluatype_wxInputStream, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxFSFile_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFSFile_constructor[1] = {{ wxLua_wxFSFile_constructor, WXLUAMETHOD_CONSTRUCTOR, 5, 5, s_wxluatypeArray_wxLua_wxFSFile_constructor }};
//     wxFSFile(%ungc wxInputStream *stream, const wxString& loc, const wxString& mimetype, const wxString& anchor, wxDateTime modif)
static int LUACALL wxLua_wxFSFile_constructor(lua_State *L)
{
    // wxDateTime modif
    wxDateTime modif = *(wxDateTime*)wxluaT_getuserdatatype(L, 5, wxluatype_wxDateTime);
    // const wxString anchor
    const wxString anchor = wxlua_getwxStringtype(L, 4);
    // const wxString mimetype
    const wxString mimetype = wxlua_getwxStringtype(L, 3);
    // const wxString loc
    const wxString loc = wxlua_getwxStringtype(L, 2);
    // wxInputStream stream
    wxInputStream * stream = (wxInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxInputStream);
    if (wxluaO_isgcobject(L, stream)) wxluaO_undeletegcobject(L, stream);
    // call constructor
    wxFSFile* returns = new wxFSFile(stream, loc, mimetype, anchor, modif);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFSFile);

    return 1;
}

#endif // (((wxUSE_STREAMS) && (wxUSE_FILESYSTEM)) && (wxUSE_STREAMS)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFSFile_methods[] = {
#if (wxUSE_STREAMS) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))
    { "DetachStream", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFSFile_DetachStream, 1, NULL },
#endif // (wxUSE_STREAMS) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))

    { "GetAnchor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFSFile_GetAnchor, 1, NULL },
    { "GetLocation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFSFile_GetLocation, 1, NULL },
    { "GetMimeType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFSFile_GetMimeType, 1, NULL },

#if (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))
    { "GetModificationTime", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFSFile_GetModificationTime, 1, NULL },
#endif // (wxLUA_USE_wxDateTime && wxUSE_DATETIME) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))

#if (wxUSE_STREAMS) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))
    { "GetStream", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFSFile_GetStream, 1, NULL },
    { "SetStream", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFSFile_SetStream, 1, NULL },
#endif // (wxUSE_STREAMS) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFSFile_delete, 1, NULL },

#if (((wxUSE_STREAMS) && (wxUSE_FILESYSTEM)) && (wxUSE_STREAMS)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
    { "wxFSFile", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFSFile_constructor, 1, NULL },
#endif // (((wxUSE_STREAMS) && (wxUSE_FILESYSTEM)) && (wxUSE_STREAMS)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

    { 0, 0, 0, 0 },
};

int wxFSFile_methodCount = sizeof(wxFSFile_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxUSE_STREAMS) && (wxUSE_FILESYSTEM)


#if (wxUSE_STREAMS) && (wxUSE_FILESYSTEM)
// ---------------------------------------------------------------------------
// Bind class wxFileSystemHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFileSystemHandler'
int wxluatype_wxFileSystemHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystemHandler_CanOpen[] = { &wxluatype_wxFileSystemHandler, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileSystemHandler_CanOpen(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystemHandler_CanOpen[1] = {{ wxLua_wxFileSystemHandler_CanOpen, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileSystemHandler_CanOpen }};
//     virtual bool CanOpen(const wxString& location) //= 0;
static int LUACALL wxLua_wxFileSystemHandler_CanOpen(lua_State *L)
{
    // const wxString location
    const wxString location = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileSystemHandler * self = (wxFileSystemHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileSystemHandler);
    // call CanOpen
    bool returns = (self->CanOpen(location));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystemHandler_FindFirst[] = { &wxluatype_wxFileSystemHandler, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFileSystemHandler_FindFirst(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystemHandler_FindFirst[1] = {{ wxLua_wxFileSystemHandler_FindFirst, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFileSystemHandler_FindFirst }};
//     virtual wxString FindFirst(const wxString& spec, int flags = 0);
static int LUACALL wxLua_wxFileSystemHandler_FindFirst(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // const wxString spec
    const wxString spec = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileSystemHandler * self = (wxFileSystemHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileSystemHandler);
    // call FindFirst
    wxString returns = (self->FindFirst(spec, flags));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystemHandler_FindNext[] = { &wxluatype_wxFileSystemHandler, NULL };
static int LUACALL wxLua_wxFileSystemHandler_FindNext(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystemHandler_FindNext[1] = {{ wxLua_wxFileSystemHandler_FindNext, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileSystemHandler_FindNext }};
//     virtual wxString FindNext();
static int LUACALL wxLua_wxFileSystemHandler_FindNext(lua_State *L)
{
    // get this
    wxFileSystemHandler * self = (wxFileSystemHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileSystemHandler);
    // call FindNext
    wxString returns = (self->FindNext());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystemHandler_OpenFile[] = { &wxluatype_wxFileSystemHandler, &wxluatype_wxFileSystem, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileSystemHandler_OpenFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystemHandler_OpenFile[1] = {{ wxLua_wxFileSystemHandler_OpenFile, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxFileSystemHandler_OpenFile }};
//     virtual wxFSFile* OpenFile(wxFileSystem& fs, const wxString& location) //= 0;
static int LUACALL wxLua_wxFileSystemHandler_OpenFile(lua_State *L)
{
    // const wxString location
    const wxString location = wxlua_getwxStringtype(L, 3);
    // wxFileSystem fs
    wxFileSystem * fs = (wxFileSystem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFileSystem);
    // get this
    wxFileSystemHandler * self = (wxFileSystemHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileSystemHandler);
    // call OpenFile
    wxFSFile* returns = (wxFSFile*)self->OpenFile(*fs, location);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFSFile);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystemHandler_delete[] = { &wxluatype_wxFileSystemHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystemHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFileSystemHandler_delete }};




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFileSystemHandler_methods[] = {
    { "CanOpen", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileSystemHandler_CanOpen, 1, NULL },
    { "FindFirst", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileSystemHandler_FindFirst, 1, NULL },
    { "FindNext", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileSystemHandler_FindNext, 1, NULL },
    { "OpenFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileSystemHandler_OpenFile, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFileSystemHandler_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxFileSystemHandler_methodCount = sizeof(wxFileSystemHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxUSE_STREAMS) && (wxUSE_FILESYSTEM)


#if (wxUSE_STREAMS) && (wxUSE_FILESYSTEM)
// ---------------------------------------------------------------------------
// Bind class wxLocalFSHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLocalFSHandler'
int wxluatype_wxLocalFSHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocalFSHandler_Chroot[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLocalFSHandler_Chroot(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocalFSHandler_Chroot[1] = {{ wxLua_wxLocalFSHandler_Chroot, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxLocalFSHandler_Chroot }};
//     static void Chroot(const wxString& root)
static int LUACALL wxLua_wxLocalFSHandler_Chroot(lua_State *L)
{
    // const wxString root
    const wxString root = wxlua_getwxStringtype(L, 1);
    // call Chroot
    wxLocalFSHandler::Chroot(root);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLocalFSHandler_delete[] = { &wxluatype_wxLocalFSHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocalFSHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxLocalFSHandler_delete }};

static int LUACALL wxLua_wxLocalFSHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLocalFSHandler_constructor[1] = {{ wxLua_wxLocalFSHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxLocalFSHandler()
static int LUACALL wxLua_wxLocalFSHandler_constructor(lua_State *L)
{
    // call constructor
    wxLocalFSHandler* returns = new wxLocalFSHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLocalFSHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLocalFSHandler_methods[] = {
    { "Chroot", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLocalFSHandler_Chroot, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxLocalFSHandler_delete, 1, NULL },
    { "wxLocalFSHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLocalFSHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxLocalFSHandler_methodCount = sizeof(wxLocalFSHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxUSE_STREAMS) && (wxUSE_FILESYSTEM)


#if (wxUSE_STREAMS) && (wxUSE_FILESYSTEM)
// ---------------------------------------------------------------------------
// Bind class wxFileSystem
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFileSystem'
int wxluatype_wxFileSystem = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystem_AddHandler[] = { &wxluatype_wxFileSystemHandler, NULL };
static int LUACALL wxLua_wxFileSystem_AddHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystem_AddHandler[1] = {{ wxLua_wxFileSystem_AddHandler, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileSystem_AddHandler }};
//     static void AddHandler(wxFileSystemHandler *handler);
static int LUACALL wxLua_wxFileSystem_AddHandler(lua_State *L)
{
    // wxFileSystemHandler handler
    wxFileSystemHandler * handler = (wxFileSystemHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileSystemHandler);
    // call AddHandler
    wxFileSystem::AddHandler(handler);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystem_ChangePathTo[] = { &wxluatype_wxFileSystem, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxFileSystem_ChangePathTo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystem_ChangePathTo[1] = {{ wxLua_wxFileSystem_ChangePathTo, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFileSystem_ChangePathTo }};
//     void ChangePathTo(const wxString& location, bool is_dir = false);
static int LUACALL wxLua_wxFileSystem_ChangePathTo(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool is_dir = false
    bool is_dir = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // const wxString location
    const wxString location = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileSystem * self = (wxFileSystem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileSystem);
    // call ChangePathTo
    self->ChangePathTo(location, is_dir);

    return 0;
}

static int LUACALL wxLua_wxFileSystem_CleanUpHandlers(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystem_CleanUpHandlers[1] = {{ wxLua_wxFileSystem_CleanUpHandlers, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void CleanUpHandlers();
static int LUACALL wxLua_wxFileSystem_CleanUpHandlers(lua_State *L)
{
    // call CleanUpHandlers
    wxFileSystem::CleanUpHandlers();

    return 0;
}


#if (wxLUA_USE_wxFileName) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystem_FileNameToURL[] = { &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxFileSystem_FileNameToURL(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystem_FileNameToURL[1] = {{ wxLua_wxFileSystem_FileNameToURL, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileSystem_FileNameToURL }};
//     static wxString FileNameToURL(const wxFileName& filename);
static int LUACALL wxLua_wxFileSystem_FileNameToURL(lua_State *L)
{
    // const wxFileName filename
    const wxFileName * filename = (const wxFileName *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileName);
    // call FileNameToURL
    wxString returns = (wxFileSystem::FileNameToURL(*filename));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxFileName) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystem_FindFileInPath[] = { &wxluatype_wxFileSystem, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileSystem_FindFileInPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystem_FindFileInPath[1] = {{ wxLua_wxFileSystem_FindFileInPath, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxFileSystem_FindFileInPath }};
// %override wxLua_wxFileSystem_FindFileInPath
//     bool FindFileInPath(wxString *pStr, const wxChar *path, const wxChar *file);
//     bool FindFileInPath(const wxString& path, const wxString& file);
static int LUACALL wxLua_wxFileSystem_FindFileInPath(lua_State *L)
{
    // const wxString file
    const wxString file_ = wxlua_getwxStringtype(L, 3);
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileSystem * self = (wxFileSystem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileSystem);
    // call FindFileInPath
    wxString str;
    bool returns = (self->FindFileInPath(&str, path, file_));
    // push the result flag
    lua_pushboolean(L, returns);
    wxlua_pushwxString(L, str);

    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystem_FindFirst[] = { &wxluatype_wxFileSystem, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFileSystem_FindFirst(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystem_FindFirst[1] = {{ wxLua_wxFileSystem_FindFirst, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFileSystem_FindFirst }};
//     wxString FindFirst(const wxString& spec, int flags = 0);
static int LUACALL wxLua_wxFileSystem_FindFirst(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // const wxString spec
    const wxString spec = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileSystem * self = (wxFileSystem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileSystem);
    // call FindFirst
    wxString returns = (self->FindFirst(spec, flags));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystem_FindNext[] = { &wxluatype_wxFileSystem, NULL };
static int LUACALL wxLua_wxFileSystem_FindNext(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystem_FindNext[1] = {{ wxLua_wxFileSystem_FindNext, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileSystem_FindNext }};
//     wxString FindNext();
static int LUACALL wxLua_wxFileSystem_FindNext(lua_State *L)
{
    // get this
    wxFileSystem * self = (wxFileSystem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileSystem);
    // call FindNext
    wxString returns = (self->FindNext());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystem_GetPath[] = { &wxluatype_wxFileSystem, NULL };
static int LUACALL wxLua_wxFileSystem_GetPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystem_GetPath[1] = {{ wxLua_wxFileSystem_GetPath, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileSystem_GetPath }};
//     wxString GetPath() const
static int LUACALL wxLua_wxFileSystem_GetPath(lua_State *L)
{
    // get this
    wxFileSystem * self = (wxFileSystem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileSystem);
    // call GetPath
    wxString returns = (self->GetPath());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystem_HasHandlerForPath[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileSystem_HasHandlerForPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystem_HasHandlerForPath[1] = {{ wxLua_wxFileSystem_HasHandlerForPath, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileSystem_HasHandlerForPath }};
//     static bool HasHandlerForPath(const wxString& location);
static int LUACALL wxLua_wxFileSystem_HasHandlerForPath(lua_State *L)
{
    // const wxString location
    const wxString location = wxlua_getwxStringtype(L, 1);
    // call HasHandlerForPath
    bool returns = (wxFileSystem::HasHandlerForPath(location));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystem_OpenFile[] = { &wxluatype_wxFileSystem, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxFileSystem_OpenFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystem_OpenFile[1] = {{ wxLua_wxFileSystem_OpenFile, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxFileSystem_OpenFile }};
//     wxFSFile* OpenFile(const wxString& location, int flags = wxFS_READ);
static int LUACALL wxLua_wxFileSystem_OpenFile(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxFS_READ
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxFS_READ);
    // const wxString location
    const wxString location = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileSystem * self = (wxFileSystem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileSystem);
    // call OpenFile
    wxFSFile* returns = (wxFSFile*)self->OpenFile(location, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFSFile);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystem_RemoveHandler[] = { &wxluatype_wxFileSystemHandler, NULL };
static int LUACALL wxLua_wxFileSystem_RemoveHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystem_RemoveHandler[1] = {{ wxLua_wxFileSystem_RemoveHandler, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileSystem_RemoveHandler }};
//     static wxFileSystemHandler* RemoveHandler(wxFileSystemHandler *handler);
static int LUACALL wxLua_wxFileSystem_RemoveHandler(lua_State *L)
{
    // wxFileSystemHandler handler
    wxFileSystemHandler * handler = (wxFileSystemHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileSystemHandler);
    // call RemoveHandler
    wxFileSystemHandler* returns = (wxFileSystemHandler*)wxFileSystem::RemoveHandler(handler);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileSystemHandler);

    return 1;
}


#if (wxLUA_USE_wxFileName) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystem_URLToFileName[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileSystem_URLToFileName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystem_URLToFileName[1] = {{ wxLua_wxFileSystem_URLToFileName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxFileSystem_URLToFileName }};
//     static wxFileName URLToFileName(const wxString& url);
static int LUACALL wxLua_wxFileSystem_URLToFileName(lua_State *L)
{
    // const wxString url
    const wxString url = wxlua_getwxStringtype(L, 1);
    // call URLToFileName
    // allocate a new object using the copy constructor
    wxFileName* returns = new wxFileName(wxFileSystem::URLToFileName(url));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileName((wxFileName*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileName);

    return 1;
}

#endif // (wxLUA_USE_wxFileName) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileSystem_delete[] = { &wxluatype_wxFileSystem, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystem_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFileSystem_delete }};

static int LUACALL wxLua_wxFileSystem_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileSystem_constructor[1] = {{ wxLua_wxFileSystem_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxFileSystem()
static int LUACALL wxLua_wxFileSystem_constructor(lua_State *L)
{
    // call constructor
    wxFileSystem* returns = new wxFileSystem();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileSystem);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFileSystem_methods[] = {
    { "AddHandler", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileSystem_AddHandler, 1, NULL },
    { "ChangePathTo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileSystem_ChangePathTo, 1, NULL },
    { "CleanUpHandlers", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileSystem_CleanUpHandlers, 1, NULL },

#if (wxLUA_USE_wxFileName) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))
    { "FileNameToURL", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileSystem_FileNameToURL, 1, NULL },
#endif // (wxLUA_USE_wxFileName) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))

    { "FindFileInPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileSystem_FindFileInPath, 1, NULL },
    { "FindFirst", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileSystem_FindFirst, 1, NULL },
    { "FindNext", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileSystem_FindNext, 1, NULL },
    { "GetPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileSystem_GetPath, 1, NULL },
    { "HasHandlerForPath", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileSystem_HasHandlerForPath, 1, NULL },
    { "OpenFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileSystem_OpenFile, 1, NULL },
    { "RemoveHandler", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileSystem_RemoveHandler, 1, NULL },

#if (wxLUA_USE_wxFileName) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))
    { "URLToFileName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxFileSystem_URLToFileName, 1, NULL },
#endif // (wxLUA_USE_wxFileName) && ((wxUSE_STREAMS) && (wxUSE_FILESYSTEM))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFileSystem_delete, 1, NULL },
    { "wxFileSystem", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFileSystem_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxFileSystem_methodCount = sizeof(wxFileSystem_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxUSE_STREAMS) && (wxUSE_FILESYSTEM)


#if (wxUSE_STREAMS) && (wxUSE_FILESYSTEM)
// ---------------------------------------------------------------------------
// Bind class wxArchiveFSHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxArchiveFSHandler'
int wxluatype_wxArchiveFSHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxArchiveFSHandler_delete[] = { &wxluatype_wxArchiveFSHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArchiveFSHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxArchiveFSHandler_delete }};

static int LUACALL wxLua_wxArchiveFSHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArchiveFSHandler_constructor[1] = {{ wxLua_wxArchiveFSHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxArchiveFSHandler()
static int LUACALL wxLua_wxArchiveFSHandler_constructor(lua_State *L)
{
    // call constructor
    wxArchiveFSHandler* returns = new wxArchiveFSHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArchiveFSHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxArchiveFSHandler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxArchiveFSHandler_delete, 1, NULL },
    { "wxArchiveFSHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxArchiveFSHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxArchiveFSHandler_methodCount = sizeof(wxArchiveFSHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxUSE_STREAMS) && (wxUSE_FILESYSTEM)


#if (wxUSE_STREAMS) && (wxUSE_FILESYSTEM)
// ---------------------------------------------------------------------------
// Bind class wxFilterFSHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFilterFSHandler'
int wxluatype_wxFilterFSHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFilterFSHandler_delete[] = { &wxluatype_wxFilterFSHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFilterFSHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFilterFSHandler_delete }};

static int LUACALL wxLua_wxFilterFSHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFilterFSHandler_constructor[1] = {{ wxLua_wxFilterFSHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxFilterFSHandler()
static int LUACALL wxLua_wxFilterFSHandler_constructor(lua_State *L)
{
    // call constructor
    wxFilterFSHandler* returns = new wxFilterFSHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFilterFSHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFilterFSHandler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFilterFSHandler_delete, 1, NULL },
    { "wxFilterFSHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFilterFSHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxFilterFSHandler_methodCount = sizeof(wxFilterFSHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxUSE_STREAMS) && (wxUSE_FILESYSTEM)


#if (wxUSE_STREAMS) && (wxUSE_FILESYSTEM) && (wxUSE_FS_INET && wxUSE_SOCKETS)
// ---------------------------------------------------------------------------
// Bind class wxInternetFSHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxInternetFSHandler'
int wxluatype_wxInternetFSHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxInternetFSHandler_delete[] = { &wxluatype_wxInternetFSHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxInternetFSHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxInternetFSHandler_delete }};

static int LUACALL wxLua_wxInternetFSHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxInternetFSHandler_constructor[1] = {{ wxLua_wxInternetFSHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxInternetFSHandler()
static int LUACALL wxLua_wxInternetFSHandler_constructor(lua_State *L)
{
    // call constructor
    wxInternetFSHandler* returns = new wxInternetFSHandler();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxInternetFSHandler);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxInternetFSHandler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxInternetFSHandler_delete, 1, NULL },
    { "wxInternetFSHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxInternetFSHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxInternetFSHandler_methodCount = sizeof(wxInternetFSHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxUSE_STREAMS) && (wxUSE_FILESYSTEM) && (wxUSE_FS_INET && wxUSE_SOCKETS)

