// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxbase_data.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxbase_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif


// ---------------------------------------------------------------------------
// Bind class wxString
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxString'
int wxluatype_wxString = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxString_GetData[] = { &wxluatype_wxString, NULL };
static int LUACALL wxLua_wxString_GetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxString_GetData[1] = {{ wxLua_wxString_GetData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxString_GetData }};
//     wxString GetData() const
static int LUACALL wxLua_wxString_GetData(lua_State *L)
{
    // get this
    wxString * self = (wxString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxString);
    // call GetData
    wxString returns = (self->GetData());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxString_delete[] = { &wxluatype_wxString, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxString_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxString_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxString_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxString_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxString_constructor[1] = {{ wxLua_wxString_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxString_constructor }};
// %override wxLua_wxString_constructor
//     wxString(const wxString& str = "")
static int LUACALL wxLua_wxString_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString str = ""
    const wxString str = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxString* returns = new wxString(str);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxString(returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxString);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxString_methods[] = {
    { "GetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxString_GetData, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxString_delete, 1, NULL },
    { "wxString", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxString_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxString_methodCount = sizeof(wxString_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxStringTokenizer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxStringTokenizer'
int wxluatype_wxStringTokenizer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxStringTokenizer_AllowEmpty[] = { &wxluatype_wxStringTokenizer, NULL };
static int LUACALL wxLua_wxStringTokenizer_AllowEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStringTokenizer_AllowEmpty[1] = {{ wxLua_wxStringTokenizer_AllowEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStringTokenizer_AllowEmpty }};
//     bool AllowEmpty() const
static int LUACALL wxLua_wxStringTokenizer_AllowEmpty(lua_State *L)
{
    // get this
    wxStringTokenizer * self = (wxStringTokenizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStringTokenizer);
    // call AllowEmpty
    bool returns = (self->AllowEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStringTokenizer_CountTokens[] = { &wxluatype_wxStringTokenizer, NULL };
static int LUACALL wxLua_wxStringTokenizer_CountTokens(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStringTokenizer_CountTokens[1] = {{ wxLua_wxStringTokenizer_CountTokens, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStringTokenizer_CountTokens }};
//     size_t CountTokens() const;
static int LUACALL wxLua_wxStringTokenizer_CountTokens(lua_State *L)
{
    // get this
    wxStringTokenizer * self = (wxStringTokenizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStringTokenizer);
    // call CountTokens
    size_t returns = (self->CountTokens());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStringTokenizer_GetMode[] = { &wxluatype_wxStringTokenizer, NULL };
static int LUACALL wxLua_wxStringTokenizer_GetMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStringTokenizer_GetMode[1] = {{ wxLua_wxStringTokenizer_GetMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStringTokenizer_GetMode }};
//     wxStringTokenizerMode GetMode() const
static int LUACALL wxLua_wxStringTokenizer_GetMode(lua_State *L)
{
    // get this
    wxStringTokenizer * self = (wxStringTokenizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStringTokenizer);
    // call GetMode
    wxStringTokenizerMode returns = (self->GetMode());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStringTokenizer_GetNextToken[] = { &wxluatype_wxStringTokenizer, NULL };
static int LUACALL wxLua_wxStringTokenizer_GetNextToken(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStringTokenizer_GetNextToken[1] = {{ wxLua_wxStringTokenizer_GetNextToken, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStringTokenizer_GetNextToken }};
//     wxString GetNextToken();
static int LUACALL wxLua_wxStringTokenizer_GetNextToken(lua_State *L)
{
    // get this
    wxStringTokenizer * self = (wxStringTokenizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStringTokenizer);
    // call GetNextToken
    wxString returns = (self->GetNextToken());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStringTokenizer_GetPosition[] = { &wxluatype_wxStringTokenizer, NULL };
static int LUACALL wxLua_wxStringTokenizer_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStringTokenizer_GetPosition[1] = {{ wxLua_wxStringTokenizer_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStringTokenizer_GetPosition }};
//     size_t GetPosition() const
static int LUACALL wxLua_wxStringTokenizer_GetPosition(lua_State *L)
{
    // get this
    wxStringTokenizer * self = (wxStringTokenizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStringTokenizer);
    // call GetPosition
    size_t returns = (self->GetPosition());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStringTokenizer_GetString[] = { &wxluatype_wxStringTokenizer, NULL };
static int LUACALL wxLua_wxStringTokenizer_GetString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStringTokenizer_GetString[1] = {{ wxLua_wxStringTokenizer_GetString, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStringTokenizer_GetString }};
//     wxString GetString() const
static int LUACALL wxLua_wxStringTokenizer_GetString(lua_State *L)
{
    // get this
    wxStringTokenizer * self = (wxStringTokenizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStringTokenizer);
    // call GetString
    wxString returns = (self->GetString());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStringTokenizer_HasMoreTokens[] = { &wxluatype_wxStringTokenizer, NULL };
static int LUACALL wxLua_wxStringTokenizer_HasMoreTokens(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStringTokenizer_HasMoreTokens[1] = {{ wxLua_wxStringTokenizer_HasMoreTokens, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStringTokenizer_HasMoreTokens }};
//     bool HasMoreTokens() const;
static int LUACALL wxLua_wxStringTokenizer_HasMoreTokens(lua_State *L)
{
    // get this
    wxStringTokenizer * self = (wxStringTokenizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStringTokenizer);
    // call HasMoreTokens
    bool returns = (self->HasMoreTokens());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStringTokenizer_Reinit[] = { &wxluatype_wxStringTokenizer, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxStringTokenizer_Reinit(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStringTokenizer_Reinit[1] = {{ wxLua_wxStringTokenizer_Reinit, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxStringTokenizer_Reinit }};
//     void Reinit(const wxString& str);
static int LUACALL wxLua_wxStringTokenizer_Reinit(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 2);
    // get this
    wxStringTokenizer * self = (wxStringTokenizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStringTokenizer);
    // call Reinit
    self->Reinit(str);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStringTokenizer_SetString[] = { &wxluatype_wxStringTokenizer, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxStringTokenizer_SetString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStringTokenizer_SetString[1] = {{ wxLua_wxStringTokenizer_SetString, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxStringTokenizer_SetString }};
//     void SetString(const wxString& str, const wxString& delims = wxDEFAULT_DELIMITERS, wxStringTokenizerMode mode = wxTOKEN_DEFAULT);
static int LUACALL wxLua_wxStringTokenizer_SetString(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxStringTokenizerMode mode = wxTOKEN_DEFAULT
    wxStringTokenizerMode mode = (argCount >= 4 ? (wxStringTokenizerMode)wxlua_getenumtype(L, 4) : wxTOKEN_DEFAULT);
    // const wxString delims = wxDEFAULT_DELIMITERS
    const wxString delims = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxDEFAULT_DELIMITERS));
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 2);
    // get this
    wxStringTokenizer * self = (wxStringTokenizer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStringTokenizer);
    // call SetString
    self->SetString(str, delims, mode);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStringTokenizer_delete[] = { &wxluatype_wxStringTokenizer, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStringTokenizer_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxStringTokenizer_delete }};

static int LUACALL wxLua_wxStringTokenizer_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxStringTokenizer_constructor[1] = {{ wxLua_wxStringTokenizer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxStringTokenizer()
static int LUACALL wxLua_wxStringTokenizer_constructor(lua_State *L)
{
    // call constructor
    wxStringTokenizer* returns = new wxStringTokenizer();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStringTokenizer);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStringTokenizer_constructor1[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxStringTokenizer_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxStringTokenizer_constructor1[1] = {{ wxLua_wxStringTokenizer_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 3, s_wxluatypeArray_wxLua_wxStringTokenizer_constructor1 }};
//     wxStringTokenizer(const wxString& str, const wxString& delims = wxDEFAULT_DELIMITERS, wxStringTokenizerMode mode = wxTOKEN_DEFAULT);
static int LUACALL wxLua_wxStringTokenizer_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxStringTokenizerMode mode = wxTOKEN_DEFAULT
    wxStringTokenizerMode mode = (argCount >= 3 ? (wxStringTokenizerMode)wxlua_getenumtype(L, 3) : wxTOKEN_DEFAULT);
    // const wxString delims = wxDEFAULT_DELIMITERS
    const wxString delims = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxDEFAULT_DELIMITERS));
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxStringTokenizer* returns = new wxStringTokenizer(str, delims, mode);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStringTokenizer);

    return 1;
}



// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStringTokenizer_constructor_overload[] =
{
    { wxLua_wxStringTokenizer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
    { wxLua_wxStringTokenizer_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 3, s_wxluatypeArray_wxLua_wxStringTokenizer_constructor1 },
};
static int s_wxluafunc_wxLua_wxStringTokenizer_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxStringTokenizer_constructor_overload)/sizeof(wxLuaBindCFunc);


// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxStringTokenizer_methods[] = {
    { "AllowEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStringTokenizer_AllowEmpty, 1, NULL },
    { "CountTokens", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStringTokenizer_CountTokens, 1, NULL },
    { "GetMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStringTokenizer_GetMode, 1, NULL },
    { "GetNextToken", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStringTokenizer_GetNextToken, 1, NULL },
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStringTokenizer_GetPosition, 1, NULL },
    { "GetString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStringTokenizer_GetString, 1, NULL },
    { "HasMoreTokens", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStringTokenizer_HasMoreTokens, 1, NULL },
    { "Reinit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStringTokenizer_Reinit, 1, NULL },
    { "SetString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStringTokenizer_SetString, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxStringTokenizer_delete, 1, NULL },

    { "wxStringTokenizer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxStringTokenizer_constructor_overload, s_wxluafunc_wxLua_wxStringTokenizer_constructor_overload_count, 0 },

    { 0, 0, 0, 0 },
};

int wxStringTokenizer_methodCount = sizeof(wxStringTokenizer_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxClientData
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxClientData'
int wxluatype_wxClientData = WXLUA_TUNKNOWN;



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxClientData_methods[] = {
    { 0, 0, 0, 0 },
};

int wxClientData_methodCount = sizeof(wxClientData_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxStringClientData
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxStringClientData'
int wxluatype_wxStringClientData = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxStringClientData_GetData[] = { &wxluatype_wxStringClientData, NULL };
static int LUACALL wxLua_wxStringClientData_GetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStringClientData_GetData[1] = {{ wxLua_wxStringClientData_GetData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStringClientData_GetData }};
//     wxString GetData() const
static int LUACALL wxLua_wxStringClientData_GetData(lua_State *L)
{
    // get this
    wxStringClientData * self = (wxStringClientData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStringClientData);
    // call GetData
    wxString returns = (self->GetData());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStringClientData_SetData[] = { &wxluatype_wxStringClientData, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxStringClientData_SetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStringClientData_SetData[1] = {{ wxLua_wxStringClientData_SetData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxStringClientData_SetData }};
//     void SetData(const wxString& data)
static int LUACALL wxLua_wxStringClientData_SetData(lua_State *L)
{
    // const wxString data
    const wxString data = wxlua_getwxStringtype(L, 2);
    // get this
    wxStringClientData * self = (wxStringClientData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStringClientData);
    // call SetData
    self->SetData(data);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStringClientData_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxStringClientData_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStringClientData_constructor[1] = {{ wxLua_wxStringClientData_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxStringClientData_constructor }};
//     wxStringClientData(const wxString& data = "")
static int LUACALL wxLua_wxStringClientData_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString data = ""
    const wxString data = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxStringClientData* returns = new wxStringClientData(data);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStringClientData);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxStringClientData_methods[] = {
    { "GetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStringClientData_GetData, 1, NULL },
    { "SetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStringClientData_SetData, 1, NULL },
    { "wxStringClientData", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxStringClientData_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxStringClientData_methodCount = sizeof(wxStringClientData_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxClientDataContainer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxClientDataContainer'
int wxluatype_wxClientDataContainer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxClientDataContainer_GetClientData[] = { &wxluatype_wxClientDataContainer, NULL };
static int LUACALL wxLua_wxClientDataContainer_GetClientData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClientDataContainer_GetClientData[1] = {{ wxLua_wxClientDataContainer_GetClientData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClientDataContainer_GetClientData }};
//     voidptr_long GetClientData() const // C++ returns (void *) You get a number here
static int LUACALL wxLua_wxClientDataContainer_GetClientData(lua_State *L)
{
    // get this
    wxClientDataContainer * self = (wxClientDataContainer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClientDataContainer);
    // call GetClientData
    long  returns = (long )self->GetClientData();
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxClientDataContainer_GetClientObject[] = { &wxluatype_wxClientDataContainer, NULL };
static int LUACALL wxLua_wxClientDataContainer_GetClientObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClientDataContainer_GetClientObject[1] = {{ wxLua_wxClientDataContainer_GetClientObject, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClientDataContainer_GetClientObject }};
//     wxClientData *GetClientObject() const
static int LUACALL wxLua_wxClientDataContainer_GetClientObject(lua_State *L)
{
    // get this
    wxClientDataContainer * self = (wxClientDataContainer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClientDataContainer);
    // call GetClientObject
    wxClientData* returns = (wxClientData*)self->GetClientObject();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClientData);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxClientDataContainer_SetClientData[] = { &wxluatype_wxClientDataContainer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxClientDataContainer_SetClientData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClientDataContainer_SetClientData[1] = {{ wxLua_wxClientDataContainer_SetClientData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxClientDataContainer_SetClientData }};
//     void SetClientData( voidptr_long data ) // C++ is (void *clientData) You can put a number here
static int LUACALL wxLua_wxClientDataContainer_SetClientData(lua_State *L)
{
    // voidptr_long data
    long data = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxClientDataContainer * self = (wxClientDataContainer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClientDataContainer);
    // call SetClientData
    self->SetClientData((void*)data);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxClientDataContainer_SetClientObject[] = { &wxluatype_wxClientDataContainer, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxClientDataContainer_SetClientObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClientDataContainer_SetClientObject[1] = {{ wxLua_wxClientDataContainer_SetClientObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxClientDataContainer_SetClientObject }};
//     void SetClientObject( wxClientData *data )
static int LUACALL wxLua_wxClientDataContainer_SetClientObject(lua_State *L)
{
    // wxClientData data
    wxClientData * data = (wxClientData *)wxluaT_getuserdatatype(L, 2, wxluatype_wxClientData);
    // get this
    wxClientDataContainer * self = (wxClientDataContainer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClientDataContainer);
    // call SetClientObject
    self->SetClientObject(data);

    return 0;
}

static int LUACALL wxLua_wxClientDataContainer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClientDataContainer_constructor[1] = {{ wxLua_wxClientDataContainer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxClientDataContainer()
static int LUACALL wxLua_wxClientDataContainer_constructor(lua_State *L)
{
    // call constructor
    wxClientDataContainer* returns = new wxClientDataContainer();
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClientDataContainer);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxClientDataContainer_methods[] = {
    { "GetClientData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClientDataContainer_GetClientData, 1, NULL },
    { "GetClientObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClientDataContainer_GetClientObject, 1, NULL },
    { "SetClientData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClientDataContainer_SetClientData, 1, NULL },
    { "SetClientObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClientDataContainer_SetClientObject, 1, NULL },
    { "wxClientDataContainer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxClientDataContainer_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxClientDataContainer_methodCount = sizeof(wxClientDataContainer_methods)/sizeof(wxLuaBindMethod) - 1;



#if wxLUA_USE_wxObject
// ---------------------------------------------------------------------------
// Bind class wxObject
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxObject'
int wxluatype_wxObject = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxObject_DynamicCast[] = { &wxluatype_wxObject, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxObject_DynamicCast(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxObject_DynamicCast[1] = {{ wxLua_wxObject_DynamicCast, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxObject_DynamicCast }};
// %override wxLua_wxObject_DynamicCast
// void *DynamicCast(const char *class)

// Attempt to cast an object reference (the first parameter) to another type.
// The type requested is specified by the second parameter. Presumably the
// type requested will be derived from the supplied object, otherwise
// bad things will happen.
static int LUACALL wxLua_wxObject_DynamicCast(lua_State *L)
{
    int         iResult   = 0;
    const char *className = lua_tostring(L, 2);
    if (className != NULL)
    {
        // The userdata object must be derived from a wxObject for this
        // function be be called.
        wxObject *pObject = (wxObject *)wxlua_touserdata(L, 1, false);
        //wxObject *pObject = (wxObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxObject);

        const wxLuaBindClass *wxlClass = wxluaT_getclass(L, className);
        if (pObject && wxlClass && wxlClass->classInfo)
        {
            if (pObject->IsKindOf(wxlClass->classInfo))
            {
                if (*wxlClass->wxluatype != wxluaT_type(L, 1))
                    wxluaT_pushuserdatatype(L, pObject, *wxlClass->wxluatype);
                else
                    lua_pushvalue(L, 1); // return same userdata

                iResult = 1;
            }
            else
                wxlua_argerrormsg(L, wxString::Format(wxT("wxLua: wxObject::DynamicCast() Unable to cast a '%s' to a '%s' with wxClassInfo '%s'."),
                                     pObject->GetClassInfo()->GetClassName(),
                                     lua2wx(className).c_str(),
                                     wxString(wxlClass ? wxlClass->classInfo->GetClassName() : wxT("Unknown")).c_str()));
        }

        if (iResult == 0)
            wxlua_argerrormsg(L, wxString::Format(wxT("wxLua: wxObject::DynamicCast() Cannot cast a wxLua type '%s' with wxClassInfo '%s' to a '%s'."),
                                 wxluaT_gettypename(L, 1).c_str(),
                                 wxString(pObject ? pObject->GetClassInfo()->GetClassName() : wxT("Unknown")).c_str(),
                                 lua2wx(className).c_str()));
    }
    else
        wxlua_argerror(L, 2, wxT("a 'string name of the class'"));

    return iResult;
}



#if (wxLUA_USE_wxObject) && (wxLUA_USE_wxClassInfo)
static wxLuaArgType s_wxluatypeArray_wxLua_wxObject_GetClassInfo[] = { &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxObject_GetClassInfo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxObject_GetClassInfo[1] = {{ wxLua_wxObject_GetClassInfo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxObject_GetClassInfo }};
//     wxClassInfo* GetClassInfo()
static int LUACALL wxLua_wxObject_GetClassInfo(lua_State *L)
{
    // get this
    wxObject * self = (wxObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxObject);
    // call GetClassInfo
    wxClassInfo* returns = (wxClassInfo*)self->GetClassInfo();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClassInfo);

    return 1;
}

#endif // (wxLUA_USE_wxObject) && (wxLUA_USE_wxClassInfo)

static wxLuaArgType s_wxluatypeArray_wxLua_wxObject_GetRefData[] = { &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxObject_GetRefData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxObject_GetRefData[1] = {{ wxLua_wxObject_GetRefData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxObject_GetRefData }};
//     wxObjectRefData* GetRefData() const
static int LUACALL wxLua_wxObject_GetRefData(lua_State *L)
{
    // get this
    wxObject * self = (wxObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxObject);
    // call GetRefData
    wxObjectRefData* returns = (wxObjectRefData*)self->GetRefData();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxObjectRefData);

    return 1;
}


#if (wxLUA_USE_wxObject) && (wxLUA_USE_wxClassInfo)
static wxLuaArgType s_wxluatypeArray_wxLua_wxObject_IsKindOf[] = { &wxluatype_wxObject, &wxluatype_wxClassInfo, NULL };
static int LUACALL wxLua_wxObject_IsKindOf(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxObject_IsKindOf[1] = {{ wxLua_wxObject_IsKindOf, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxObject_IsKindOf }};
//     bool  IsKindOf(wxClassInfo *info)
static int LUACALL wxLua_wxObject_IsKindOf(lua_State *L)
{
    // wxClassInfo info
    wxClassInfo * info = (wxClassInfo *)wxluaT_getuserdatatype(L, 2, wxluatype_wxClassInfo);
    // get this
    wxObject * self = (wxObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxObject);
    // call IsKindOf
    bool returns = (self->IsKindOf(info));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxObject) && (wxLUA_USE_wxClassInfo)

static wxLuaArgType s_wxluatypeArray_wxLua_wxObject_IsSameAs[] = { &wxluatype_wxObject, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxObject_IsSameAs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxObject_IsSameAs[1] = {{ wxLua_wxObject_IsSameAs, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxObject_IsSameAs }};
//     bool IsSameAs(const wxObject& o) const
static int LUACALL wxLua_wxObject_IsSameAs(lua_State *L)
{
    // const wxObject o
    const wxObject * o = (const wxObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxObject);
    // get this
    wxObject * self = (wxObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxObject);
    // call IsSameAs
    bool returns = (self->IsSameAs(*o));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxObject_Ref[] = { &wxluatype_wxObject, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxObject_Ref(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxObject_Ref[1] = {{ wxLua_wxObject_Ref, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxObject_Ref }};
//     void  Ref(const wxObject& clone)
static int LUACALL wxLua_wxObject_Ref(lua_State *L)
{
    // const wxObject clone
    const wxObject * clone = (const wxObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxObject);
    // get this
    wxObject * self = (wxObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxObject);
    // call Ref
    self->Ref(*clone);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxObject_SetRefData[] = { &wxluatype_wxObject, &wxluatype_wxObjectRefData, NULL };
static int LUACALL wxLua_wxObject_SetRefData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxObject_SetRefData[1] = {{ wxLua_wxObject_SetRefData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxObject_SetRefData }};
//     void  SetRefData(wxObjectRefData* data)
static int LUACALL wxLua_wxObject_SetRefData(lua_State *L)
{
    // wxObjectRefData data
    wxObjectRefData * data = (wxObjectRefData *)wxluaT_getuserdatatype(L, 2, wxluatype_wxObjectRefData);
    // get this
    wxObject * self = (wxObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxObject);
    // call SetRefData
    self->SetRefData(data);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxObject_UnRef[] = { &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxObject_UnRef(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxObject_UnRef[1] = {{ wxLua_wxObject_UnRef, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxObject_UnRef }};
//     void  UnRef()
static int LUACALL wxLua_wxObject_UnRef(lua_State *L)
{
    // get this
    wxObject * self = (wxObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxObject);
    // call UnRef
    self->UnRef();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxObject_delete[] = { &wxluatype_wxObject, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxObject_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxObject_delete }};

static int LUACALL wxLua_wxObject_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxObject_constructor[1] = {{ wxLua_wxObject_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxObject()
static int LUACALL wxLua_wxObject_constructor(lua_State *L)
{
    // call constructor
    wxObject* returns = new wxObject();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxObject);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxObject_methods[] = {
    { "DynamicCast", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxObject_DynamicCast, 1, NULL },

#if (wxLUA_USE_wxObject) && (wxLUA_USE_wxClassInfo)
    { "GetClassInfo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxObject_GetClassInfo, 1, NULL },
#endif // (wxLUA_USE_wxObject) && (wxLUA_USE_wxClassInfo)

    { "GetRefData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxObject_GetRefData, 1, NULL },

#if (wxLUA_USE_wxObject) && (wxLUA_USE_wxClassInfo)
    { "IsKindOf", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxObject_IsKindOf, 1, NULL },
#endif // (wxLUA_USE_wxObject) && (wxLUA_USE_wxClassInfo)

    { "IsSameAs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxObject_IsSameAs, 1, NULL },
    { "Ref", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxObject_Ref, 1, NULL },
    { "SetRefData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxObject_SetRefData, 1, NULL },
    { "UnRef", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxObject_UnRef, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxObject_delete, 1, NULL },
    { "wxObject", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxObject_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxObject_methodCount = sizeof(wxObject_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxObject


#if wxLUA_USE_wxObject
// ---------------------------------------------------------------------------
// Bind class wxObjectRefData
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxObjectRefData'
int wxluatype_wxObjectRefData = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxObjectRefData_GetRefCount[] = { &wxluatype_wxObjectRefData, NULL };
static int LUACALL wxLua_wxObjectRefData_GetRefCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxObjectRefData_GetRefCount[1] = {{ wxLua_wxObjectRefData_GetRefCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxObjectRefData_GetRefCount }};
//     int GetRefCount() const
static int LUACALL wxLua_wxObjectRefData_GetRefCount(lua_State *L)
{
    // get this
    wxObjectRefData * self = (wxObjectRefData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxObjectRefData);
    // call GetRefCount
    int returns = (self->GetRefCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxObjectRefData_methods[] = {
    { "GetRefCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxObjectRefData_GetRefCount, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxObjectRefData_methodCount = sizeof(wxObjectRefData_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxObject


#if wxLUA_USE_wxClassInfo
// ---------------------------------------------------------------------------
// Bind class wxClassInfo
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxClassInfo'
int wxluatype_wxClassInfo = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxClassInfo) && (wxLUA_USE_wxObject)
static wxLuaArgType s_wxluatypeArray_wxLua_wxClassInfo_CreateObject[] = { &wxluatype_wxClassInfo, NULL };
static int LUACALL wxLua_wxClassInfo_CreateObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClassInfo_CreateObject[1] = {{ wxLua_wxClassInfo_CreateObject, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClassInfo_CreateObject }};
//     wxObject* CreateObject()
static int LUACALL wxLua_wxClassInfo_CreateObject(lua_State *L)
{
    // get this
    wxClassInfo * self = (wxClassInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClassInfo);
    // call CreateObject
    wxObject* returns = (wxObject*)self->CreateObject();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxObject);

    return 1;
}

#endif // (wxLUA_USE_wxClassInfo) && (wxLUA_USE_wxObject)

static wxLuaArgType s_wxluatypeArray_wxLua_wxClassInfo_FindClass[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxClassInfo_FindClass(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClassInfo_FindClass[1] = {{ wxLua_wxClassInfo_FindClass, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxClassInfo_FindClass }};
//     static wxClassInfo* FindClass(const wxString &name)
static int LUACALL wxLua_wxClassInfo_FindClass(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call FindClass
    wxClassInfo* returns = (wxClassInfo*)wxClassInfo::FindClass(name);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClassInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxClassInfo_GetBaseClass1[] = { &wxluatype_wxClassInfo, NULL };
static int LUACALL wxLua_wxClassInfo_GetBaseClass1(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClassInfo_GetBaseClass1[1] = {{ wxLua_wxClassInfo_GetBaseClass1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClassInfo_GetBaseClass1 }};
//     const wxClassInfo  *GetBaseClass1() const
static int LUACALL wxLua_wxClassInfo_GetBaseClass1(lua_State *L)
{
    // get this
    wxClassInfo * self = (wxClassInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClassInfo);
    // call GetBaseClass1
    const wxClassInfo* returns = (const wxClassInfo*)self->GetBaseClass1();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClassInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxClassInfo_GetBaseClass2[] = { &wxluatype_wxClassInfo, NULL };
static int LUACALL wxLua_wxClassInfo_GetBaseClass2(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClassInfo_GetBaseClass2[1] = {{ wxLua_wxClassInfo_GetBaseClass2, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClassInfo_GetBaseClass2 }};
//     const wxClassInfo  *GetBaseClass2() const
static int LUACALL wxLua_wxClassInfo_GetBaseClass2(lua_State *L)
{
    // get this
    wxClassInfo * self = (wxClassInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClassInfo);
    // call GetBaseClass2
    const wxClassInfo* returns = (const wxClassInfo*)self->GetBaseClass2();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClassInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxClassInfo_GetBaseClassName1[] = { &wxluatype_wxClassInfo, NULL };
static int LUACALL wxLua_wxClassInfo_GetBaseClassName1(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClassInfo_GetBaseClassName1[1] = {{ wxLua_wxClassInfo_GetBaseClassName1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClassInfo_GetBaseClassName1 }};
//     wxString GetBaseClassName1() const
static int LUACALL wxLua_wxClassInfo_GetBaseClassName1(lua_State *L)
{
    // get this
    wxClassInfo * self = (wxClassInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClassInfo);
    // call GetBaseClassName1
    wxString returns = (self->GetBaseClassName1());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxClassInfo_GetBaseClassName2[] = { &wxluatype_wxClassInfo, NULL };
static int LUACALL wxLua_wxClassInfo_GetBaseClassName2(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClassInfo_GetBaseClassName2[1] = {{ wxLua_wxClassInfo_GetBaseClassName2, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClassInfo_GetBaseClassName2 }};
//     wxString GetBaseClassName2() const
static int LUACALL wxLua_wxClassInfo_GetBaseClassName2(lua_State *L)
{
    // get this
    wxClassInfo * self = (wxClassInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClassInfo);
    // call GetBaseClassName2
    wxString returns = (self->GetBaseClassName2());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxClassInfo_GetClassName[] = { &wxluatype_wxClassInfo, NULL };
static int LUACALL wxLua_wxClassInfo_GetClassName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClassInfo_GetClassName[1] = {{ wxLua_wxClassInfo_GetClassName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClassInfo_GetClassName }};
//     wxString GetClassName() const
static int LUACALL wxLua_wxClassInfo_GetClassName(lua_State *L)
{
    // get this
    wxClassInfo * self = (wxClassInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClassInfo);
    // call GetClassName
    wxString returns = (self->GetClassName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static int LUACALL wxLua_wxClassInfo_GetFirst(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClassInfo_GetFirst[1] = {{ wxLua_wxClassInfo_GetFirst, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static const wxClassInfo  *GetFirst()
static int LUACALL wxLua_wxClassInfo_GetFirst(lua_State *L)
{
    // call GetFirst
    const wxClassInfo* returns = (const wxClassInfo*)wxClassInfo::GetFirst();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClassInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxClassInfo_GetNext[] = { &wxluatype_wxClassInfo, NULL };
static int LUACALL wxLua_wxClassInfo_GetNext(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClassInfo_GetNext[1] = {{ wxLua_wxClassInfo_GetNext, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClassInfo_GetNext }};
//     const wxClassInfo         *GetNext() const
static int LUACALL wxLua_wxClassInfo_GetNext(lua_State *L)
{
    // get this
    wxClassInfo * self = (wxClassInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClassInfo);
    // call GetNext
    const wxClassInfo* returns = (const wxClassInfo*)self->GetNext();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClassInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxClassInfo_GetSize[] = { &wxluatype_wxClassInfo, NULL };
static int LUACALL wxLua_wxClassInfo_GetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClassInfo_GetSize[1] = {{ wxLua_wxClassInfo_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClassInfo_GetSize }};
//     int GetSize() const
static int LUACALL wxLua_wxClassInfo_GetSize(lua_State *L)
{
    // get this
    wxClassInfo * self = (wxClassInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClassInfo);
    // call GetSize
    int returns = (self->GetSize());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxClassInfo_IsDynamic[] = { &wxluatype_wxClassInfo, NULL };
static int LUACALL wxLua_wxClassInfo_IsDynamic(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClassInfo_IsDynamic[1] = {{ wxLua_wxClassInfo_IsDynamic, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClassInfo_IsDynamic }};
//     bool IsDynamic()
static int LUACALL wxLua_wxClassInfo_IsDynamic(lua_State *L)
{
    // get this
    wxClassInfo * self = (wxClassInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClassInfo);
    // call IsDynamic
    bool returns = (self->IsDynamic());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxClassInfo_IsKindOf[] = { &wxluatype_wxClassInfo, &wxluatype_wxClassInfo, NULL };
static int LUACALL wxLua_wxClassInfo_IsKindOf(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClassInfo_IsKindOf[1] = {{ wxLua_wxClassInfo_IsKindOf, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxClassInfo_IsKindOf }};
//     bool IsKindOf(wxClassInfo* info)
static int LUACALL wxLua_wxClassInfo_IsKindOf(lua_State *L)
{
    // wxClassInfo info
    wxClassInfo * info = (wxClassInfo *)wxluaT_getuserdatatype(L, 2, wxluatype_wxClassInfo);
    // get this
    wxClassInfo * self = (wxClassInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClassInfo);
    // call IsKindOf
    bool returns = (self->IsKindOf(info));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxClassInfo_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxClassInfo_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClassInfo_constructor[1] = {{ wxLua_wxClassInfo_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxClassInfo_constructor }};
// %override wxLua_wxClassInfo_constructor
// wxClassInfo(const wxString &name)
static int LUACALL wxLua_wxClassInfo_constructor(lua_State *L)
{
    // const wxString &name
    wxString name = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxClassInfo *returns = wxClassInfo::FindClass((wxChar *)name.c_str());
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClassInfo);
    // return the number of parameters
    return 1;
}





// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxClassInfo_methods[] = {
#if (wxLUA_USE_wxClassInfo) && (wxLUA_USE_wxObject)
    { "CreateObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClassInfo_CreateObject, 1, NULL },
#endif // (wxLUA_USE_wxClassInfo) && (wxLUA_USE_wxObject)

    { "FindClass", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxClassInfo_FindClass, 1, NULL },
    { "GetBaseClass1", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClassInfo_GetBaseClass1, 1, NULL },
    { "GetBaseClass2", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClassInfo_GetBaseClass2, 1, NULL },
    { "GetBaseClassName1", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClassInfo_GetBaseClassName1, 1, NULL },
    { "GetBaseClassName2", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClassInfo_GetBaseClassName2, 1, NULL },
    { "GetClassName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClassInfo_GetClassName, 1, NULL },
    { "GetFirst", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxClassInfo_GetFirst, 1, NULL },
    { "GetNext", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClassInfo_GetNext, 1, NULL },
    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClassInfo_GetSize, 1, NULL },
    { "IsDynamic", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClassInfo_IsDynamic, 1, NULL },
    { "IsKindOf", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClassInfo_IsKindOf, 1, NULL },
    { "wxClassInfo", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxClassInfo_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxClassInfo_methodCount = sizeof(wxClassInfo_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxClassInfo


#if wxLUA_USE_wxList && !wxUSE_STL
// ---------------------------------------------------------------------------
// Bind class wxList
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxList'
int wxluatype_wxList = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
static wxLuaArgType s_wxluatypeArray_wxLua_wxList_Append2[] = { &wxluatype_wxList, &wxluatype_TSTRING, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxList_Append2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_Append2[1] = {{ wxLua_wxList_Append2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxList_Append2 }};
//     wxNode *Append(const wxString& key, wxObject *object)
static int LUACALL wxLua_wxList_Append2(lua_State *L)
{
    // wxObject object
    wxObject * object = (wxObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxObject);
    // const wxString key
    const wxString key = wxlua_getwxStringtype(L, 2);
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call Append
    wxNode* returns = (wxNode*)self->Append(key, object);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNode);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxList_Append1[] = { &wxluatype_wxList, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxList_Append1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_Append1[1] = {{ wxLua_wxList_Append1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxList_Append1 }};
//     wxNode *Append(long key, wxObject *object)
static int LUACALL wxLua_wxList_Append1(lua_State *L)
{
    // wxObject object
    wxObject * object = (wxObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxObject);
    // long key
    long key = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call Append
    wxNode* returns = (wxNode*)self->Append(key, object);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNode);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxList_Append[] = { &wxluatype_wxList, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxList_Append(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_Append[1] = {{ wxLua_wxList_Append, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxList_Append }};
//     wxNode *Append(wxObject *object)
static int LUACALL wxLua_wxList_Append(lua_State *L)
{
    // wxObject object
    wxObject * object = (wxObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxObject);
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call Append
    wxNode* returns = (wxNode*)self->Append(object);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNode);

    return 1;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)

static wxLuaArgType s_wxluatypeArray_wxLua_wxList_Clear[] = { &wxluatype_wxList, NULL };
static int LUACALL wxLua_wxList_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_Clear[1] = {{ wxLua_wxList_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxList_Clear }};
//     void Clear()
static int LUACALL wxLua_wxList_Clear(lua_State *L)
{
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxList_DeleteContents[] = { &wxluatype_wxList, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxList_DeleteContents(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_DeleteContents[1] = {{ wxLua_wxList_DeleteContents, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxList_DeleteContents }};
//     void DeleteContents(bool destroy)
static int LUACALL wxLua_wxList_DeleteContents(lua_State *L)
{
    // bool destroy
    bool destroy = wxlua_getbooleantype(L, 2);
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call DeleteContents
    self->DeleteContents(destroy);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxList_DeleteNode[] = { &wxluatype_wxList, &wxluatype_wxNode, NULL };
static int LUACALL wxLua_wxList_DeleteNode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_DeleteNode[1] = {{ wxLua_wxList_DeleteNode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxList_DeleteNode }};
//     bool DeleteNode(wxNode *pNode)
static int LUACALL wxLua_wxList_DeleteNode(lua_State *L)
{
    // wxNode pNode
    wxNode * pNode = (wxNode *)wxluaT_getuserdatatype(L, 2, wxluatype_wxNode);
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call DeleteNode
    bool returns = (self->DeleteNode(pNode));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
static wxLuaArgType s_wxluatypeArray_wxLua_wxList_DeleteObject[] = { &wxluatype_wxList, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxList_DeleteObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_DeleteObject[1] = {{ wxLua_wxList_DeleteObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxList_DeleteObject }};
//     bool DeleteObject(wxObject *pObject)
static int LUACALL wxLua_wxList_DeleteObject(lua_State *L)
{
    // wxObject pObject
    wxObject * pObject = (wxObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxObject);
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call DeleteObject
    bool returns = (self->DeleteObject(pObject));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)

static wxLuaArgType s_wxluatypeArray_wxLua_wxList_Find2[] = { &wxluatype_wxList, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxList_Find2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_Find2[1] = {{ wxLua_wxList_Find2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxList_Find2 }};
//     wxNode *Find(const wxString &key)
static int LUACALL wxLua_wxList_Find2(lua_State *L)
{
    // const wxString key
    const wxString key = wxlua_getwxStringtype(L, 2);
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call Find
    wxNode* returns = (wxNode*)self->Find(key);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNode);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxList_Find1[] = { &wxluatype_wxList, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxList_Find1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_Find1[1] = {{ wxLua_wxList_Find1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxList_Find1 }};
//     wxNode *Find(long key)
static int LUACALL wxLua_wxList_Find1(lua_State *L)
{
    // long key
    long key = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call Find
    wxNode* returns = (wxNode*)self->Find(key);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNode);

    return 1;
}


#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
static wxLuaArgType s_wxluatypeArray_wxLua_wxList_Find[] = { &wxluatype_wxList, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxList_Find(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_Find[1] = {{ wxLua_wxList_Find, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxList_Find }};
//     wxNode* Find(wxObject* pObject)
static int LUACALL wxLua_wxList_Find(lua_State *L)
{
    // wxObject pObject
    wxObject * pObject = (wxObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxObject);
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call Find
    wxNode* returns = (wxNode*)self->Find(pObject);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNode);

    return 1;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)

static wxLuaArgType s_wxluatypeArray_wxLua_wxList_GetCount[] = { &wxluatype_wxList, NULL };
static int LUACALL wxLua_wxList_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_GetCount[1] = {{ wxLua_wxList_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxList_GetCount }};
//     int     GetCount() const
static int LUACALL wxLua_wxList_GetCount(lua_State *L)
{
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxList_GetFirst[] = { &wxluatype_wxList, NULL };
static int LUACALL wxLua_wxList_GetFirst(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_GetFirst[1] = {{ wxLua_wxList_GetFirst, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxList_GetFirst }};
//     wxNode *GetFirst()
static int LUACALL wxLua_wxList_GetFirst(lua_State *L)
{
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call GetFirst
    wxNode* returns = (wxNode*)self->GetFirst();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNode);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxList_GetLast[] = { &wxluatype_wxList, NULL };
static int LUACALL wxLua_wxList_GetLast(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_GetLast[1] = {{ wxLua_wxList_GetLast, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxList_GetLast }};
//     wxNode *GetLast()
static int LUACALL wxLua_wxList_GetLast(lua_State *L)
{
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call GetLast
    wxNode* returns = (wxNode*)self->GetLast();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNode);

    return 1;
}


#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
static wxLuaArgType s_wxluatypeArray_wxLua_wxList_IndexOf[] = { &wxluatype_wxList, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxList_IndexOf(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_IndexOf[1] = {{ wxLua_wxList_IndexOf, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxList_IndexOf }};
//     int     IndexOf(wxObject* pObject)
static int LUACALL wxLua_wxList_IndexOf(lua_State *L)
{
    // wxObject pObject
    wxObject * pObject = (wxObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxObject);
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call IndexOf
    int returns = (self->IndexOf(pObject));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxList_Insert2[] = { &wxluatype_wxList, &wxluatype_wxNode, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxList_Insert2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_Insert2[1] = {{ wxLua_wxList_Insert2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxList_Insert2 }};
//     wxNode *Insert(wxNode *pNode, wxObject *pObject)
static int LUACALL wxLua_wxList_Insert2(lua_State *L)
{
    // wxObject pObject
    wxObject * pObject = (wxObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxObject);
    // wxNode pNode
    wxNode * pNode = (wxNode *)wxluaT_getuserdatatype(L, 2, wxluatype_wxNode);
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call Insert
    wxNode* returns = (wxNode*)self->Insert(pNode, pObject);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNode);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxList_Insert1[] = { &wxluatype_wxList, &wxluatype_TINTEGER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxList_Insert1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_Insert1[1] = {{ wxLua_wxList_Insert1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxList_Insert1 }};
//     wxNode *Insert(size_t position, wxObject *pObject)
static int LUACALL wxLua_wxList_Insert1(lua_State *L)
{
    // wxObject pObject
    wxObject * pObject = (wxObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxObject);
    // size_t position
    size_t position = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call Insert
    wxNode* returns = (wxNode*)self->Insert(position, pObject);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNode);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxList_Insert[] = { &wxluatype_wxList, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxList_Insert(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_Insert[1] = {{ wxLua_wxList_Insert, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxList_Insert }};
//     wxNode *Insert(wxObject *pObject)
static int LUACALL wxLua_wxList_Insert(lua_State *L)
{
    // wxObject pObject
    wxObject * pObject = (wxObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxObject);
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call Insert
    wxNode* returns = (wxNode*)self->Insert(pObject);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNode);

    return 1;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)

static wxLuaArgType s_wxluatypeArray_wxLua_wxList_IsEmpty[] = { &wxluatype_wxList, NULL };
static int LUACALL wxLua_wxList_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_IsEmpty[1] = {{ wxLua_wxList_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxList_IsEmpty }};
//     bool    IsEmpty() const
static int LUACALL wxLua_wxList_IsEmpty(lua_State *L)
{
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxList_Item[] = { &wxluatype_wxList, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxList_Item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_Item[1] = {{ wxLua_wxList_Item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxList_Item }};
//     wxNode *Item(int iIndex) const
static int LUACALL wxLua_wxList_Item(lua_State *L)
{
    // int iIndex
    int iIndex = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call Item
    wxNode* returns = (wxNode*)self->Item(iIndex);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNode);

    return 1;
}


#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
static wxLuaArgType s_wxluatypeArray_wxLua_wxList_Member[] = { &wxluatype_wxList, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxList_Member(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_Member[1] = {{ wxLua_wxList_Member, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxList_Member }};
//     wxNode *Member(wxObject *pObject)
static int LUACALL wxLua_wxList_Member(lua_State *L)
{
    // wxObject pObject
    wxObject * pObject = (wxObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxObject);
    // get this
    wxList * self = (wxList *)wxluaT_getuserdatatype(L, 1, wxluatype_wxList);
    // call Member
    wxNode* returns = (wxNode*)self->Member(pObject);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNode);

    return 1;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)

static wxLuaArgType s_wxluatypeArray_wxLua_wxList_delete[] = { &wxluatype_wxList, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxList_delete }};

static int LUACALL wxLua_wxList_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_constructor[1] = {{ wxLua_wxList_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxList()
static int LUACALL wxLua_wxList_constructor(lua_State *L)
{
    // call constructor
    wxList* returns = new wxList();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxList);

    return 1;
}




#if ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_Append_overload[] =
{

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
    { wxLua_wxList_Append2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxList_Append2 },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
    { wxLua_wxList_Append1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxList_Append1 },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
    { wxLua_wxList_Append, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxList_Append },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
};
static int s_wxluafunc_wxLua_wxList_Append_overload_count = sizeof(s_wxluafunc_wxLua_wxList_Append_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject))

#if (wxLUA_USE_wxList && !wxUSE_STL)||((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_Find_overload[] =
{
    { wxLua_wxList_Find2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxList_Find2 },
    { wxLua_wxList_Find1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxList_Find1 },

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
    { wxLua_wxList_Find, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxList_Find },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
};
static int s_wxluafunc_wxLua_wxList_Find_overload_count = sizeof(s_wxluafunc_wxLua_wxList_Find_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxList && !wxUSE_STL)||((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject))

#if ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxList_Insert_overload[] =
{

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
    { wxLua_wxList_Insert2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxList_Insert2 },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
    { wxLua_wxList_Insert1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxList_Insert1 },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
    { wxLua_wxList_Insert, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxList_Insert },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
};
static int s_wxluafunc_wxLua_wxList_Insert_overload_count = sizeof(s_wxluafunc_wxLua_wxList_Insert_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxList_methods[] = {
#if ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject))
    { "Append", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxList_Append_overload, s_wxluafunc_wxLua_wxList_Append_overload_count, 0 },
#endif // ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject))

    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxList_Clear, 1, NULL },
    { "DeleteContents", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxList_DeleteContents, 1, NULL },
    { "DeleteNode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxList_DeleteNode, 1, NULL },

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
    { "DeleteObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxList_DeleteObject, 1, NULL },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)

#if (wxLUA_USE_wxList && !wxUSE_STL)||((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject))
    { "Find", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxList_Find_overload, s_wxluafunc_wxLua_wxList_Find_overload_count, 0 },
#endif // (wxLUA_USE_wxList && !wxUSE_STL)||((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject))

    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxList_GetCount, 1, NULL },
    { "GetFirst", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxList_GetFirst, 1, NULL },
    { "GetLast", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxList_GetLast, 1, NULL },

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
    { "IndexOf", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxList_IndexOf, 1, NULL },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)

#if ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject))
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxList_Insert_overload, s_wxluafunc_wxLua_wxList_Insert_overload_count, 0 },
#endif // ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject))

    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxList_IsEmpty, 1, NULL },
    { "Item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxList_Item, 1, NULL },

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
    { "Member", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxList_Member, 1, NULL },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxList_delete, 1, NULL },
    { "wxList", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxList_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxList_methodCount = sizeof(wxList_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxList && !wxUSE_STL


#if wxLUA_USE_wxList && !wxUSE_STL
// ---------------------------------------------------------------------------
// Bind class wxNode
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxNode'
int wxluatype_wxNode = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
static wxLuaArgType s_wxluatypeArray_wxLua_wxNode_GetData[] = { &wxluatype_wxNode, NULL };
static int LUACALL wxLua_wxNode_GetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNode_GetData[1] = {{ wxLua_wxNode_GetData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNode_GetData }};
//     wxObject *GetData()
static int LUACALL wxLua_wxNode_GetData(lua_State *L)
{
    // get this
    wxNode * self = (wxNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNode);
    // call GetData
    wxObject* returns = (wxObject*)self->GetData();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxObject);

    return 1;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)

static wxLuaArgType s_wxluatypeArray_wxLua_wxNode_GetNext[] = { &wxluatype_wxNode, NULL };
static int LUACALL wxLua_wxNode_GetNext(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNode_GetNext[1] = {{ wxLua_wxNode_GetNext, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNode_GetNext }};
//     wxNode *GetNext()
static int LUACALL wxLua_wxNode_GetNext(lua_State *L)
{
    // get this
    wxNode * self = (wxNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNode);
    // call GetNext
    wxNode* returns = (wxNode*)self->GetNext();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNode);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNode_GetPrevious[] = { &wxluatype_wxNode, NULL };
static int LUACALL wxLua_wxNode_GetPrevious(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNode_GetPrevious[1] = {{ wxLua_wxNode_GetPrevious, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNode_GetPrevious }};
//     wxNode *GetPrevious()
static int LUACALL wxLua_wxNode_GetPrevious(lua_State *L)
{
    // get this
    wxNode * self = (wxNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNode);
    // call GetPrevious
    wxNode* returns = (wxNode*)self->GetPrevious();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNode);

    return 1;
}


#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
static wxLuaArgType s_wxluatypeArray_wxLua_wxNode_SetData[] = { &wxluatype_wxNode, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxNode_SetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNode_SetData[1] = {{ wxLua_wxNode_SetData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNode_SetData }};
//     void SetData(wxObject *data)
static int LUACALL wxLua_wxNode_SetData(lua_State *L)
{
    // wxObject data
    wxObject * data = (wxObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxObject);
    // get this
    wxNode * self = (wxNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNode);
    // call SetData
    self->SetData(data);

    return 0;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxNode_methods[] = {
#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
    { "GetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNode_GetData, 1, NULL },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)

    { "GetNext", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNode_GetNext, 1, NULL },
    { "GetPrevious", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNode_GetPrevious, 1, NULL },

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)
    { "SetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNode_SetData, 1, NULL },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxObject)

    { 0, 0, 0, 0 },
};

int wxNode_methodCount = sizeof(wxNode_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxList && !wxUSE_STL


#if wxLUA_USE_wxArrayInt
// ---------------------------------------------------------------------------
// Bind class wxArrayInt
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxArrayInt'
int wxluatype_wxArrayInt = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayInt_Add[] = { &wxluatype_wxArrayInt, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxArrayInt_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_Add[1] = {{ wxLua_wxArrayInt_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxArrayInt_Add }};
//     void Add( int num )
static int LUACALL wxLua_wxArrayInt_Add(lua_State *L)
{
    // int num
    int num = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxArrayInt * self = (wxArrayInt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayInt);
    // call Add
    self->Add(num);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayInt_Alloc[] = { &wxluatype_wxArrayInt, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxArrayInt_Alloc(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_Alloc[1] = {{ wxLua_wxArrayInt_Alloc, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxArrayInt_Alloc }};
//     void Alloc(size_t count)
static int LUACALL wxLua_wxArrayInt_Alloc(lua_State *L)
{
    // size_t count
    size_t count = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxArrayInt * self = (wxArrayInt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayInt);
    // call Alloc
    self->Alloc(count);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayInt_Clear[] = { &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxArrayInt_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_Clear[1] = {{ wxLua_wxArrayInt_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayInt_Clear }};
//     void Clear()
static int LUACALL wxLua_wxArrayInt_Clear(lua_State *L)
{
    // get this
    wxArrayInt * self = (wxArrayInt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayInt);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayInt_Empty[] = { &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxArrayInt_Empty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_Empty[1] = {{ wxLua_wxArrayInt_Empty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayInt_Empty }};
//     void Empty()
static int LUACALL wxLua_wxArrayInt_Empty(lua_State *L)
{
    // get this
    wxArrayInt * self = (wxArrayInt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayInt);
    // call Empty
    self->Empty();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayInt_GetCount[] = { &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxArrayInt_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_GetCount[1] = {{ wxLua_wxArrayInt_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayInt_GetCount }};
//     int  GetCount() const
static int LUACALL wxLua_wxArrayInt_GetCount(lua_State *L)
{
    // get this
    wxArrayInt * self = (wxArrayInt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayInt);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayInt_Index[] = { &wxluatype_wxArrayInt, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxArrayInt_Index(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_Index[1] = {{ wxLua_wxArrayInt_Index, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxArrayInt_Index }};
//     int  Index(int n, bool searchFromEnd = false)
static int LUACALL wxLua_wxArrayInt_Index(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool searchFromEnd = false
    bool searchFromEnd = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxArrayInt * self = (wxArrayInt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayInt);
    // call Index
    int returns = (self->Index(n, searchFromEnd));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayInt_Insert[] = { &wxluatype_wxArrayInt, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxArrayInt_Insert(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_Insert[1] = {{ wxLua_wxArrayInt_Insert, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxArrayInt_Insert }};
//     void Insert( int num, int n, int copies = 1 )
static int LUACALL wxLua_wxArrayInt_Insert(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int copies = 1
    int copies = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 1);
    // int n
    int n = (int)wxlua_getnumbertype(L, 3);
    // int num
    int num = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxArrayInt * self = (wxArrayInt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayInt);
    // call Insert
    self->Insert(num, n, copies);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayInt_IsEmpty[] = { &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxArrayInt_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_IsEmpty[1] = {{ wxLua_wxArrayInt_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayInt_IsEmpty }};
//     bool IsEmpty() const
static int LUACALL wxLua_wxArrayInt_IsEmpty(lua_State *L)
{
    // get this
    wxArrayInt * self = (wxArrayInt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayInt);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayInt_Item[] = { &wxluatype_wxArrayInt, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxArrayInt_Item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_Item[1] = {{ wxLua_wxArrayInt_Item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxArrayInt_Item }};
//     int  Item( int n )
static int LUACALL wxLua_wxArrayInt_Item(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxArrayInt * self = (wxArrayInt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayInt);
    // call Item
    int returns = (self->Item(n));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayInt_Remove[] = { &wxluatype_wxArrayInt, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxArrayInt_Remove(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_Remove[1] = {{ wxLua_wxArrayInt_Remove, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxArrayInt_Remove }};
//     void Remove(int n)
static int LUACALL wxLua_wxArrayInt_Remove(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxArrayInt * self = (wxArrayInt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayInt);
    // call Remove
    self->Remove(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayInt_RemoveAt[] = { &wxluatype_wxArrayInt, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxArrayInt_RemoveAt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_RemoveAt[1] = {{ wxLua_wxArrayInt_RemoveAt, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxArrayInt_RemoveAt }};
//     void RemoveAt(size_t index)
static int LUACALL wxLua_wxArrayInt_RemoveAt(lua_State *L)
{
    // size_t index
    size_t index = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxArrayInt * self = (wxArrayInt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayInt);
    // call RemoveAt
    self->RemoveAt(index);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayInt_Shrink[] = { &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxArrayInt_Shrink(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_Shrink[1] = {{ wxLua_wxArrayInt_Shrink, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayInt_Shrink }};
//     void Shrink()
static int LUACALL wxLua_wxArrayInt_Shrink(lua_State *L)
{
    // get this
    wxArrayInt * self = (wxArrayInt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayInt);
    // call Shrink
    self->Shrink();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayInt_ToLuaTable[] = { &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxArrayInt_ToLuaTable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_ToLuaTable[1] = {{ wxLua_wxArrayInt_ToLuaTable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayInt_ToLuaTable }};
// %override wxLua_wxArrayInt_ToLuaTable
// int ToLuaTable() const
static int LUACALL wxLua_wxArrayInt_ToLuaTable(lua_State *L)
{
    wxArrayInt * self = (wxArrayInt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayInt);
    wxlua_pushwxArrayInttable(L, *self);
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayInt_delete[] = { &wxluatype_wxArrayInt, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxArrayInt_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayInt_op_index[] = { &wxluatype_wxArrayInt, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxArrayInt_op_index(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_op_index[1] = {{ wxLua_wxArrayInt_op_index, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxArrayInt_op_index }};
//     %operator int operator[](size_t nIndex)
static int LUACALL wxLua_wxArrayInt_op_index(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxArrayInt * self = (wxArrayInt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayInt);
    // call op_index
    int returns = ((*self)[(nIndex)]);
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayInt_constructor1[] = { &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxArrayInt_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_constructor1[1] = {{ wxLua_wxArrayInt_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxArrayInt_constructor1 }};
//     wxArrayInt(const wxArrayInt& array)
static int LUACALL wxLua_wxArrayInt_constructor1(lua_State *L)
{
    // const wxArrayInt array
    wxLuaSmartwxArrayInt array = wxlua_getwxArrayInt(L, 1);
    // call constructor
    wxArrayInt* returns = new wxArrayInt(array);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxArrayInt((wxArrayInt*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayInt);

    return 1;
}

static int LUACALL wxLua_wxArrayInt_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_constructor[1] = {{ wxLua_wxArrayInt_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxArrayInt()
static int LUACALL wxLua_wxArrayInt_constructor(lua_State *L)
{
    // call constructor
    wxArrayInt* returns = new wxArrayInt();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxArrayInt((wxArrayInt*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayInt);

    return 1;
}




#if (wxLUA_USE_wxArrayInt)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayInt_constructor_overload[] =
{
    { wxLua_wxArrayInt_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxArrayInt_constructor1 },
    { wxLua_wxArrayInt_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxArrayInt_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxArrayInt_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxArrayInt)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxArrayInt_methods[] = {
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayInt_Add, 1, NULL },
    { "Alloc", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayInt_Alloc, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayInt_Clear, 1, NULL },
    { "Empty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayInt_Empty, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayInt_GetCount, 1, NULL },
    { "Index", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayInt_Index, 1, NULL },
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayInt_Insert, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayInt_IsEmpty, 1, NULL },
    { "Item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayInt_Item, 1, NULL },
    { "Remove", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayInt_Remove, 1, NULL },
    { "RemoveAt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayInt_RemoveAt, 1, NULL },
    { "Shrink", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayInt_Shrink, 1, NULL },
    { "ToLuaTable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayInt_ToLuaTable, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxArrayInt_delete, 1, NULL },
    { "op_index", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayInt_op_index, 1, NULL },

#if (wxLUA_USE_wxArrayInt)
    { "wxArrayInt", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxArrayInt_constructor_overload, s_wxluafunc_wxLua_wxArrayInt_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxArrayInt)

    { 0, 0, 0, 0 },
};

int wxArrayInt_methodCount = sizeof(wxArrayInt_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxArrayInt


#if wxLUA_USE_wxArrayString
// ---------------------------------------------------------------------------
// Bind class wxArrayString
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxArrayString'
int wxluatype_wxArrayString = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_Add[] = { &wxluatype_wxArrayString, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxArrayString_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_Add[1] = {{ wxLua_wxArrayString_Add, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxArrayString_Add }};
//     size_t Add(const wxString& str, size_t copies = 1)
static int LUACALL wxLua_wxArrayString_Add(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t copies = 1
    size_t copies = (argCount >= 3 ? (size_t)wxlua_getuintegertype(L, 3) : 1);
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 2);
    // get this
    wxArrayString * self = (wxArrayString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayString);
    // call Add
    size_t returns = (self->Add(str, copies));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_Alloc[] = { &wxluatype_wxArrayString, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxArrayString_Alloc(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_Alloc[1] = {{ wxLua_wxArrayString_Alloc, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxArrayString_Alloc }};
//     void Alloc(size_t nCount)
static int LUACALL wxLua_wxArrayString_Alloc(lua_State *L)
{
    // size_t nCount
    size_t nCount = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxArrayString * self = (wxArrayString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayString);
    // call Alloc
    self->Alloc(nCount);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_Clear[] = { &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxArrayString_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_Clear[1] = {{ wxLua_wxArrayString_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayString_Clear }};
//     void Clear()
static int LUACALL wxLua_wxArrayString_Clear(lua_State *L)
{
    // get this
    wxArrayString * self = (wxArrayString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayString);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_Empty[] = { &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxArrayString_Empty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_Empty[1] = {{ wxLua_wxArrayString_Empty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayString_Empty }};
//     void Empty()
static int LUACALL wxLua_wxArrayString_Empty(lua_State *L)
{
    // get this
    wxArrayString * self = (wxArrayString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayString);
    // call Empty
    self->Empty();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_GetCount[] = { &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxArrayString_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_GetCount[1] = {{ wxLua_wxArrayString_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayString_GetCount }};
//     int  GetCount() const
static int LUACALL wxLua_wxArrayString_GetCount(lua_State *L)
{
    // get this
    wxArrayString * self = (wxArrayString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayString);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_Index[] = { &wxluatype_wxArrayString, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxArrayString_Index(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_Index[1] = {{ wxLua_wxArrayString_Index, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxArrayString_Index }};
//     int  Index(const wxString &sz, bool bCase = true, bool bFromEnd = false)
static int LUACALL wxLua_wxArrayString_Index(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool bFromEnd = false
    bool bFromEnd = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : false);
    // bool bCase = true
    bool bCase = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxString sz
    const wxString sz = wxlua_getwxStringtype(L, 2);
    // get this
    wxArrayString * self = (wxArrayString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayString);
    // call Index
    int returns = (self->Index(sz, bCase, bFromEnd));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_Insert[] = { &wxluatype_wxArrayString, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxArrayString_Insert(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_Insert[1] = {{ wxLua_wxArrayString_Insert, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxArrayString_Insert }};
//     void Insert(const wxString& str, int nIndex, size_t copies = 1)
static int LUACALL wxLua_wxArrayString_Insert(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t copies = 1
    size_t copies = (argCount >= 4 ? (size_t)wxlua_getuintegertype(L, 4) : 1);
    // int nIndex
    int nIndex = (int)wxlua_getnumbertype(L, 3);
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 2);
    // get this
    wxArrayString * self = (wxArrayString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayString);
    // call Insert
    self->Insert(str, nIndex, copies);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_IsEmpty[] = { &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxArrayString_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_IsEmpty[1] = {{ wxLua_wxArrayString_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayString_IsEmpty }};
//     bool IsEmpty()
static int LUACALL wxLua_wxArrayString_IsEmpty(lua_State *L)
{
    // get this
    wxArrayString * self = (wxArrayString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayString);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_Item[] = { &wxluatype_wxArrayString, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxArrayString_Item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_Item[1] = {{ wxLua_wxArrayString_Item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxArrayString_Item }};
//     wxString Item(size_t nIndex) const
static int LUACALL wxLua_wxArrayString_Item(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxArrayString * self = (wxArrayString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayString);
    // call Item
    wxString returns = (self->Item(nIndex));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_Last[] = { &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxArrayString_Last(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_Last[1] = {{ wxLua_wxArrayString_Last, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayString_Last }};
//     wxString Last()
static int LUACALL wxLua_wxArrayString_Last(lua_State *L)
{
    // get this
    wxArrayString * self = (wxArrayString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayString);
    // call Last
    wxString returns = (self->Last());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_Remove[] = { &wxluatype_wxArrayString, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxArrayString_Remove(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_Remove[1] = {{ wxLua_wxArrayString_Remove, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxArrayString_Remove }};
//     void Remove(const wxString &sz)
static int LUACALL wxLua_wxArrayString_Remove(lua_State *L)
{
    // const wxString sz
    const wxString sz = wxlua_getwxStringtype(L, 2);
    // get this
    wxArrayString * self = (wxArrayString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayString);
    // call Remove
    self->Remove(sz);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_RemoveAt[] = { &wxluatype_wxArrayString, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxArrayString_RemoveAt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_RemoveAt[1] = {{ wxLua_wxArrayString_RemoveAt, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxArrayString_RemoveAt }};
//     void RemoveAt(size_t nIndex, size_t count = 1)
static int LUACALL wxLua_wxArrayString_RemoveAt(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t count = 1
    size_t count = (argCount >= 3 ? (size_t)wxlua_getuintegertype(L, 3) : 1);
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxArrayString * self = (wxArrayString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayString);
    // call RemoveAt
    self->RemoveAt(nIndex, count);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_Shrink[] = { &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxArrayString_Shrink(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_Shrink[1] = {{ wxLua_wxArrayString_Shrink, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayString_Shrink }};
//     void Shrink()
static int LUACALL wxLua_wxArrayString_Shrink(lua_State *L)
{
    // get this
    wxArrayString * self = (wxArrayString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayString);
    // call Shrink
    self->Shrink();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_Sort[] = { &wxluatype_wxArrayString, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxArrayString_Sort(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_Sort[1] = {{ wxLua_wxArrayString_Sort, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxArrayString_Sort }};
//     void Sort(bool reverseOrder = false)
static int LUACALL wxLua_wxArrayString_Sort(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool reverseOrder = false
    bool reverseOrder = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // get this
    wxArrayString * self = (wxArrayString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayString);
    // call Sort
    self->Sort(reverseOrder);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_ToLuaTable[] = { &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxArrayString_ToLuaTable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_ToLuaTable[1] = {{ wxLua_wxArrayString_ToLuaTable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxArrayString_ToLuaTable }};
// %override wxLua_wxArrayString_ToLuaTable
// int ToLuaTable() const
static int LUACALL wxLua_wxArrayString_ToLuaTable(lua_State *L)
{
    wxArrayString * self = (wxArrayString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayString);
    wxlua_pushwxArrayStringtable(L, *self);
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_delete[] = { &wxluatype_wxArrayString, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxArrayString_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_op_index[] = { &wxluatype_wxArrayString, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxArrayString_op_index(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_op_index[1] = {{ wxLua_wxArrayString_op_index, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxArrayString_op_index }};
//     %operator wxString& operator[](size_t nIndex)
static int LUACALL wxLua_wxArrayString_op_index(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxArrayString * self = (wxArrayString *)wxluaT_getuserdatatype(L, 1, wxluatype_wxArrayString);
    // call op_index
    wxString returns = (*self)[(nIndex)];
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxArrayString_constructor1[] = { &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxArrayString_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_constructor1[1] = {{ wxLua_wxArrayString_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxArrayString_constructor1 }};
//     wxArrayString(const wxArrayString& array)
static int LUACALL wxLua_wxArrayString_constructor1(lua_State *L)
{
    // const wxArrayString array
    wxLuaSmartwxArrayString array = wxlua_getwxArrayString(L, 1);
    // call constructor
    wxArrayString* returns = new wxArrayString(array);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxArrayString((wxArrayString*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

static int LUACALL wxLua_wxArrayString_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_constructor[1] = {{ wxLua_wxArrayString_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxArrayString()
static int LUACALL wxLua_wxArrayString_constructor(lua_State *L)
{
    // call constructor
    wxArrayString* returns = new wxArrayString();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxArrayString((wxArrayString*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}




#if (wxLUA_USE_wxArrayString)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxArrayString_constructor_overload[] =
{
    { wxLua_wxArrayString_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxArrayString_constructor1 },
    { wxLua_wxArrayString_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxArrayString_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxArrayString_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxArrayString)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxArrayString_methods[] = {
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayString_Add, 1, NULL },
    { "Alloc", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayString_Alloc, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayString_Clear, 1, NULL },
    { "Empty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayString_Empty, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayString_GetCount, 1, NULL },
    { "Index", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayString_Index, 1, NULL },
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayString_Insert, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayString_IsEmpty, 1, NULL },
    { "Item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayString_Item, 1, NULL },
    { "Last", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayString_Last, 1, NULL },
    { "Remove", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayString_Remove, 1, NULL },
    { "RemoveAt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayString_RemoveAt, 1, NULL },
    { "Shrink", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayString_Shrink, 1, NULL },
    { "Sort", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayString_Sort, 1, NULL },
    { "ToLuaTable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayString_ToLuaTable, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxArrayString_delete, 1, NULL },
    { "op_index", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxArrayString_op_index, 1, NULL },

#if (wxLUA_USE_wxArrayString)
    { "wxArrayString", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxArrayString_constructor_overload, s_wxluafunc_wxLua_wxArrayString_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxArrayString)

    { 0, 0, 0, 0 },
};

int wxArrayString_methodCount = sizeof(wxArrayString_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxArrayString


#if wxLUA_USE_wxArrayString
// ---------------------------------------------------------------------------
// Bind class wxSortedArrayString
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSortedArrayString'
int wxluatype_wxSortedArrayString = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSortedArrayString_delete[] = { &wxluatype_wxSortedArrayString, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSortedArrayString_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSortedArrayString_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxSortedArrayString_constructor2[] = { &wxluatype_wxSortedArrayString, NULL };
static int LUACALL wxLua_wxSortedArrayString_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSortedArrayString_constructor2[1] = {{ wxLua_wxSortedArrayString_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxSortedArrayString_constructor2 }};
//     wxSortedArrayString(const wxSortedArrayString& src)
static int LUACALL wxLua_wxSortedArrayString_constructor2(lua_State *L)
{
    // const wxSortedArrayString src
    wxLuaSmartwxSortedArrayString src = wxlua_getwxSortedArrayString(L, 1);
    // call constructor
    wxSortedArrayString* returns = new wxSortedArrayString(src);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSortedArrayString((wxSortedArrayString*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSortedArrayString);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSortedArrayString_constructor1[] = { &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxSortedArrayString_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSortedArrayString_constructor1[1] = {{ wxLua_wxSortedArrayString_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxSortedArrayString_constructor1 }};
//     wxSortedArrayString(const wxArrayString& src) // have to have this constructor since they're not actually derived
static int LUACALL wxLua_wxSortedArrayString_constructor1(lua_State *L)
{
    // const wxArrayString src
    wxLuaSmartwxArrayString src = wxlua_getwxArrayString(L, 1);
    // call constructor
    wxSortedArrayString* returns = new wxSortedArrayString(src);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSortedArrayString((wxSortedArrayString*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSortedArrayString);

    return 1;
}

static int LUACALL wxLua_wxSortedArrayString_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSortedArrayString_constructor[1] = {{ wxLua_wxSortedArrayString_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxSortedArrayString()
static int LUACALL wxLua_wxSortedArrayString_constructor(lua_State *L)
{
    // call constructor
    wxSortedArrayString* returns = new wxSortedArrayString();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSortedArrayString((wxSortedArrayString*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSortedArrayString);

    return 1;
}




#if (wxLUA_USE_wxArrayString)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSortedArrayString_constructor_overload[] =
{
    { wxLua_wxSortedArrayString_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxSortedArrayString_constructor2 },
    { wxLua_wxSortedArrayString_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxSortedArrayString_constructor1 },
    { wxLua_wxSortedArrayString_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxSortedArrayString_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxSortedArrayString_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxArrayString)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSortedArrayString_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSortedArrayString_delete, 1, NULL },

#if (wxLUA_USE_wxArrayString)
    { "wxSortedArrayString", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSortedArrayString_constructor_overload, s_wxluafunc_wxLua_wxSortedArrayString_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxArrayString)

    { 0, 0, 0, 0 },
};

int wxSortedArrayString_methodCount = sizeof(wxSortedArrayString_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxArrayString


#if wxUSE_LONGLONG
// ---------------------------------------------------------------------------
// Bind class wxLongLong
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLongLong'
int wxluatype_wxLongLong = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxLongLong_Abs[] = { &wxluatype_wxLongLong, NULL };
static int LUACALL wxLua_wxLongLong_Abs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLongLong_Abs[1] = {{ wxLua_wxLongLong_Abs, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLongLong_Abs }};
//     wxLongLong Abs() const
static int LUACALL wxLua_wxLongLong_Abs(lua_State *L)
{
    // get this
    wxLongLong * self = (wxLongLong *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLongLong);
    // call Abs
    // allocate a new object using the copy constructor
    wxLongLong* returns = new wxLongLong(self->Abs());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLongLong((wxLongLong*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLongLong);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLongLong_Assign[] = { &wxluatype_wxLongLong, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxLongLong_Assign(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLongLong_Assign[1] = {{ wxLua_wxLongLong_Assign, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxLongLong_Assign }};
//     wxLongLong& Assign(double d)
static int LUACALL wxLua_wxLongLong_Assign(lua_State *L)
{
    // double d
    double d = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxLongLong * self = (wxLongLong *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLongLong);
    // call Assign
    wxLongLong* returns = &self->Assign(d);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLongLong);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLongLong_GetHi[] = { &wxluatype_wxLongLong, NULL };
static int LUACALL wxLua_wxLongLong_GetHi(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLongLong_GetHi[1] = {{ wxLua_wxLongLong_GetHi, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLongLong_GetHi }};
//     long GetHi() const
static int LUACALL wxLua_wxLongLong_GetHi(lua_State *L)
{
    // get this
    wxLongLong * self = (wxLongLong *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLongLong);
    // call GetHi
    long  returns = (self->GetHi());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLongLong_GetLo[] = { &wxluatype_wxLongLong, NULL };
static int LUACALL wxLua_wxLongLong_GetLo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLongLong_GetLo[1] = {{ wxLua_wxLongLong_GetLo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLongLong_GetLo }};
//     unsigned long GetLo() const
static int LUACALL wxLua_wxLongLong_GetLo(lua_State *L)
{
    // get this
    wxLongLong * self = (wxLongLong *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLongLong);
    // call GetLo
    unsigned long returns = (self->GetLo());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLongLong_ToDouble[] = { &wxluatype_wxLongLong, NULL };
static int LUACALL wxLua_wxLongLong_ToDouble(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLongLong_ToDouble[1] = {{ wxLua_wxLongLong_ToDouble, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLongLong_ToDouble }};
//     double ToDouble() const
static int LUACALL wxLua_wxLongLong_ToDouble(lua_State *L)
{
    // get this
    wxLongLong * self = (wxLongLong *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLongLong);
    // call ToDouble
    double returns = (self->ToDouble());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLongLong_ToLong[] = { &wxluatype_wxLongLong, NULL };
static int LUACALL wxLua_wxLongLong_ToLong(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLongLong_ToLong[1] = {{ wxLua_wxLongLong_ToLong, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLongLong_ToLong }};
//     long ToLong() const
static int LUACALL wxLua_wxLongLong_ToLong(lua_State *L)
{
    // get this
    wxLongLong * self = (wxLongLong *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLongLong);
    // call ToLong
    long  returns = (self->ToLong());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLongLong_ToString[] = { &wxluatype_wxLongLong, NULL };
static int LUACALL wxLua_wxLongLong_ToString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLongLong_ToString[1] = {{ wxLua_wxLongLong_ToString, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLongLong_ToString }};
//     wxString ToString() const
static int LUACALL wxLua_wxLongLong_ToString(lua_State *L)
{
    // get this
    wxLongLong * self = (wxLongLong *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLongLong);
    // call ToString
    wxString returns = (self->ToString());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLongLong_delete[] = { &wxluatype_wxLongLong, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLongLong_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxLongLong_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxLongLong_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxLongLong_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLongLong_constructor[1] = {{ wxLua_wxLongLong_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxLongLong_constructor }};
//     wxLongLong(long hi = 0, unsigned long lo = 0)
static int LUACALL wxLua_wxLongLong_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // unsigned long lo = 0
    unsigned long lo = (argCount >= 2 ? (unsigned long)wxlua_getuintegertype(L, 2) : 0);
    // long hi = 0
    long hi = (argCount >= 1 ? (long)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxLongLong* returns = new wxLongLong(hi, lo);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLongLong((wxLongLong*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLongLong);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLongLong_methods[] = {
    { "Abs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLongLong_Abs, 1, NULL },
    { "Assign", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLongLong_Assign, 1, NULL },
    { "GetHi", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLongLong_GetHi, 1, NULL },
    { "GetLo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLongLong_GetLo, 1, NULL },
    { "ToDouble", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLongLong_ToDouble, 1, NULL },
    { "ToLong", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLongLong_ToLong, 1, NULL },
    { "ToString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLongLong_ToString, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxLongLong_delete, 1, NULL },
    { "wxLongLong", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLongLong_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxLongLong_methodCount = sizeof(wxLongLong_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_LONGLONG


#if wxUSE_LONGLONG
// ---------------------------------------------------------------------------
// Bind class wxULongLong
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxULongLong'
int wxluatype_wxULongLong = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxULongLong_GetHi[] = { &wxluatype_wxULongLong, NULL };
static int LUACALL wxLua_wxULongLong_GetHi(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxULongLong_GetHi[1] = {{ wxLua_wxULongLong_GetHi, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxULongLong_GetHi }};
//     unsigned long GetHi() const
static int LUACALL wxLua_wxULongLong_GetHi(lua_State *L)
{
    // get this
    wxULongLong * self = (wxULongLong *)wxluaT_getuserdatatype(L, 1, wxluatype_wxULongLong);
    // call GetHi
    unsigned long returns = (self->GetHi());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxULongLong_GetLo[] = { &wxluatype_wxULongLong, NULL };
static int LUACALL wxLua_wxULongLong_GetLo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxULongLong_GetLo[1] = {{ wxLua_wxULongLong_GetLo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxULongLong_GetLo }};
//     unsigned long GetLo() const
static int LUACALL wxLua_wxULongLong_GetLo(lua_State *L)
{
    // get this
    wxULongLong * self = (wxULongLong *)wxluaT_getuserdatatype(L, 1, wxluatype_wxULongLong);
    // call GetLo
    unsigned long returns = (self->GetLo());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxULongLong_ToString[] = { &wxluatype_wxULongLong, NULL };
static int LUACALL wxLua_wxULongLong_ToString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxULongLong_ToString[1] = {{ wxLua_wxULongLong_ToString, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxULongLong_ToString }};
//     wxString ToString() const
static int LUACALL wxLua_wxULongLong_ToString(lua_State *L)
{
    // get this
    wxULongLong * self = (wxULongLong *)wxluaT_getuserdatatype(L, 1, wxluatype_wxULongLong);
    // call ToString
    wxString returns = (self->ToString());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxULongLong_ToULong[] = { &wxluatype_wxULongLong, NULL };
static int LUACALL wxLua_wxULongLong_ToULong(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxULongLong_ToULong[1] = {{ wxLua_wxULongLong_ToULong, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxULongLong_ToULong }};
//     long ToULong() const
static int LUACALL wxLua_wxULongLong_ToULong(lua_State *L)
{
    // get this
    wxULongLong * self = (wxULongLong *)wxluaT_getuserdatatype(L, 1, wxluatype_wxULongLong);
    // call ToULong
    long  returns = (self->ToULong());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxULongLong_delete[] = { &wxluatype_wxULongLong, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxULongLong_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxULongLong_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxULongLong_constructor[] = { &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxULongLong_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxULongLong_constructor[1] = {{ wxLua_wxULongLong_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxULongLong_constructor }};
//     wxULongLong(unsigned long hi = 0, unsigned long lo = 0)
static int LUACALL wxLua_wxULongLong_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // unsigned long lo = 0
    unsigned long lo = (argCount >= 2 ? (unsigned long)wxlua_getuintegertype(L, 2) : 0);
    // unsigned long hi = 0
    unsigned long hi = (argCount >= 1 ? (unsigned long)wxlua_getuintegertype(L, 1) : 0);
    // call constructor
    wxULongLong* returns = new wxULongLong(hi, lo);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxULongLong((wxULongLong*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxULongLong);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxULongLong_methods[] = {
    { "GetHi", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxULongLong_GetHi, 1, NULL },
    { "GetLo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxULongLong_GetLo, 1, NULL },
    { "ToString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxULongLong_ToString, 1, NULL },
    { "ToULong", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxULongLong_ToULong, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxULongLong_delete, 1, NULL },
    { "wxULongLong", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxULongLong_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxULongLong_methodCount = sizeof(wxULongLong_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_LONGLONG

