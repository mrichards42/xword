// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxcore_windows.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxcore_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif



#if wxLUA_USE_wxTooltip && wxUSE_TOOLTIPS
// ---------------------------------------------------------------------------
// Bind class wxToolTip
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxToolTip'
int wxluatype_wxToolTip = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolTip_Enable[] = { &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxToolTip_Enable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolTip_Enable[1] = {{ wxLua_wxToolTip_Enable, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxToolTip_Enable }};
//     static void Enable(bool flag)
static int LUACALL wxLua_wxToolTip_Enable(lua_State *L)
{
    // bool flag
    bool flag = wxlua_getbooleantype(L, 1);
    // call Enable
    wxToolTip::Enable(flag);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolTip_GetTip[] = { &wxluatype_wxToolTip, NULL };
static int LUACALL wxLua_wxToolTip_GetTip(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolTip_GetTip[1] = {{ wxLua_wxToolTip_GetTip, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolTip_GetTip }};
//     wxString GetTip()
static int LUACALL wxLua_wxToolTip_GetTip(lua_State *L)
{
    // get this
    wxToolTip * self = (wxToolTip *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolTip);
    // call GetTip
    wxString returns = (self->GetTip());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolTip_GetWindow[] = { &wxluatype_wxToolTip, NULL };
static int LUACALL wxLua_wxToolTip_GetWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolTip_GetWindow[1] = {{ wxLua_wxToolTip_GetWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolTip_GetWindow }};
//     wxWindow *GetWindow() const
static int LUACALL wxLua_wxToolTip_GetWindow(lua_State *L)
{
    // get this
    wxToolTip * self = (wxToolTip *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolTip);
    // call GetWindow
    wxWindow* returns = (wxWindow*)self->GetWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolTip_SetDelay[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolTip_SetDelay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolTip_SetDelay[1] = {{ wxLua_wxToolTip_SetDelay, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxToolTip_SetDelay }};
//     static void SetDelay(long milliseconds)
static int LUACALL wxLua_wxToolTip_SetDelay(lua_State *L)
{
    // long milliseconds
    long milliseconds = (long)wxlua_getnumbertype(L, 1);
    // call SetDelay
    wxToolTip::SetDelay(milliseconds);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolTip_SetTip[] = { &wxluatype_wxToolTip, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxToolTip_SetTip(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolTip_SetTip[1] = {{ wxLua_wxToolTip_SetTip, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToolTip_SetTip }};
//     void    SetTip(const wxString& tip)
static int LUACALL wxLua_wxToolTip_SetTip(lua_State *L)
{
    // const wxString tip
    const wxString tip = wxlua_getwxStringtype(L, 2);
    // get this
    wxToolTip * self = (wxToolTip *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolTip);
    // call SetTip
    self->SetTip(tip);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolTip_delete[] = { &wxluatype_wxToolTip, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolTip_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxToolTip_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolTip_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxToolTip_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolTip_constructor[1] = {{ wxLua_wxToolTip_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxToolTip_constructor }};
//     wxToolTip(const wxString &tip)
static int LUACALL wxLua_wxToolTip_constructor(lua_State *L)
{
    // const wxString tip
    const wxString tip = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxToolTip* returns = new wxToolTip(tip);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolTip);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxToolTip_methods[] = {
    { "Enable", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxToolTip_Enable, 1, NULL },
    { "GetTip", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolTip_GetTip, 1, NULL },
    { "GetWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolTip_GetWindow, 1, NULL },
    { "SetDelay", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxToolTip_SetDelay, 1, NULL },
    { "SetTip", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolTip_SetTip, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxToolTip_delete, 1, NULL },
    { "wxToolTip", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxToolTip_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxToolTip_methodCount = sizeof(wxToolTip_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTooltip && wxUSE_TOOLTIPS

// ---------------------------------------------------------------------------
// Bind class wxWindowDisabler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxWindowDisabler'
int wxluatype_wxWindowDisabler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindowDisabler_delete[] = { &wxluatype_wxWindowDisabler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindowDisabler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxWindowDisabler_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindowDisabler_constructor[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindowDisabler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindowDisabler_constructor[1] = {{ wxLua_wxWindowDisabler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxWindowDisabler_constructor }};
//     wxWindowDisabler(wxWindow *winToSkip = NULL)
static int LUACALL wxLua_wxWindowDisabler_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindow winToSkip = NULL
    wxWindow * winToSkip = (argCount >= 1 ? (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow) : NULL);
    // call constructor
    wxWindowDisabler* returns = new wxWindowDisabler(winToSkip);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxWindowDisabler((wxWindowDisabler*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindowDisabler);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxWindowDisabler_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxWindowDisabler_delete, 1, NULL },
    { "wxWindowDisabler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxWindowDisabler_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxWindowDisabler_methodCount = sizeof(wxWindowDisabler_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxWindowUpdateLocker
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxWindowUpdateLocker'
int wxluatype_wxWindowUpdateLocker = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindowUpdateLocker_delete[] = { &wxluatype_wxWindowUpdateLocker, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindowUpdateLocker_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxWindowUpdateLocker_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindowUpdateLocker_constructor[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindowUpdateLocker_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindowUpdateLocker_constructor[1] = {{ wxLua_wxWindowUpdateLocker_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxWindowUpdateLocker_constructor }};
//     wxWindowUpdateLocker(wxWindow *winToLock = NULL)
static int LUACALL wxLua_wxWindowUpdateLocker_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindow winToLock = NULL
    wxWindow * winToLock = (argCount >= 1 ? (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow) : NULL);
    // call constructor
    wxWindowUpdateLocker* returns = new wxWindowUpdateLocker(winToLock);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxWindowUpdateLocker((wxWindowUpdateLocker*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindowUpdateLocker);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxWindowUpdateLocker_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxWindowUpdateLocker_delete, 1, NULL },
    { "wxWindowUpdateLocker", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxWindowUpdateLocker_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxWindowUpdateLocker_methodCount = sizeof(wxWindowUpdateLocker_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxVisualAttributes
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxVisualAttributes'
int wxluatype_wxVisualAttributes = WXLUA_TUNKNOWN;

#if wxLUA_USE_wxColourPenBrush
static wxLuaArgType s_wxluatypeArray_wxLua_wxVisualAttributes_Get_colBg[] = { &wxluatype_wxVisualAttributes, NULL };
static int LUACALL wxLua_wxVisualAttributes_Get_colBg(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxVisualAttributes_Get_colBg[1] = {{ wxLua_wxVisualAttributes_Get_colBg, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxVisualAttributes_Get_colBg }};
//     %member wxColour colBg
static int LUACALL wxLua_wxVisualAttributes_Get_colBg(lua_State *L)
{
    // get this
    wxVisualAttributes *self = (wxVisualAttributes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxVisualAttributes);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->colBg, wxluatype_wxColour);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxVisualAttributes_Get_colFg[] = { &wxluatype_wxVisualAttributes, NULL };
static int LUACALL wxLua_wxVisualAttributes_Get_colFg(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxVisualAttributes_Get_colFg[1] = {{ wxLua_wxVisualAttributes_Get_colFg, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxVisualAttributes_Get_colFg }};
//     %member wxColour colFg
static int LUACALL wxLua_wxVisualAttributes_Get_colFg(lua_State *L)
{
    // get this
    wxVisualAttributes *self = (wxVisualAttributes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxVisualAttributes);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->colFg, wxluatype_wxColour);
    // return the number of values
    return 1;
}

#endif // wxLUA_USE_wxColourPenBrush

#if wxLUA_USE_wxFont
static wxLuaArgType s_wxluatypeArray_wxLua_wxVisualAttributes_Get_font[] = { &wxluatype_wxVisualAttributes, NULL };
static int LUACALL wxLua_wxVisualAttributes_Get_font(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxVisualAttributes_Get_font[1] = {{ wxLua_wxVisualAttributes_Get_font, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxVisualAttributes_Get_font }};
//     %member wxFont font
static int LUACALL wxLua_wxVisualAttributes_Get_font(lua_State *L)
{
    // get this
    wxVisualAttributes *self = (wxVisualAttributes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxVisualAttributes);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->font, wxluatype_wxFont);
    // return the number of values
    return 1;
}

#endif // wxLUA_USE_wxFont

#if wxLUA_USE_wxColourPenBrush
static wxLuaArgType s_wxluatypeArray_wxLua_wxVisualAttributes_Set_colBg[] = { &wxluatype_wxVisualAttributes, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxVisualAttributes_Set_colBg(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxVisualAttributes_Set_colBg[1] = {{ wxLua_wxVisualAttributes_Set_colBg, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxVisualAttributes_Set_colBg }};
//     %member wxColour colBg
static int LUACALL wxLua_wxVisualAttributes_Set_colBg(lua_State *L)
{
    // get the data type value
    wxColour* val = (wxColour*)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxVisualAttributes *self = (wxVisualAttributes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxVisualAttributes);
    self->colBg = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxVisualAttributes_Set_colFg[] = { &wxluatype_wxVisualAttributes, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxVisualAttributes_Set_colFg(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxVisualAttributes_Set_colFg[1] = {{ wxLua_wxVisualAttributes_Set_colFg, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxVisualAttributes_Set_colFg }};
//     %member wxColour colFg
static int LUACALL wxLua_wxVisualAttributes_Set_colFg(lua_State *L)
{
    // get the data type value
    wxColour* val = (wxColour*)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxVisualAttributes *self = (wxVisualAttributes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxVisualAttributes);
    self->colFg = *val;
    // return the number of values
    return 0;
}

#endif // wxLUA_USE_wxColourPenBrush

#if wxLUA_USE_wxFont
static wxLuaArgType s_wxluatypeArray_wxLua_wxVisualAttributes_Set_font[] = { &wxluatype_wxVisualAttributes, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxVisualAttributes_Set_font(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxVisualAttributes_Set_font[1] = {{ wxLua_wxVisualAttributes_Set_font, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxVisualAttributes_Set_font }};
//     %member wxFont font
static int LUACALL wxLua_wxVisualAttributes_Set_font(lua_State *L)
{
    // get the data type value
    wxFont* val = (wxFont*)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxVisualAttributes *self = (wxVisualAttributes *)wxluaT_getuserdatatype(L, 1, wxluatype_wxVisualAttributes);
    self->font = *val;
    // return the number of values
    return 0;
}

#endif // wxLUA_USE_wxFont

#if wxLUA_USE_wxColourPenBrush
#endif // wxLUA_USE_wxColourPenBrush

static wxLuaArgType s_wxluatypeArray_wxLua_wxVisualAttributes_delete[] = { &wxluatype_wxVisualAttributes, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxVisualAttributes_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxVisualAttributes_delete }};


#if wxLUA_USE_wxFont
#endif // wxLUA_USE_wxFont



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxVisualAttributes_methods[] = {
#if wxLUA_USE_wxColourPenBrush
    // %member    { "Get_colBg", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxVisualAttributes_Get_colBg, 1, NULL },
    // %member    { "Get_colFg", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxVisualAttributes_Get_colFg, 1, NULL },
#endif // wxLUA_USE_wxColourPenBrush

#if wxLUA_USE_wxFont
    // %member    { "Get_font", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxVisualAttributes_Get_font, 1, NULL },
#endif // wxLUA_USE_wxFont

#if wxLUA_USE_wxColourPenBrush
    // %member    { "Set_colBg", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxVisualAttributes_Set_colBg, 1, NULL },
    // %member    { "Set_colFg", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxVisualAttributes_Set_colFg, 1, NULL },
#endif // wxLUA_USE_wxColourPenBrush

#if wxLUA_USE_wxFont
    // %member    { "Set_font", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxVisualAttributes_Set_font, 1, NULL },
#endif // wxLUA_USE_wxFont

#if wxLUA_USE_wxColourPenBrush
    { "colBg", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxVisualAttributes_Set_colBg, 1, NULL },
    { "colBg", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxVisualAttributes_Get_colBg, 1, NULL },
    { "colFg", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxVisualAttributes_Set_colFg, 1, NULL },
    { "colFg", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxVisualAttributes_Get_colFg, 1, NULL },
#endif // wxLUA_USE_wxColourPenBrush

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxVisualAttributes_delete, 1, NULL },

#if wxLUA_USE_wxFont
    { "font", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxVisualAttributes_Set_font, 1, NULL },
    { "font", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxVisualAttributes_Get_font, 1, NULL },
#endif // wxLUA_USE_wxFont

    { 0, 0, 0, 0 },
};

int wxVisualAttributes_methodCount = sizeof(wxVisualAttributes_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxWindow
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxWindow'
int wxluatype_wxWindow = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_AddChild[] = { &wxluatype_wxWindow, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_AddChild(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_AddChild[1] = {{ wxLua_wxWindow_AddChild, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_AddChild }};
//     virtual void AddChild(wxWindow* child)
static int LUACALL wxLua_wxWindow_AddChild(lua_State *L)
{
    // wxWindow child
    wxWindow * child = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call AddChild
    self->AddChild(child);

    return 0;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_CacheBestSize[] = { &wxluatype_wxWindow, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxWindow_CacheBestSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_CacheBestSize[1] = {{ wxLua_wxWindow_CacheBestSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_CacheBestSize }};
//     void CacheBestSize(const wxSize& size) const
static int LUACALL wxLua_wxWindow_CacheBestSize(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call CacheBestSize
    self->CacheBestSize(*size);

    return 0;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_CaptureMouse[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_CaptureMouse(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_CaptureMouse[1] = {{ wxLua_wxWindow_CaptureMouse, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_CaptureMouse }};
//     virtual void CaptureMouse()
static int LUACALL wxLua_wxWindow_CaptureMouse(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call CaptureMouse
    self->CaptureMouse();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Center[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_Center(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Center[1] = {{ wxLua_wxWindow_Center, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxWindow_Center }};
//     void Center(int direction = wxBOTH)
static int LUACALL wxLua_wxWindow_Center(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int direction = wxBOTH
    int direction = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxBOTH);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Center
    self->Center(direction);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_CenterOnParent[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_CenterOnParent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_CenterOnParent[1] = {{ wxLua_wxWindow_CenterOnParent, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxWindow_CenterOnParent }};
//     void CenterOnParent(int direction = wxBOTH)
static int LUACALL wxLua_wxWindow_CenterOnParent(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int direction = wxBOTH
    int direction = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxBOTH);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call CenterOnParent
    self->CenterOnParent(direction);

    return 0;
}


#if !wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_CenterOnScreen[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_CenterOnScreen(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_CenterOnScreen[1] = {{ wxLua_wxWindow_CenterOnScreen, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxWindow_CenterOnScreen }};
//     !%wxchkver_2_8 void CenterOnScreen(int direction = wxBOTH)
static int LUACALL wxLua_wxWindow_CenterOnScreen(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int direction = wxBOTH
    int direction = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxBOTH);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call CenterOnScreen
    self->CenterOnScreen(direction);

    return 0;
}

#endif // !wxCHECK_VERSION(2,8,0)

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Centre[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_Centre(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Centre[1] = {{ wxLua_wxWindow_Centre, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxWindow_Centre }};
//     void Centre(int direction = wxBOTH)
static int LUACALL wxLua_wxWindow_Centre(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int direction = wxBOTH
    int direction = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxBOTH);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Centre
    self->Centre(direction);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_CentreOnParent[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_CentreOnParent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_CentreOnParent[1] = {{ wxLua_wxWindow_CentreOnParent, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxWindow_CentreOnParent }};
//     void CentreOnParent(int direction = wxBOTH)
static int LUACALL wxLua_wxWindow_CentreOnParent(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int direction = wxBOTH
    int direction = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxBOTH);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call CentreOnParent
    self->CentreOnParent(direction);

    return 0;
}


#if !wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_CentreOnScreen[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_CentreOnScreen(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_CentreOnScreen[1] = {{ wxLua_wxWindow_CentreOnScreen, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxWindow_CentreOnScreen }};
//     !%wxchkver_2_8 void CentreOnScreen(int direction = wxBOTH)
static int LUACALL wxLua_wxWindow_CentreOnScreen(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int direction = wxBOTH
    int direction = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxBOTH);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call CentreOnScreen
    self->CentreOnScreen(direction);

    return 0;
}

#endif // !wxCHECK_VERSION(2,8,0)

#if !wxCHECK_VERSION(2,6,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Clear[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Clear[1] = {{ wxLua_wxWindow_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_Clear }};
//     !%wxchkver_2_6 void Clear()
static int LUACALL wxLua_wxWindow_Clear(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Clear
    self->Clear();

    return 0;
}

#endif // !wxCHECK_VERSION(2,6,0)

#if wxCHECK_VERSION(2,6,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_ClearBackground[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_ClearBackground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ClearBackground[1] = {{ wxLua_wxWindow_ClearBackground, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_ClearBackground }};
//     %wxchkver_2_6 void ClearBackground()
static int LUACALL wxLua_wxWindow_ClearBackground(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call ClearBackground
    self->ClearBackground();

    return 0;
}

#endif // wxCHECK_VERSION(2,6,0)

#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_ClientToScreen1[] = { &wxluatype_wxWindow, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxWindow_ClientToScreen1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ClientToScreen1[1] = {{ wxLua_wxWindow_ClientToScreen1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_ClientToScreen1 }};
//     virtual wxPoint ClientToScreen(const wxPoint& pt) const
static int LUACALL wxLua_wxWindow_ClientToScreen1(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call ClientToScreen
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->ClientToScreen(*pt));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

#define wxLua_wxWindow_ClientToScreen wxLua_wxWindow_ClientToScreenXY
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_ClientToScreen[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_ClientToScreen(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ClientToScreen[1] = {{ wxLua_wxWindow_ClientToScreen, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxWindow_ClientToScreen }};
// %override wxLua_wxWindow_ClientToScreenXY
// %rename ClientToScreenXY virtual void ClientToScreen(int* x, int* y) const
static int LUACALL wxLua_wxWindow_ClientToScreenXY(lua_State *L)
{
    int y = (int)lua_tonumber(L,  3);
    int x = (int)lua_tonumber(L,  2);
    // get this
    wxWindow *self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call ClientToScreen
    self->ClientToScreen(&x, &y);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Close[] = { &wxluatype_wxWindow, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxWindow_Close(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Close[1] = {{ wxLua_wxWindow_Close, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxWindow_Close }};
//     virtual bool Close(bool force = false)
static int LUACALL wxLua_wxWindow_Close(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool force = false
    bool force = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Close
    bool returns = (self->Close(force));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_ConvertDialogToPixels1[] = { &wxluatype_wxWindow, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxWindow_ConvertDialogToPixels1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ConvertDialogToPixels1[1] = {{ wxLua_wxWindow_ConvertDialogToPixels1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_ConvertDialogToPixels1 }};
//     wxSize ConvertDialogToPixels(const wxSize& sz)
static int LUACALL wxLua_wxWindow_ConvertDialogToPixels1(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call ConvertDialogToPixels
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->ConvertDialogToPixels(*sz));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_ConvertDialogToPixels[] = { &wxluatype_wxWindow, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxWindow_ConvertDialogToPixels(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ConvertDialogToPixels[1] = {{ wxLua_wxWindow_ConvertDialogToPixels, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_ConvertDialogToPixels }};
//     wxPoint ConvertDialogToPixels(const wxPoint& pt)
static int LUACALL wxLua_wxWindow_ConvertDialogToPixels(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call ConvertDialogToPixels
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->ConvertDialogToPixels(*pt));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_ConvertPixelsToDialog1[] = { &wxluatype_wxWindow, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxWindow_ConvertPixelsToDialog1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ConvertPixelsToDialog1[1] = {{ wxLua_wxWindow_ConvertPixelsToDialog1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_ConvertPixelsToDialog1 }};
//     wxSize ConvertPixelsToDialog(const wxSize& sz)
static int LUACALL wxLua_wxWindow_ConvertPixelsToDialog1(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call ConvertPixelsToDialog
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->ConvertPixelsToDialog(*sz));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_ConvertPixelsToDialog[] = { &wxluatype_wxWindow, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxWindow_ConvertPixelsToDialog(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ConvertPixelsToDialog[1] = {{ wxLua_wxWindow_ConvertPixelsToDialog, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_ConvertPixelsToDialog }};
//     wxPoint ConvertPixelsToDialog(const wxPoint& pt)
static int LUACALL wxLua_wxWindow_ConvertPixelsToDialog(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call ConvertPixelsToDialog
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->ConvertPixelsToDialog(*pt));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Create[] = { &wxluatype_wxWindow, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxWindow_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Create[1] = {{ wxLua_wxWindow_Create, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxWindow_Create }};
//     bool Create(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxWindow")
static int LUACALL wxLua_wxWindow_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxWindow"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxWindow")));
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Destroy[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_Destroy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Destroy[1] = {{ wxLua_wxWindow_Destroy, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_Destroy }};
//     virtual bool Destroy()
static int LUACALL wxLua_wxWindow_Destroy(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Destroy
    bool returns = (self->Destroy());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_DestroyChildren[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_DestroyChildren(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_DestroyChildren[1] = {{ wxLua_wxWindow_DestroyChildren, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_DestroyChildren }};
//     virtual void DestroyChildren()
static int LUACALL wxLua_wxWindow_DestroyChildren(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call DestroyChildren
    self->DestroyChildren();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Disable[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_Disable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Disable[1] = {{ wxLua_wxWindow_Disable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_Disable }};
//     bool Disable()
static int LUACALL wxLua_wxWindow_Disable(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Disable
    bool returns = (self->Disable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if defined(__WXMSW__)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_DragAcceptFiles[] = { &wxluatype_wxWindow, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxWindow_DragAcceptFiles(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_DragAcceptFiles[1] = {{ wxLua_wxWindow_DragAcceptFiles, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_DragAcceptFiles }};
//     %win virtual void DragAcceptFiles(bool accept)
static int LUACALL wxLua_wxWindow_DragAcceptFiles(lua_State *L)
{
    // bool accept
    bool accept = wxlua_getbooleantype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call DragAcceptFiles
    self->DragAcceptFiles(accept);

    return 0;
}

#endif // defined(__WXMSW__)

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Enable[] = { &wxluatype_wxWindow, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxWindow_Enable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Enable[1] = {{ wxLua_wxWindow_Enable, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_Enable }};
//     virtual void Enable(bool enable)
static int LUACALL wxLua_wxWindow_Enable(lua_State *L)
{
    // bool enable
    bool enable = wxlua_getbooleantype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Enable
    self->Enable(enable);

    return 0;
}

static int LUACALL wxLua_wxWindow_FindFocus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_FindFocus[1] = {{ wxLua_wxWindow_FindFocus, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxWindow* FindFocus()
static int LUACALL wxLua_wxWindow_FindFocus(lua_State *L)
{
    // call FindFocus
    wxWindow* returns = (wxWindow*)wxWindow::FindFocus();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_FindWindow[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_FindWindow(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_FindWindow[1] = {{ wxLua_wxWindow_FindWindow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_FindWindow }};
//     wxWindow* FindWindow(long id)
static int LUACALL wxLua_wxWindow_FindWindow(lua_State *L)
{
    // long id
    long id = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call FindWindow
    wxWindow* returns = (wxWindow*)self->FindWindow(id);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_FindWindow1[] = { &wxluatype_wxWindow, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxWindow_FindWindow1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_FindWindow1[1] = {{ wxLua_wxWindow_FindWindow1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_FindWindow1 }};
//     wxWindow* FindWindow(const wxString& name)
static int LUACALL wxLua_wxWindow_FindWindow1(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call FindWindow
    wxWindow* returns = (wxWindow*)self->FindWindow(name);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_FindWindowById[] = { &wxluatype_TNUMBER, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_FindWindowById(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_FindWindowById[1] = {{ wxLua_wxWindow_FindWindowById, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxWindow_FindWindowById }};
//     static wxWindow* FindWindowById(long id, wxWindow* parent = NULL)
static int LUACALL wxLua_wxWindow_FindWindowById(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindow parent = NULL
    wxWindow * parent = (argCount >= 2 ? (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow) : NULL);
    // long id
    long id = (long)wxlua_getnumbertype(L, 1);
    // call FindWindowById
    wxWindow* returns = (wxWindow*)wxWindow::FindWindowById(id, parent);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_FindWindowByLabel[] = { &wxluatype_TSTRING, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_FindWindowByLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_FindWindowByLabel[1] = {{ wxLua_wxWindow_FindWindowByLabel, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxWindow_FindWindowByLabel }};
//     static wxWindow* FindWindowByLabel(const wxString& label, wxWindow* parent = NULL)
static int LUACALL wxLua_wxWindow_FindWindowByLabel(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindow parent = NULL
    wxWindow * parent = (argCount >= 2 ? (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow) : NULL);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 1);
    // call FindWindowByLabel
    wxWindow* returns = (wxWindow*)wxWindow::FindWindowByLabel(label, parent);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_FindWindowByName[] = { &wxluatype_TSTRING, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_FindWindowByName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_FindWindowByName[1] = {{ wxLua_wxWindow_FindWindowByName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxWindow_FindWindowByName }};
//     static wxWindow* FindWindowByName(const wxString& name, wxWindow* parent = NULL)
static int LUACALL wxLua_wxWindow_FindWindowByName(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindow parent = NULL
    wxWindow * parent = (argCount >= 2 ? (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow) : NULL);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call FindWindowByName
    wxWindow* returns = (wxWindow*)wxWindow::FindWindowByName(name, parent);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Fit[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_Fit(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Fit[1] = {{ wxLua_wxWindow_Fit, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_Fit }};
//     virtual void Fit()
static int LUACALL wxLua_wxWindow_Fit(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Fit
    self->Fit();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_FitInside[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_FitInside(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_FitInside[1] = {{ wxLua_wxWindow_FitInside, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_FitInside }};
//     virtual void FitInside()
static int LUACALL wxLua_wxWindow_FitInside(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call FitInside
    self->FitInside();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Freeze[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_Freeze(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Freeze[1] = {{ wxLua_wxWindow_Freeze, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_Freeze }};
//     virtual void Freeze()
static int LUACALL wxLua_wxWindow_Freeze(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Freeze
    self->Freeze();

    return 0;
}


#if wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetAcceleratorTable[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetAcceleratorTable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetAcceleratorTable[1] = {{ wxLua_wxWindow_GetAcceleratorTable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetAcceleratorTable }};
//     wxAcceleratorTable* GetAcceleratorTable() const
static int LUACALL wxLua_wxWindow_GetAcceleratorTable(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetAcceleratorTable
    wxAcceleratorTable* returns = (wxAcceleratorTable*)self->GetAcceleratorTable();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAcceleratorTable);

    return 1;
}

#endif // wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetAdjustedBestSize[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetAdjustedBestSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetAdjustedBestSize[1] = {{ wxLua_wxWindow_GetAdjustedBestSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetAdjustedBestSize }};
//     !%wxchkver_2_8 wxSize GetAdjustedBestSize() const
static int LUACALL wxLua_wxWindow_GetAdjustedBestSize(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetAdjustedBestSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetAdjustedBestSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)

#if wxLUA_USE_wxColourPenBrush
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetBackgroundColour[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetBackgroundColour[1] = {{ wxLua_wxWindow_GetBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetBackgroundColour }};
//     virtual wxColour GetBackgroundColour() const
static int LUACALL wxLua_wxWindow_GetBackgroundColour(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetBackgroundColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetBackgroundColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // wxLUA_USE_wxColourPenBrush

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetBackgroundStyle[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetBackgroundStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetBackgroundStyle[1] = {{ wxLua_wxWindow_GetBackgroundStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetBackgroundStyle }};
//     virtual wxBackgroundStyle GetBackgroundStyle() const
static int LUACALL wxLua_wxWindow_GetBackgroundStyle(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetBackgroundStyle
    wxBackgroundStyle returns = (self->GetBackgroundStyle());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetBestFittingSize[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetBestFittingSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetBestFittingSize[1] = {{ wxLua_wxWindow_GetBestFittingSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetBestFittingSize }};
//     wxSize GetBestFittingSize() const // deprecated in 2.8 use GetEffectiveMinSize
static int LUACALL wxLua_wxWindow_GetBestFittingSize(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetBestFittingSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetBestFittingSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetBestSize[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetBestSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetBestSize[1] = {{ wxLua_wxWindow_GetBestSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetBestSize }};
//     virtual wxSize GetBestSize() const
static int LUACALL wxLua_wxWindow_GetBestSize(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetBestSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetBestSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static int LUACALL wxLua_wxWindow_GetCapture(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetCapture[1] = {{ wxLua_wxWindow_GetCapture, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxWindow* GetCapture()
static int LUACALL wxLua_wxWindow_GetCapture(lua_State *L)
{
    // call GetCapture
    wxWindow* returns = (wxWindow*)wxWindow::GetCapture();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}


#if wxLUA_USE_wxCaret && wxUSE_CARET
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetCaret[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetCaret(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetCaret[1] = {{ wxLua_wxWindow_GetCaret, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetCaret }};
//     wxCaret* GetCaret() const
static int LUACALL wxLua_wxWindow_GetCaret(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetCaret
    wxCaret* returns = (wxCaret*)self->GetCaret();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCaret);

    return 1;
}

#endif // wxLUA_USE_wxCaret && wxUSE_CARET

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetCharHeight[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetCharHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetCharHeight[1] = {{ wxLua_wxWindow_GetCharHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetCharHeight }};
//     virtual int GetCharHeight() const
static int LUACALL wxLua_wxWindow_GetCharHeight(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetCharHeight
    int returns = (self->GetCharHeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetCharWidth[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetCharWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetCharWidth[1] = {{ wxLua_wxWindow_GetCharWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetCharWidth }};
//     virtual int GetCharWidth() const
static int LUACALL wxLua_wxWindow_GetCharWidth(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetCharWidth
    int returns = (self->GetCharWidth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if wxLUA_USE_wxWindowList && !wxUSE_STL
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetChildren[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetChildren(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetChildren[1] = {{ wxLua_wxWindow_GetChildren, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetChildren }};
//     wxWindowList& GetChildren()
static int LUACALL wxLua_wxWindow_GetChildren(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetChildren
    wxWindowList* returns = &self->GetChildren();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindowList);

    return 1;
}

#endif // wxLUA_USE_wxWindowList && !wxUSE_STL

#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetClientSize[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetClientSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetClientSize[1] = {{ wxLua_wxWindow_GetClientSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetClientSize }};
//     wxSize GetClientSize() const
static int LUACALL wxLua_wxWindow_GetClientSize(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetClientSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetClientSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetClientSizeWH[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetClientSizeWH(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetClientSizeWH[1] = {{ wxLua_wxWindow_GetClientSizeWH, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetClientSizeWH }};
// %override wxLua_wxWindow_GetClientSizeWH
// virtual wxSize GetClientSize() const
static int LUACALL wxLua_wxWindow_GetClientSizeWH(lua_State *L)
{
    wxWindow *self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetClientSize
    wxSize size = self->GetClientSize();
    lua_pushnumber(L, size.x);
    lua_pushnumber(L, size.y);
    // return the number of parameters
    return 2;
}



#if ((wxLUA_USE_wxSizer) && (wxLUA_USE_wxLayoutConstraints && (!wxCHECK_VERSION(2,6,0)))) && (!wxCHECK_VERSION(2,6,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetConstraints[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetConstraints(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetConstraints[1] = {{ wxLua_wxWindow_GetConstraints, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetConstraints }};
//     !%wxchkver_2_6 wxLayoutConstraints* GetConstraints() const // deprecated use sizers
static int LUACALL wxLua_wxWindow_GetConstraints(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetConstraints
    wxLayoutConstraints* returns = (wxLayoutConstraints*)self->GetConstraints();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLayoutConstraints);

    return 1;
}

#endif // ((wxLUA_USE_wxSizer) && (wxLUA_USE_wxLayoutConstraints && (!wxCHECK_VERSION(2,6,0)))) && (!wxCHECK_VERSION(2,6,0))

#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetContainingSizer[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetContainingSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetContainingSizer[1] = {{ wxLua_wxWindow_GetContainingSizer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetContainingSizer }};
//     const wxSizer* GetContainingSizer() const
static int LUACALL wxLua_wxWindow_GetContainingSizer(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetContainingSizer
    const wxSizer* returns = (const wxSizer*)self->GetContainingSizer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizer);

    return 1;
}

#endif // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))

#if wxLUA_USE_wxCursor
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetCursor[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetCursor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetCursor[1] = {{ wxLua_wxWindow_GetCursor, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetCursor }};
//     wxCursor GetCursor() const
static int LUACALL wxLua_wxWindow_GetCursor(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetCursor
    // allocate a new object using the copy constructor
    wxCursor* returns = new wxCursor(self->GetCursor());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxCursor*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCursor);

    return 1;
}

#endif // wxLUA_USE_wxCursor

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetDefaultAttributes[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetDefaultAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetDefaultAttributes[1] = {{ wxLua_wxWindow_GetDefaultAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetDefaultAttributes }};
//     virtual wxVisualAttributes GetDefaultAttributes() const
static int LUACALL wxLua_wxWindow_GetDefaultAttributes(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetDefaultAttributes
    // allocate a new object using the copy constructor
    wxVisualAttributes* returns = new wxVisualAttributes(self->GetDefaultAttributes());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxVisualAttributes((wxVisualAttributes*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVisualAttributes);

    return 1;
}


#if !wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetDefaultItem[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetDefaultItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetDefaultItem[1] = {{ wxLua_wxWindow_GetDefaultItem, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetDefaultItem }};
//     !%wxchkver_2_8 wxWindow* GetDefaultItem() const
static int LUACALL wxLua_wxWindow_GetDefaultItem(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetDefaultItem
    wxWindow* returns = (wxWindow*)self->GetDefaultItem();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

#endif // !wxCHECK_VERSION(2,8,0)

#if wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetDropTarget[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetDropTarget(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetDropTarget[1] = {{ wxLua_wxWindow_GetDropTarget, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetDropTarget }};
//     wxDropTarget* GetDropTarget() const
static int LUACALL wxLua_wxWindow_GetDropTarget(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetDropTarget
    wxDropTarget* returns = (wxDropTarget*)self->GetDropTarget();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDropTarget);

    return 1;
}

#endif // wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetEventHandler[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetEventHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetEventHandler[1] = {{ wxLua_wxWindow_GetEventHandler, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetEventHandler }};
//     wxEvtHandler* GetEventHandler() const
static int LUACALL wxLua_wxWindow_GetEventHandler(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetEventHandler
    wxEvtHandler* returns = (wxEvtHandler*)self->GetEventHandler();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxEvtHandler);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetExtraStyle[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetExtraStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetExtraStyle[1] = {{ wxLua_wxWindow_GetExtraStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetExtraStyle }};
//     long GetExtraStyle() const
static int LUACALL wxLua_wxWindow_GetExtraStyle(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetExtraStyle
    long  returns = (self->GetExtraStyle());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if wxLUA_USE_wxFont
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetFont[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetFont[1] = {{ wxLua_wxWindow_GetFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetFont }};
//     wxFont GetFont() const
static int LUACALL wxLua_wxWindow_GetFont(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetFont());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxFont*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // wxLUA_USE_wxFont

#if wxLUA_USE_wxColourPenBrush
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetForegroundColour[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetForegroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetForegroundColour[1] = {{ wxLua_wxWindow_GetForegroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetForegroundColour }};
//     virtual wxColour GetForegroundColour()
static int LUACALL wxLua_wxWindow_GetForegroundColour(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetForegroundColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetForegroundColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // wxLUA_USE_wxColourPenBrush

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetGrandParent[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetGrandParent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetGrandParent[1] = {{ wxLua_wxWindow_GetGrandParent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetGrandParent }};
//     wxWindow* GetGrandParent() const
static int LUACALL wxLua_wxWindow_GetGrandParent(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetGrandParent
    wxWindow* returns = (wxWindow*)self->GetGrandParent();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetHandle[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetHandle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetHandle[1] = {{ wxLua_wxWindow_GetHandle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetHandle }};
// %override wxLua_wxWindow_GetHandle
// void *GetHandle() const
static int LUACALL wxLua_wxWindow_GetHandle(lua_State *L)
{
    // get this
    wxWindow *self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetHandle
    void *handle = (void *)self->GetHandle();
    // push handle
    lua_pushlightuserdata(L, handle);
    // return the number of parameters
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetHelpText[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetHelpText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetHelpText[1] = {{ wxLua_wxWindow_GetHelpText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetHelpText }};
//     virtual wxString GetHelpText() const
static int LUACALL wxLua_wxWindow_GetHelpText(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetHelpText
    wxString returns = (self->GetHelpText());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetId[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetId[1] = {{ wxLua_wxWindow_GetId, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetId }};
//     int GetId() const
static int LUACALL wxLua_wxWindow_GetId(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetId
    int returns = (self->GetId());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetLabel[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetLabel[1] = {{ wxLua_wxWindow_GetLabel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetLabel }};
//     virtual wxString GetLabel() const
static int LUACALL wxLua_wxWindow_GetLabel(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetLabel
    wxString returns = (self->GetLabel());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetMaxSize[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetMaxSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetMaxSize[1] = {{ wxLua_wxWindow_GetMaxSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetMaxSize }};
//     wxSize GetMaxSize() const
static int LUACALL wxLua_wxWindow_GetMaxSize(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetMaxSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetMaxSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetMinSize[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetMinSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetMinSize[1] = {{ wxLua_wxWindow_GetMinSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetMinSize }};
//     wxSize GetMinSize() const
static int LUACALL wxLua_wxWindow_GetMinSize(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetMinSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetMinSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetName[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetName[1] = {{ wxLua_wxWindow_GetName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetName }};
//     virtual wxString GetName() const
static int LUACALL wxLua_wxWindow_GetName(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetName
    wxString returns = (self->GetName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetParent[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetParent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetParent[1] = {{ wxLua_wxWindow_GetParent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetParent }};
//     virtual wxWindow* GetParent() const
static int LUACALL wxLua_wxWindow_GetParent(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetParent
    wxWindow* returns = (wxWindow*)self->GetParent();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetPosition[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetPosition[1] = {{ wxLua_wxWindow_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetPosition }};
//     wxPoint GetPosition() const
static int LUACALL wxLua_wxWindow_GetPosition(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

#define wxLua_wxWindow_GetPositionXY wxLua_wxWindow_GetPositionXY
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetPositionXY[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetPositionXY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetPositionXY[1] = {{ wxLua_wxWindow_GetPositionXY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetPositionXY }};
// %override wxLua_wxWindow_GetPositionXY
// virtual void GetPositionXY(int* x, int* y) const
static int LUACALL wxLua_wxWindow_GetPositionXY(lua_State *L)
{
    int y = 0;
    int x = 0;
    // get this
    wxWindow *self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetPosition
    self->GetPosition(&x, &y);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}



#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetRect[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetRect[1] = {{ wxLua_wxWindow_GetRect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetRect }};
//     virtual wxRect GetRect() const
static int LUACALL wxLua_wxWindow_GetRect(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetRect
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetRect());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetScreenPosition[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetScreenPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetScreenPosition[1] = {{ wxLua_wxWindow_GetScreenPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetScreenPosition }};
//     virtual wxPoint GetScreenPosition()
static int LUACALL wxLua_wxWindow_GetScreenPosition(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetScreenPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetScreenPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

#define wxLua_wxWindow_GetScreenPositionXY wxLua_wxWindow_GetScreenPositionXY
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetScreenPositionXY[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetScreenPositionXY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetScreenPositionXY[1] = {{ wxLua_wxWindow_GetScreenPositionXY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetScreenPositionXY }};
// %override wxLua_wxWindow_GetScreenPositionXY
// virtual void GetScreenPositionXY(int* x, int* y) const
static int LUACALL wxLua_wxWindow_GetScreenPositionXY(lua_State *L)
{
    int y = 0;
    int x = 0;
    // get this
    wxWindow *self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetPosition
    self->GetScreenPosition(&x, &y);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}



#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetScreenRect[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetScreenRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetScreenRect[1] = {{ wxLua_wxWindow_GetScreenRect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetScreenRect }};
//     virtual wxRect GetScreenRect() const
static int LUACALL wxLua_wxWindow_GetScreenRect(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetScreenRect
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetScreenRect());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetScrollPos[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_GetScrollPos(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetScrollPos[1] = {{ wxLua_wxWindow_GetScrollPos, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_GetScrollPos }};
//     virtual int GetScrollPos(int orientation)
static int LUACALL wxLua_wxWindow_GetScrollPos(lua_State *L)
{
    // int orientation
    int orientation = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetScrollPos
    int returns = (self->GetScrollPos(orientation));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetScrollRange[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_GetScrollRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetScrollRange[1] = {{ wxLua_wxWindow_GetScrollRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_GetScrollRange }};
//     virtual int GetScrollRange(int orientation)
static int LUACALL wxLua_wxWindow_GetScrollRange(lua_State *L)
{
    // int orientation
    int orientation = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetScrollRange
    int returns = (self->GetScrollRange(orientation));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetScrollThumb[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_GetScrollThumb(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetScrollThumb[1] = {{ wxLua_wxWindow_GetScrollThumb, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_GetScrollThumb }};
//     virtual int GetScrollThumb(int orientation)
static int LUACALL wxLua_wxWindow_GetScrollThumb(lua_State *L)
{
    // int orientation
    int orientation = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetScrollThumb
    int returns = (self->GetScrollThumb(orientation));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetSize[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetSize[1] = {{ wxLua_wxWindow_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetSize }};
//     virtual wxSize GetSize() const
static int LUACALL wxLua_wxWindow_GetSize(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetSizeWH[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetSizeWH(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetSizeWH[1] = {{ wxLua_wxWindow_GetSizeWH, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetSizeWH }};
// %override wxLua_wxWindow_GetSizeWH
// void GetSize(int *width, int *height)
static int LUACALL wxLua_wxWindow_GetSizeWH(lua_State *L)
{
    int width = 0;
    int height = 0;
    // get this
    wxWindow *self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call ClientToScreen
    self->GetSize(&width, &height);
    lua_pushnumber(L, width);
    lua_pushnumber(L, height);
    // return the number of parameters
    return 2;
}



#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetSizer[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetSizer[1] = {{ wxLua_wxWindow_GetSizer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetSizer }};
//     wxSizer* GetSizer() const
static int LUACALL wxLua_wxWindow_GetSizer(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetSizer
    wxSizer* returns = (wxSizer*)self->GetSizer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizer);

    return 1;
}

#endif // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))

#if wxLUA_USE_wxFont
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetTextExtent[] = { &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxWindow_GetTextExtent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetTextExtent[1] = {{ wxLua_wxWindow_GetTextExtent, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxWindow_GetTextExtent }};
// %override wxLua_wxWindow_GetTextExtent
// virtual void GetTextExtent(const wxString& string, int* x, int* y, int* descent = NULL, int* externalLeading = NULL, const wxFont* font = NULL ) const
static int LUACALL wxLua_wxWindow_GetTextExtent(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxFont* font = NULL
    const wxFont *font = (argCount >= 3 ? (wxFont *)wxluaT_getuserdatatype(L, 3, wxluatype_wxFont) : NULL);

    int externalLeading;
    int descent;
    int w;
    int h;
    // const wxString& string
    wxString string = wxlua_getwxStringtype(L, 2);
    // get this
    wxWindow *self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetTextExtent
    self->GetTextExtent(string, &w, &h, &descent, &externalLeading, font);
    // return the number of parameters
    lua_pushnumber(L, w);
    lua_pushnumber(L, h);
    lua_pushnumber(L, descent);
    lua_pushnumber(L, externalLeading);
    return 4;
}


#endif // wxLUA_USE_wxFont

#if !wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetTitle[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetTitle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetTitle[1] = {{ wxLua_wxWindow_GetTitle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetTitle }};
//     !%wxchkver_2_8 virtual wxString GetTitle()
static int LUACALL wxLua_wxWindow_GetTitle(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetTitle
    wxString returns = (self->GetTitle());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // !wxCHECK_VERSION(2,8,0)

#if wxLUA_USE_wxTooltip && wxUSE_TOOLTIPS
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetToolTip[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetToolTip(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetToolTip[1] = {{ wxLua_wxWindow_GetToolTip, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetToolTip }};
//     wxToolTip* GetToolTip() const
static int LUACALL wxLua_wxWindow_GetToolTip(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetToolTip
    wxToolTip* returns = (wxToolTip*)self->GetToolTip();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolTip);

    return 1;
}

#endif // wxLUA_USE_wxTooltip && wxUSE_TOOLTIPS

#if wxLUA_USE_wxRegion
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetUpdateRegion[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetUpdateRegion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetUpdateRegion[1] = {{ wxLua_wxWindow_GetUpdateRegion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetUpdateRegion }};
//     virtual wxRegion GetUpdateRegion() const
static int LUACALL wxLua_wxWindow_GetUpdateRegion(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetUpdateRegion
    // allocate a new object using the copy constructor
    wxRegion* returns = new wxRegion(self->GetUpdateRegion());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxRegion*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRegion);

    return 1;
}

#endif // wxLUA_USE_wxRegion

#if wxLUA_USE_wxValidator && wxUSE_VALIDATORS
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetValidator[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetValidator(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetValidator[1] = {{ wxLua_wxWindow_GetValidator, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetValidator }};
//     wxValidator* GetValidator() const
static int LUACALL wxLua_wxWindow_GetValidator(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetValidator
    wxValidator* returns = (wxValidator*)self->GetValidator();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxValidator);

    return 1;
}

#endif // wxLUA_USE_wxValidator && wxUSE_VALIDATORS

#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetVirtualSize[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetVirtualSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetVirtualSize[1] = {{ wxLua_wxWindow_GetVirtualSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetVirtualSize }};
//     wxSize GetVirtualSize() const
static int LUACALL wxLua_wxWindow_GetVirtualSize(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetVirtualSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetVirtualSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

#define wxLua_wxWindow_GetVirtualSizeWH wxLua_wxWindow_GetVirtualSizeWH
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetVirtualSizeWH[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetVirtualSizeWH(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetVirtualSizeWH[1] = {{ wxLua_wxWindow_GetVirtualSizeWH, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetVirtualSizeWH }};
// %override wxLua_wxWindow_GetVirtualSizeWH
// void GetVirtualSize(int *width, int *height)
static int LUACALL wxLua_wxWindow_GetVirtualSizeWH(lua_State *L)
{
    int width = 0;
    int height = 0;
    // get this
    wxWindow *self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call ClientToScreen
    self->GetVirtualSize(&width, &height);
    lua_pushnumber(L, width);
    lua_pushnumber(L, height);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetWindowStyleFlag[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetWindowStyleFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetWindowStyleFlag[1] = {{ wxLua_wxWindow_GetWindowStyleFlag, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetWindowStyleFlag }};
//     long GetWindowStyleFlag() const
static int LUACALL wxLua_wxWindow_GetWindowStyleFlag(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetWindowStyleFlag
    long  returns = (self->GetWindowStyleFlag());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_GetWindowVariant[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_GetWindowVariant(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_GetWindowVariant[1] = {{ wxLua_wxWindow_GetWindowVariant, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_GetWindowVariant }};
//     wxWindowVariant GetWindowVariant() const
static int LUACALL wxLua_wxWindow_GetWindowVariant(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetWindowVariant
    wxWindowVariant returns = (self->GetWindowVariant());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if wxCHECK_VERSION(2,4,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_HasCapture[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_HasCapture(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_HasCapture[1] = {{ wxLua_wxWindow_HasCapture, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_HasCapture }};
//     %wxchkver_2_4 bool HasCapture() const
static int LUACALL wxLua_wxWindow_HasCapture(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call HasCapture
    bool returns = (self->HasCapture());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // wxCHECK_VERSION(2,4,0)

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_HasScrollbar[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_HasScrollbar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_HasScrollbar[1] = {{ wxLua_wxWindow_HasScrollbar, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_HasScrollbar }};
//     virtual bool HasScrollbar(int orient) const
static int LUACALL wxLua_wxWindow_HasScrollbar(lua_State *L)
{
    // int orient
    int orient = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call HasScrollbar
    bool returns = (self->HasScrollbar(orient));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_HasTransparentBackground[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_HasTransparentBackground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_HasTransparentBackground[1] = {{ wxLua_wxWindow_HasTransparentBackground, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_HasTransparentBackground }};
//     virtual bool HasTransparentBackground() const
static int LUACALL wxLua_wxWindow_HasTransparentBackground(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call HasTransparentBackground
    bool returns = (self->HasTransparentBackground());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Hide[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_Hide(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Hide[1] = {{ wxLua_wxWindow_Hide, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_Hide }};
//     bool Hide()
static int LUACALL wxLua_wxWindow_Hide(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Hide
    bool returns = (self->Hide());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_InheritAttributes[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_InheritAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_InheritAttributes[1] = {{ wxLua_wxWindow_InheritAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_InheritAttributes }};
//     void InheritAttributes()
static int LUACALL wxLua_wxWindow_InheritAttributes(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call InheritAttributes
    self->InheritAttributes();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_InitDialog[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_InitDialog(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_InitDialog[1] = {{ wxLua_wxWindow_InitDialog, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_InitDialog }};
//     void InitDialog()
static int LUACALL wxLua_wxWindow_InitDialog(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call InitDialog
    self->InitDialog();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_InvalidateBestSize[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_InvalidateBestSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_InvalidateBestSize[1] = {{ wxLua_wxWindow_InvalidateBestSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_InvalidateBestSize }};
//     void InvalidateBestSize()
static int LUACALL wxLua_wxWindow_InvalidateBestSize(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call InvalidateBestSize
    self->InvalidateBestSize();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_IsEnabled[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_IsEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_IsEnabled[1] = {{ wxLua_wxWindow_IsEnabled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_IsEnabled }};
//     virtual bool IsEnabled() const
static int LUACALL wxLua_wxWindow_IsEnabled(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call IsEnabled
    bool returns = (self->IsEnabled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_IsExposed3[] = { &wxluatype_wxWindow, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxWindow_IsExposed3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_IsExposed3[1] = {{ wxLua_wxWindow_IsExposed3, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_IsExposed3 }};
//     bool IsExposed(const wxRect &rect) const
static int LUACALL wxLua_wxWindow_IsExposed3(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call IsExposed
    bool returns = (self->IsExposed(*rect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_IsExposed1[] = { &wxluatype_wxWindow, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxWindow_IsExposed1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_IsExposed1[1] = {{ wxLua_wxWindow_IsExposed1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_IsExposed1 }};
//     bool IsExposed(const wxPoint &pt) const
static int LUACALL wxLua_wxWindow_IsExposed1(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call IsExposed
    bool returns = (self->IsExposed(*pt));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_IsExposed[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_IsExposed(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_IsExposed[1] = {{ wxLua_wxWindow_IsExposed, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxWindow_IsExposed }};
//     bool IsExposed(int x, int y) const
static int LUACALL wxLua_wxWindow_IsExposed(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call IsExposed
    bool returns = (self->IsExposed(x, y));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_IsExposed2[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_IsExposed2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_IsExposed2[1] = {{ wxLua_wxWindow_IsExposed2, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxWindow_IsExposed2 }};
//     bool IsExposed(int x, int y, int w, int h) const
static int LUACALL wxLua_wxWindow_IsExposed2(lua_State *L)
{
    // int h
    int h = (int)wxlua_getnumbertype(L, 5);
    // int w
    int w = (int)wxlua_getnumbertype(L, 4);
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call IsExposed
    bool returns = (self->IsExposed(x, y, w, h));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_IsRetained[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_IsRetained(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_IsRetained[1] = {{ wxLua_wxWindow_IsRetained, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_IsRetained }};
//     virtual bool IsRetained() const
static int LUACALL wxLua_wxWindow_IsRetained(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call IsRetained
    bool returns = (self->IsRetained());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_IsShown[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_IsShown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_IsShown[1] = {{ wxLua_wxWindow_IsShown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_IsShown }};
//     virtual bool IsShown() const
static int LUACALL wxLua_wxWindow_IsShown(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call IsShown
    bool returns = (self->IsShown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_IsTopLevel[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_IsTopLevel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_IsTopLevel[1] = {{ wxLua_wxWindow_IsTopLevel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_IsTopLevel }};
//     bool IsTopLevel() const
static int LUACALL wxLua_wxWindow_IsTopLevel(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call IsTopLevel
    bool returns = (self->IsTopLevel());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Layout[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_Layout(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Layout[1] = {{ wxLua_wxWindow_Layout, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_Layout }};
//     void Layout()
static int LUACALL wxLua_wxWindow_Layout(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Layout
    self->Layout();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Lower[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_Lower(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Lower[1] = {{ wxLua_wxWindow_Lower, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_Lower }};
//     void Lower()
static int LUACALL wxLua_wxWindow_Lower(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Lower
    self->Lower();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_MakeModal[] = { &wxluatype_wxWindow, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxWindow_MakeModal(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_MakeModal[1] = {{ wxLua_wxWindow_MakeModal, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_MakeModal }};
//     virtual void MakeModal(bool flag)
static int LUACALL wxLua_wxWindow_MakeModal(lua_State *L)
{
    // bool flag
    bool flag = wxlua_getbooleantype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call MakeModal
    self->MakeModal(flag);

    return 0;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Move1[] = { &wxluatype_wxWindow, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxWindow_Move1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Move1[1] = {{ wxLua_wxWindow_Move1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_Move1 }};
//     void Move(const wxPoint& pt)
static int LUACALL wxLua_wxWindow_Move1(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Move
    self->Move(*pt);

    return 0;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Move[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_Move(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Move[1] = {{ wxLua_wxWindow_Move, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxWindow_Move }};
//     void Move(int x, int y)
static int LUACALL wxLua_wxWindow_Move(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Move
    self->Move(x, y);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_MoveAfterInTabOrder[] = { &wxluatype_wxWindow, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_MoveAfterInTabOrder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_MoveAfterInTabOrder[1] = {{ wxLua_wxWindow_MoveAfterInTabOrder, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_MoveAfterInTabOrder }};
//     void MoveAfterInTabOrder(wxWindow *win)
static int LUACALL wxLua_wxWindow_MoveAfterInTabOrder(lua_State *L)
{
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call MoveAfterInTabOrder
    self->MoveAfterInTabOrder(win);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_MoveBeforeInTabOrder[] = { &wxluatype_wxWindow, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_MoveBeforeInTabOrder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_MoveBeforeInTabOrder[1] = {{ wxLua_wxWindow_MoveBeforeInTabOrder, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_MoveBeforeInTabOrder }};
//     void MoveBeforeInTabOrder(wxWindow *win)
static int LUACALL wxLua_wxWindow_MoveBeforeInTabOrder(lua_State *L)
{
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call MoveBeforeInTabOrder
    self->MoveBeforeInTabOrder(win);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Navigate[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_Navigate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Navigate[1] = {{ wxLua_wxWindow_Navigate, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxWindow_Navigate }};
//     bool Navigate(int flags = wxNavigationKeyEvent::IsForward)
static int LUACALL wxLua_wxWindow_Navigate(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxNavigationKeyEvent::IsForward
    int flags = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxNavigationKeyEvent::IsForward);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Navigate
    bool returns = (self->Navigate(flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_PopEventHandler[] = { &wxluatype_wxWindow, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxWindow_PopEventHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_PopEventHandler[1] = {{ wxLua_wxWindow_PopEventHandler, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxWindow_PopEventHandler }};
//     wxEvtHandler* PopEventHandler(bool deleteHandler = false) const
static int LUACALL wxLua_wxWindow_PopEventHandler(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool deleteHandler = false
    bool deleteHandler = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call PopEventHandler
    wxEvtHandler* returns = (wxEvtHandler*)self->PopEventHandler(deleteHandler);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxEvtHandler);

    return 1;
}


#if wxLUA_USE_wxMenu && wxUSE_MENUS
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_PopupMenu1[] = { &wxluatype_wxWindow, &wxluatype_wxMenu, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_PopupMenu1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_PopupMenu1[1] = {{ wxLua_wxWindow_PopupMenu1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxWindow_PopupMenu1 }};
//     bool PopupMenu(wxMenu* menu, int x, int y)
static int LUACALL wxLua_wxWindow_PopupMenu1(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 4);
    // int x
    int x = (int)wxlua_getnumbertype(L, 3);
    // wxMenu menu
    wxMenu * menu = (wxMenu *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenu);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call PopupMenu
    bool returns = (self->PopupMenu(menu, x, y));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // wxLUA_USE_wxMenu && wxUSE_MENUS

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_PopupMenu[] = { &wxluatype_wxWindow, &wxluatype_wxMenu, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxWindow_PopupMenu(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_PopupMenu[1] = {{ wxLua_wxWindow_PopupMenu, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxWindow_PopupMenu }};
//     bool PopupMenu(wxMenu* menu, const wxPoint& pos = wxDefaultPosition)
static int LUACALL wxLua_wxWindow_PopupMenu(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxMenu menu
    wxMenu * menu = (wxMenu *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenu);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call PopupMenu
    bool returns = (self->PopupMenu(menu, *pos));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_PushEventHandler[] = { &wxluatype_wxWindow, &wxluatype_wxEvtHandler, NULL };
static int LUACALL wxLua_wxWindow_PushEventHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_PushEventHandler[1] = {{ wxLua_wxWindow_PushEventHandler, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_PushEventHandler }};
//     void PushEventHandler(wxEvtHandler* handler)
static int LUACALL wxLua_wxWindow_PushEventHandler(lua_State *L)
{
    // wxEvtHandler handler
    wxEvtHandler * handler = (wxEvtHandler *)wxluaT_getuserdatatype(L, 2, wxluatype_wxEvtHandler);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call PushEventHandler
    self->PushEventHandler(handler);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Raise[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_Raise(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Raise[1] = {{ wxLua_wxWindow_Raise, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_Raise }};
//     void Raise()
static int LUACALL wxLua_wxWindow_Raise(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Raise
    self->Raise();

    return 0;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Refresh[] = { &wxluatype_wxWindow, &wxluatype_TBOOLEAN, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxWindow_Refresh(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Refresh[1] = {{ wxLua_wxWindow_Refresh, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxWindow_Refresh }};
//     virtual void Refresh(bool eraseBackground = true, const wxRect* rect = NULL)
static int LUACALL wxLua_wxWindow_Refresh(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRect rect = NULL
    const wxRect * rect = (argCount >= 3 ? (const wxRect *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRect) : NULL);
    // bool eraseBackground = true
    bool eraseBackground = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Refresh
    self->Refresh(eraseBackground, rect);

    return 0;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_ReleaseMouse[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_ReleaseMouse(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ReleaseMouse[1] = {{ wxLua_wxWindow_ReleaseMouse, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_ReleaseMouse }};
//     virtual void ReleaseMouse()
static int LUACALL wxLua_wxWindow_ReleaseMouse(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call ReleaseMouse
    self->ReleaseMouse();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_RemoveChild[] = { &wxluatype_wxWindow, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_RemoveChild(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_RemoveChild[1] = {{ wxLua_wxWindow_RemoveChild, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_RemoveChild }};
//     virtual void RemoveChild(wxWindow* child)
static int LUACALL wxLua_wxWindow_RemoveChild(lua_State *L)
{
    // wxWindow child
    wxWindow * child = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call RemoveChild
    self->RemoveChild(child);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_RemoveEventHandler[] = { &wxluatype_wxWindow, &wxluatype_wxEvtHandler, NULL };
static int LUACALL wxLua_wxWindow_RemoveEventHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_RemoveEventHandler[1] = {{ wxLua_wxWindow_RemoveEventHandler, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_RemoveEventHandler }};
//     bool RemoveEventHandler(wxEvtHandler *handler)
static int LUACALL wxLua_wxWindow_RemoveEventHandler(lua_State *L)
{
    // wxEvtHandler handler
    wxEvtHandler * handler = (wxEvtHandler *)wxluaT_getuserdatatype(L, 2, wxluatype_wxEvtHandler);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call RemoveEventHandler
    bool returns = (self->RemoveEventHandler(handler));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Reparent[] = { &wxluatype_wxWindow, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_Reparent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Reparent[1] = {{ wxLua_wxWindow_Reparent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_Reparent }};
//     virtual bool Reparent(wxWindow* newParent)
static int LUACALL wxLua_wxWindow_Reparent(lua_State *L)
{
    // wxWindow newParent
    wxWindow * newParent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Reparent
    bool returns = (self->Reparent(newParent));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_ScreenToClient[] = { &wxluatype_wxWindow, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxWindow_ScreenToClient(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ScreenToClient[1] = {{ wxLua_wxWindow_ScreenToClient, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_ScreenToClient }};
//     virtual wxPoint ScreenToClient(const wxPoint& pt) const
static int LUACALL wxLua_wxWindow_ScreenToClient(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call ScreenToClient
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->ScreenToClient(*pt));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

#define wxLua_wxWindow_ScreenToClient1 wxLua_wxWindow_ScreenToClientXY
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_ScreenToClient1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_ScreenToClient1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ScreenToClient1[1] = {{ wxLua_wxWindow_ScreenToClient1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxWindow_ScreenToClient1 }};
// %override wxLua_wxWindow_ScreenToClientXY
// %rename ScreenToClientXY virtual void ScreenToClient(int* x, int* y) const
static int LUACALL wxLua_wxWindow_ScreenToClientXY(lua_State *L)
{
    int y;
    int x;
    // get this
    wxWindow *self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call ScreenToClient
    self->ScreenToClient(&x, &y);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_ScrollLines[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_ScrollLines(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ScrollLines[1] = {{ wxLua_wxWindow_ScrollLines, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_ScrollLines }};
//     virtual bool ScrollLines(int lines)
static int LUACALL wxLua_wxWindow_ScrollLines(lua_State *L)
{
    // int lines
    int lines = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call ScrollLines
    bool returns = (self->ScrollLines(lines));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_ScrollPages[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_ScrollPages(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ScrollPages[1] = {{ wxLua_wxWindow_ScrollPages, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_ScrollPages }};
//     virtual bool ScrollPages(int pages)
static int LUACALL wxLua_wxWindow_ScrollPages(lua_State *L)
{
    // int pages
    int pages = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call ScrollPages
    bool returns = (self->ScrollPages(pages));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_ScrollWindow[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxWindow_ScrollWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ScrollWindow[1] = {{ wxLua_wxWindow_ScrollWindow, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxWindow_ScrollWindow }};
//     virtual void ScrollWindow(int dx, int dy, const wxRect* rect = NULL)
static int LUACALL wxLua_wxWindow_ScrollWindow(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRect rect = NULL
    const wxRect * rect = (argCount >= 4 ? (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect) : NULL);
    // int dy
    int dy = (int)wxlua_getnumbertype(L, 3);
    // int dx
    int dx = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call ScrollWindow
    self->ScrollWindow(dx, dy, rect);

    return 0;
}

#endif // wxLUA_USE_wxPointSizeRect

#if wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetAcceleratorTable[] = { &wxluatype_wxWindow, &wxluatype_wxAcceleratorTable, NULL };
static int LUACALL wxLua_wxWindow_SetAcceleratorTable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetAcceleratorTable[1] = {{ wxLua_wxWindow_SetAcceleratorTable, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetAcceleratorTable }};
//     virtual void SetAcceleratorTable(const wxAcceleratorTable& accel)
static int LUACALL wxLua_wxWindow_SetAcceleratorTable(lua_State *L)
{
    // const wxAcceleratorTable accel
    const wxAcceleratorTable * accel = (const wxAcceleratorTable *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAcceleratorTable);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetAcceleratorTable
    self->SetAcceleratorTable(*accel);

    return 0;
}

#endif // wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetAutoLayout[] = { &wxluatype_wxWindow, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxWindow_SetAutoLayout(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetAutoLayout[1] = {{ wxLua_wxWindow_SetAutoLayout, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetAutoLayout }};
//     void SetAutoLayout(bool autoLayout)
static int LUACALL wxLua_wxWindow_SetAutoLayout(lua_State *L)
{
    // bool autoLayout
    bool autoLayout = wxlua_getbooleantype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetAutoLayout
    self->SetAutoLayout(autoLayout);

    return 0;
}


#if wxLUA_USE_wxColourPenBrush
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetBackgroundColour[] = { &wxluatype_wxWindow, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxWindow_SetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetBackgroundColour[1] = {{ wxLua_wxWindow_SetBackgroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetBackgroundColour }};
//     virtual void SetBackgroundColour(const wxColour& colour)
static int LUACALL wxLua_wxWindow_SetBackgroundColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetBackgroundColour
    self->SetBackgroundColour(*colour);

    return 0;
}

#endif // wxLUA_USE_wxColourPenBrush

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetBackgroundStyle[] = { &wxluatype_wxWindow, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxWindow_SetBackgroundStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetBackgroundStyle[1] = {{ wxLua_wxWindow_SetBackgroundStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetBackgroundStyle }};
//     virtual void SetBackgroundStyle(wxBackgroundStyle style)
static int LUACALL wxLua_wxWindow_SetBackgroundStyle(lua_State *L)
{
    // wxBackgroundStyle style
    wxBackgroundStyle style = (wxBackgroundStyle)wxlua_getenumtype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetBackgroundStyle
    self->SetBackgroundStyle(style);

    return 0;
}


#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetBestFittingSize[] = { &wxluatype_wxWindow, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxWindow_SetBestFittingSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetBestFittingSize[1] = {{ wxLua_wxWindow_SetBestFittingSize, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxWindow_SetBestFittingSize }};
//     !%wxchkver_2_8 void SetBestFittingSize(const wxSize& size = wxDefaultSize) // deprecated in 2.8 use SetInitialSize
static int LUACALL wxLua_wxWindow_SetBestFittingSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 2 ? (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize) : &wxDefaultSize);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetBestFittingSize
    self->SetBestFittingSize(*size);

    return 0;
}

#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)

#if wxLUA_USE_wxCaret && wxUSE_CARET
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetCaret[] = { &wxluatype_wxWindow, &wxluatype_wxCaret, NULL };
static int LUACALL wxLua_wxWindow_SetCaret(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetCaret[1] = {{ wxLua_wxWindow_SetCaret, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetCaret }};
//     void SetCaret(wxCaret *caret) const
static int LUACALL wxLua_wxWindow_SetCaret(lua_State *L)
{
    // wxCaret caret
    wxCaret * caret = (wxCaret *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCaret);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetCaret
    self->SetCaret(caret);

    return 0;
}

#endif // wxLUA_USE_wxCaret && wxUSE_CARET

#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetClientSize[] = { &wxluatype_wxWindow, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxWindow_SetClientSize(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetClientSize[1] = {{ wxLua_wxWindow_SetClientSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetClientSize }};
//     virtual void SetClientSize(const wxSize& size)
static int LUACALL wxLua_wxWindow_SetClientSize(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetClientSize
    self->SetClientSize(*size);

    return 0;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetClientSize1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_SetClientSize1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetClientSize1[1] = {{ wxLua_wxWindow_SetClientSize1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxWindow_SetClientSize1 }};
//     virtual void SetClientSize(int width, int height)
static int LUACALL wxLua_wxWindow_SetClientSize1(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetClientSize
    self->SetClientSize(width, height);

    return 0;
}


#if ((wxLUA_USE_wxSizer) && (wxLUA_USE_wxLayoutConstraints && (!wxCHECK_VERSION(2,6,0)))) && (!wxCHECK_VERSION(2,6,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetConstraints[] = { &wxluatype_wxWindow, &wxluatype_wxLayoutConstraints, NULL };
static int LUACALL wxLua_wxWindow_SetConstraints(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetConstraints[1] = {{ wxLua_wxWindow_SetConstraints, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetConstraints }};
//     !%wxchkver_2_6 void SetConstraints(wxLayoutConstraints* constraints)
static int LUACALL wxLua_wxWindow_SetConstraints(lua_State *L)
{
    // wxLayoutConstraints constraints
    wxLayoutConstraints * constraints = (wxLayoutConstraints *)wxluaT_getuserdatatype(L, 2, wxluatype_wxLayoutConstraints);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetConstraints
    self->SetConstraints(constraints);

    return 0;
}

#endif // ((wxLUA_USE_wxSizer) && (wxLUA_USE_wxLayoutConstraints && (!wxCHECK_VERSION(2,6,0)))) && (!wxCHECK_VERSION(2,6,0))

#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetContainingSizer[] = { &wxluatype_wxWindow, &wxluatype_wxSizer, NULL };
static int LUACALL wxLua_wxWindow_SetContainingSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetContainingSizer[1] = {{ wxLua_wxWindow_SetContainingSizer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetContainingSizer }};
//     void SetContainingSizer(wxSizer* sizer)
static int LUACALL wxLua_wxWindow_SetContainingSizer(lua_State *L)
{
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetContainingSizer
    self->SetContainingSizer(sizer);

    return 0;
}

#endif // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))

#if wxLUA_USE_wxCursor
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetCursor[] = { &wxluatype_wxWindow, &wxluatype_wxCursor, NULL };
static int LUACALL wxLua_wxWindow_SetCursor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetCursor[1] = {{ wxLua_wxWindow_SetCursor, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetCursor }};
//     virtual void SetCursor(const wxCursor& cursor)
static int LUACALL wxLua_wxWindow_SetCursor(lua_State *L)
{
    // const wxCursor cursor
    const wxCursor * cursor = (const wxCursor *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCursor);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetCursor
    self->SetCursor(*cursor);

    return 0;
}

#endif // wxLUA_USE_wxCursor

#if !wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetDefaultItem[] = { &wxluatype_wxWindow, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_SetDefaultItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetDefaultItem[1] = {{ wxLua_wxWindow_SetDefaultItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetDefaultItem }};
//     !%wxchkver_2_8 wxWindow* SetDefaultItem(wxWindow *win)
static int LUACALL wxLua_wxWindow_SetDefaultItem(lua_State *L)
{
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetDefaultItem
    wxWindow* returns = (wxWindow*)self->SetDefaultItem(win);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

#endif // !wxCHECK_VERSION(2,8,0)

#if wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetDropTarget[] = { &wxluatype_wxWindow, &wxluatype_wxDropTarget, NULL };
static int LUACALL wxLua_wxWindow_SetDropTarget(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetDropTarget[1] = {{ wxLua_wxWindow_SetDropTarget, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetDropTarget }};
//     void SetDropTarget(wxDropTarget* target)
static int LUACALL wxLua_wxWindow_SetDropTarget(lua_State *L)
{
    // wxDropTarget target
    wxDropTarget * target = (wxDropTarget *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDropTarget);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetDropTarget
    self->SetDropTarget(target);

    return 0;
}

#endif // wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetEventHandler[] = { &wxluatype_wxWindow, &wxluatype_wxEvtHandler, NULL };
static int LUACALL wxLua_wxWindow_SetEventHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetEventHandler[1] = {{ wxLua_wxWindow_SetEventHandler, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetEventHandler }};
//     void SetEventHandler(wxEvtHandler* handler)
static int LUACALL wxLua_wxWindow_SetEventHandler(lua_State *L)
{
    // wxEvtHandler handler
    wxEvtHandler * handler = (wxEvtHandler *)wxluaT_getuserdatatype(L, 2, wxluatype_wxEvtHandler);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetEventHandler
    self->SetEventHandler(handler);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetExtraStyle[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_SetExtraStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetExtraStyle[1] = {{ wxLua_wxWindow_SetExtraStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetExtraStyle }};
//     void SetExtraStyle(long exStyle)
static int LUACALL wxLua_wxWindow_SetExtraStyle(lua_State *L)
{
    // long exStyle
    long exStyle = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetExtraStyle
    self->SetExtraStyle(exStyle);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetFocus[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_SetFocus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetFocus[1] = {{ wxLua_wxWindow_SetFocus, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_SetFocus }};
//     virtual void SetFocus()
static int LUACALL wxLua_wxWindow_SetFocus(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetFocus
    self->SetFocus();

    return 0;
}


#if wxLUA_USE_wxFont
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetFont[] = { &wxluatype_wxWindow, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxWindow_SetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetFont[1] = {{ wxLua_wxWindow_SetFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetFont }};
//     void SetFont(const wxFont& font)
static int LUACALL wxLua_wxWindow_SetFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetFont
    self->SetFont(*font);

    return 0;
}

#endif // wxLUA_USE_wxFont

#if wxLUA_USE_wxColourPenBrush
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetForegroundColour[] = { &wxluatype_wxWindow, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxWindow_SetForegroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetForegroundColour[1] = {{ wxLua_wxWindow_SetForegroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetForegroundColour }};
//     virtual void SetForegroundColour(const wxColour& colour)
static int LUACALL wxLua_wxWindow_SetForegroundColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetForegroundColour
    self->SetForegroundColour(*colour);

    return 0;
}

#endif // wxLUA_USE_wxColourPenBrush

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetHelpText[] = { &wxluatype_wxWindow, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxWindow_SetHelpText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetHelpText[1] = {{ wxLua_wxWindow_SetHelpText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetHelpText }};
//     virtual void SetHelpText(const wxString& helpText)
static int LUACALL wxLua_wxWindow_SetHelpText(lua_State *L)
{
    // const wxString helpText
    const wxString helpText = wxlua_getwxStringtype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetHelpText
    self->SetHelpText(helpText);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetId[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_SetId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetId[1] = {{ wxLua_wxWindow_SetId, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetId }};
//     void SetId(int id)
static int LUACALL wxLua_wxWindow_SetId(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetId
    self->SetId(id);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetInitialSize[] = { &wxluatype_wxWindow, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxWindow_SetInitialSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetInitialSize[1] = {{ wxLua_wxWindow_SetInitialSize, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxWindow_SetInitialSize }};
//     %wxchkver_2_8 void SetInitialSize(const wxSize& size = wxDefaultSize)
static int LUACALL wxLua_wxWindow_SetInitialSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 2 ? (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize) : &wxDefaultSize);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetInitialSize
    self->SetInitialSize(*size);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0))

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetLabel[] = { &wxluatype_wxWindow, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxWindow_SetLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetLabel[1] = {{ wxLua_wxWindow_SetLabel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetLabel }};
//     virtual void SetLabel(const wxString& label)
static int LUACALL wxLua_wxWindow_SetLabel(lua_State *L)
{
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetLabel
    self->SetLabel(label);

    return 0;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetMaxSize[] = { &wxluatype_wxWindow, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxWindow_SetMaxSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetMaxSize[1] = {{ wxLua_wxWindow_SetMaxSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetMaxSize }};
//     void SetMaxSize(const wxSize& size)
static int LUACALL wxLua_wxWindow_SetMaxSize(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetMaxSize
    self->SetMaxSize(*size);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetMinSize[] = { &wxluatype_wxWindow, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxWindow_SetMinSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetMinSize[1] = {{ wxLua_wxWindow_SetMinSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetMinSize }};
//     void SetMinSize(const wxSize& size)
static int LUACALL wxLua_wxWindow_SetMinSize(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetMinSize
    self->SetMinSize(*size);

    return 0;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetName[] = { &wxluatype_wxWindow, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxWindow_SetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetName[1] = {{ wxLua_wxWindow_SetName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetName }};
//     virtual void SetName(const wxString& name)
static int LUACALL wxLua_wxWindow_SetName(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetName
    self->SetName(name);

    return 0;
}


#if wxLUA_USE_wxColourPenBrush
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetOwnBackgroundColour[] = { &wxluatype_wxWindow, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxWindow_SetOwnBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetOwnBackgroundColour[1] = {{ wxLua_wxWindow_SetOwnBackgroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetOwnBackgroundColour }};
//     void SetOwnBackgroundColour(const wxColour& colour)
static int LUACALL wxLua_wxWindow_SetOwnBackgroundColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetOwnBackgroundColour
    self->SetOwnBackgroundColour(*colour);

    return 0;
}

#endif // wxLUA_USE_wxColourPenBrush

#if wxLUA_USE_wxFont
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetOwnFont[] = { &wxluatype_wxWindow, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxWindow_SetOwnFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetOwnFont[1] = {{ wxLua_wxWindow_SetOwnFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetOwnFont }};
//     void SetOwnFont(const wxFont& font)
static int LUACALL wxLua_wxWindow_SetOwnFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetOwnFont
    self->SetOwnFont(*font);

    return 0;
}

#endif // wxLUA_USE_wxFont

#if wxLUA_USE_wxColourPenBrush
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetOwnForegroundColour[] = { &wxluatype_wxWindow, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxWindow_SetOwnForegroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetOwnForegroundColour[1] = {{ wxLua_wxWindow_SetOwnForegroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetOwnForegroundColour }};
//     void SetOwnForegroundColour(const wxColour& colour)
static int LUACALL wxLua_wxWindow_SetOwnForegroundColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetOwnForegroundColour
    self->SetOwnForegroundColour(*colour);

    return 0;
}

#endif // wxLUA_USE_wxColourPenBrush

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetScrollPos[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxWindow_SetScrollPos(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetScrollPos[1] = {{ wxLua_wxWindow_SetScrollPos, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxWindow_SetScrollPos }};
//     virtual void SetScrollPos(int orientation, int pos, bool refresh = true)
static int LUACALL wxLua_wxWindow_SetScrollPos(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool refresh = true
    bool refresh = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // int pos
    int pos = (int)wxlua_getnumbertype(L, 3);
    // int orientation
    int orientation = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetScrollPos
    self->SetScrollPos(orientation, pos, refresh);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetScrollbar[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxWindow_SetScrollbar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetScrollbar[1] = {{ wxLua_wxWindow_SetScrollbar, WXLUAMETHOD_METHOD, 5, 6, s_wxluatypeArray_wxLua_wxWindow_SetScrollbar }};
//     virtual void SetScrollbar(int orientation, int position, int thumbSize, int range, bool refresh = true)
static int LUACALL wxLua_wxWindow_SetScrollbar(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool refresh = true
    bool refresh = (argCount >= 6 ? wxlua_getbooleantype(L, 6) : true);
    // int range
    int range = (int)wxlua_getnumbertype(L, 5);
    // int thumbSize
    int thumbSize = (int)wxlua_getnumbertype(L, 4);
    // int position
    int position = (int)wxlua_getnumbertype(L, 3);
    // int orientation
    int orientation = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetScrollbar
    self->SetScrollbar(orientation, position, thumbSize, range, refresh);

    return 0;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetSize3[] = { &wxluatype_wxWindow, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxWindow_SetSize3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetSize3[1] = {{ wxLua_wxWindow_SetSize3, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetSize3 }};
//     virtual void SetSize(const wxRect& rect)
static int LUACALL wxLua_wxWindow_SetSize3(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetSize
    self->SetSize(*rect);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetSize2[] = { &wxluatype_wxWindow, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxWindow_SetSize2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetSize2[1] = {{ wxLua_wxWindow_SetSize2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetSize2 }};
//     void SetSize(const wxSize& size)
static int LUACALL wxLua_wxWindow_SetSize2(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetSize
    self->SetSize(*size);

    return 0;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetSize[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_SetSize(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetSize[1] = {{ wxLua_wxWindow_SetSize, WXLUAMETHOD_METHOD, 5, 6, s_wxluatypeArray_wxLua_wxWindow_SetSize }};
//     virtual void SetSize(int x, int y, int width, int height, int sizeFlags = wxSIZE_AUTO)
static int LUACALL wxLua_wxWindow_SetSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int sizeFlags = wxSIZE_AUTO
    int sizeFlags = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : wxSIZE_AUTO);
    // int height
    int height = (int)wxlua_getnumbertype(L, 5);
    // int width
    int width = (int)wxlua_getnumbertype(L, 4);
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetSize
    self->SetSize(x, y, width, height, sizeFlags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetSize1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_SetSize1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetSize1[1] = {{ wxLua_wxWindow_SetSize1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxWindow_SetSize1 }};
//     virtual void SetSize(int width, int height)
static int LUACALL wxLua_wxWindow_SetSize1(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetSize
    self->SetSize(width, height);

    return 0;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetSizeHints1[] = { &wxluatype_wxWindow, &wxluatype_wxSize, &wxluatype_wxSize, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxWindow_SetSizeHints1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetSizeHints1[1] = {{ wxLua_wxWindow_SetSizeHints1, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxWindow_SetSizeHints1 }};
//     void SetSizeHints(const wxSize& minSize, const wxSize& maxSize=wxDefaultSize, const wxSize& incSize=wxDefaultSize)
static int LUACALL wxLua_wxWindow_SetSizeHints1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxSize incSize = wxDefaultSize
    const wxSize * incSize = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxSize maxSize = wxDefaultSize
    const wxSize * maxSize = (argCount >= 3 ? (const wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize) : &wxDefaultSize);
    // const wxSize minSize
    const wxSize * minSize = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetSizeHints
    self->SetSizeHints(*minSize, *maxSize, *incSize);

    return 0;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetSizeHints[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_SetSizeHints(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetSizeHints[1] = {{ wxLua_wxWindow_SetSizeHints, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxWindow_SetSizeHints }};
//     virtual void SetSizeHints(int minW, int minH, int maxW=-1, int maxH=-1, int incW=-1, int incH=-1)
static int LUACALL wxLua_wxWindow_SetSizeHints(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int incH = -1
    int incH = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : -1);
    // int incW = -1
    int incW = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int maxH = -1
    int maxH = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // int maxW = -1
    int maxW = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // int minH
    int minH = (int)wxlua_getnumbertype(L, 3);
    // int minW
    int minW = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetSizeHints
    self->SetSizeHints(minW, minH, maxW, maxH, incW, incH);

    return 0;
}


#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetSizer[] = { &wxluatype_wxWindow, &wxluatype_wxSizer, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxWindow_SetSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetSizer[1] = {{ wxLua_wxWindow_SetSizer, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxWindow_SetSizer }};
//     void SetSizer(wxSizer* sizer, bool deleteOld=true)
static int LUACALL wxLua_wxWindow_SetSizer(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool deleteOld = true
    bool deleteOld = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetSizer
    self->SetSizer(sizer, deleteOld);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetSizerAndFit[] = { &wxluatype_wxWindow, &wxluatype_wxSizer, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxWindow_SetSizerAndFit(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetSizerAndFit[1] = {{ wxLua_wxWindow_SetSizerAndFit, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxWindow_SetSizerAndFit }};
//     void SetSizerAndFit(wxSizer* sizer, bool deleteOld=true)
static int LUACALL wxLua_wxWindow_SetSizerAndFit(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool deleteOld = true
    bool deleteOld = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // wxSizer sizer
    wxSizer * sizer = (wxSizer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetSizerAndFit
    self->SetSizerAndFit(sizer, deleteOld);

    return 0;
}

#endif // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetThemeEnabled[] = { &wxluatype_wxWindow, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxWindow_SetThemeEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetThemeEnabled[1] = {{ wxLua_wxWindow_SetThemeEnabled, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetThemeEnabled }};
//     virtual void SetThemeEnabled(bool enable)
static int LUACALL wxLua_wxWindow_SetThemeEnabled(lua_State *L)
{
    // bool enable
    bool enable = wxlua_getbooleantype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetThemeEnabled
    self->SetThemeEnabled(enable);

    return 0;
}


#if !wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetTitle[] = { &wxluatype_wxWindow, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxWindow_SetTitle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetTitle[1] = {{ wxLua_wxWindow_SetTitle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetTitle }};
//     !%wxchkver_2_8 virtual void SetTitle(const wxString& title)
static int LUACALL wxLua_wxWindow_SetTitle(lua_State *L)
{
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetTitle
    self->SetTitle(title);

    return 0;
}

#endif // !wxCHECK_VERSION(2,8,0)

#if wxLUA_USE_wxTooltip && wxUSE_TOOLTIPS
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetToolTip1[] = { &wxluatype_wxWindow, &wxluatype_wxToolTip, NULL };
static int LUACALL wxLua_wxWindow_SetToolTip1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetToolTip1[1] = {{ wxLua_wxWindow_SetToolTip1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetToolTip1 }};
//     void SetToolTip(%ungc wxToolTip* tip)
static int LUACALL wxLua_wxWindow_SetToolTip1(lua_State *L)
{
    // wxToolTip tip
    wxToolTip * tip = (wxToolTip *)wxluaT_getuserdatatype(L, 2, wxluatype_wxToolTip);
    if (wxluaO_isgcobject(L, tip)) wxluaO_undeletegcobject(L, tip);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetToolTip
    self->SetToolTip(tip);

    return 0;
}

#endif // wxLUA_USE_wxTooltip && wxUSE_TOOLTIPS

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetToolTip[] = { &wxluatype_wxWindow, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxWindow_SetToolTip(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetToolTip[1] = {{ wxLua_wxWindow_SetToolTip, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetToolTip }};
//     void SetToolTip(const wxString& tip)
static int LUACALL wxLua_wxWindow_SetToolTip(lua_State *L)
{
    // const wxString tip
    const wxString tip = wxlua_getwxStringtype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetToolTip
    self->SetToolTip(tip);

    return 0;
}


#if wxLUA_USE_wxValidator && wxUSE_VALIDATORS
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetValidator[] = { &wxluatype_wxWindow, &wxluatype_wxValidator, NULL };
static int LUACALL wxLua_wxWindow_SetValidator(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetValidator[1] = {{ wxLua_wxWindow_SetValidator, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetValidator }};
//     virtual void SetValidator(const wxValidator& validator)
static int LUACALL wxLua_wxWindow_SetValidator(lua_State *L)
{
    // const wxValidator validator
    const wxValidator * validator = (const wxValidator *)wxluaT_getuserdatatype(L, 2, wxluatype_wxValidator);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetValidator
    self->SetValidator(*validator);

    return 0;
}

#endif // wxLUA_USE_wxValidator && wxUSE_VALIDATORS

#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetVirtualSize1[] = { &wxluatype_wxWindow, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxWindow_SetVirtualSize1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetVirtualSize1[1] = {{ wxLua_wxWindow_SetVirtualSize1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetVirtualSize1 }};
//     void SetVirtualSize(const wxSize& size)
static int LUACALL wxLua_wxWindow_SetVirtualSize1(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetVirtualSize
    self->SetVirtualSize(*size);

    return 0;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetVirtualSize[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_SetVirtualSize(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetVirtualSize[1] = {{ wxLua_wxWindow_SetVirtualSize, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxWindow_SetVirtualSize }};
//     void SetVirtualSize(int width, int height)
static int LUACALL wxLua_wxWindow_SetVirtualSize(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetVirtualSize
    self->SetVirtualSize(width, height);

    return 0;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetVirtualSizeHints1[] = { &wxluatype_wxWindow, &wxluatype_wxSize, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxWindow_SetVirtualSizeHints1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetVirtualSizeHints1[1] = {{ wxLua_wxWindow_SetVirtualSizeHints1, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxWindow_SetVirtualSizeHints1 }};
//     void SetVirtualSizeHints(const wxSize& minSize=wxDefaultSize, const wxSize& maxSize=wxDefaultSize)
static int LUACALL wxLua_wxWindow_SetVirtualSizeHints1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxSize maxSize = wxDefaultSize
    const wxSize * maxSize = (argCount >= 3 ? (const wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize) : &wxDefaultSize);
    // const wxSize minSize = wxDefaultSize
    const wxSize * minSize = (argCount >= 2 ? (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize) : &wxDefaultSize);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetVirtualSizeHints
    self->SetVirtualSizeHints(*minSize, *maxSize);

    return 0;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetVirtualSizeHints[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_SetVirtualSizeHints(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetVirtualSizeHints[1] = {{ wxLua_wxWindow_SetVirtualSizeHints, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxWindow_SetVirtualSizeHints }};
//     virtual void SetVirtualSizeHints(int minW,int minH, int maxW=-1, int maxH=-1)
static int LUACALL wxLua_wxWindow_SetVirtualSizeHints(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int maxH = -1
    int maxH = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // int maxW = -1
    int maxW = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // int minH
    int minH = (int)wxlua_getnumbertype(L, 3);
    // int minW
    int minW = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetVirtualSizeHints
    self->SetVirtualSizeHints(minW, minH, maxW, maxH);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetWindowStyle[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_SetWindowStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetWindowStyle[1] = {{ wxLua_wxWindow_SetWindowStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetWindowStyle }};
//     void SetWindowStyle(long style)
static int LUACALL wxLua_wxWindow_SetWindowStyle(lua_State *L)
{
    // long style
    long style = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetWindowStyle
    self->SetWindowStyle(style);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetWindowStyleFlag[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_SetWindowStyleFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetWindowStyleFlag[1] = {{ wxLua_wxWindow_SetWindowStyleFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetWindowStyleFlag }};
//     virtual void SetWindowStyleFlag(long style)
static int LUACALL wxLua_wxWindow_SetWindowStyleFlag(lua_State *L)
{
    // long style
    long style = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetWindowStyleFlag
    self->SetWindowStyleFlag(style);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_SetWindowVariant[] = { &wxluatype_wxWindow, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxWindow_SetWindowVariant(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetWindowVariant[1] = {{ wxLua_wxWindow_SetWindowVariant, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetWindowVariant }};
//     void SetWindowVariant(wxWindowVariant variant)
static int LUACALL wxLua_wxWindow_SetWindowVariant(lua_State *L)
{
    // wxWindowVariant variant
    wxWindowVariant variant = (wxWindowVariant)wxlua_getenumtype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call SetWindowVariant
    self->SetWindowVariant(variant);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_ShouldInheritColours[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_ShouldInheritColours(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ShouldInheritColours[1] = {{ wxLua_wxWindow_ShouldInheritColours, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_ShouldInheritColours }};
//     virtual bool ShouldInheritColours()
static int LUACALL wxLua_wxWindow_ShouldInheritColours(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call ShouldInheritColours
    bool returns = (self->ShouldInheritColours());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Show[] = { &wxluatype_wxWindow, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxWindow_Show(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Show[1] = {{ wxLua_wxWindow_Show, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxWindow_Show }};
//     virtual bool Show(bool show = true)
static int LUACALL wxLua_wxWindow_Show(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool show = true
    bool show = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Show
    bool returns = (self->Show(show));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Thaw[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_Thaw(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Thaw[1] = {{ wxLua_wxWindow_Thaw, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_Thaw }};
//     virtual void Thaw()
static int LUACALL wxLua_wxWindow_Thaw(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Thaw
    self->Thaw();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_TransferDataFromWindow[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_TransferDataFromWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_TransferDataFromWindow[1] = {{ wxLua_wxWindow_TransferDataFromWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_TransferDataFromWindow }};
//     virtual bool TransferDataFromWindow()
static int LUACALL wxLua_wxWindow_TransferDataFromWindow(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call TransferDataFromWindow
    bool returns = (self->TransferDataFromWindow());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_TransferDataToWindow[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_TransferDataToWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_TransferDataToWindow[1] = {{ wxLua_wxWindow_TransferDataToWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_TransferDataToWindow }};
//     virtual bool TransferDataToWindow()
static int LUACALL wxLua_wxWindow_TransferDataToWindow(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call TransferDataToWindow
    bool returns = (self->TransferDataToWindow());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Update[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_Update(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Update[1] = {{ wxLua_wxWindow_Update, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_Update }};
//     virtual void Update()
static int LUACALL wxLua_wxWindow_Update(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Update
    self->Update();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_UpdateWindowUI[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_UpdateWindowUI(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_UpdateWindowUI[1] = {{ wxLua_wxWindow_UpdateWindowUI, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxWindow_UpdateWindowUI }};
//     virtual void UpdateWindowUI(long flags = wxUPDATE_UI_NONE)
static int LUACALL wxLua_wxWindow_UpdateWindowUI(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long flags = wxUPDATE_UI_NONE
    long flags = (argCount >= 2 ? (long)wxlua_getnumbertype(L, 2) : wxUPDATE_UI_NONE);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call UpdateWindowUI
    self->UpdateWindowUI(flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_Validate[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxWindow_Validate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Validate[1] = {{ wxLua_wxWindow_Validate, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWindow_Validate }};
//     virtual bool Validate()
static int LUACALL wxLua_wxWindow_Validate(lua_State *L)
{
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call Validate
    bool returns = (self->Validate());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_WarpPointer[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWindow_WarpPointer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_WarpPointer[1] = {{ wxLua_wxWindow_WarpPointer, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxWindow_WarpPointer }};
//     void WarpPointer(int x, int y)
static int LUACALL wxLua_wxWindow_WarpPointer(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWindow * self = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call WarpPointer
    self->WarpPointer(x, y);

    return 0;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxWindow_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxWindow_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_constructor1[1] = {{ wxLua_wxWindow_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxWindow_constructor1 }};
//     wxWindow(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxWindow")
static int LUACALL wxLua_wxWindow_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxWindow"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxWindow")));
    // long style = 0
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxWindow* returns = new wxWindow(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static int LUACALL wxLua_wxWindow_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_constructor[1] = {{ wxLua_wxWindow_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxWindow()
static int LUACALL wxLua_wxWindow_constructor(lua_State *L)
{
    // call constructor
    wxWindow* returns = new wxWindow();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}



#if (wxLUA_USE_wxPointSizeRect)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ClientToScreen_overload[] =
{

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_ClientToScreen1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_ClientToScreen1 },
#endif // wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_ClientToScreen, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxWindow_ClientToScreen },
};
static int s_wxluafunc_wxLua_wxWindow_ClientToScreen_overload_count = sizeof(s_wxluafunc_wxLua_wxWindow_ClientToScreen_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ConvertDialogToPixels_overload[] =
{

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_ConvertDialogToPixels1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_ConvertDialogToPixels1 },
#endif // wxLUA_USE_wxPointSizeRect

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_ConvertDialogToPixels, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_ConvertDialogToPixels },
#endif // wxLUA_USE_wxPointSizeRect
};
static int s_wxluafunc_wxLua_wxWindow_ConvertDialogToPixels_overload_count = sizeof(s_wxluafunc_wxLua_wxWindow_ConvertDialogToPixels_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ConvertPixelsToDialog_overload[] =
{

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_ConvertPixelsToDialog1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_ConvertPixelsToDialog1 },
#endif // wxLUA_USE_wxPointSizeRect

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_ConvertPixelsToDialog, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_ConvertPixelsToDialog },
#endif // wxLUA_USE_wxPointSizeRect
};
static int s_wxluafunc_wxLua_wxWindow_ConvertPixelsToDialog_overload_count = sizeof(s_wxluafunc_wxLua_wxWindow_ConvertPixelsToDialog_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxPointSizeRect)

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_FindWindow_overload[] =
{
    { wxLua_wxWindow_FindWindow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_FindWindow },
    { wxLua_wxWindow_FindWindow1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_FindWindow1 },
};
static int s_wxluafunc_wxLua_wxWindow_FindWindow_overload_count = sizeof(s_wxluafunc_wxLua_wxWindow_FindWindow_overload)/sizeof(wxLuaBindCFunc);


#if (wxLUA_USE_wxPointSizeRect)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_IsExposed_overload[] =
{

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_IsExposed3, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_IsExposed3 },
#endif // wxLUA_USE_wxPointSizeRect

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_IsExposed1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_IsExposed1 },
#endif // wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_IsExposed, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxWindow_IsExposed },
    { wxLua_wxWindow_IsExposed2, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxWindow_IsExposed2 },
};
static int s_wxluafunc_wxLua_wxWindow_IsExposed_overload_count = sizeof(s_wxluafunc_wxLua_wxWindow_IsExposed_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_Move_overload[] =
{

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_Move1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_Move1 },
#endif // wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_Move, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxWindow_Move },
};
static int s_wxluafunc_wxLua_wxWindow_Move_overload_count = sizeof(s_wxluafunc_wxLua_wxWindow_Move_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxMenu && wxUSE_MENUS)||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxMenu && wxUSE_MENUS))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_PopupMenu_overload[] =
{

#if wxLUA_USE_wxMenu && wxUSE_MENUS
    { wxLua_wxWindow_PopupMenu1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxWindow_PopupMenu1 },
#endif // wxLUA_USE_wxMenu && wxUSE_MENUS

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { wxLua_wxWindow_PopupMenu, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxWindow_PopupMenu },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
};
static int s_wxluafunc_wxLua_wxWindow_PopupMenu_overload_count = sizeof(s_wxluafunc_wxLua_wxWindow_PopupMenu_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS)||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxMenu && wxUSE_MENUS))

#if (wxLUA_USE_wxPointSizeRect)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_ScreenToClient_overload[] =
{

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_ScreenToClient, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_ScreenToClient },
#endif // wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_ScreenToClient1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxWindow_ScreenToClient1 },
};
static int s_wxluafunc_wxLua_wxWindow_ScreenToClient_overload_count = sizeof(s_wxluafunc_wxLua_wxWindow_ScreenToClient_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetClientSize_overload[] =
{

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_SetClientSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetClientSize },
#endif // wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_SetClientSize1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxWindow_SetClientSize1 },
};
static int s_wxluafunc_wxLua_wxWindow_SetClientSize_overload_count = sizeof(s_wxluafunc_wxLua_wxWindow_SetClientSize_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetSize_overload[] =
{

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_SetSize3, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetSize3 },
#endif // wxLUA_USE_wxPointSizeRect

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_SetSize2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetSize2 },
#endif // wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_SetSize, WXLUAMETHOD_METHOD, 5, 6, s_wxluatypeArray_wxLua_wxWindow_SetSize },
    { wxLua_wxWindow_SetSize1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxWindow_SetSize1 },
};
static int s_wxluafunc_wxLua_wxWindow_SetSize_overload_count = sizeof(s_wxluafunc_wxLua_wxWindow_SetSize_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetSizeHints_overload[] =
{

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_SetSizeHints1, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxWindow_SetSizeHints1 },
#endif // wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_SetSizeHints, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxWindow_SetSizeHints },
};
static int s_wxluafunc_wxLua_wxWindow_SetSizeHints_overload_count = sizeof(s_wxluafunc_wxLua_wxWindow_SetSizeHints_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxTooltip && wxUSE_TOOLTIPS)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetToolTip_overload[] =
{

#if wxLUA_USE_wxTooltip && wxUSE_TOOLTIPS
    { wxLua_wxWindow_SetToolTip1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetToolTip1 },
#endif // wxLUA_USE_wxTooltip && wxUSE_TOOLTIPS
    { wxLua_wxWindow_SetToolTip, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetToolTip },
};
static int s_wxluafunc_wxLua_wxWindow_SetToolTip_overload_count = sizeof(s_wxluafunc_wxLua_wxWindow_SetToolTip_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxTooltip && wxUSE_TOOLTIPS)

#if (wxLUA_USE_wxPointSizeRect)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetVirtualSize_overload[] =
{

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_SetVirtualSize1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWindow_SetVirtualSize1 },
#endif // wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_SetVirtualSize, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxWindow_SetVirtualSize },
};
static int s_wxluafunc_wxLua_wxWindow_SetVirtualSize_overload_count = sizeof(s_wxluafunc_wxLua_wxWindow_SetVirtualSize_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_SetVirtualSizeHints_overload[] =
{

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_SetVirtualSizeHints1, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxWindow_SetVirtualSizeHints1 },
#endif // wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_SetVirtualSizeHints, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxWindow_SetVirtualSizeHints },
};
static int s_wxluafunc_wxLua_wxWindow_SetVirtualSizeHints_overload_count = sizeof(s_wxluafunc_wxLua_wxWindow_SetVirtualSizeHints_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWindow_constructor_overload[] =
{

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxWindow_constructor1 },
#endif // wxLUA_USE_wxPointSizeRect
    { wxLua_wxWindow_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxWindow_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxWindow_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxPointSizeRect)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxWindow_methods[] = {
    { "AddChild", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_AddChild, 1, NULL },

#if wxLUA_USE_wxPointSizeRect
    { "CacheBestSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_CacheBestSize, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "CaptureMouse", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_CaptureMouse, 1, NULL },
    { "Center", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Center, 1, NULL },
    { "CenterOnParent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_CenterOnParent, 1, NULL },

#if !wxCHECK_VERSION(2,8,0)
    { "CenterOnScreen", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_CenterOnScreen, 1, NULL },
#endif // !wxCHECK_VERSION(2,8,0)

    { "Centre", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Centre, 1, NULL },
    { "CentreOnParent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_CentreOnParent, 1, NULL },

#if !wxCHECK_VERSION(2,8,0)
    { "CentreOnScreen", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_CentreOnScreen, 1, NULL },
#endif // !wxCHECK_VERSION(2,8,0)

#if !wxCHECK_VERSION(2,6,0)
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Clear, 1, NULL },
#endif // !wxCHECK_VERSION(2,6,0)

#if wxCHECK_VERSION(2,6,0)
    { "ClearBackground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_ClearBackground, 1, NULL },
#endif // wxCHECK_VERSION(2,6,0)

#if (wxLUA_USE_wxPointSizeRect)
    { "ClientToScreen", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_ClientToScreen_overload, s_wxluafunc_wxLua_wxWindow_ClientToScreen_overload_count, 0 },
#endif // (wxLUA_USE_wxPointSizeRect)

    { "Close", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Close, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect)
    { "ConvertDialogToPixels", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_ConvertDialogToPixels_overload, s_wxluafunc_wxLua_wxWindow_ConvertDialogToPixels_overload_count, 0 },
    { "ConvertPixelsToDialog", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_ConvertPixelsToDialog_overload, s_wxluafunc_wxLua_wxWindow_ConvertPixelsToDialog_overload_count, 0 },
#endif // (wxLUA_USE_wxPointSizeRect)

#if wxLUA_USE_wxPointSizeRect
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Create, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "Destroy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Destroy, 1, NULL },
    { "DestroyChildren", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_DestroyChildren, 1, NULL },
    { "Disable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Disable, 1, NULL },

#if defined(__WXMSW__)
    { "DragAcceptFiles", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_DragAcceptFiles, 1, NULL },
#endif // defined(__WXMSW__)

    { "Enable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Enable, 1, NULL },
    { "FindFocus", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxWindow_FindFocus, 1, NULL },

    { "FindWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_FindWindow_overload, s_wxluafunc_wxLua_wxWindow_FindWindow_overload_count, 0 },

    { "FindWindowById", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxWindow_FindWindowById, 1, NULL },
    { "FindWindowByLabel", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxWindow_FindWindowByLabel, 1, NULL },
    { "FindWindowByName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxWindow_FindWindowByName, 1, NULL },
    { "Fit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Fit, 1, NULL },
    { "FitInside", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_FitInside, 1, NULL },
    { "Freeze", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Freeze, 1, NULL },

#if wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL
    { "GetAcceleratorTable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetAcceleratorTable, 1, NULL },
#endif // wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)
    { "GetAdjustedBestSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetAdjustedBestSize, 1, NULL },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)

#if wxLUA_USE_wxColourPenBrush
    { "GetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetBackgroundColour, 1, NULL },
#endif // wxLUA_USE_wxColourPenBrush

    { "GetBackgroundStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetBackgroundStyle, 1, NULL },

#if wxLUA_USE_wxPointSizeRect
    { "GetBestFittingSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetBestFittingSize, 1, NULL },
    { "GetBestSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetBestSize, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "GetCapture", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxWindow_GetCapture, 1, NULL },

#if wxLUA_USE_wxCaret && wxUSE_CARET
    { "GetCaret", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetCaret, 1, NULL },
#endif // wxLUA_USE_wxCaret && wxUSE_CARET

    { "GetCharHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetCharHeight, 1, NULL },
    { "GetCharWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetCharWidth, 1, NULL },

#if wxLUA_USE_wxWindowList && !wxUSE_STL
    { "GetChildren", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetChildren, 1, NULL },
#endif // wxLUA_USE_wxWindowList && !wxUSE_STL

#if wxLUA_USE_wxPointSizeRect
    { "GetClientSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetClientSize, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "GetClientSizeWH", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetClientSizeWH, 1, NULL },

#if ((wxLUA_USE_wxSizer) && (wxLUA_USE_wxLayoutConstraints && (!wxCHECK_VERSION(2,6,0)))) && (!wxCHECK_VERSION(2,6,0))
    { "GetConstraints", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetConstraints, 1, NULL },
#endif // ((wxLUA_USE_wxSizer) && (wxLUA_USE_wxLayoutConstraints && (!wxCHECK_VERSION(2,6,0)))) && (!wxCHECK_VERSION(2,6,0))

#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
    { "GetContainingSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetContainingSizer, 1, NULL },
#endif // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))

#if wxLUA_USE_wxCursor
    { "GetCursor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetCursor, 1, NULL },
#endif // wxLUA_USE_wxCursor

    { "GetDefaultAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetDefaultAttributes, 1, NULL },

#if !wxCHECK_VERSION(2,8,0)
    { "GetDefaultItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetDefaultItem, 1, NULL },
#endif // !wxCHECK_VERSION(2,8,0)

#if wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP
    { "GetDropTarget", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetDropTarget, 1, NULL },
#endif // wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP

    { "GetEventHandler", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetEventHandler, 1, NULL },
    { "GetExtraStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetExtraStyle, 1, NULL },

#if wxLUA_USE_wxFont
    { "GetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetFont, 1, NULL },
#endif // wxLUA_USE_wxFont

#if wxLUA_USE_wxColourPenBrush
    { "GetForegroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetForegroundColour, 1, NULL },
#endif // wxLUA_USE_wxColourPenBrush

    { "GetGrandParent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetGrandParent, 1, NULL },
    { "GetHandle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetHandle, 1, NULL },
    { "GetHelpText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetHelpText, 1, NULL },
    { "GetId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetId, 1, NULL },
    { "GetLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetLabel, 1, NULL },

#if wxLUA_USE_wxPointSizeRect
    { "GetMaxSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetMaxSize, 1, NULL },
    { "GetMinSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetMinSize, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "GetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetName, 1, NULL },
    { "GetParent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetParent, 1, NULL },

#if wxLUA_USE_wxPointSizeRect
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetPosition, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "GetPositionXY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetPositionXY, 1, NULL },

#if wxLUA_USE_wxPointSizeRect
    { "GetRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetRect, 1, NULL },
    { "GetScreenPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetScreenPosition, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "GetScreenPositionXY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetScreenPositionXY, 1, NULL },

#if wxLUA_USE_wxPointSizeRect
    { "GetScreenRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetScreenRect, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "GetScrollPos", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetScrollPos, 1, NULL },
    { "GetScrollRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetScrollRange, 1, NULL },
    { "GetScrollThumb", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetScrollThumb, 1, NULL },

#if wxLUA_USE_wxPointSizeRect
    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetSize, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "GetSizeWH", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetSizeWH, 1, NULL },

#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
    { "GetSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetSizer, 1, NULL },
#endif // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))

#if wxLUA_USE_wxFont
    { "GetTextExtent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetTextExtent, 1, NULL },
#endif // wxLUA_USE_wxFont

#if !wxCHECK_VERSION(2,8,0)
    { "GetTitle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetTitle, 1, NULL },
#endif // !wxCHECK_VERSION(2,8,0)

#if wxLUA_USE_wxTooltip && wxUSE_TOOLTIPS
    { "GetToolTip", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetToolTip, 1, NULL },
#endif // wxLUA_USE_wxTooltip && wxUSE_TOOLTIPS

#if wxLUA_USE_wxRegion
    { "GetUpdateRegion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetUpdateRegion, 1, NULL },
#endif // wxLUA_USE_wxRegion

#if wxLUA_USE_wxValidator && wxUSE_VALIDATORS
    { "GetValidator", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetValidator, 1, NULL },
#endif // wxLUA_USE_wxValidator && wxUSE_VALIDATORS

#if wxLUA_USE_wxPointSizeRect
    { "GetVirtualSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetVirtualSize, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "GetVirtualSizeWH", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetVirtualSizeWH, 1, NULL },
    { "GetWindowStyleFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetWindowStyleFlag, 1, NULL },
    { "GetWindowVariant", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_GetWindowVariant, 1, NULL },

#if wxCHECK_VERSION(2,4,0)
    { "HasCapture", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_HasCapture, 1, NULL },
#endif // wxCHECK_VERSION(2,4,0)

    { "HasScrollbar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_HasScrollbar, 1, NULL },
    { "HasTransparentBackground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_HasTransparentBackground, 1, NULL },
    { "Hide", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Hide, 1, NULL },
    { "InheritAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_InheritAttributes, 1, NULL },
    { "InitDialog", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_InitDialog, 1, NULL },
    { "InvalidateBestSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_InvalidateBestSize, 1, NULL },
    { "IsEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_IsEnabled, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect)
    { "IsExposed", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_IsExposed_overload, s_wxluafunc_wxLua_wxWindow_IsExposed_overload_count, 0 },
#endif // (wxLUA_USE_wxPointSizeRect)

    { "IsRetained", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_IsRetained, 1, NULL },
    { "IsShown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_IsShown, 1, NULL },
    { "IsTopLevel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_IsTopLevel, 1, NULL },
    { "Layout", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Layout, 1, NULL },
    { "Lower", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Lower, 1, NULL },
    { "MakeModal", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_MakeModal, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect)
    { "Move", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Move_overload, s_wxluafunc_wxLua_wxWindow_Move_overload_count, 0 },
#endif // (wxLUA_USE_wxPointSizeRect)

    { "MoveAfterInTabOrder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_MoveAfterInTabOrder, 1, NULL },
    { "MoveBeforeInTabOrder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_MoveBeforeInTabOrder, 1, NULL },
    { "Navigate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Navigate, 1, NULL },
    { "PopEventHandler", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_PopEventHandler, 1, NULL },

#if (wxLUA_USE_wxMenu && wxUSE_MENUS)||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxMenu && wxUSE_MENUS))
    { "PopupMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_PopupMenu_overload, s_wxluafunc_wxLua_wxWindow_PopupMenu_overload_count, 0 },
#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS)||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxMenu && wxUSE_MENUS))

    { "PushEventHandler", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_PushEventHandler, 1, NULL },
    { "Raise", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Raise, 1, NULL },

#if wxLUA_USE_wxPointSizeRect
    { "Refresh", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Refresh, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "ReleaseMouse", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_ReleaseMouse, 1, NULL },
    { "RemoveChild", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_RemoveChild, 1, NULL },
    { "RemoveEventHandler", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_RemoveEventHandler, 1, NULL },
    { "Reparent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Reparent, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect)
    { "ScreenToClient", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_ScreenToClient_overload, s_wxluafunc_wxLua_wxWindow_ScreenToClient_overload_count, 0 },
#endif // (wxLUA_USE_wxPointSizeRect)

    { "ScrollLines", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_ScrollLines, 1, NULL },
    { "ScrollPages", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_ScrollPages, 1, NULL },

#if wxLUA_USE_wxPointSizeRect
    { "ScrollWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_ScrollWindow, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

#if wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL
    { "SetAcceleratorTable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetAcceleratorTable, 1, NULL },
#endif // wxLUA_USE_wxAcceleratorTable && wxUSE_ACCEL

    { "SetAutoLayout", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetAutoLayout, 1, NULL },

#if wxLUA_USE_wxColourPenBrush
    { "SetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetBackgroundColour, 1, NULL },
#endif // wxLUA_USE_wxColourPenBrush

    { "SetBackgroundStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetBackgroundStyle, 1, NULL },

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)
    { "SetBestFittingSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetBestFittingSize, 1, NULL },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxPointSizeRect)

#if wxLUA_USE_wxCaret && wxUSE_CARET
    { "SetCaret", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetCaret, 1, NULL },
#endif // wxLUA_USE_wxCaret && wxUSE_CARET

#if (wxLUA_USE_wxPointSizeRect)
    { "SetClientSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetClientSize_overload, s_wxluafunc_wxLua_wxWindow_SetClientSize_overload_count, 0 },
#endif // (wxLUA_USE_wxPointSizeRect)

#if ((wxLUA_USE_wxSizer) && (wxLUA_USE_wxLayoutConstraints && (!wxCHECK_VERSION(2,6,0)))) && (!wxCHECK_VERSION(2,6,0))
    { "SetConstraints", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetConstraints, 1, NULL },
#endif // ((wxLUA_USE_wxSizer) && (wxLUA_USE_wxLayoutConstraints && (!wxCHECK_VERSION(2,6,0)))) && (!wxCHECK_VERSION(2,6,0))

#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
    { "SetContainingSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetContainingSizer, 1, NULL },
#endif // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))

#if wxLUA_USE_wxCursor
    { "SetCursor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetCursor, 1, NULL },
#endif // wxLUA_USE_wxCursor

#if !wxCHECK_VERSION(2,8,0)
    { "SetDefaultItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetDefaultItem, 1, NULL },
#endif // !wxCHECK_VERSION(2,8,0)

#if wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP
    { "SetDropTarget", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetDropTarget, 1, NULL },
#endif // wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP

    { "SetEventHandler", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetEventHandler, 1, NULL },
    { "SetExtraStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetExtraStyle, 1, NULL },
    { "SetFocus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetFocus, 1, NULL },

#if wxLUA_USE_wxFont
    { "SetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetFont, 1, NULL },
#endif // wxLUA_USE_wxFont

#if wxLUA_USE_wxColourPenBrush
    { "SetForegroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetForegroundColour, 1, NULL },
#endif // wxLUA_USE_wxColourPenBrush

    { "SetHelpText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetHelpText, 1, NULL },
    { "SetId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetId, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0))
    { "SetInitialSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetInitialSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0))

    { "SetLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetLabel, 1, NULL },

#if wxLUA_USE_wxPointSizeRect
    { "SetMaxSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetMaxSize, 1, NULL },
    { "SetMinSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetMinSize, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "SetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetName, 1, NULL },

#if wxLUA_USE_wxColourPenBrush
    { "SetOwnBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetOwnBackgroundColour, 1, NULL },
#endif // wxLUA_USE_wxColourPenBrush

#if wxLUA_USE_wxFont
    { "SetOwnFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetOwnFont, 1, NULL },
#endif // wxLUA_USE_wxFont

#if wxLUA_USE_wxColourPenBrush
    { "SetOwnForegroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetOwnForegroundColour, 1, NULL },
#endif // wxLUA_USE_wxColourPenBrush

    { "SetScrollPos", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetScrollPos, 1, NULL },
    { "SetScrollbar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetScrollbar, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect)
    { "SetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetSize_overload, s_wxluafunc_wxLua_wxWindow_SetSize_overload_count, 0 },
    { "SetSizeHints", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetSizeHints_overload, s_wxluafunc_wxLua_wxWindow_SetSizeHints_overload_count, 0 },
#endif // (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))
    { "SetSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetSizer, 1, NULL },
    { "SetSizerAndFit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetSizerAndFit, 1, NULL },
#endif // (wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))

    { "SetThemeEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetThemeEnabled, 1, NULL },

#if !wxCHECK_VERSION(2,8,0)
    { "SetTitle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetTitle, 1, NULL },
#endif // !wxCHECK_VERSION(2,8,0)

#if (wxLUA_USE_wxTooltip && wxUSE_TOOLTIPS)
    { "SetToolTip", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetToolTip_overload, s_wxluafunc_wxLua_wxWindow_SetToolTip_overload_count, 0 },
#endif // (wxLUA_USE_wxTooltip && wxUSE_TOOLTIPS)

#if wxLUA_USE_wxValidator && wxUSE_VALIDATORS
    { "SetValidator", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetValidator, 1, NULL },
#endif // wxLUA_USE_wxValidator && wxUSE_VALIDATORS

#if (wxLUA_USE_wxPointSizeRect)
    { "SetVirtualSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetVirtualSize_overload, s_wxluafunc_wxLua_wxWindow_SetVirtualSize_overload_count, 0 },
    { "SetVirtualSizeHints", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetVirtualSizeHints_overload, s_wxluafunc_wxLua_wxWindow_SetVirtualSizeHints_overload_count, 0 },
#endif // (wxLUA_USE_wxPointSizeRect)

    { "SetWindowStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetWindowStyle, 1, NULL },
    { "SetWindowStyleFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetWindowStyleFlag, 1, NULL },
    { "SetWindowVariant", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_SetWindowVariant, 1, NULL },
    { "ShouldInheritColours", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_ShouldInheritColours, 1, NULL },
    { "Show", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Show, 1, NULL },
    { "Thaw", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Thaw, 1, NULL },
    { "TransferDataFromWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_TransferDataFromWindow, 1, NULL },
    { "TransferDataToWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_TransferDataToWindow, 1, NULL },
    { "Update", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Update, 1, NULL },
    { "UpdateWindowUI", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_UpdateWindowUI, 1, NULL },
    { "Validate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_Validate, 1, NULL },
    { "WarpPointer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWindow_WarpPointer, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect)
    { "wxWindow", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxWindow_constructor_overload, s_wxluafunc_wxLua_wxWindow_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxPointSizeRect)

    { 0, 0, 0, 0 },
};

int wxWindow_methodCount = sizeof(wxWindow_methods)/sizeof(wxLuaBindMethod) - 1;



#if wxLUA_USE_wxWindowList && !wxUSE_STL
// ---------------------------------------------------------------------------
// Bind class wxWindowList
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxWindowList'
int wxluatype_wxWindowList = WXLUA_TUNKNOWN;



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxWindowList_methods[] = {
    { 0, 0, 0, 0 },
};

int wxWindowList_methodCount = sizeof(wxWindowList_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxWindowList && !wxUSE_STL

// ---------------------------------------------------------------------------
// Bind class wxPanel
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPanel'
int wxluatype_wxPanel = WXLUA_TUNKNOWN;

#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxPanel_Create[] = { &wxluatype_wxPanel, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxPanel_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPanel_Create[1] = {{ wxLua_wxPanel_Create, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxPanel_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxTAB_TRAVERSAL, const wxString& name = "wxPanel")
static int LUACALL wxLua_wxPanel_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxPanel"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxPanel")));
    // long style = wxTAB_TRAVERSAL
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxTAB_TRAVERSAL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxPanel * self = (wxPanel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPanel);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static wxLuaArgType s_wxluatypeArray_wxLua_wxPanel_SetFocusIgnoringChildren[] = { &wxluatype_wxPanel, NULL };
static int LUACALL wxLua_wxPanel_SetFocusIgnoringChildren(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPanel_SetFocusIgnoringChildren[1] = {{ wxLua_wxPanel_SetFocusIgnoringChildren, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPanel_SetFocusIgnoringChildren }};
//     virtual void SetFocusIgnoringChildren()
static int LUACALL wxLua_wxPanel_SetFocusIgnoringChildren(lua_State *L)
{
    // get this
    wxPanel * self = (wxPanel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPanel);
    // call SetFocusIgnoringChildren
    self->SetFocusIgnoringChildren();

    return 0;
}


#if wxLUA_USE_wxPointSizeRect
static wxLuaArgType s_wxluatypeArray_wxLua_wxPanel_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxPanel_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPanel_constructor1[1] = {{ wxLua_wxPanel_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxPanel_constructor1 }};
//     wxPanel(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxTAB_TRAVERSAL, const wxString& name = "wxPanel")
static int LUACALL wxLua_wxPanel_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxPanel"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxPanel")));
    // long style = wxTAB_TRAVERSAL
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxTAB_TRAVERSAL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxPanel* returns = new wxPanel(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPanel);

    return 1;
}

#endif // wxLUA_USE_wxPointSizeRect

static int LUACALL wxLua_wxPanel_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPanel_constructor[1] = {{ wxLua_wxPanel_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxPanel()
static int LUACALL wxLua_wxPanel_constructor(lua_State *L)
{
    // call constructor
    wxPanel* returns = new wxPanel();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPanel);

    return 1;
}



#if (wxLUA_USE_wxPointSizeRect)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPanel_constructor_overload[] =
{

#if wxLUA_USE_wxPointSizeRect
    { wxLua_wxPanel_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxPanel_constructor1 },
#endif // wxLUA_USE_wxPointSizeRect
    { wxLua_wxPanel_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxPanel_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxPanel_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxPointSizeRect)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPanel_methods[] = {
#if wxLUA_USE_wxPointSizeRect
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPanel_Create, 1, NULL },
#endif // wxLUA_USE_wxPointSizeRect

    { "SetFocusIgnoringChildren", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPanel_SetFocusIgnoringChildren, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect)
    { "wxPanel", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxPanel_constructor_overload, s_wxluafunc_wxLua_wxPanel_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxPointSizeRect)

    { 0, 0, 0, 0 },
};

int wxPanel_methodCount = sizeof(wxPanel_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxControl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxControl'
int wxluatype_wxControl = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxControl_Command[] = { &wxluatype_wxControl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxControl_Command(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControl_Command[1] = {{ wxLua_wxControl_Command, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxControl_Command }};
//     void Command(wxCommandEvent& event)
static int LUACALL wxLua_wxControl_Command(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxControl * self = (wxControl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControl);
    // call Command
    self->Command(*event);

    return 0;
}


#if (wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxControl_Create[] = { &wxluatype_wxControl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxControl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControl_Create[1] = {{ wxLua_wxControl_Create, WXLUAMETHOD_METHOD, 3, 8, s_wxluatypeArray_wxLua_wxControl_Create }};
//     bool Create(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxControl")
static int LUACALL wxLua_wxControl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxControl"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxControl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxControl * self = (wxControl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControl);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)

#if wxCHECK_VERSION(2,8,0)
static wxLuaArgType s_wxluatypeArray_wxLua_wxControl_GetLabelText[] = { &wxluatype_wxControl, NULL };
static int LUACALL wxLua_wxControl_GetLabelText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControl_GetLabelText[1] = {{ wxLua_wxControl_GetLabelText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxControl_GetLabelText }};
//     %wxchkver_2_8 wxString GetLabelText() const
static int LUACALL wxLua_wxControl_GetLabelText(lua_State *L)
{
    // get this
    wxControl * self = (wxControl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControl);
    // call GetLabelText
    wxString returns = (self->GetLabelText());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // wxCHECK_VERSION(2,8,0)

#if (wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxControl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxControl_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxControl_constructor1[1] = {{ wxLua_wxControl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 7, s_wxluatypeArray_wxLua_wxControl_constructor1 }};
//     wxControl(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxControl")
static int LUACALL wxLua_wxControl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxControl"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxControl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 6 ? (const wxValidator *)wxluaT_getuserdatatype(L, 6, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxControl* returns = new wxControl(parent, id, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxControl);

    return 1;
}

#endif // (wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxControl_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxControl_constructor[1] = {{ wxLua_wxControl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxControl()
static int LUACALL wxLua_wxControl_constructor(lua_State *L)
{
    // call constructor
    wxControl* returns = new wxControl();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxControl);

    return 1;
}



#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControl_constructor_overload[] =
{

#if (wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxControl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 7, s_wxluatypeArray_wxLua_wxControl_constructor1 },
#endif // (wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxControl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxControl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxControl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxControl_methods[] = {
    { "Command", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControl_Command, 1, NULL },

#if (wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControl_Create, 1, NULL },
#endif // (wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)

#if wxCHECK_VERSION(2,8,0)
    { "GetLabelText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControl_GetLabelText, 1, NULL },
#endif // wxCHECK_VERSION(2,8,0)

#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect))
    { "wxControl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxControl_constructor_overload, s_wxluafunc_wxLua_wxControl_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect))

    { 0, 0, 0, 0 },
};

int wxControl_methodCount = sizeof(wxControl_methods)/sizeof(wxLuaBindMethod) - 1;



#if wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL
// ---------------------------------------------------------------------------
// Bind class wxBookCtrlBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxBookCtrlBase'
int wxluatype_wxBookCtrlBase = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_AddPage[] = { &wxluatype_wxBookCtrlBase, &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBookCtrlBase_AddPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_AddPage[1] = {{ wxLua_wxBookCtrlBase_AddPage, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxBookCtrlBase_AddPage }};
//     virtual bool AddPage(wxWindow *page, const wxString& text, bool bSelect = false, int imageId = -1)
static int LUACALL wxLua_wxBookCtrlBase_AddPage(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int imageId = -1
    int imageId = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // bool bSelect = false
    bool bSelect = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : false);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // wxWindow page
    wxWindow * page = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call AddPage
    bool returns = (self->AddPage(page, text, bSelect, imageId));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_AdvanceSelection[] = { &wxluatype_wxBookCtrlBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxBookCtrlBase_AdvanceSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_AdvanceSelection[1] = {{ wxLua_wxBookCtrlBase_AdvanceSelection, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxBookCtrlBase_AdvanceSelection }};
//     void AdvanceSelection(bool forward = true)
static int LUACALL wxLua_wxBookCtrlBase_AdvanceSelection(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool forward = true
    bool forward = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call AdvanceSelection
    self->AdvanceSelection(forward);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_CalcSizeFromPage[] = { &wxluatype_wxBookCtrlBase, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxBookCtrlBase_CalcSizeFromPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_CalcSizeFromPage[1] = {{ wxLua_wxBookCtrlBase_CalcSizeFromPage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBookCtrlBase_CalcSizeFromPage }};
//     virtual wxSize CalcSizeFromPage(const wxSize& sizePage) const
static int LUACALL wxLua_wxBookCtrlBase_CalcSizeFromPage(lua_State *L)
{
    // const wxSize sizePage
    const wxSize * sizePage = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call CalcSizeFromPage
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->CalcSizeFromPage(*sizePage));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL)

#if (wxCHECK_VERSION(2,8,0)) && ((wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_ChangeSelection[] = { &wxluatype_wxBookCtrlBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxBookCtrlBase_ChangeSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_ChangeSelection[1] = {{ wxLua_wxBookCtrlBase_ChangeSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBookCtrlBase_ChangeSelection }};
//         %wxchkver_2_8 virtual int ChangeSelection(size_t n)
static int LUACALL wxLua_wxBookCtrlBase_ChangeSelection(lua_State *L)
{
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call ChangeSelection
    int returns = (self->ChangeSelection(n));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0)) && ((wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_DeleteAllPages[] = { &wxluatype_wxBookCtrlBase, NULL };
static int LUACALL wxLua_wxBookCtrlBase_DeleteAllPages(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_DeleteAllPages[1] = {{ wxLua_wxBookCtrlBase_DeleteAllPages, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBookCtrlBase_DeleteAllPages }};
//     virtual bool DeleteAllPages()
static int LUACALL wxLua_wxBookCtrlBase_DeleteAllPages(lua_State *L)
{
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call DeleteAllPages
    bool returns = (self->DeleteAllPages());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_DeletePage[] = { &wxluatype_wxBookCtrlBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxBookCtrlBase_DeletePage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_DeletePage[1] = {{ wxLua_wxBookCtrlBase_DeletePage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBookCtrlBase_DeletePage }};
//     virtual bool DeletePage(size_t n)
static int LUACALL wxLua_wxBookCtrlBase_DeletePage(lua_State *L)
{
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call DeletePage
    bool returns = (self->DeletePage(n));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_GetControlMargin[] = { &wxluatype_wxBookCtrlBase, NULL };
static int LUACALL wxLua_wxBookCtrlBase_GetControlMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_GetControlMargin[1] = {{ wxLua_wxBookCtrlBase_GetControlMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBookCtrlBase_GetControlMargin }};
//         int GetControlMargin() const
static int LUACALL wxLua_wxBookCtrlBase_GetControlMargin(lua_State *L)
{
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call GetControlMargin
    int returns = (self->GetControlMargin());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))) && ((wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_GetControlSizer[] = { &wxluatype_wxBookCtrlBase, NULL };
static int LUACALL wxLua_wxBookCtrlBase_GetControlSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_GetControlSizer[1] = {{ wxLua_wxBookCtrlBase_GetControlSizer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBookCtrlBase_GetControlSizer }};
//         wxSizer* GetControlSizer() const
static int LUACALL wxLua_wxBookCtrlBase_GetControlSizer(lua_State *L)
{
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call GetControlSizer
    wxSizer* returns = (wxSizer*)self->GetControlSizer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizer);

    return 1;
}

#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))) && ((wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_GetCurrentPage[] = { &wxluatype_wxBookCtrlBase, NULL };
static int LUACALL wxLua_wxBookCtrlBase_GetCurrentPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_GetCurrentPage[1] = {{ wxLua_wxBookCtrlBase_GetCurrentPage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBookCtrlBase_GetCurrentPage }};
//     wxWindow *GetCurrentPage() const
static int LUACALL wxLua_wxBookCtrlBase_GetCurrentPage(lua_State *L)
{
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call GetCurrentPage
    wxWindow* returns = (wxWindow*)self->GetCurrentPage();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}


#if (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_GetFitToCurrentPage[] = { &wxluatype_wxBookCtrlBase, NULL };
static int LUACALL wxLua_wxBookCtrlBase_GetFitToCurrentPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_GetFitToCurrentPage[1] = {{ wxLua_wxBookCtrlBase_GetFitToCurrentPage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBookCtrlBase_GetFitToCurrentPage }};
//         bool GetFitToCurrentPage() const
static int LUACALL wxLua_wxBookCtrlBase_GetFitToCurrentPage(lua_State *L)
{
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call GetFitToCurrentPage
    bool returns = (self->GetFitToCurrentPage());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxImageList) && (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_GetImageList[] = { &wxluatype_wxBookCtrlBase, NULL };
static int LUACALL wxLua_wxBookCtrlBase_GetImageList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_GetImageList[1] = {{ wxLua_wxBookCtrlBase_GetImageList, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBookCtrlBase_GetImageList }};
//     wxImageList* GetImageList() const
static int LUACALL wxLua_wxBookCtrlBase_GetImageList(lua_State *L)
{
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call GetImageList
    wxImageList* returns = (wxImageList*)self->GetImageList();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImageList);

    return 1;
}

#endif // (wxLUA_USE_wxImageList) && (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL)

#if (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_GetInternalBorder[] = { &wxluatype_wxBookCtrlBase, NULL };
static int LUACALL wxLua_wxBookCtrlBase_GetInternalBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_GetInternalBorder[1] = {{ wxLua_wxBookCtrlBase_GetInternalBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBookCtrlBase_GetInternalBorder }};
//         unsigned int GetInternalBorder() const
static int LUACALL wxLua_wxBookCtrlBase_GetInternalBorder(lua_State *L)
{
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call GetInternalBorder
    unsigned int returns = (self->GetInternalBorder());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_GetPage[] = { &wxluatype_wxBookCtrlBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxBookCtrlBase_GetPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_GetPage[1] = {{ wxLua_wxBookCtrlBase_GetPage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBookCtrlBase_GetPage }};
//     virtual wxWindow *GetPage(size_t n)
static int LUACALL wxLua_wxBookCtrlBase_GetPage(lua_State *L)
{
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call GetPage
    wxWindow* returns = (wxWindow*)self->GetPage(n);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_GetPageCount[] = { &wxluatype_wxBookCtrlBase, NULL };
static int LUACALL wxLua_wxBookCtrlBase_GetPageCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_GetPageCount[1] = {{ wxLua_wxBookCtrlBase_GetPageCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBookCtrlBase_GetPageCount }};
//     virtual size_t GetPageCount() const
static int LUACALL wxLua_wxBookCtrlBase_GetPageCount(lua_State *L)
{
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call GetPageCount
    size_t returns = (self->GetPageCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_GetPageImage[] = { &wxluatype_wxBookCtrlBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxBookCtrlBase_GetPageImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_GetPageImage[1] = {{ wxLua_wxBookCtrlBase_GetPageImage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBookCtrlBase_GetPageImage }};
//     virtual int GetPageImage(size_t n) const
static int LUACALL wxLua_wxBookCtrlBase_GetPageImage(lua_State *L)
{
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call GetPageImage
    int returns = (self->GetPageImage(n));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_GetPageText[] = { &wxluatype_wxBookCtrlBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxBookCtrlBase_GetPageText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_GetPageText[1] = {{ wxLua_wxBookCtrlBase_GetPageText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBookCtrlBase_GetPageText }};
//     virtual wxString GetPageText(size_t n) const
static int LUACALL wxLua_wxBookCtrlBase_GetPageText(lua_State *L)
{
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call GetPageText
    wxString returns = (self->GetPageText(n));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_GetSelection[] = { &wxluatype_wxBookCtrlBase, NULL };
static int LUACALL wxLua_wxBookCtrlBase_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_GetSelection[1] = {{ wxLua_wxBookCtrlBase_GetSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBookCtrlBase_GetSelection }};
//     virtual int  GetSelection() const
static int LUACALL wxLua_wxBookCtrlBase_GetSelection(lua_State *L)
{
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call GetSelection
    int returns = (self->GetSelection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_InsertPage[] = { &wxluatype_wxBookCtrlBase, &wxluatype_TINTEGER, &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBookCtrlBase_InsertPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_InsertPage[1] = {{ wxLua_wxBookCtrlBase_InsertPage, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxBookCtrlBase_InsertPage }};
//     virtual bool InsertPage(size_t n, wxWindow *page, const wxString& text, bool bSelect = false, int imageId = -1)
static int LUACALL wxLua_wxBookCtrlBase_InsertPage(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int imageId = -1
    int imageId = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // bool bSelect = false
    bool bSelect = (argCount >= 5 ? wxlua_getbooleantype(L, 5) : false);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 4);
    // wxWindow page
    wxWindow * page = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call InsertPage
    bool returns = (self->InsertPage(n, page, text, bSelect, imageId));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_IsVertical[] = { &wxluatype_wxBookCtrlBase, NULL };
static int LUACALL wxLua_wxBookCtrlBase_IsVertical(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_IsVertical[1] = {{ wxLua_wxBookCtrlBase_IsVertical, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBookCtrlBase_IsVertical }};
//         bool IsVertical() const
static int LUACALL wxLua_wxBookCtrlBase_IsVertical(lua_State *L)
{
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call IsVertical
    bool returns = (self->IsVertical());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_RemovePage[] = { &wxluatype_wxBookCtrlBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxBookCtrlBase_RemovePage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_RemovePage[1] = {{ wxLua_wxBookCtrlBase_RemovePage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBookCtrlBase_RemovePage }};
//     virtual bool RemovePage(size_t n)
static int LUACALL wxLua_wxBookCtrlBase_RemovePage(lua_State *L)
{
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call RemovePage
    bool returns = (self->RemovePage(n));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_SetControlMargin[] = { &wxluatype_wxBookCtrlBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBookCtrlBase_SetControlMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_SetControlMargin[1] = {{ wxLua_wxBookCtrlBase_SetControlMargin, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBookCtrlBase_SetControlMargin }};
//         void SetControlMargin(int margin)
static int LUACALL wxLua_wxBookCtrlBase_SetControlMargin(lua_State *L)
{
    // int margin
    int margin = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call SetControlMargin
    self->SetControlMargin(margin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_SetFitToCurrentPage[] = { &wxluatype_wxBookCtrlBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxBookCtrlBase_SetFitToCurrentPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_SetFitToCurrentPage[1] = {{ wxLua_wxBookCtrlBase_SetFitToCurrentPage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBookCtrlBase_SetFitToCurrentPage }};
//         void SetFitToCurrentPage(bool fit)
static int LUACALL wxLua_wxBookCtrlBase_SetFitToCurrentPage(lua_State *L)
{
    // bool fit
    bool fit = wxlua_getbooleantype(L, 2);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call SetFitToCurrentPage
    self->SetFitToCurrentPage(fit);

    return 0;
}

#endif // (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxImageList) && (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_SetImageList[] = { &wxluatype_wxBookCtrlBase, &wxluatype_wxImageList, NULL };
static int LUACALL wxLua_wxBookCtrlBase_SetImageList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_SetImageList[1] = {{ wxLua_wxBookCtrlBase_SetImageList, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBookCtrlBase_SetImageList }};
//     virtual void SetImageList(wxImageList *imageList)
static int LUACALL wxLua_wxBookCtrlBase_SetImageList(lua_State *L)
{
    // wxImageList imageList
    wxImageList * imageList = (wxImageList *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImageList);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call SetImageList
    self->SetImageList(imageList);

    return 0;
}

#endif // (wxLUA_USE_wxImageList) && (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL)

#if (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_SetInternalBorder[] = { &wxluatype_wxBookCtrlBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxBookCtrlBase_SetInternalBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_SetInternalBorder[1] = {{ wxLua_wxBookCtrlBase_SetInternalBorder, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBookCtrlBase_SetInternalBorder }};
//         void SetInternalBorder(unsigned int border)
static int LUACALL wxLua_wxBookCtrlBase_SetInternalBorder(lua_State *L)
{
    // unsigned int border
    unsigned int border = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call SetInternalBorder
    self->SetInternalBorder(border);

    return 0;
}

#endif // (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_SetPageImage[] = { &wxluatype_wxBookCtrlBase, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBookCtrlBase_SetPageImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_SetPageImage[1] = {{ wxLua_wxBookCtrlBase_SetPageImage, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxBookCtrlBase_SetPageImage }};
//     virtual bool SetPageImage(size_t n, int imageId)
static int LUACALL wxLua_wxBookCtrlBase_SetPageImage(lua_State *L)
{
    // int imageId
    int imageId = (int)wxlua_getnumbertype(L, 3);
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call SetPageImage
    bool returns = (self->SetPageImage(n, imageId));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_SetPageSize[] = { &wxluatype_wxBookCtrlBase, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxBookCtrlBase_SetPageSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_SetPageSize[1] = {{ wxLua_wxBookCtrlBase_SetPageSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBookCtrlBase_SetPageSize }};
//     virtual void SetPageSize(const wxSize& size)
static int LUACALL wxLua_wxBookCtrlBase_SetPageSize(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call SetPageSize
    self->SetPageSize(*size);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_SetPageText[] = { &wxluatype_wxBookCtrlBase, &wxluatype_TINTEGER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxBookCtrlBase_SetPageText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_SetPageText[1] = {{ wxLua_wxBookCtrlBase_SetPageText, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxBookCtrlBase_SetPageText }};
//     virtual bool SetPageText(size_t n, const wxString& strText)
static int LUACALL wxLua_wxBookCtrlBase_SetPageText(lua_State *L)
{
    // const wxString strText
    const wxString strText = wxlua_getwxStringtype(L, 3);
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call SetPageText
    bool returns = (self->SetPageText(n, strText));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBase_SetSelection[] = { &wxluatype_wxBookCtrlBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxBookCtrlBase_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBase_SetSelection[1] = {{ wxLua_wxBookCtrlBase_SetSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBookCtrlBase_SetSelection }};
//     virtual int  SetSelection(size_t n)
static int LUACALL wxLua_wxBookCtrlBase_SetSelection(lua_State *L)
{
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxBookCtrlBase * self = (wxBookCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBase);
    // call SetSelection
    int returns = (self->SetSelection(n));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxBookCtrlBase_methods[] = {
    { "AddPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_AddPage, 1, NULL },
    { "AdvanceSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_AdvanceSelection, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL)
    { "CalcSizeFromPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_CalcSizeFromPage, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL)

#if (wxCHECK_VERSION(2,8,0)) && ((wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0)))
    { "ChangeSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_ChangeSelection, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && ((wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0)))

    { "DeleteAllPages", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_DeleteAllPages, 1, NULL },
    { "DeletePage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_DeletePage, 1, NULL },

#if (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))
    { "GetControlMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_GetControlMargin, 1, NULL },
#endif // (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))

#if ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))) && ((wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0)))
    { "GetControlSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_GetControlSizer, 1, NULL },
#endif // ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0))) && ((wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0)))

    { "GetCurrentPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_GetCurrentPage, 1, NULL },

#if (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))
    { "GetFitToCurrentPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_GetFitToCurrentPage, 1, NULL },
#endif // (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxImageList) && (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL)
    { "GetImageList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_GetImageList, 1, NULL },
#endif // (wxLUA_USE_wxImageList) && (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL)

#if (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))
    { "GetInternalBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_GetInternalBorder, 1, NULL },
#endif // (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))

    { "GetPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_GetPage, 1, NULL },
    { "GetPageCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_GetPageCount, 1, NULL },
    { "GetPageImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_GetPageImage, 1, NULL },
    { "GetPageText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_GetPageText, 1, NULL },
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_GetSelection, 1, NULL },
    { "InsertPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_InsertPage, 1, NULL },

#if (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))
    { "IsVertical", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_IsVertical, 1, NULL },
#endif // (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))

    { "RemovePage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_RemovePage, 1, NULL },

#if (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))
    { "SetControlMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_SetControlMargin, 1, NULL },
    { "SetFitToCurrentPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_SetFitToCurrentPage, 1, NULL },
#endif // (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxImageList) && (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL)
    { "SetImageList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_SetImageList, 1, NULL },
#endif // (wxLUA_USE_wxImageList) && (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL)

#if (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))
    { "SetInternalBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_SetInternalBorder, 1, NULL },
#endif // (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL) && (wxCHECK_VERSION(2,8,0))

    { "SetPageImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_SetPageImage, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL)
    { "SetPageSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_SetPageSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL)

    { "SetPageText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_SetPageText, 1, NULL },
    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBase_SetSelection, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxBookCtrlBase_methodCount = sizeof(wxBookCtrlBase_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL


#if wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL
// ---------------------------------------------------------------------------
// Bind class wxBookCtrlBaseEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxBookCtrlBaseEvent'
int wxluatype_wxBookCtrlBaseEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBaseEvent_GetOldSelection[] = { &wxluatype_wxBookCtrlBaseEvent, NULL };
static int LUACALL wxLua_wxBookCtrlBaseEvent_GetOldSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBaseEvent_GetOldSelection[1] = {{ wxLua_wxBookCtrlBaseEvent_GetOldSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBookCtrlBaseEvent_GetOldSelection }};
//     int GetOldSelection() const
static int LUACALL wxLua_wxBookCtrlBaseEvent_GetOldSelection(lua_State *L)
{
    // get this
    wxBookCtrlBaseEvent * self = (wxBookCtrlBaseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBaseEvent);
    // call GetOldSelection
    int returns = (self->GetOldSelection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBaseEvent_GetSelection[] = { &wxluatype_wxBookCtrlBaseEvent, NULL };
static int LUACALL wxLua_wxBookCtrlBaseEvent_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBaseEvent_GetSelection[1] = {{ wxLua_wxBookCtrlBaseEvent_GetSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBookCtrlBaseEvent_GetSelection }};
//     int GetSelection() const         // note : must override wxCommandEvent func since it's not virtual
static int LUACALL wxLua_wxBookCtrlBaseEvent_GetSelection(lua_State *L)
{
    // get this
    wxBookCtrlBaseEvent * self = (wxBookCtrlBaseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBaseEvent);
    // call GetSelection
    int returns = (self->GetSelection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBaseEvent_SetOldSelection[] = { &wxluatype_wxBookCtrlBaseEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBookCtrlBaseEvent_SetOldSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBaseEvent_SetOldSelection[1] = {{ wxLua_wxBookCtrlBaseEvent_SetOldSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBookCtrlBaseEvent_SetOldSelection }};
//     void SetOldSelection(int page)
static int LUACALL wxLua_wxBookCtrlBaseEvent_SetOldSelection(lua_State *L)
{
    // int page
    int page = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxBookCtrlBaseEvent * self = (wxBookCtrlBaseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBaseEvent);
    // call SetOldSelection
    self->SetOldSelection(page);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBaseEvent_SetSelection[] = { &wxluatype_wxBookCtrlBaseEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBookCtrlBaseEvent_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBaseEvent_SetSelection[1] = {{ wxLua_wxBookCtrlBaseEvent_SetSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBookCtrlBaseEvent_SetSelection }};
//     void SetSelection(int page)
static int LUACALL wxLua_wxBookCtrlBaseEvent_SetSelection(lua_State *L)
{
    // int page
    int page = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxBookCtrlBaseEvent * self = (wxBookCtrlBaseEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBookCtrlBaseEvent);
    // call SetSelection
    self->SetSelection(page);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBaseEvent_delete[] = { &wxluatype_wxBookCtrlBaseEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBaseEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxBookCtrlBaseEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxBookCtrlBaseEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBookCtrlBaseEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBookCtrlBaseEvent_constructor[1] = {{ wxLua_wxBookCtrlBaseEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxBookCtrlBaseEvent_constructor }};
//     wxBookCtrlBaseEvent(wxEventType commandType = wxEVT_NULL, int winid = 0, int nSel = -1, int nOldSel = -1)
static int LUACALL wxLua_wxBookCtrlBaseEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int nOldSel = -1
    int nOldSel = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // int nSel = -1
    int nSel = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : -1);
    // int winid = 0
    int winid = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType commandType = wxEVT_NULL
    wxEventType commandType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxBookCtrlBaseEvent* returns = new wxBookCtrlBaseEvent(commandType, winid, nSel, nOldSel);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBookCtrlBaseEvent);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxBookCtrlBaseEvent_methods[] = {
    { "GetOldSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBaseEvent_GetOldSelection, 1, NULL },
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBaseEvent_GetSelection, 1, NULL },
    { "SetOldSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBaseEvent_SetOldSelection, 1, NULL },
    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBookCtrlBaseEvent_SetSelection, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxBookCtrlBaseEvent_delete, 1, NULL },
    { "wxBookCtrlBaseEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxBookCtrlBaseEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxBookCtrlBaseEvent_methodCount = sizeof(wxBookCtrlBaseEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxNotebook && wxUSE_BOOKCTRL


#if wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK
// ---------------------------------------------------------------------------
// Bind class wxNotebook
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxNotebook'
int wxluatype_wxNotebook = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)
static wxLuaArgType s_wxluatypeArray_wxLua_wxNotebook_Create[] = { &wxluatype_wxNotebook, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxNotebook_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotebook_Create[1] = {{ wxLua_wxNotebook_Create, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxNotebook_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxNotebook")
static int LUACALL wxLua_wxNotebook_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxNotebook"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxNotebook")));
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxNotebook * self = (wxNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNotebook);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)

static wxLuaArgType s_wxluatypeArray_wxLua_wxNotebook_GetRowCount[] = { &wxluatype_wxNotebook, NULL };
static int LUACALL wxLua_wxNotebook_GetRowCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotebook_GetRowCount[1] = {{ wxLua_wxNotebook_GetRowCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNotebook_GetRowCount }};
//     int GetRowCount() const
static int LUACALL wxLua_wxNotebook_GetRowCount(lua_State *L)
{
    // get this
    wxNotebook * self = (wxNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNotebook);
    // call GetRowCount
    int returns = (self->GetRowCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)
static wxLuaArgType s_wxluatypeArray_wxLua_wxNotebook_GetThemeBackgroundColour[] = { &wxluatype_wxNotebook, NULL };
static int LUACALL wxLua_wxNotebook_GetThemeBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotebook_GetThemeBackgroundColour[1] = {{ wxLua_wxNotebook_GetThemeBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxNotebook_GetThemeBackgroundColour }};
//     wxColour GetThemeBackgroundColour() const
static int LUACALL wxLua_wxNotebook_GetThemeBackgroundColour(lua_State *L)
{
    // get this
    wxNotebook * self = (wxNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNotebook);
    // call GetThemeBackgroundColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetThemeBackgroundColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)
static wxLuaArgType s_wxluatypeArray_wxLua_wxNotebook_HitTest[] = { &wxluatype_wxNotebook, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxNotebook_HitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotebook_HitTest[1] = {{ wxLua_wxNotebook_HitTest, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNotebook_HitTest }};
// %override wxLua_wxNotebook_HitTest
// int     HitTest(const wxPoint& point, int* flags)
static int LUACALL wxLua_wxNotebook_HitTest(lua_State *L)
{
    // int& flags
    long flags;
    // const wxPoint& point
    const wxPoint *point = (wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxNotebook *self = (wxNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNotebook);
    // call HitTest
    int returns = self->HitTest(*point, &flags);
    // push the result number
    lua_pushnumber(L, returns);
    // push the result flags
    lua_pushnumber(L, flags);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxNotebook_SetPadding[] = { &wxluatype_wxNotebook, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxNotebook_SetPadding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotebook_SetPadding[1] = {{ wxLua_wxNotebook_SetPadding, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxNotebook_SetPadding }};
//     void SetPadding(const wxSize& padding)
static int LUACALL wxLua_wxNotebook_SetPadding(lua_State *L)
{
    // const wxSize padding
    const wxSize * padding = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxNotebook * self = (wxNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxNotebook);
    // call SetPadding
    self->SetPadding(*padding);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxNotebook_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxNotebook_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotebook_constructor1[1] = {{ wxLua_wxNotebook_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxNotebook_constructor1 }};
//     wxNotebook(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxNotebook")
static int LUACALL wxLua_wxNotebook_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxNotebook"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxNotebook")));
    // long style = 0
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxNotebook* returns = new wxNotebook(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNotebook);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)

static int LUACALL wxLua_wxNotebook_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotebook_constructor[1] = {{ wxLua_wxNotebook_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxNotebook()
static int LUACALL wxLua_wxNotebook_constructor(lua_State *L)
{
    // call constructor
    wxNotebook* returns = new wxNotebook();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNotebook);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK))||(wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotebook_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)
    { wxLua_wxNotebook_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxNotebook_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)
    { wxLua_wxNotebook_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxNotebook_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxNotebook_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK))||(wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxNotebook_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNotebook_Create, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)

    { "GetRowCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNotebook_GetRowCount, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)
    { "GetThemeBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNotebook_GetThemeBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNotebook_HitTest, 1, NULL },
    { "SetPadding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxNotebook_SetPadding, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK))||(wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)
    { "wxNotebook", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxNotebook_constructor_overload, s_wxluafunc_wxLua_wxNotebook_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK))||(wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK)

    { 0, 0, 0, 0 },
};

int wxNotebook_methodCount = sizeof(wxNotebook_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK


#if wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK
// ---------------------------------------------------------------------------
// Bind class wxNotebookEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxNotebookEvent'
int wxluatype_wxNotebookEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxNotebookEvent_delete[] = { &wxluatype_wxNotebookEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotebookEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxNotebookEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxNotebookEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxNotebookEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxNotebookEvent_constructor[1] = {{ wxLua_wxNotebookEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxNotebookEvent_constructor }};
//     wxNotebookEvent(wxEventType eventType = wxEVT_NULL, int id = 0, int sel = -1, int oldSel = -1)
static int LUACALL wxLua_wxNotebookEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int oldSel = -1
    int oldSel = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // int sel = -1
    int sel = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : -1);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType eventType = wxEVT_NULL
    wxEventType eventType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxNotebookEvent* returns = new wxNotebookEvent(eventType, id, sel, oldSel);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxNotebookEvent);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxNotebookEvent_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxNotebookEvent_delete, 1, NULL },
    { "wxNotebookEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxNotebookEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxNotebookEvent_methodCount = sizeof(wxNotebookEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxNotebook && wxUSE_NOTEBOOK


#if wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK
// ---------------------------------------------------------------------------
// Bind class wxListbook
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxListbook'
int wxluatype_wxListbook = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListbook_Create[] = { &wxluatype_wxListbook, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxListbook_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListbook_Create[1] = {{ wxLua_wxListbook_Create, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxListbook_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxListbook")
static int LUACALL wxLua_wxListbook_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxListbook"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxListbook")));
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxListbook * self = (wxListbook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListbook);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListbook_GetListView[] = { &wxluatype_wxListbook, NULL };
static int LUACALL wxLua_wxListbook_GetListView(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListbook_GetListView[1] = {{ wxLua_wxListbook_GetListView, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListbook_GetListView }};
//     wxListView* GetListView()
static int LUACALL wxLua_wxListbook_GetListView(lua_State *L)
{
    // get this
    wxListbook * self = (wxListbook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListbook);
    // call GetListView
    wxListView* returns = (wxListView*)self->GetListView();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxListView);

    return 1;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListbook_IsVertical[] = { &wxluatype_wxListbook, NULL };
static int LUACALL wxLua_wxListbook_IsVertical(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListbook_IsVertical[1] = {{ wxLua_wxListbook_IsVertical, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListbook_IsVertical }};
//     !%wxchkver_2_8 bool IsVertical() const // in wxBookCtrlBase in 2.8
static int LUACALL wxLua_wxListbook_IsVertical(lua_State *L)
{
    // get this
    wxListbook * self = (wxListbook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListbook);
    // call IsVertical
    bool returns = (self->IsVertical());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListbook_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxListbook_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListbook_constructor1[1] = {{ wxLua_wxListbook_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxListbook_constructor1 }};
//     wxListbook(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxListbook")
static int LUACALL wxLua_wxListbook_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxListbook"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxListbook")));
    // long style = 0
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxListbook* returns = new wxListbook(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxListbook);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)

static int LUACALL wxLua_wxListbook_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListbook_constructor[1] = {{ wxLua_wxListbook_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxListbook()
static int LUACALL wxLua_wxListbook_constructor(lua_State *L)
{
    // call constructor
    wxListbook* returns = new wxListbook();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxListbook);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK))||(wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListbook_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)
    { wxLua_wxListbook_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxListbook_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)
    { wxLua_wxListbook_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxListbook_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxListbook_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK))||(wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxListbook_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListbook_Create, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)
    { "GetListView", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListbook_GetListView, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)
    { "IsVertical", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListbook_IsVertical, 1, NULL },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK))||(wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)
    { "wxListbook", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxListbook_constructor_overload, s_wxluafunc_wxLua_wxListbook_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK))||(wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK)

    { 0, 0, 0, 0 },
};

int wxListbook_methodCount = sizeof(wxListbook_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK


#if wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK
// ---------------------------------------------------------------------------
// Bind class wxListbookEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxListbookEvent'
int wxluatype_wxListbookEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxListbookEvent_delete[] = { &wxluatype_wxListbookEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListbookEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxListbookEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxListbookEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListbookEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListbookEvent_constructor[1] = {{ wxLua_wxListbookEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxListbookEvent_constructor }};
//     wxListbookEvent(wxEventType eventType = wxEVT_NULL, int id = 0, int sel = -1, int oldSel = -1)
static int LUACALL wxLua_wxListbookEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int oldSel = -1
    int oldSel = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // int sel = -1
    int sel = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : -1);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType eventType = wxEVT_NULL
    wxEventType eventType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxListbookEvent* returns = new wxListbookEvent(eventType, id, sel, oldSel);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxListbookEvent);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxListbookEvent_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxListbookEvent_delete, 1, NULL },
    { "wxListbookEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxListbookEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxListbookEvent_methodCount = sizeof(wxListbookEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxNotebook && wxLUA_USE_wxListCtrl && wxUSE_LISTBOOK


#if wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK
// ---------------------------------------------------------------------------
// Bind class wxChoicebook
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxChoicebook'
int wxluatype_wxChoicebook = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxChoicebook_Create[] = { &wxluatype_wxChoicebook, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxChoicebook_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxChoicebook_Create[1] = {{ wxLua_wxChoicebook_Create, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxChoicebook_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxChoicebook")
static int LUACALL wxLua_wxChoicebook_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxChoicebook"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxChoicebook")));
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxChoicebook * self = (wxChoicebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxChoicebook);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxChoicebook_GetChoiceCtrl[] = { &wxluatype_wxChoicebook, NULL };
static int LUACALL wxLua_wxChoicebook_GetChoiceCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxChoicebook_GetChoiceCtrl[1] = {{ wxLua_wxChoicebook_GetChoiceCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxChoicebook_GetChoiceCtrl }};
//     wxChoice* GetChoiceCtrl() const
static int LUACALL wxLua_wxChoicebook_GetChoiceCtrl(lua_State *L)
{
    // get this
    wxChoicebook * self = (wxChoicebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxChoicebook);
    // call GetChoiceCtrl
    wxChoice* returns = (wxChoice*)self->GetChoiceCtrl();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxChoice);

    return 1;
}

#endif // (wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK)
static wxLuaArgType s_wxluatypeArray_wxLua_wxChoicebook_IsVertical[] = { &wxluatype_wxChoicebook, NULL };
static int LUACALL wxLua_wxChoicebook_IsVertical(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxChoicebook_IsVertical[1] = {{ wxLua_wxChoicebook_IsVertical, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxChoicebook_IsVertical }};
//     !%wxchkver_2_8 bool IsVertical() const // in wxBookCtrlBase in 2.8
static int LUACALL wxLua_wxChoicebook_IsVertical(lua_State *L)
{
    // get this
    wxChoicebook * self = (wxChoicebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxChoicebook);
    // call IsVertical
    bool returns = (self->IsVertical());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK)

#if (wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxChoicebook_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxChoicebook_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxChoicebook_constructor1[1] = {{ wxLua_wxChoicebook_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxChoicebook_constructor1 }};
//     wxChoicebook(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxChoicebook")
static int LUACALL wxLua_wxChoicebook_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxChoicebook"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxChoicebook")));
    // long style = 0
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxChoicebook* returns = new wxChoicebook(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxChoicebook);

    return 1;
}

#endif // (wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxChoicebook_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxChoicebook_constructor[1] = {{ wxLua_wxChoicebook_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxChoicebook()
static int LUACALL wxLua_wxChoicebook_constructor(lua_State *L)
{
    // call constructor
    wxChoicebook* returns = new wxChoicebook();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxChoicebook);

    return 1;
}




#if ((wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxChoicebook_constructor_overload[] =
{

#if (wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxChoicebook_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxChoicebook_constructor1 },
#endif // (wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxChoicebook_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxChoicebook_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxChoicebook_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxChoicebook_methods[] = {
#if (wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxChoicebook_Create, 1, NULL },
#endif // (wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)
    { "GetChoiceCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxChoicebook_GetChoiceCtrl, 1, NULL },
#endif // (wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK)
    { "IsVertical", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxChoicebook_IsVertical, 1, NULL },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK)

#if ((wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK)
    { "wxChoicebook", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxChoicebook_constructor_overload, s_wxluafunc_wxLua_wxChoicebook_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK)

    { 0, 0, 0, 0 },
};

int wxChoicebook_methodCount = sizeof(wxChoicebook_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK


#if wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK
// ---------------------------------------------------------------------------
// Bind class wxChoicebookEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxChoicebookEvent'
int wxluatype_wxChoicebookEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxChoicebookEvent_delete[] = { &wxluatype_wxChoicebookEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxChoicebookEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxChoicebookEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxChoicebookEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxChoicebookEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxChoicebookEvent_constructor[1] = {{ wxLua_wxChoicebookEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxChoicebookEvent_constructor }};
//     wxChoicebookEvent(wxEventType eventType = wxEVT_NULL, int id = 0, int sel = -1, int oldSel = -1)
static int LUACALL wxLua_wxChoicebookEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int oldSel = -1
    int oldSel = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // int sel = -1
    int sel = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : -1);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType eventType = wxEVT_NULL
    wxEventType eventType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxChoicebookEvent* returns = new wxChoicebookEvent(eventType, id, sel, oldSel);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxChoicebookEvent);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxChoicebookEvent_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxChoicebookEvent_delete, 1, NULL },
    { "wxChoicebookEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxChoicebookEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxChoicebookEvent_methodCount = sizeof(wxChoicebookEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxNotebook && wxLUA_USE_wxChoice && wxUSE_CHOICEBOOK


#if wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook
// ---------------------------------------------------------------------------
// Bind class wxTreebook
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTreebook'
int wxluatype_wxTreebook = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreebook_AddPage[] = { &wxluatype_wxTreebook, &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTreebook_AddPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebook_AddPage[1] = {{ wxLua_wxTreebook_AddPage, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxTreebook_AddPage }};
//     virtual bool AddPage(wxWindow *page, const wxString& text, bool bSelect = false, int imageId = wxNOT_FOUND);
static int LUACALL wxLua_wxTreebook_AddPage(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int imageId = wxNOT_FOUND
    int imageId = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxNOT_FOUND);
    // bool bSelect = false
    bool bSelect = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : false);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // wxWindow page
    wxWindow * page = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxTreebook * self = (wxTreebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreebook);
    // call AddPage
    bool returns = (self->AddPage(page, text, bSelect, imageId));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreebook_AddSubPage[] = { &wxluatype_wxTreebook, &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTreebook_AddSubPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebook_AddSubPage[1] = {{ wxLua_wxTreebook_AddSubPage, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxTreebook_AddSubPage }};
//     virtual bool AddSubPage(wxWindow *page, const wxString& text, bool bSelect = false, int imageId = wxNOT_FOUND);
static int LUACALL wxLua_wxTreebook_AddSubPage(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int imageId = wxNOT_FOUND
    int imageId = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxNOT_FOUND);
    // bool bSelect = false
    bool bSelect = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : false);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // wxWindow page
    wxWindow * page = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxTreebook * self = (wxTreebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreebook);
    // call AddSubPage
    bool returns = (self->AddSubPage(page, text, bSelect, imageId));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreebook_CollapseNode[] = { &wxluatype_wxTreebook, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTreebook_CollapseNode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebook_CollapseNode[1] = {{ wxLua_wxTreebook_CollapseNode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreebook_CollapseNode }};
//     bool CollapseNode(size_t pos)
static int LUACALL wxLua_wxTreebook_CollapseNode(lua_State *L)
{
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxTreebook * self = (wxTreebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreebook);
    // call CollapseNode
    bool returns = (self->CollapseNode(pos));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreebook_Create[] = { &wxluatype_wxTreebook, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTreebook_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebook_Create[1] = {{ wxLua_wxTreebook_Create, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxTreebook_Create }};
//     bool Create(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxBK_DEFAULT,const wxString& name = "wxTreebook")
static int LUACALL wxLua_wxTreebook_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxTreebook"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxTreebook")));
    // long style = wxBK_DEFAULT
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxBK_DEFAULT);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxTreebook * self = (wxTreebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreebook);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreebook_ExpandNode[] = { &wxluatype_wxTreebook, &wxluatype_TINTEGER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTreebook_ExpandNode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebook_ExpandNode[1] = {{ wxLua_wxTreebook_ExpandNode, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTreebook_ExpandNode }};
//     virtual bool ExpandNode(size_t pos, bool expand = true);
static int LUACALL wxLua_wxTreebook_ExpandNode(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool expand = true
    bool expand = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxTreebook * self = (wxTreebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreebook);
    // call ExpandNode
    bool returns = (self->ExpandNode(pos, expand));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreebook_GetPageParent[] = { &wxluatype_wxTreebook, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTreebook_GetPageParent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebook_GetPageParent[1] = {{ wxLua_wxTreebook_GetPageParent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreebook_GetPageParent }};
//     int GetPageParent(size_t pos) const;
static int LUACALL wxLua_wxTreebook_GetPageParent(lua_State *L)
{
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxTreebook * self = (wxTreebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreebook);
    // call GetPageParent
    int returns = (self->GetPageParent(pos));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreebook_GetTreeCtrl[] = { &wxluatype_wxTreebook, NULL };
static int LUACALL wxLua_wxTreebook_GetTreeCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebook_GetTreeCtrl[1] = {{ wxLua_wxTreebook_GetTreeCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreebook_GetTreeCtrl }};
//     wxTreeCtrl* GetTreeCtrl() const
static int LUACALL wxLua_wxTreebook_GetTreeCtrl(lua_State *L)
{
    // get this
    wxTreebook * self = (wxTreebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreebook);
    // call GetTreeCtrl
    wxTreeCtrl* returns = (wxTreeCtrl*)self->GetTreeCtrl();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeCtrl);

    return 1;
}

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreebook_InsertPage[] = { &wxluatype_wxTreebook, &wxluatype_TINTEGER, &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTreebook_InsertPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebook_InsertPage[1] = {{ wxLua_wxTreebook_InsertPage, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxTreebook_InsertPage }};
//     virtual bool InsertPage(size_t pos, wxWindow *page, const wxString& text, bool bSelect = false, int imageId = wxNOT_FOUND);
static int LUACALL wxLua_wxTreebook_InsertPage(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int imageId = wxNOT_FOUND
    int imageId = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : wxNOT_FOUND);
    // bool bSelect = false
    bool bSelect = (argCount >= 5 ? wxlua_getbooleantype(L, 5) : false);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 4);
    // wxWindow page
    wxWindow * page = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxTreebook * self = (wxTreebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreebook);
    // call InsertPage
    bool returns = (self->InsertPage(pos, page, text, bSelect, imageId));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreebook_InsertSubPage[] = { &wxluatype_wxTreebook, &wxluatype_TINTEGER, &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTreebook_InsertSubPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebook_InsertSubPage[1] = {{ wxLua_wxTreebook_InsertSubPage, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxTreebook_InsertSubPage }};
//     virtual bool InsertSubPage(size_t pos, wxWindow *page, const wxString& text, bool bSelect = false, int imageId = wxNOT_FOUND);
static int LUACALL wxLua_wxTreebook_InsertSubPage(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int imageId = wxNOT_FOUND
    int imageId = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : wxNOT_FOUND);
    // bool bSelect = false
    bool bSelect = (argCount >= 5 ? wxlua_getbooleantype(L, 5) : false);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 4);
    // wxWindow page
    wxWindow * page = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxTreebook * self = (wxTreebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreebook);
    // call InsertSubPage
    bool returns = (self->InsertSubPage(pos, page, text, bSelect, imageId));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreebook_IsNodeExpanded[] = { &wxluatype_wxTreebook, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTreebook_IsNodeExpanded(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebook_IsNodeExpanded[1] = {{ wxLua_wxTreebook_IsNodeExpanded, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreebook_IsNodeExpanded }};
//     virtual bool IsNodeExpanded(size_t pos) const;
static int LUACALL wxLua_wxTreebook_IsNodeExpanded(lua_State *L)
{
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxTreebook * self = (wxTreebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreebook);
    // call IsNodeExpanded
    bool returns = (self->IsNodeExpanded(pos));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreebook_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTreebook_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebook_constructor1[1] = {{ wxLua_wxTreebook_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxTreebook_constructor1 }};
//     wxTreebook(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxBK_DEFAULT, const wxString& name = "wxTreebook")
static int LUACALL wxLua_wxTreebook_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxTreebook"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxTreebook")));
    // long style = wxBK_DEFAULT
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxBK_DEFAULT);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxTreebook* returns = new wxTreebook(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreebook);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)

static int LUACALL wxLua_wxTreebook_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebook_constructor[1] = {{ wxLua_wxTreebook_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTreebook()
static int LUACALL wxLua_wxTreebook_constructor(lua_State *L)
{
    // call constructor
    wxTreebook* returns = new wxTreebook();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreebook);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook))||(wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebook_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)
    { wxLua_wxTreebook_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxTreebook_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)
    { wxLua_wxTreebook_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxTreebook_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxTreebook_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook))||(wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTreebook_methods[] = {
    { "AddPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreebook_AddPage, 1, NULL },
    { "AddSubPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreebook_AddSubPage, 1, NULL },
    { "CollapseNode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreebook_CollapseNode, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreebook_Create, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)

    { "ExpandNode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreebook_ExpandNode, 1, NULL },
    { "GetPageParent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreebook_GetPageParent, 1, NULL },

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)
    { "GetTreeCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreebook_GetTreeCtrl, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)

    { "InsertPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreebook_InsertPage, 1, NULL },
    { "InsertSubPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreebook_InsertSubPage, 1, NULL },
    { "IsNodeExpanded", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreebook_IsNodeExpanded, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook))||(wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)
    { "wxTreebook", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTreebook_constructor_overload, s_wxluafunc_wxLua_wxTreebook_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook))||(wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)

    { 0, 0, 0, 0 },
};

int wxTreebook_methodCount = sizeof(wxTreebook_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook


#if wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook
// ---------------------------------------------------------------------------
// Bind class wxTreebookEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTreebookEvent'
int wxluatype_wxTreebookEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreebookEvent_delete[] = { &wxluatype_wxTreebookEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebookEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTreebookEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreebookEvent_constructor1[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTreebookEvent_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebookEvent_constructor1[1] = {{ wxLua_wxTreebookEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxTreebookEvent_constructor1 }};
//     wxTreebookEvent(wxEventType commandType = wxEVT_NULL, int id = 0, int nSel = wxNOT_FOUND, int nOldSel = wxNOT_FOUND)
static int LUACALL wxLua_wxTreebookEvent_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int nOldSel = wxNOT_FOUND
    int nOldSel = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxNOT_FOUND);
    // int nSel = wxNOT_FOUND
    int nSel = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxNOT_FOUND);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType commandType = wxEVT_NULL
    wxEventType commandType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxTreebookEvent* returns = new wxTreebookEvent(commandType, id, nSel, nOldSel);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreebookEvent);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreebookEvent_constructor[] = { &wxluatype_wxTreebookEvent, NULL };
static int LUACALL wxLua_wxTreebookEvent_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebookEvent_constructor[1] = {{ wxLua_wxTreebookEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxTreebookEvent_constructor }};
//     wxTreebookEvent(const wxTreebookEvent& event)
static int LUACALL wxLua_wxTreebookEvent_constructor(lua_State *L)
{
    // const wxTreebookEvent event
    const wxTreebookEvent * event = (const wxTreebookEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreebookEvent);
    // call constructor
    wxTreebookEvent* returns = new wxTreebookEvent(*event);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreebookEvent);

    return 1;
}




#if (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreebookEvent_constructor_overload[] =
{
    { wxLua_wxTreebookEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxTreebookEvent_constructor1 },
    { wxLua_wxTreebookEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxTreebookEvent_constructor },
};
static int s_wxluafunc_wxLua_wxTreebookEvent_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxTreebookEvent_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTreebookEvent_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTreebookEvent_delete, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)
    { "wxTreebookEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTreebookEvent_constructor_overload, s_wxluafunc_wxLua_wxTreebookEvent_constructor_overload_count, 0 },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook)

    { 0, 0, 0, 0 },
};

int wxTreebookEvent_methodCount = sizeof(wxTreebookEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(2,8,0) && wxUSE_TREEBOOK && wxLUA_USE_wxTreebook


#if wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook
// ---------------------------------------------------------------------------
// Bind class wxToolbook
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxToolbook'
int wxluatype_wxToolbook = WXLUA_TUNKNOWN;

#if (wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolbook_Create[] = { &wxluatype_wxToolbook, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxToolbook_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolbook_Create[1] = {{ wxLua_wxToolbook_Create, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxToolbook_Create }};
//     bool Create(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxToolbook")
static int LUACALL wxLua_wxToolbook_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxToolbook"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxToolbook")));
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxToolbook * self = (wxToolbook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolbook);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook) && (wxLUA_USE_wxPointSizeRect)

#if (wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook) && (wxLUA_USE_wxToolbar)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolbook_GetToolBar[] = { &wxluatype_wxToolbook, NULL };
static int LUACALL wxLua_wxToolbook_GetToolBar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolbook_GetToolBar[1] = {{ wxLua_wxToolbook_GetToolBar, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolbook_GetToolBar }};
//     wxToolBarBase* GetToolBar() const
static int LUACALL wxLua_wxToolbook_GetToolBar(lua_State *L)
{
    // get this
    wxToolbook * self = (wxToolbook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolbook);
    // call GetToolBar
    wxToolBarBase* returns = (wxToolBarBase*)self->GetToolBar();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolBarBase);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook) && (wxLUA_USE_wxToolbar)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolbook_Realize[] = { &wxluatype_wxToolbook, NULL };
static int LUACALL wxLua_wxToolbook_Realize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolbook_Realize[1] = {{ wxLua_wxToolbook_Realize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToolbook_Realize }};
//     void Realize();
static int LUACALL wxLua_wxToolbook_Realize(lua_State *L)
{
    // get this
    wxToolbook * self = (wxToolbook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolbook);
    // call Realize
    self->Realize();

    return 0;
}


#if (wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToolbook_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxToolbook_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolbook_constructor1[1] = {{ wxLua_wxToolbook_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxToolbook_constructor1 }};
//     wxToolbook(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxToolbook")
static int LUACALL wxLua_wxToolbook_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxToolbook"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxToolbook")));
    // long style = 0
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxToolbook* returns = new wxToolbook(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolbook);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxToolbook_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolbook_constructor[1] = {{ wxLua_wxToolbook_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxToolbook()
static int LUACALL wxLua_wxToolbook_constructor(lua_State *L)
{
    // call constructor
    wxToolbook* returns = new wxToolbook();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolbook);

    return 1;
}




#if ((wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook) && (wxLUA_USE_wxPointSizeRect))||(wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolbook_constructor_overload[] =
{

#if (wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxToolbook_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxToolbook_constructor1 },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxToolbook_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxToolbook_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxToolbook_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook) && (wxLUA_USE_wxPointSizeRect))||(wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxToolbook_methods[] = {
#if (wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolbook_Create, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook) && (wxLUA_USE_wxPointSizeRect)

#if (wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook) && (wxLUA_USE_wxToolbar)
    { "GetToolBar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolbook_GetToolBar, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook) && (wxLUA_USE_wxToolbar)

    { "Realize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToolbook_Realize, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook) && (wxLUA_USE_wxPointSizeRect))||(wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook)
    { "wxToolbook", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxToolbook_constructor_overload, s_wxluafunc_wxLua_wxToolbook_constructor_overload_count, 0 },
#endif // ((wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook) && (wxLUA_USE_wxPointSizeRect))||(wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook)

    { 0, 0, 0, 0 },
};

int wxToolbook_methodCount = sizeof(wxToolbook_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook


#if wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook
// ---------------------------------------------------------------------------
// Bind class wxToolbookEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxToolbookEvent'
int wxluatype_wxToolbookEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolbookEvent_delete[] = { &wxluatype_wxToolbookEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolbookEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxToolbookEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolbookEvent_constructor1[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxToolbookEvent_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolbookEvent_constructor1[1] = {{ wxLua_wxToolbookEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxToolbookEvent_constructor1 }};
//     wxToolbookEvent(wxEventType commandType = wxEVT_NULL, int id = 0, int nSel = wxNOT_FOUND, int nOldSel = wxNOT_FOUND)
static int LUACALL wxLua_wxToolbookEvent_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int nOldSel = wxNOT_FOUND
    int nOldSel = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxNOT_FOUND);
    // int nSel = wxNOT_FOUND
    int nSel = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxNOT_FOUND);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType commandType = wxEVT_NULL
    wxEventType commandType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxToolbookEvent* returns = new wxToolbookEvent(commandType, id, nSel, nOldSel);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolbookEvent);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToolbookEvent_constructor[] = { &wxluatype_wxToolbookEvent, NULL };
static int LUACALL wxLua_wxToolbookEvent_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolbookEvent_constructor[1] = {{ wxLua_wxToolbookEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxToolbookEvent_constructor }};
//     wxToolbookEvent(const wxToolbookEvent& event)
static int LUACALL wxLua_wxToolbookEvent_constructor(lua_State *L)
{
    // const wxToolbookEvent event
    const wxToolbookEvent * event = (const wxToolbookEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToolbookEvent);
    // call constructor
    wxToolbookEvent* returns = new wxToolbookEvent(*event);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToolbookEvent);

    return 1;
}




#if (wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToolbookEvent_constructor_overload[] =
{
    { wxLua_wxToolbookEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxToolbookEvent_constructor1 },
    { wxLua_wxToolbookEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxToolbookEvent_constructor },
};
static int s_wxluafunc_wxLua_wxToolbookEvent_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxToolbookEvent_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxToolbookEvent_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxToolbookEvent_delete, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook)
    { "wxToolbookEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxToolbookEvent_constructor_overload, s_wxluafunc_wxLua_wxToolbookEvent_constructor_overload_count, 0 },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook)

    { 0, 0, 0, 0 },
};

int wxToolbookEvent_methodCount = sizeof(wxToolbookEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(2,8,0) && wxUSE_TOOLBOOK && wxLUA_USE_wxToolbook


#if wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG
// ---------------------------------------------------------------------------
// Bind class wxTabCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTabCtrl'
int wxluatype_wxTabCtrl = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_DeleteAllItems[] = { &wxluatype_wxTabCtrl, NULL };
static int LUACALL wxLua_wxTabCtrl_DeleteAllItems(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_DeleteAllItems[1] = {{ wxLua_wxTabCtrl_DeleteAllItems, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTabCtrl_DeleteAllItems }};
//     bool DeleteAllItems()
static int LUACALL wxLua_wxTabCtrl_DeleteAllItems(lua_State *L)
{
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call DeleteAllItems
    bool returns = (self->DeleteAllItems());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_DeleteItem[] = { &wxluatype_wxTabCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTabCtrl_DeleteItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_DeleteItem[1] = {{ wxLua_wxTabCtrl_DeleteItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTabCtrl_DeleteItem }};
//     bool DeleteItem(int item)
static int LUACALL wxLua_wxTabCtrl_DeleteItem(lua_State *L)
{
    // int item
    int item = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call DeleteItem
    bool returns = (self->DeleteItem(item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_GetCurFocus[] = { &wxluatype_wxTabCtrl, NULL };
static int LUACALL wxLua_wxTabCtrl_GetCurFocus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_GetCurFocus[1] = {{ wxLua_wxTabCtrl_GetCurFocus, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTabCtrl_GetCurFocus }};
//     int GetCurFocus() const
static int LUACALL wxLua_wxTabCtrl_GetCurFocus(lua_State *L)
{
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call GetCurFocus
    int returns = (self->GetCurFocus());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxImageList) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_GetImageList[] = { &wxluatype_wxTabCtrl, NULL };
static int LUACALL wxLua_wxTabCtrl_GetImageList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_GetImageList[1] = {{ wxLua_wxTabCtrl_GetImageList, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTabCtrl_GetImageList }};
//     wxImageList* GetImageList() const
static int LUACALL wxLua_wxTabCtrl_GetImageList(lua_State *L)
{
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call GetImageList
    wxImageList* returns = (wxImageList*)self->GetImageList();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImageList);

    return 1;
}

#endif // (wxLUA_USE_wxImageList) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_GetItemCount[] = { &wxluatype_wxTabCtrl, NULL };
static int LUACALL wxLua_wxTabCtrl_GetItemCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_GetItemCount[1] = {{ wxLua_wxTabCtrl_GetItemCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTabCtrl_GetItemCount }};
//     int GetItemCount() const
static int LUACALL wxLua_wxTabCtrl_GetItemCount(lua_State *L)
{
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call GetItemCount
    int returns = (self->GetItemCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_GetItemData[] = { &wxluatype_wxTabCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTabCtrl_GetItemData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_GetItemData[1] = {{ wxLua_wxTabCtrl_GetItemData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTabCtrl_GetItemData }};
// %override wxLua_wxTabCtrl_GetItemData
// wxObject * GetItemData(int item) const
static int LUACALL wxLua_wxTabCtrl_GetItemData(lua_State *L)
{
    // int item
    int item = (int)wxlua_getintegertype(L, 2);
    // get this
    wxTabCtrl *self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call GetItemData
    wxObject *returns = (wxObject *) self->GetItemData(item);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxObject);
    // return the number of parameters
    return 1;
}


#endif // (wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_GetItemImage[] = { &wxluatype_wxTabCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTabCtrl_GetItemImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_GetItemImage[1] = {{ wxLua_wxTabCtrl_GetItemImage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTabCtrl_GetItemImage }};
//     int GetItemImage(int item) const
static int LUACALL wxLua_wxTabCtrl_GetItemImage(lua_State *L)
{
    // int item
    int item = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call GetItemImage
    int returns = (self->GetItemImage(item));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_GetItemRect[] = { &wxluatype_wxTabCtrl, &wxluatype_TNUMBER, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxTabCtrl_GetItemRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_GetItemRect[1] = {{ wxLua_wxTabCtrl_GetItemRect, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTabCtrl_GetItemRect }};
//     bool GetItemRect(int item, wxRect& rect) const
static int LUACALL wxLua_wxTabCtrl_GetItemRect(lua_State *L)
{
    // wxRect rect
    wxRect * rect = (wxRect *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRect);
    // int item
    int item = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call GetItemRect
    bool returns = (self->GetItemRect(item, *rect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_GetItemText[] = { &wxluatype_wxTabCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTabCtrl_GetItemText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_GetItemText[1] = {{ wxLua_wxTabCtrl_GetItemText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTabCtrl_GetItemText }};
//     wxString GetItemText(int item) const
static int LUACALL wxLua_wxTabCtrl_GetItemText(lua_State *L)
{
    // int item
    int item = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call GetItemText
    wxString returns = (self->GetItemText(item));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_GetRowCount[] = { &wxluatype_wxTabCtrl, NULL };
static int LUACALL wxLua_wxTabCtrl_GetRowCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_GetRowCount[1] = {{ wxLua_wxTabCtrl_GetRowCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTabCtrl_GetRowCount }};
//     int GetRowCount() const
static int LUACALL wxLua_wxTabCtrl_GetRowCount(lua_State *L)
{
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call GetRowCount
    int returns = (self->GetRowCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_GetSelection[] = { &wxluatype_wxTabCtrl, NULL };
static int LUACALL wxLua_wxTabCtrl_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_GetSelection[1] = {{ wxLua_wxTabCtrl_GetSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTabCtrl_GetSelection }};
//     int GetSelection() const
static int LUACALL wxLua_wxTabCtrl_GetSelection(lua_State *L)
{
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call GetSelection
    int returns = (self->GetSelection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_HitTest[] = { &wxluatype_wxTabCtrl, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxTabCtrl_HitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_HitTest[1] = {{ wxLua_wxTabCtrl_HitTest, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTabCtrl_HitTest }};
// %override wxLua_wxTabCtrl_HitTest
// int HitTest(const wxPoint& pt, long& flags)
static int LUACALL wxLua_wxTabCtrl_HitTest(lua_State *L)
{
    // long& flags
    long flags;
    // const wxPoint& pt
    const wxPoint *pt = (wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxTabCtrl *self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call HitTest
    int returns = self->HitTest(*pt, flags);
    // push the result number
    lua_pushnumber(L, returns);
    // push the result flags
    lua_pushnumber(L, flags);
    // return the number of parameters
    return 2;
}


#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

#if (wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_InsertItem[] = { &wxluatype_wxTabCtrl, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxTabCtrl_InsertItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_InsertItem[1] = {{ wxLua_wxTabCtrl_InsertItem, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxTabCtrl_InsertItem }};
//     void InsertItem(int item, const wxString& text, int imageId = -1, wxObject *clientData = NULL)
static int LUACALL wxLua_wxTabCtrl_InsertItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxObject clientData = NULL
    wxObject * clientData = (argCount >= 5 ? (wxObject *)wxluaT_getuserdatatype(L, 5, wxluatype_wxObject) : NULL);
    // int imageId = -1
    int imageId = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // int item
    int item = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call InsertItem
    self->InsertItem(item, text, imageId, clientData);

    return 0;
}

#endif // (wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

#if (wxLUA_USE_wxImageList) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_SetImageList[] = { &wxluatype_wxTabCtrl, &wxluatype_wxImageList, NULL };
static int LUACALL wxLua_wxTabCtrl_SetImageList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_SetImageList[1] = {{ wxLua_wxTabCtrl_SetImageList, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTabCtrl_SetImageList }};
//     void SetImageList(wxImageList* imageList)
static int LUACALL wxLua_wxTabCtrl_SetImageList(lua_State *L)
{
    // wxImageList imageList
    wxImageList * imageList = (wxImageList *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImageList);
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call SetImageList
    self->SetImageList(imageList);

    return 0;
}

#endif // (wxLUA_USE_wxImageList) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

#if (wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_SetItemData[] = { &wxluatype_wxTabCtrl, &wxluatype_TNUMBER, &wxluatype_wxObject, NULL };
static int LUACALL wxLua_wxTabCtrl_SetItemData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_SetItemData[1] = {{ wxLua_wxTabCtrl_SetItemData, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTabCtrl_SetItemData }};
//     bool SetItemData(int item, wxObject * data)
static int LUACALL wxLua_wxTabCtrl_SetItemData(lua_State *L)
{
    // wxObject data
    wxObject * data = (wxObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxObject);
    // int item
    int item = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call SetItemData
    bool returns = (self->SetItemData(item, data));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_SetItemImage[] = { &wxluatype_wxTabCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTabCtrl_SetItemImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_SetItemImage[1] = {{ wxLua_wxTabCtrl_SetItemImage, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTabCtrl_SetItemImage }};
//     bool SetItemImage(int item, int image)
static int LUACALL wxLua_wxTabCtrl_SetItemImage(lua_State *L)
{
    // int image
    int image = (int)wxlua_getnumbertype(L, 3);
    // int item
    int item = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call SetItemImage
    bool returns = (self->SetItemImage(item, image));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_SetItemSize[] = { &wxluatype_wxTabCtrl, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxTabCtrl_SetItemSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_SetItemSize[1] = {{ wxLua_wxTabCtrl_SetItemSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTabCtrl_SetItemSize }};
//     void SetItemSize(const wxSize& size)
static int LUACALL wxLua_wxTabCtrl_SetItemSize(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call SetItemSize
    self->SetItemSize(*size);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_SetItemText[] = { &wxluatype_wxTabCtrl, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTabCtrl_SetItemText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_SetItemText[1] = {{ wxLua_wxTabCtrl_SetItemText, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTabCtrl_SetItemText }};
//     bool SetItemText(int item, const wxString& text)
static int LUACALL wxLua_wxTabCtrl_SetItemText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // int item
    int item = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call SetItemText
    bool returns = (self->SetItemText(item, text));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_SetPadding[] = { &wxluatype_wxTabCtrl, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxTabCtrl_SetPadding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_SetPadding[1] = {{ wxLua_wxTabCtrl_SetPadding, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTabCtrl_SetPadding }};
//     void SetPadding(const wxSize& padding)
static int LUACALL wxLua_wxTabCtrl_SetPadding(lua_State *L)
{
    // const wxSize padding
    const wxSize * padding = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call SetPadding
    self->SetPadding(*padding);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_SetSelection[] = { &wxluatype_wxTabCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTabCtrl_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_SetSelection[1] = {{ wxLua_wxTabCtrl_SetSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTabCtrl_SetSelection }};
//     int SetSelection(int item)
static int LUACALL wxLua_wxTabCtrl_SetSelection(lua_State *L)
{
    // int item
    int item = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTabCtrl * self = (wxTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTabCtrl);
    // call SetSelection
    int returns = (self->SetSelection(item));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTabCtrl_constructor[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTabCtrl_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabCtrl_constructor[1] = {{ wxLua_wxTabCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxTabCtrl_constructor }};
//     wxTabCtrl(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxTabCtrl")
static int LUACALL wxLua_wxTabCtrl_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxTabCtrl"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxTabCtrl")));
    // long style = 0
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxTabCtrl* returns = new wxTabCtrl(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTabCtrl);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTabCtrl_methods[] = {
    { "DeleteAllItems", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_DeleteAllItems, 1, NULL },
    { "DeleteItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_DeleteItem, 1, NULL },
    { "GetCurFocus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_GetCurFocus, 1, NULL },

#if (wxLUA_USE_wxImageList) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
    { "GetImageList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_GetImageList, 1, NULL },
#endif // (wxLUA_USE_wxImageList) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

    { "GetItemCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_GetItemCount, 1, NULL },

#if (wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
    { "GetItemData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_GetItemData, 1, NULL },
#endif // (wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

    { "GetItemImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_GetItemImage, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
    { "GetItemRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_GetItemRect, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

    { "GetItemText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_GetItemText, 1, NULL },
    { "GetRowCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_GetRowCount, 1, NULL },
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_GetSelection, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_HitTest, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

#if (wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
    { "InsertItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_InsertItem, 1, NULL },
#endif // (wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

#if (wxLUA_USE_wxImageList) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
    { "SetImageList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_SetImageList, 1, NULL },
#endif // (wxLUA_USE_wxImageList) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

#if (wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
    { "SetItemData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_SetItemData, 1, NULL },
#endif // (wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

    { "SetItemImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_SetItemImage, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
    { "SetItemSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_SetItemSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

    { "SetItemText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_SetItemText, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
    { "SetPadding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_SetPadding, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTabCtrl_SetSelection, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)
    { "wxTabCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTabCtrl_constructor, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG)

    { 0, 0, 0, 0 },
};

int wxTabCtrl_methodCount = sizeof(wxTabCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG


#if wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG
// ---------------------------------------------------------------------------
// Bind class wxTabEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTabEvent'
int wxluatype_wxTabEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTabEvent_delete[] = { &wxluatype_wxTabEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTabEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTabEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTabEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTabEvent_constructor[1] = {{ wxLua_wxTabEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxTabEvent_constructor }};
//     wxTabEvent(wxEventType commandType = 0, int id = 0)
static int LUACALL wxLua_wxTabEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType commandType = 0
    wxEventType commandType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxTabEvent* returns = new wxTabEvent(commandType, id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTabEvent);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTabEvent_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTabEvent_delete, 1, NULL },
    { "wxTabEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTabEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTabEvent_methodCount = sizeof(wxTabEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(2,4,0) && defined(__WXMSW__) && wxLUA_USE_wxTabCtrl && wxUSE_TAB_DIALOG


#if wxLUA_USE_wxScrolledWindow
// ---------------------------------------------------------------------------
// Bind class wxScrolledWindow
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxScrolledWindow'
int wxluatype_wxScrolledWindow = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrolledWindow_CalcScrolledPosition[] = { &wxluatype_wxScrolledWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxScrolledWindow_CalcScrolledPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrolledWindow_CalcScrolledPosition[1] = {{ wxLua_wxScrolledWindow_CalcScrolledPosition, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxScrolledWindow_CalcScrolledPosition }};
// %override wxLua_wxScrolledWindow_CalcScrolledPosition
// void CalcScrolledPosition( int x, int y, int *xx, int *yy) const
static int LUACALL wxLua_wxScrolledWindow_CalcScrolledPosition(lua_State *L)
{
    int yy;
    int xx;
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxScrolledWindow *self = (wxScrolledWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrolledWindow);
    // call CalcScrolledPosition
    self->CalcScrolledPosition(x, y, &xx, &yy);
    lua_pushnumber(L, xx);
    lua_pushnumber(L, yy);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxScrolledWindow_CalcUnscrolledPosition[] = { &wxluatype_wxScrolledWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxScrolledWindow_CalcUnscrolledPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrolledWindow_CalcUnscrolledPosition[1] = {{ wxLua_wxScrolledWindow_CalcUnscrolledPosition, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxScrolledWindow_CalcUnscrolledPosition }};
// %override wxLua_wxScrolledWindow_CalcUnscrolledPosition
// void CalcUnscrolledPosition( int x, int y, int *xx, int *yy) const
static int LUACALL wxLua_wxScrolledWindow_CalcUnscrolledPosition(lua_State *L)
{
    int yy;
    int xx;
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxScrolledWindow *self = (wxScrolledWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrolledWindow);
    // call CalcUnscrolledPosition
    self->CalcUnscrolledPosition(x, y, &xx, &yy);
    lua_pushnumber(L, xx);
    lua_pushnumber(L, yy);
    // return the number of parameters
    return 2;
}



#if (wxLUA_USE_wxScrolledWindow) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxScrolledWindow_Create[] = { &wxluatype_wxScrolledWindow, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxScrolledWindow_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrolledWindow_Create[1] = {{ wxLua_wxScrolledWindow_Create, WXLUAMETHOD_METHOD, 2, 7, s_wxluatypeArray_wxLua_wxScrolledWindow_Create }};
//     bool Create(wxWindow* parent, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxHSCROLL | wxVSCROLL, const wxString& name = "wxScrolledWindow")
static int LUACALL wxLua_wxScrolledWindow_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxScrolledWindow"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxScrolledWindow")));
    // long style = wxHSCROLL | wxVSCROLL
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxHSCROLL | wxVSCROLL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = -1
    wxWindowID id = (argCount >= 3 ? (wxWindowID)wxlua_getnumbertype(L, 3) : -1);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxScrolledWindow * self = (wxScrolledWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrolledWindow);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxScrolledWindow) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrolledWindow_EnableScrolling[] = { &wxluatype_wxScrolledWindow, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxScrolledWindow_EnableScrolling(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrolledWindow_EnableScrolling[1] = {{ wxLua_wxScrolledWindow_EnableScrolling, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxScrolledWindow_EnableScrolling }};
//     void EnableScrolling(const bool xScrolling, const bool yScrolling)
static int LUACALL wxLua_wxScrolledWindow_EnableScrolling(lua_State *L)
{
    // const bool yScrolling
    const bool yScrolling = wxlua_getbooleantype(L, 3);
    // const bool xScrolling
    const bool xScrolling = wxlua_getbooleantype(L, 2);
    // get this
    wxScrolledWindow * self = (wxScrolledWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrolledWindow);
    // call EnableScrolling
    self->EnableScrolling(xScrolling, yScrolling);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrolledWindow_GetScrollPixelsPerUnit[] = { &wxluatype_wxScrolledWindow, NULL };
static int LUACALL wxLua_wxScrolledWindow_GetScrollPixelsPerUnit(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrolledWindow_GetScrollPixelsPerUnit[1] = {{ wxLua_wxScrolledWindow_GetScrollPixelsPerUnit, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxScrolledWindow_GetScrollPixelsPerUnit }};
// %override wxLua_wxScrolledWindow_GetScrollPixelsPerUnit
// void GetScrollPixelsPerUnit(int* xUnit, int* yUnit) const
static int LUACALL wxLua_wxScrolledWindow_GetScrollPixelsPerUnit(lua_State *L)
{
    int yUnit;
    int xUnit;
    // get this
    wxScrolledWindow *self = (wxScrolledWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrolledWindow);
    // call GetScrollPixelsPerUnit
    self->GetScrollPixelsPerUnit(&xUnit, &yUnit);
    lua_pushnumber(L, xUnit);
    lua_pushnumber(L, yUnit);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxScrolledWindow_GetViewStart[] = { &wxluatype_wxScrolledWindow, NULL };
static int LUACALL wxLua_wxScrolledWindow_GetViewStart(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrolledWindow_GetViewStart[1] = {{ wxLua_wxScrolledWindow_GetViewStart, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxScrolledWindow_GetViewStart }};
// %override wxLua_wxScrolledWindow_GetViewStart
// void GetViewStart(int* x, int* y) const
static int LUACALL wxLua_wxScrolledWindow_GetViewStart(lua_State *L)
{
    int y;
    int x;
    // get this
    wxScrolledWindow *self = (wxScrolledWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrolledWindow);
    // call GetViewStart
    self->GetViewStart(&x, &y);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 2;
}



#if (wxLUA_USE_wxScrolledWindow) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxScrolledWindow_PrepareDC[] = { &wxluatype_wxScrolledWindow, &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxScrolledWindow_PrepareDC(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrolledWindow_PrepareDC[1] = {{ wxLua_wxScrolledWindow_PrepareDC, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxScrolledWindow_PrepareDC }};
//     void PrepareDC(wxDC& dc)
static int LUACALL wxLua_wxScrolledWindow_PrepareDC(lua_State *L)
{
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxScrolledWindow * self = (wxScrolledWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrolledWindow);
    // call PrepareDC
    self->PrepareDC(*dc);

    return 0;
}

#endif // (wxLUA_USE_wxScrolledWindow) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrolledWindow_Scroll[] = { &wxluatype_wxScrolledWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxScrolledWindow_Scroll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrolledWindow_Scroll[1] = {{ wxLua_wxScrolledWindow_Scroll, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxScrolledWindow_Scroll }};
//     void Scroll(int x, int y)
static int LUACALL wxLua_wxScrolledWindow_Scroll(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxScrolledWindow * self = (wxScrolledWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrolledWindow);
    // call Scroll
    self->Scroll(x, y);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrolledWindow_SetScrollRate[] = { &wxluatype_wxScrolledWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxScrolledWindow_SetScrollRate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrolledWindow_SetScrollRate[1] = {{ wxLua_wxScrolledWindow_SetScrollRate, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxScrolledWindow_SetScrollRate }};
//     void SetScrollRate(int xstep, int ystep)
static int LUACALL wxLua_wxScrolledWindow_SetScrollRate(lua_State *L)
{
    // int ystep
    int ystep = (int)wxlua_getnumbertype(L, 3);
    // int xstep
    int xstep = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxScrolledWindow * self = (wxScrolledWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrolledWindow);
    // call SetScrollRate
    self->SetScrollRate(xstep, ystep);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrolledWindow_SetScrollbars[] = { &wxluatype_wxScrolledWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxScrolledWindow_SetScrollbars(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrolledWindow_SetScrollbars[1] = {{ wxLua_wxScrolledWindow_SetScrollbars, WXLUAMETHOD_METHOD, 5, 8, s_wxluatypeArray_wxLua_wxScrolledWindow_SetScrollbars }};
//     void SetScrollbars(int pixelsPerUnitX, int pixelsPerUnitY, int noUnitsX, int noUnitsY, int xPos = 0, int yPos = 0, bool noRefresh = false)
static int LUACALL wxLua_wxScrolledWindow_SetScrollbars(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool noRefresh = false
    bool noRefresh = (argCount >= 8 ? wxlua_getbooleantype(L, 8) : false);
    // int yPos = 0
    int yPos = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : 0);
    // int xPos = 0
    int xPos = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // int noUnitsY
    int noUnitsY = (int)wxlua_getnumbertype(L, 5);
    // int noUnitsX
    int noUnitsX = (int)wxlua_getnumbertype(L, 4);
    // int pixelsPerUnitY
    int pixelsPerUnitY = (int)wxlua_getnumbertype(L, 3);
    // int pixelsPerUnitX
    int pixelsPerUnitX = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxScrolledWindow * self = (wxScrolledWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrolledWindow);
    // call SetScrollbars
    self->SetScrollbars(pixelsPerUnitX, pixelsPerUnitY, noUnitsX, noUnitsY, xPos, yPos, noRefresh);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrolledWindow_SetTargetWindow[] = { &wxluatype_wxScrolledWindow, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxScrolledWindow_SetTargetWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrolledWindow_SetTargetWindow[1] = {{ wxLua_wxScrolledWindow_SetTargetWindow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxScrolledWindow_SetTargetWindow }};
//     void SetTargetWindow(wxWindow* window)
static int LUACALL wxLua_wxScrolledWindow_SetTargetWindow(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxScrolledWindow * self = (wxScrolledWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrolledWindow);
    // call SetTargetWindow
    self->SetTargetWindow(window);

    return 0;
}


#if (wxLUA_USE_wxScrolledWindow) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxScrolledWindow_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxScrolledWindow_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrolledWindow_constructor1[1] = {{ wxLua_wxScrolledWindow_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 6, s_wxluatypeArray_wxLua_wxScrolledWindow_constructor1 }};
//     wxScrolledWindow(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxHSCROLL | wxVSCROLL, const wxString& name = "wxScrolledWindow")
static int LUACALL wxLua_wxScrolledWindow_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxScrolledWindow"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxScrolledWindow")));
    // long style = wxHSCROLL | wxVSCROLL
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxHSCROLL | wxVSCROLL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxScrolledWindow* returns = new wxScrolledWindow(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxScrolledWindow);

    return 1;
}

#endif // (wxLUA_USE_wxScrolledWindow) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxScrolledWindow_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrolledWindow_constructor[1] = {{ wxLua_wxScrolledWindow_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxScrolledWindow()
static int LUACALL wxLua_wxScrolledWindow_constructor(lua_State *L)
{
    // call constructor
    wxScrolledWindow* returns = new wxScrolledWindow();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxScrolledWindow);

    return 1;
}




#if ((wxLUA_USE_wxScrolledWindow) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxScrolledWindow)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrolledWindow_constructor_overload[] =
{

#if (wxLUA_USE_wxScrolledWindow) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxScrolledWindow_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 6, s_wxluatypeArray_wxLua_wxScrolledWindow_constructor1 },
#endif // (wxLUA_USE_wxScrolledWindow) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxScrolledWindow_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxScrolledWindow_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxScrolledWindow_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxScrolledWindow) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxScrolledWindow)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxScrolledWindow_methods[] = {
    { "CalcScrolledPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrolledWindow_CalcScrolledPosition, 1, NULL },
    { "CalcUnscrolledPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrolledWindow_CalcUnscrolledPosition, 1, NULL },

#if (wxLUA_USE_wxScrolledWindow) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrolledWindow_Create, 1, NULL },
#endif // (wxLUA_USE_wxScrolledWindow) && (wxLUA_USE_wxPointSizeRect)

    { "EnableScrolling", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrolledWindow_EnableScrolling, 1, NULL },
    { "GetScrollPixelsPerUnit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrolledWindow_GetScrollPixelsPerUnit, 1, NULL },
    { "GetViewStart", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrolledWindow_GetViewStart, 1, NULL },

#if (wxLUA_USE_wxScrolledWindow) && (wxLUA_USE_wxDC)
    { "PrepareDC", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrolledWindow_PrepareDC, 1, NULL },
#endif // (wxLUA_USE_wxScrolledWindow) && (wxLUA_USE_wxDC)

    { "Scroll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrolledWindow_Scroll, 1, NULL },
    { "SetScrollRate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrolledWindow_SetScrollRate, 1, NULL },
    { "SetScrollbars", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrolledWindow_SetScrollbars, 1, NULL },
    { "SetTargetWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrolledWindow_SetTargetWindow, 1, NULL },

#if ((wxLUA_USE_wxScrolledWindow) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxScrolledWindow)
    { "wxScrolledWindow", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxScrolledWindow_constructor_overload, s_wxluafunc_wxLua_wxScrolledWindow_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxScrolledWindow) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxScrolledWindow)

    { 0, 0, 0, 0 },
};

int wxScrolledWindow_methodCount = sizeof(wxScrolledWindow_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxScrolledWindow


#if wxLUA_USE_wxSplitterWindow
// ---------------------------------------------------------------------------
// Bind class wxSplitterWindow
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSplitterWindow'
int wxluatype_wxSplitterWindow = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSplitterWindow)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_Create[] = { &wxluatype_wxSplitterWindow, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSplitterWindow_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_Create[1] = {{ wxLua_wxSplitterWindow_Create, WXLUAMETHOD_METHOD, 2, 7, s_wxluatypeArray_wxLua_wxSplitterWindow_Create }};
//     bool Create(wxWindow *parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSP_3D|wxCLIP_CHILDREN, const wxString& name = "wxSplitterWindow")
static int LUACALL wxLua_wxSplitterWindow_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxSplitterWindow"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxSplitterWindow")));
    // long style = wxSP_3D | wxCLIP_CHILDREN
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxSP_3D | wxCLIP_CHILDREN);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 3 ? (wxWindowID)wxlua_getnumbertype(L, 3) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSplitterWindow)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_GetMinimumPaneSize[] = { &wxluatype_wxSplitterWindow, NULL };
static int LUACALL wxLua_wxSplitterWindow_GetMinimumPaneSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_GetMinimumPaneSize[1] = {{ wxLua_wxSplitterWindow_GetMinimumPaneSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplitterWindow_GetMinimumPaneSize }};
//     int      GetMinimumPaneSize() const
static int LUACALL wxLua_wxSplitterWindow_GetMinimumPaneSize(lua_State *L)
{
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call GetMinimumPaneSize
    int returns = (self->GetMinimumPaneSize());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_GetSashGravity[] = { &wxluatype_wxSplitterWindow, NULL };
static int LUACALL wxLua_wxSplitterWindow_GetSashGravity(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_GetSashGravity[1] = {{ wxLua_wxSplitterWindow_GetSashGravity, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplitterWindow_GetSashGravity }};
//     double   GetSashGravity()
static int LUACALL wxLua_wxSplitterWindow_GetSashGravity(lua_State *L)
{
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call GetSashGravity
    double returns = (self->GetSashGravity());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_GetSashPosition[] = { &wxluatype_wxSplitterWindow, NULL };
static int LUACALL wxLua_wxSplitterWindow_GetSashPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_GetSashPosition[1] = {{ wxLua_wxSplitterWindow_GetSashPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplitterWindow_GetSashPosition }};
//     int      GetSashPosition()
static int LUACALL wxLua_wxSplitterWindow_GetSashPosition(lua_State *L)
{
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call GetSashPosition
    int returns = (self->GetSashPosition());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_GetSplitMode[] = { &wxluatype_wxSplitterWindow, NULL };
static int LUACALL wxLua_wxSplitterWindow_GetSplitMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_GetSplitMode[1] = {{ wxLua_wxSplitterWindow_GetSplitMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplitterWindow_GetSplitMode }};
//     int      GetSplitMode() const
static int LUACALL wxLua_wxSplitterWindow_GetSplitMode(lua_State *L)
{
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call GetSplitMode
    int returns = (self->GetSplitMode());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_GetWindow1[] = { &wxluatype_wxSplitterWindow, NULL };
static int LUACALL wxLua_wxSplitterWindow_GetWindow1(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_GetWindow1[1] = {{ wxLua_wxSplitterWindow_GetWindow1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplitterWindow_GetWindow1 }};
//     wxWindow *GetWindow1() const
static int LUACALL wxLua_wxSplitterWindow_GetWindow1(lua_State *L)
{
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call GetWindow1
    wxWindow* returns = (wxWindow*)self->GetWindow1();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_GetWindow2[] = { &wxluatype_wxSplitterWindow, NULL };
static int LUACALL wxLua_wxSplitterWindow_GetWindow2(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_GetWindow2[1] = {{ wxLua_wxSplitterWindow_GetWindow2, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplitterWindow_GetWindow2 }};
//     wxWindow *GetWindow2() const
static int LUACALL wxLua_wxSplitterWindow_GetWindow2(lua_State *L)
{
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call GetWindow2
    wxWindow* returns = (wxWindow*)self->GetWindow2();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_Initialize[] = { &wxluatype_wxSplitterWindow, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxSplitterWindow_Initialize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_Initialize[1] = {{ wxLua_wxSplitterWindow_Initialize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSplitterWindow_Initialize }};
//     void     Initialize(wxWindow* window)
static int LUACALL wxLua_wxSplitterWindow_Initialize(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call Initialize
    self->Initialize(window);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_IsSplit[] = { &wxluatype_wxSplitterWindow, NULL };
static int LUACALL wxLua_wxSplitterWindow_IsSplit(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_IsSplit[1] = {{ wxLua_wxSplitterWindow_IsSplit, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplitterWindow_IsSplit }};
//     bool     IsSplit() const
static int LUACALL wxLua_wxSplitterWindow_IsSplit(lua_State *L)
{
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call IsSplit
    bool returns = (self->IsSplit());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_ReplaceWindow[] = { &wxluatype_wxSplitterWindow, &wxluatype_wxWindow, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxSplitterWindow_ReplaceWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_ReplaceWindow[1] = {{ wxLua_wxSplitterWindow_ReplaceWindow, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSplitterWindow_ReplaceWindow }};
//     bool     ReplaceWindow(wxWindow * winOld, wxWindow * winNew)
static int LUACALL wxLua_wxSplitterWindow_ReplaceWindow(lua_State *L)
{
    // wxWindow winNew
    wxWindow * winNew = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxWindow winOld
    wxWindow * winOld = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call ReplaceWindow
    bool returns = (self->ReplaceWindow(winOld, winNew));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_SetMinimumPaneSize[] = { &wxluatype_wxSplitterWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSplitterWindow_SetMinimumPaneSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_SetMinimumPaneSize[1] = {{ wxLua_wxSplitterWindow_SetMinimumPaneSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSplitterWindow_SetMinimumPaneSize }};
//     void     SetMinimumPaneSize(int paneSize)
static int LUACALL wxLua_wxSplitterWindow_SetMinimumPaneSize(lua_State *L)
{
    // int paneSize
    int paneSize = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call SetMinimumPaneSize
    self->SetMinimumPaneSize(paneSize);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_SetSashGravity[] = { &wxluatype_wxSplitterWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSplitterWindow_SetSashGravity(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_SetSashGravity[1] = {{ wxLua_wxSplitterWindow_SetSashGravity, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSplitterWindow_SetSashGravity }};
//     void     SetSashGravity(double gravity)
static int LUACALL wxLua_wxSplitterWindow_SetSashGravity(lua_State *L)
{
    // double gravity
    double gravity = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call SetSashGravity
    self->SetSashGravity(gravity);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_SetSashPosition[] = { &wxluatype_wxSplitterWindow, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSplitterWindow_SetSashPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_SetSashPosition[1] = {{ wxLua_wxSplitterWindow_SetSashPosition, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxSplitterWindow_SetSashPosition }};
//     void     SetSashPosition(int position, const bool redraw = true)
static int LUACALL wxLua_wxSplitterWindow_SetSashPosition(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const bool redraw = true
    const bool redraw = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // int position
    int position = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call SetSashPosition
    self->SetSashPosition(position, redraw);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_SetSashSize[] = { &wxluatype_wxSplitterWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSplitterWindow_SetSashSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_SetSashSize[1] = {{ wxLua_wxSplitterWindow_SetSashSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSplitterWindow_SetSashSize }};
//     void     SetSashSize(int size)
static int LUACALL wxLua_wxSplitterWindow_SetSashSize(lua_State *L)
{
    // int size
    int size = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call SetSashSize
    self->SetSashSize(size);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_SetSplitMode[] = { &wxluatype_wxSplitterWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSplitterWindow_SetSplitMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_SetSplitMode[1] = {{ wxLua_wxSplitterWindow_SetSplitMode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSplitterWindow_SetSplitMode }};
//     void     SetSplitMode(int mode)
static int LUACALL wxLua_wxSplitterWindow_SetSplitMode(lua_State *L)
{
    // int mode
    int mode = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call SetSplitMode
    self->SetSplitMode(mode);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_SplitHorizontally[] = { &wxluatype_wxSplitterWindow, &wxluatype_wxWindow, &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSplitterWindow_SplitHorizontally(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_SplitHorizontally[1] = {{ wxLua_wxSplitterWindow_SplitHorizontally, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxSplitterWindow_SplitHorizontally }};
//     bool     SplitHorizontally(wxWindow* window1, wxWindow* window2, int sashPosition = 0)
static int LUACALL wxLua_wxSplitterWindow_SplitHorizontally(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int sashPosition = 0
    int sashPosition = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // wxWindow window2
    wxWindow * window2 = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxWindow window1
    wxWindow * window1 = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call SplitHorizontally
    bool returns = (self->SplitHorizontally(window1, window2, sashPosition));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_SplitVertically[] = { &wxluatype_wxSplitterWindow, &wxluatype_wxWindow, &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSplitterWindow_SplitVertically(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_SplitVertically[1] = {{ wxLua_wxSplitterWindow_SplitVertically, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxSplitterWindow_SplitVertically }};
//     bool     SplitVertically(wxWindow* window1, wxWindow* window2, int sashPosition = 0)
static int LUACALL wxLua_wxSplitterWindow_SplitVertically(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int sashPosition = 0
    int sashPosition = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // wxWindow window2
    wxWindow * window2 = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxWindow window1
    wxWindow * window1 = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call SplitVertically
    bool returns = (self->SplitVertically(window1, window2, sashPosition));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_Unsplit[] = { &wxluatype_wxSplitterWindow, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxSplitterWindow_Unsplit(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_Unsplit[1] = {{ wxLua_wxSplitterWindow_Unsplit, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxSplitterWindow_Unsplit }};
//     bool     Unsplit(wxWindow* toRemove = NULL)
static int LUACALL wxLua_wxSplitterWindow_Unsplit(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindow toRemove = NULL
    wxWindow * toRemove = (argCount >= 2 ? (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow) : NULL);
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call Unsplit
    bool returns = (self->Unsplit(toRemove));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_UpdateSize[] = { &wxluatype_wxSplitterWindow, NULL };
static int LUACALL wxLua_wxSplitterWindow_UpdateSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_UpdateSize[1] = {{ wxLua_wxSplitterWindow_UpdateSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplitterWindow_UpdateSize }};
//     void     UpdateSize()
static int LUACALL wxLua_wxSplitterWindow_UpdateSize(lua_State *L)
{
    // get this
    wxSplitterWindow * self = (wxSplitterWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterWindow);
    // call UpdateSize
    self->UpdateSize();

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSplitterWindow)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterWindow_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSplitterWindow_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_constructor1[1] = {{ wxLua_wxSplitterWindow_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxSplitterWindow_constructor1 }};
//     wxSplitterWindow(wxWindow* parent, wxWindowID id, const wxPoint& point = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style=wxSP_3D, const wxString& name = "wxSplitterWindow")
static int LUACALL wxLua_wxSplitterWindow_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxSplitterWindow"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxSplitterWindow")));
    // long style = wxSP_3D
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxSP_3D);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint point = wxDefaultPosition
    const wxPoint * point = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxSplitterWindow* returns = new wxSplitterWindow(parent, id, *point, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSplitterWindow);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSplitterWindow)

static int LUACALL wxLua_wxSplitterWindow_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_constructor[1] = {{ wxLua_wxSplitterWindow_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxSplitterWindow()
static int LUACALL wxLua_wxSplitterWindow_constructor(lua_State *L)
{
    // call constructor
    wxSplitterWindow* returns = new wxSplitterWindow();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSplitterWindow);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSplitterWindow))||(wxLUA_USE_wxSplitterWindow)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterWindow_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSplitterWindow)
    { wxLua_wxSplitterWindow_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxSplitterWindow_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSplitterWindow)
    { wxLua_wxSplitterWindow_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxSplitterWindow_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxSplitterWindow_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSplitterWindow))||(wxLUA_USE_wxSplitterWindow)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSplitterWindow_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSplitterWindow)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_Create, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSplitterWindow)

    { "GetMinimumPaneSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_GetMinimumPaneSize, 1, NULL },
    { "GetSashGravity", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_GetSashGravity, 1, NULL },
    { "GetSashPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_GetSashPosition, 1, NULL },
    { "GetSplitMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_GetSplitMode, 1, NULL },
    { "GetWindow1", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_GetWindow1, 1, NULL },
    { "GetWindow2", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_GetWindow2, 1, NULL },
    { "Initialize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_Initialize, 1, NULL },
    { "IsSplit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_IsSplit, 1, NULL },
    { "ReplaceWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_ReplaceWindow, 1, NULL },
    { "SetMinimumPaneSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_SetMinimumPaneSize, 1, NULL },
    { "SetSashGravity", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_SetSashGravity, 1, NULL },
    { "SetSashPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_SetSashPosition, 1, NULL },
    { "SetSashSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_SetSashSize, 1, NULL },
    { "SetSplitMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_SetSplitMode, 1, NULL },
    { "SplitHorizontally", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_SplitHorizontally, 1, NULL },
    { "SplitVertically", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_SplitVertically, 1, NULL },
    { "Unsplit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_Unsplit, 1, NULL },
    { "UpdateSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterWindow_UpdateSize, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSplitterWindow))||(wxLUA_USE_wxSplitterWindow)
    { "wxSplitterWindow", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSplitterWindow_constructor_overload, s_wxluafunc_wxLua_wxSplitterWindow_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSplitterWindow))||(wxLUA_USE_wxSplitterWindow)

    { 0, 0, 0, 0 },
};

int wxSplitterWindow_methodCount = sizeof(wxSplitterWindow_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSplitterWindow


#if wxLUA_USE_wxSplitterWindow
// ---------------------------------------------------------------------------
// Bind class wxSplitterEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSplitterEvent'
int wxluatype_wxSplitterEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterEvent_GetSashPosition[] = { &wxluatype_wxSplitterEvent, NULL };
static int LUACALL wxLua_wxSplitterEvent_GetSashPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterEvent_GetSashPosition[1] = {{ wxLua_wxSplitterEvent_GetSashPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplitterEvent_GetSashPosition }};
//     int GetSashPosition()
static int LUACALL wxLua_wxSplitterEvent_GetSashPosition(lua_State *L)
{
    // get this
    wxSplitterEvent * self = (wxSplitterEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterEvent);
    // call GetSashPosition
    int returns = (self->GetSashPosition());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterEvent_GetWindowBeingRemoved[] = { &wxluatype_wxSplitterEvent, NULL };
static int LUACALL wxLua_wxSplitterEvent_GetWindowBeingRemoved(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterEvent_GetWindowBeingRemoved[1] = {{ wxLua_wxSplitterEvent_GetWindowBeingRemoved, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplitterEvent_GetWindowBeingRemoved }};
//     wxWindow* GetWindowBeingRemoved()
static int LUACALL wxLua_wxSplitterEvent_GetWindowBeingRemoved(lua_State *L)
{
    // get this
    wxSplitterEvent * self = (wxSplitterEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterEvent);
    // call GetWindowBeingRemoved
    wxWindow* returns = (wxWindow*)self->GetWindowBeingRemoved();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterEvent_GetX[] = { &wxluatype_wxSplitterEvent, NULL };
static int LUACALL wxLua_wxSplitterEvent_GetX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterEvent_GetX[1] = {{ wxLua_wxSplitterEvent_GetX, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplitterEvent_GetX }};
//     int GetX()
static int LUACALL wxLua_wxSplitterEvent_GetX(lua_State *L)
{
    // get this
    wxSplitterEvent * self = (wxSplitterEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterEvent);
    // call GetX
    int returns = (self->GetX());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterEvent_GetY[] = { &wxluatype_wxSplitterEvent, NULL };
static int LUACALL wxLua_wxSplitterEvent_GetY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterEvent_GetY[1] = {{ wxLua_wxSplitterEvent_GetY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplitterEvent_GetY }};
//     int GetY()
static int LUACALL wxLua_wxSplitterEvent_GetY(lua_State *L)
{
    // get this
    wxSplitterEvent * self = (wxSplitterEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterEvent);
    // call GetY
    int returns = (self->GetY());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterEvent_SetSashPosition[] = { &wxluatype_wxSplitterEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSplitterEvent_SetSashPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterEvent_SetSashPosition[1] = {{ wxLua_wxSplitterEvent_SetSashPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSplitterEvent_SetSashPosition }};
//     void SetSashPosition(int pos)
static int LUACALL wxLua_wxSplitterEvent_SetSashPosition(lua_State *L)
{
    // int pos
    int pos = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSplitterEvent * self = (wxSplitterEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplitterEvent);
    // call SetSashPosition
    self->SetSashPosition(pos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterEvent_delete[] = { &wxluatype_wxSplitterEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSplitterEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplitterEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_wxSplitterWindow, NULL };
static int LUACALL wxLua_wxSplitterEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplitterEvent_constructor[1] = {{ wxLua_wxSplitterEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxSplitterEvent_constructor }};
//     wxSplitterEvent(wxEventType type = wxEVT_NULL, wxSplitterWindow *splitter = NULL)
static int LUACALL wxLua_wxSplitterEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxSplitterWindow splitter = NULL
    wxSplitterWindow * splitter = (argCount >= 2 ? (wxSplitterWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSplitterWindow) : NULL);
    // wxEventType type = wxEVT_NULL
    wxEventType type = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxSplitterEvent* returns = new wxSplitterEvent(type, splitter);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSplitterEvent);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSplitterEvent_methods[] = {
    { "GetSashPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterEvent_GetSashPosition, 1, NULL },
    { "GetWindowBeingRemoved", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterEvent_GetWindowBeingRemoved, 1, NULL },
    { "GetX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterEvent_GetX, 1, NULL },
    { "GetY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterEvent_GetY, 1, NULL },
    { "SetSashPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplitterEvent_SetSashPosition, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSplitterEvent_delete, 1, NULL },
    { "wxSplitterEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSplitterEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxSplitterEvent_methodCount = sizeof(wxSplitterEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSplitterWindow


#if wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE
// ---------------------------------------------------------------------------
// Bind class wxCollapsiblePane
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxCollapsiblePane'
int wxluatype_wxCollapsiblePane = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxCollapsiblePane_Collapse[] = { &wxluatype_wxCollapsiblePane, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxCollapsiblePane_Collapse(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCollapsiblePane_Collapse[1] = {{ wxLua_wxCollapsiblePane_Collapse, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxCollapsiblePane_Collapse }};
//     void Collapse(bool collapse = true)
static int LUACALL wxLua_wxCollapsiblePane_Collapse(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool collapse = true
    bool collapse = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxCollapsiblePane * self = (wxCollapsiblePane *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCollapsiblePane);
    // call Collapse
    self->Collapse(collapse);

    return 0;
}


#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCollapsiblePane_Create[] = { &wxluatype_wxCollapsiblePane, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxCollapsiblePane_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCollapsiblePane_Create[1] = {{ wxLua_wxCollapsiblePane_Create, WXLUAMETHOD_METHOD, 4, 9, s_wxluatypeArray_wxLua_wxCollapsiblePane_Create }};
//     bool Create(wxWindow *parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxCP_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxCollapsiblePane")
static int LUACALL wxLua_wxCollapsiblePane_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxCollapsiblePane"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxCollapsiblePane")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxCP_DEFAULT_STYLE
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxCP_DEFAULT_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 4);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxCollapsiblePane * self = (wxCollapsiblePane *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCollapsiblePane);
    // call Create
    bool returns = (self->Create(parent, id, label, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCollapsiblePane_Expand[] = { &wxluatype_wxCollapsiblePane, NULL };
static int LUACALL wxLua_wxCollapsiblePane_Expand(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCollapsiblePane_Expand[1] = {{ wxLua_wxCollapsiblePane_Expand, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCollapsiblePane_Expand }};
//     void Expand()
static int LUACALL wxLua_wxCollapsiblePane_Expand(lua_State *L)
{
    // get this
    wxCollapsiblePane * self = (wxCollapsiblePane *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCollapsiblePane);
    // call Expand
    self->Expand();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCollapsiblePane_GetPane[] = { &wxluatype_wxCollapsiblePane, NULL };
static int LUACALL wxLua_wxCollapsiblePane_GetPane(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCollapsiblePane_GetPane[1] = {{ wxLua_wxCollapsiblePane_GetPane, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCollapsiblePane_GetPane }};
//     wxWindow* GetPane() const
static int LUACALL wxLua_wxCollapsiblePane_GetPane(lua_State *L)
{
    // get this
    wxCollapsiblePane * self = (wxCollapsiblePane *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCollapsiblePane);
    // call GetPane
    wxWindow* returns = (wxWindow*)self->GetPane();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCollapsiblePane_IsCollapsed[] = { &wxluatype_wxCollapsiblePane, NULL };
static int LUACALL wxLua_wxCollapsiblePane_IsCollapsed(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCollapsiblePane_IsCollapsed[1] = {{ wxLua_wxCollapsiblePane_IsCollapsed, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCollapsiblePane_IsCollapsed }};
//     bool IsCollapsed() const
static int LUACALL wxLua_wxCollapsiblePane_IsCollapsed(lua_State *L)
{
    // get this
    wxCollapsiblePane * self = (wxCollapsiblePane *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCollapsiblePane);
    // call IsCollapsed
    bool returns = (self->IsCollapsed());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCollapsiblePane_IsExpanded[] = { &wxluatype_wxCollapsiblePane, NULL };
static int LUACALL wxLua_wxCollapsiblePane_IsExpanded(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCollapsiblePane_IsExpanded[1] = {{ wxLua_wxCollapsiblePane_IsExpanded, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCollapsiblePane_IsExpanded }};
//     bool IsExpanded() const
static int LUACALL wxLua_wxCollapsiblePane_IsExpanded(lua_State *L)
{
    // get this
    wxCollapsiblePane * self = (wxCollapsiblePane *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCollapsiblePane);
    // call IsExpanded
    bool returns = (self->IsExpanded());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCollapsiblePane_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxCollapsiblePane_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCollapsiblePane_constructor1[1] = {{ wxLua_wxCollapsiblePane_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 8, s_wxluatypeArray_wxLua_wxCollapsiblePane_constructor1 }};
//     wxCollapsiblePane(wxWindow *parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxCP_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxCollapsiblePane")
static int LUACALL wxLua_wxCollapsiblePane_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxCollapsiblePane"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxCollapsiblePane")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxCP_DEFAULT_STYLE
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxCP_DEFAULT_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxCollapsiblePane* returns = new wxCollapsiblePane(parent, id, label, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCollapsiblePane);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxCollapsiblePane_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCollapsiblePane_constructor[1] = {{ wxLua_wxCollapsiblePane_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxCollapsiblePane()
static int LUACALL wxLua_wxCollapsiblePane_constructor(lua_State *L)
{
    // call constructor
    wxCollapsiblePane* returns = new wxCollapsiblePane();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCollapsiblePane);

    return 1;
}




#if (((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCollapsiblePane_constructor_overload[] =
{

#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxCollapsiblePane_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 8, s_wxluatypeArray_wxLua_wxCollapsiblePane_constructor1 },
#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxCollapsiblePane_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxCollapsiblePane_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxCollapsiblePane_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxCollapsiblePane_methods[] = {
    { "Collapse", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCollapsiblePane_Collapse, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCollapsiblePane_Create, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

    { "Expand", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCollapsiblePane_Expand, 1, NULL },
    { "GetPane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCollapsiblePane_GetPane, 1, NULL },
    { "IsCollapsed", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCollapsiblePane_IsCollapsed, 1, NULL },
    { "IsExpanded", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCollapsiblePane_IsExpanded, 1, NULL },

#if (((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE)
    { "wxCollapsiblePane", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxCollapsiblePane_constructor_overload, s_wxluafunc_wxLua_wxCollapsiblePane_constructor_overload_count, 0 },
#endif // (((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE)

    { 0, 0, 0, 0 },
};

int wxCollapsiblePane_methodCount = sizeof(wxCollapsiblePane_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE


#if wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE
// ---------------------------------------------------------------------------
// Bind class wxCollapsiblePaneEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxCollapsiblePaneEvent'
int wxluatype_wxCollapsiblePaneEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxCollapsiblePaneEvent_GetCollapsed[] = { &wxluatype_wxCollapsiblePaneEvent, NULL };
static int LUACALL wxLua_wxCollapsiblePaneEvent_GetCollapsed(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCollapsiblePaneEvent_GetCollapsed[1] = {{ wxLua_wxCollapsiblePaneEvent_GetCollapsed, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCollapsiblePaneEvent_GetCollapsed }};
//     bool GetCollapsed() const
static int LUACALL wxLua_wxCollapsiblePaneEvent_GetCollapsed(lua_State *L)
{
    // get this
    wxCollapsiblePaneEvent * self = (wxCollapsiblePaneEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCollapsiblePaneEvent);
    // call GetCollapsed
    bool returns = (self->GetCollapsed());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCollapsiblePaneEvent_SetCollapsed[] = { &wxluatype_wxCollapsiblePaneEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxCollapsiblePaneEvent_SetCollapsed(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCollapsiblePaneEvent_SetCollapsed[1] = {{ wxLua_wxCollapsiblePaneEvent_SetCollapsed, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCollapsiblePaneEvent_SetCollapsed }};
//     void SetCollapsed(bool c)
static int LUACALL wxLua_wxCollapsiblePaneEvent_SetCollapsed(lua_State *L)
{
    // bool c
    bool c = wxlua_getbooleantype(L, 2);
    // get this
    wxCollapsiblePaneEvent * self = (wxCollapsiblePaneEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCollapsiblePaneEvent);
    // call SetCollapsed
    self->SetCollapsed(c);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCollapsiblePaneEvent_delete[] = { &wxluatype_wxCollapsiblePaneEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCollapsiblePaneEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxCollapsiblePaneEvent_delete }};


#if (wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCollapsiblePaneEvent_constructor1[] = { &wxluatype_wxObject, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxCollapsiblePaneEvent_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCollapsiblePaneEvent_constructor1[1] = {{ wxLua_wxCollapsiblePaneEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxCollapsiblePaneEvent_constructor1 }};
//     wxCollapsiblePaneEvent(wxObject *generator, int id, bool collapsed)
static int LUACALL wxLua_wxCollapsiblePaneEvent_constructor1(lua_State *L)
{
    // bool collapsed
    bool collapsed = wxlua_getbooleantype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // wxObject generator
    wxObject * generator = (wxObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxObject);
    // call constructor
    wxCollapsiblePaneEvent* returns = new wxCollapsiblePaneEvent(generator, id, collapsed);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCollapsiblePaneEvent);

    return 1;
}

#endif // (wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE)

static int LUACALL wxLua_wxCollapsiblePaneEvent_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCollapsiblePaneEvent_constructor[1] = {{ wxLua_wxCollapsiblePaneEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxCollapsiblePaneEvent()
static int LUACALL wxLua_wxCollapsiblePaneEvent_constructor(lua_State *L)
{
    // call constructor
    wxCollapsiblePaneEvent* returns = new wxCollapsiblePaneEvent();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCollapsiblePaneEvent);

    return 1;
}




#if ((wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE))||(wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCollapsiblePaneEvent_constructor_overload[] =
{

#if (wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE)
    { wxLua_wxCollapsiblePaneEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxCollapsiblePaneEvent_constructor1 },
#endif // (wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE)
    { wxLua_wxCollapsiblePaneEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxCollapsiblePaneEvent_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxCollapsiblePaneEvent_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE))||(wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxCollapsiblePaneEvent_methods[] = {
    { "GetCollapsed", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCollapsiblePaneEvent_GetCollapsed, 1, NULL },
    { "SetCollapsed", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCollapsiblePaneEvent_SetCollapsed, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxCollapsiblePaneEvent_delete, 1, NULL },

#if ((wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE))||(wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE)
    { "wxCollapsiblePaneEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxCollapsiblePaneEvent_constructor_overload, s_wxluafunc_wxLua_wxCollapsiblePaneEvent_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxObject) && (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE))||(wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE)

    { 0, 0, 0, 0 },
};

int wxCollapsiblePaneEvent_methodCount = sizeof(wxCollapsiblePaneEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxCollapsiblePane && wxUSE_COLLPANE


#if wxLUA_USE_wxStaticBox && wxUSE_STATBOX
// ---------------------------------------------------------------------------
// Bind class wxStaticBox
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxStaticBox'
int wxluatype_wxStaticBox = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX)
static wxLuaArgType s_wxluatypeArray_wxLua_wxStaticBox_Create[] = { &wxluatype_wxStaticBox, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxStaticBox_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticBox_Create[1] = {{ wxLua_wxStaticBox_Create, WXLUAMETHOD_METHOD, 4, 8, s_wxluatypeArray_wxLua_wxStaticBox_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxStaticBox")
static int LUACALL wxLua_wxStaticBox_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxStaticBox"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxStaticBox")));
    // long style = 0
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 4);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxStaticBox * self = (wxStaticBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStaticBox);
    // call Create
    bool returns = (self->Create(parent, id, label, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStaticBox_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxStaticBox_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticBox_constructor1[1] = {{ wxLua_wxStaticBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 7, s_wxluatypeArray_wxLua_wxStaticBox_constructor1 }};
//     wxStaticBox(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxStaticBox")
static int LUACALL wxLua_wxStaticBox_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxStaticBox"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxStaticBox")));
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxStaticBox* returns = new wxStaticBox(parent, id, label, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStaticBox);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX)

static int LUACALL wxLua_wxStaticBox_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticBox_constructor[1] = {{ wxLua_wxStaticBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxStaticBox()
static int LUACALL wxLua_wxStaticBox_constructor(lua_State *L)
{
    // call constructor
    wxStaticBox* returns = new wxStaticBox();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStaticBox);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX))||(wxLUA_USE_wxStaticBox && wxUSE_STATBOX)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticBox_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX)
    { wxLua_wxStaticBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 7, s_wxluatypeArray_wxLua_wxStaticBox_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX)
    { wxLua_wxStaticBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxStaticBox_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxStaticBox_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX))||(wxLUA_USE_wxStaticBox && wxUSE_STATBOX)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxStaticBox_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStaticBox_Create, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX)

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX))||(wxLUA_USE_wxStaticBox && wxUSE_STATBOX)
    { "wxStaticBox", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxStaticBox_constructor_overload, s_wxluafunc_wxLua_wxStaticBox_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticBox && wxUSE_STATBOX))||(wxLUA_USE_wxStaticBox && wxUSE_STATBOX)

    { 0, 0, 0, 0 },
};

int wxStaticBox_methodCount = sizeof(wxStaticBox_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxStaticBox && wxUSE_STATBOX


#if wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP
// ---------------------------------------------------------------------------
// Bind class wxStaticBitmap
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxStaticBitmap'
int wxluatype_wxStaticBitmap = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxStaticBitmap_Create[] = { &wxluatype_wxStaticBitmap, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxBitmap, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxStaticBitmap_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticBitmap_Create[1] = {{ wxLua_wxStaticBitmap_Create, WXLUAMETHOD_METHOD, 3, 8, s_wxluatypeArray_wxLua_wxStaticBitmap_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxBitmap& label = wxNullBitmap, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxStaticBitmap")
static int LUACALL wxLua_wxStaticBitmap_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxStaticBitmap"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxStaticBitmap")));
    // long style = 0
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxBitmap label = wxNullBitmap
    const wxBitmap * label = (argCount >= 4 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 4, wxluatype_wxBitmap) : &wxNullBitmap);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxStaticBitmap * self = (wxStaticBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStaticBitmap);
    // call Create
    bool returns = (self->Create(parent, id, *label, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxStaticBitmap_GetBitmap[] = { &wxluatype_wxStaticBitmap, NULL };
static int LUACALL wxLua_wxStaticBitmap_GetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticBitmap_GetBitmap[1] = {{ wxLua_wxStaticBitmap_GetBitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStaticBitmap_GetBitmap }};
//     wxBitmap GetBitmap() const
static int LUACALL wxLua_wxStaticBitmap_GetBitmap(lua_State *L)
{
    // get this
    wxStaticBitmap * self = (wxStaticBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStaticBitmap);
    // call GetBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetBitmap());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStaticBitmap_SetBitmap[] = { &wxluatype_wxStaticBitmap, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxStaticBitmap_SetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticBitmap_SetBitmap[1] = {{ wxLua_wxStaticBitmap_SetBitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxStaticBitmap_SetBitmap }};
//     virtual void SetBitmap(const wxBitmap& label)
static int LUACALL wxLua_wxStaticBitmap_SetBitmap(lua_State *L)
{
    // const wxBitmap label
    const wxBitmap * label = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxStaticBitmap * self = (wxStaticBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStaticBitmap);
    // call SetBitmap
    self->SetBitmap(*label);

    return 0;
}

#endif // (wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP) && (wxLUA_USE_wxBitmap)

#if ((wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxStaticBitmap_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxBitmap, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxStaticBitmap_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticBitmap_constructor1[1] = {{ wxLua_wxStaticBitmap_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 7, s_wxluatypeArray_wxLua_wxStaticBitmap_constructor1 }};
//     wxStaticBitmap(wxWindow* parent, wxWindowID id, const wxBitmap& label = wxNullBitmap, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxStaticBitmap")
static int LUACALL wxLua_wxStaticBitmap_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxStaticBitmap"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxStaticBitmap")));
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxBitmap label = wxNullBitmap
    const wxBitmap * label = (argCount >= 3 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 3, wxluatype_wxBitmap) : &wxNullBitmap);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxStaticBitmap* returns = new wxStaticBitmap(parent, id, *label, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStaticBitmap);

    return 1;
}

#endif // ((wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxStaticBitmap_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticBitmap_constructor[1] = {{ wxLua_wxStaticBitmap_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxStaticBitmap()
static int LUACALL wxLua_wxStaticBitmap_constructor(lua_State *L)
{
    // call constructor
    wxStaticBitmap* returns = new wxStaticBitmap();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStaticBitmap);

    return 1;
}




#if (((wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticBitmap_constructor_overload[] =
{

#if ((wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxStaticBitmap_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 7, s_wxluatypeArray_wxLua_wxStaticBitmap_constructor1 },
#endif // ((wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxStaticBitmap_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxStaticBitmap_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxStaticBitmap_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxStaticBitmap_methods[] = {
#if ((wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStaticBitmap_Create, 1, NULL },
#endif // ((wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP) && (wxLUA_USE_wxBitmap)
    { "GetBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStaticBitmap_GetBitmap, 1, NULL },
    { "SetBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStaticBitmap_SetBitmap, 1, NULL },
#endif // (wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP) && (wxLUA_USE_wxBitmap)

#if (((wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP)
    { "wxStaticBitmap", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxStaticBitmap_constructor_overload, s_wxluafunc_wxLua_wxStaticBitmap_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP)

    { 0, 0, 0, 0 },
};

int wxStaticBitmap_methodCount = sizeof(wxStaticBitmap_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxStaticBitmap && wxUSE_STATBMP


#if wxLUA_USE_wxStaticText && wxUSE_STATTEXT
// ---------------------------------------------------------------------------
// Bind class wxStaticText
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxStaticText'
int wxluatype_wxStaticText = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxStaticText && wxUSE_STATTEXT) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxStaticText_Create[] = { &wxluatype_wxStaticText, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxStaticText_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticText_Create[1] = {{ wxLua_wxStaticText_Create, WXLUAMETHOD_METHOD, 4, 8, s_wxluatypeArray_wxLua_wxStaticText_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxStaticText")
static int LUACALL wxLua_wxStaticText_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxStaticText"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxStaticText")));
    // long style = 0
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 4);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxStaticText * self = (wxStaticText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStaticText);
    // call Create
    bool returns = (self->Create(parent, id, label, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxStaticText && wxUSE_STATTEXT) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxStaticText_Wrap[] = { &wxluatype_wxStaticText, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxStaticText_Wrap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticText_Wrap[1] = {{ wxLua_wxStaticText_Wrap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxStaticText_Wrap }};
//     void Wrap(int width)
static int LUACALL wxLua_wxStaticText_Wrap(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxStaticText * self = (wxStaticText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStaticText);
    // call Wrap
    self->Wrap(width);

    return 0;
}


#if (wxLUA_USE_wxStaticText && wxUSE_STATTEXT) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxStaticText_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxStaticText_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticText_constructor1[1] = {{ wxLua_wxStaticText_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 7, s_wxluatypeArray_wxLua_wxStaticText_constructor1 }};
//     wxStaticText(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxStaticText")
static int LUACALL wxLua_wxStaticText_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxStaticText"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxStaticText")));
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxStaticText* returns = new wxStaticText(parent, id, label, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStaticText);

    return 1;
}

#endif // (wxLUA_USE_wxStaticText && wxUSE_STATTEXT) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxStaticText_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticText_constructor[1] = {{ wxLua_wxStaticText_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxStaticText()
static int LUACALL wxLua_wxStaticText_constructor(lua_State *L)
{
    // call constructor
    wxStaticText* returns = new wxStaticText();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStaticText);

    return 1;
}




#if ((wxLUA_USE_wxStaticText && wxUSE_STATTEXT) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxStaticText && wxUSE_STATTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticText_constructor_overload[] =
{

#if (wxLUA_USE_wxStaticText && wxUSE_STATTEXT) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxStaticText_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 7, s_wxluatypeArray_wxLua_wxStaticText_constructor1 },
#endif // (wxLUA_USE_wxStaticText && wxUSE_STATTEXT) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxStaticText_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxStaticText_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxStaticText_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxStaticText && wxUSE_STATTEXT) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxStaticText && wxUSE_STATTEXT)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxStaticText_methods[] = {
#if (wxLUA_USE_wxStaticText && wxUSE_STATTEXT) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStaticText_Create, 1, NULL },
#endif // (wxLUA_USE_wxStaticText && wxUSE_STATTEXT) && (wxLUA_USE_wxPointSizeRect)

    { "Wrap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStaticText_Wrap, 1, NULL },

#if ((wxLUA_USE_wxStaticText && wxUSE_STATTEXT) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxStaticText && wxUSE_STATTEXT)
    { "wxStaticText", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxStaticText_constructor_overload, s_wxluafunc_wxLua_wxStaticText_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxStaticText && wxUSE_STATTEXT) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxStaticText && wxUSE_STATTEXT)

    { 0, 0, 0, 0 },
};

int wxStaticText_methodCount = sizeof(wxStaticText_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxStaticText && wxUSE_STATTEXT


#if wxLUA_USE_wxStaticLine && wxUSE_STATLINE
// ---------------------------------------------------------------------------
// Bind class wxStaticLine
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxStaticLine'
int wxluatype_wxStaticLine = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticLine && wxUSE_STATLINE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxStaticLine_Create[] = { &wxluatype_wxStaticLine, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxStaticLine_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticLine_Create[1] = {{ wxLua_wxStaticLine_Create, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxStaticLine_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString& name = "wxStaticLine")
static int LUACALL wxLua_wxStaticLine_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxStaticLine"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxStaticLine")));
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxStaticLine * self = (wxStaticLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStaticLine);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticLine && wxUSE_STATLINE)

static int LUACALL wxLua_wxStaticLine_GetDefaultSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticLine_GetDefaultSize[1] = {{ wxLua_wxStaticLine_GetDefaultSize, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static int GetDefaultSize()
static int LUACALL wxLua_wxStaticLine_GetDefaultSize(lua_State *L)
{
    // call GetDefaultSize
    int returns = (wxStaticLine::GetDefaultSize());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxStaticLine_IsVertical[] = { &wxluatype_wxStaticLine, NULL };
static int LUACALL wxLua_wxStaticLine_IsVertical(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticLine_IsVertical[1] = {{ wxLua_wxStaticLine_IsVertical, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxStaticLine_IsVertical }};
//     bool IsVertical() const
static int LUACALL wxLua_wxStaticLine_IsVertical(lua_State *L)
{
    // get this
    wxStaticLine * self = (wxStaticLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxStaticLine);
    // call IsVertical
    bool returns = (self->IsVertical());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticLine && wxUSE_STATLINE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxStaticLine_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxStaticLine_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticLine_constructor1[1] = {{ wxLua_wxStaticLine_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxStaticLine_constructor1 }};
//     wxStaticLine(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxLI_HORIZONTAL, const wxString& name = "wxStaticLine")
static int LUACALL wxLua_wxStaticLine_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxStaticLine"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxStaticLine")));
    // long style = wxLI_HORIZONTAL
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxLI_HORIZONTAL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxStaticLine* returns = new wxStaticLine(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStaticLine);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticLine && wxUSE_STATLINE)

static int LUACALL wxLua_wxStaticLine_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticLine_constructor[1] = {{ wxLua_wxStaticLine_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxStaticLine()
static int LUACALL wxLua_wxStaticLine_constructor(lua_State *L)
{
    // call constructor
    wxStaticLine* returns = new wxStaticLine();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStaticLine);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticLine && wxUSE_STATLINE))||(wxLUA_USE_wxStaticLine && wxUSE_STATLINE)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxStaticLine_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticLine && wxUSE_STATLINE)
    { wxLua_wxStaticLine_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxStaticLine_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticLine && wxUSE_STATLINE)
    { wxLua_wxStaticLine_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxStaticLine_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxStaticLine_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticLine && wxUSE_STATLINE))||(wxLUA_USE_wxStaticLine && wxUSE_STATLINE)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxStaticLine_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticLine && wxUSE_STATLINE)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStaticLine_Create, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticLine && wxUSE_STATLINE)

    { "GetDefaultSize", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxStaticLine_GetDefaultSize, 1, NULL },
    { "IsVertical", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxStaticLine_IsVertical, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticLine && wxUSE_STATLINE))||(wxLUA_USE_wxStaticLine && wxUSE_STATLINE)
    { "wxStaticLine", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxStaticLine_constructor_overload, s_wxluafunc_wxLua_wxStaticLine_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxStaticLine && wxUSE_STATLINE))||(wxLUA_USE_wxStaticLine && wxUSE_STATLINE)

    { 0, 0, 0, 0 },
};

int wxStaticLine_methodCount = sizeof(wxStaticLine_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxStaticLine && wxUSE_STATLINE

