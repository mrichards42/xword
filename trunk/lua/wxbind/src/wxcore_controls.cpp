// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxcore_controls.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxcore_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif



#if wxLUA_USE_wxButton && wxUSE_BUTTON
// ---------------------------------------------------------------------------
// Bind class wxButton
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxButton'
int wxluatype_wxButton = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxButton_Create[] = { &wxluatype_wxButton, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxButton_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxButton_Create[1] = {{ wxLua_wxButton_Create, WXLUAMETHOD_METHOD, 4, 9, s_wxluatypeArray_wxLua_wxButton_Create }};
//     bool Create(wxWindow *parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxButton")
static int LUACALL wxLua_wxButton_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxButton"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxButton")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 4);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxButton * self = (wxButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxButton);
    // call Create
    bool returns = (self->Create(parent, id, label, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxButton && wxUSE_BUTTON)
static int LUACALL wxLua_wxButton_GetDefaultSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxButton_GetDefaultSize[1] = {{ wxLua_wxButton_GetDefaultSize, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxSize GetDefaultSize() // static is ok, use on existing button
static int LUACALL wxLua_wxButton_GetDefaultSize(lua_State *L)
{
    // call GetDefaultSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(wxButton::GetDefaultSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxButton && wxUSE_BUTTON)

static wxLuaArgType s_wxluatypeArray_wxLua_wxButton_SetDefault[] = { &wxluatype_wxButton, NULL };
static int LUACALL wxLua_wxButton_SetDefault(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxButton_SetDefault[1] = {{ wxLua_wxButton_SetDefault, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxButton_SetDefault }};
//     void     SetDefault()
static int LUACALL wxLua_wxButton_SetDefault(lua_State *L)
{
    // get this
    wxButton * self = (wxButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxButton);
    // call SetDefault
    self->SetDefault();

    return 0;
}


#if ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxButton_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxButton_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxButton_constructor1[1] = {{ wxLua_wxButton_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 8, s_wxluatypeArray_wxLua_wxButton_constructor1 }};
//     wxButton(wxWindow *parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxButton")
static int LUACALL wxLua_wxButton_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxButton"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxButton")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxButton* returns = new wxButton(parent, id, label, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxButton);

    return 1;
}

#endif // ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxButton_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxButton_constructor[1] = {{ wxLua_wxButton_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxButton()
static int LUACALL wxLua_wxButton_constructor(lua_State *L)
{
    // call constructor
    wxButton* returns = new wxButton();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxButton);

    return 1;
}




#if (((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxButton && wxUSE_BUTTON)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxButton_constructor_overload[] =
{

#if ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxButton_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 8, s_wxluatypeArray_wxLua_wxButton_constructor1 },
#endif // ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxButton_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxButton_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxButton_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxButton && wxUSE_BUTTON)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxButton_methods[] = {
#if ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxButton_Create, 1, NULL },
#endif // ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxButton && wxUSE_BUTTON)
    { "GetDefaultSize", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxButton_GetDefaultSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxButton && wxUSE_BUTTON)

    { "SetDefault", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxButton_SetDefault, 1, NULL },

#if (((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxButton && wxUSE_BUTTON)
    { "wxButton", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxButton_constructor_overload, s_wxluafunc_wxLua_wxButton_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxButton && wxUSE_BUTTON)

    { 0, 0, 0, 0 },
};

int wxButton_methodCount = sizeof(wxButton_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxButton && wxUSE_BUTTON


#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)
// ---------------------------------------------------------------------------
// Bind class wxBitmapButton
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxBitmapButton'
int wxluatype_wxBitmapButton = WXLUA_TUNKNOWN;

#if ((((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapButton_Create[] = { &wxluatype_wxBitmapButton, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxBitmap, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxBitmapButton_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapButton_Create[1] = {{ wxLua_wxBitmapButton_Create, WXLUAMETHOD_METHOD, 5, 9, s_wxluatypeArray_wxLua_wxBitmapButton_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxBitmap& bitmap, const wxPoint& pos, const wxSize& size = wxDefaultSize, long style = wxBU_AUTODRAW, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxBitmapButton")
static int LUACALL wxLua_wxBitmapButton_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxBitmapButton"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxBitmapButton")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxBU_AUTODRAW
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxBU_AUTODRAW);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 4, wxluatype_wxBitmap);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxBitmapButton * self = (wxBitmapButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapButton);
    // call Create
    bool returns = (self->Create(parent, id, *bitmap, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

#if ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapButton_GetBitmapDisabled[] = { &wxluatype_wxBitmapButton, NULL };
static int LUACALL wxLua_wxBitmapButton_GetBitmapDisabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapButton_GetBitmapDisabled[1] = {{ wxLua_wxBitmapButton_GetBitmapDisabled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmapButton_GetBitmapDisabled }};
//     wxBitmap GetBitmapDisabled() const
static int LUACALL wxLua_wxBitmapButton_GetBitmapDisabled(lua_State *L)
{
    // get this
    wxBitmapButton * self = (wxBitmapButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapButton);
    // call GetBitmapDisabled
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetBitmapDisabled());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapButton_GetBitmapFocus[] = { &wxluatype_wxBitmapButton, NULL };
static int LUACALL wxLua_wxBitmapButton_GetBitmapFocus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapButton_GetBitmapFocus[1] = {{ wxLua_wxBitmapButton_GetBitmapFocus, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmapButton_GetBitmapFocus }};
//     wxBitmap GetBitmapFocus() const
static int LUACALL wxLua_wxBitmapButton_GetBitmapFocus(lua_State *L)
{
    // get this
    wxBitmapButton * self = (wxBitmapButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapButton);
    // call GetBitmapFocus
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetBitmapFocus());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxBitmap) && ((wxCHECK_VERSION(2,8,0)) && ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapButton_GetBitmapHover[] = { &wxluatype_wxBitmapButton, NULL };
static int LUACALL wxLua_wxBitmapButton_GetBitmapHover(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapButton_GetBitmapHover[1] = {{ wxLua_wxBitmapButton_GetBitmapHover, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmapButton_GetBitmapHover }};
//     %wxchkver_2_8 wxBitmap GetBitmapHover() const
static int LUACALL wxLua_wxBitmapButton_GetBitmapHover(lua_State *L)
{
    // get this
    wxBitmapButton * self = (wxBitmapButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapButton);
    // call GetBitmapHover
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetBitmapHover());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && ((wxCHECK_VERSION(2,8,0)) && ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)))

#if ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapButton_GetBitmapLabel[] = { &wxluatype_wxBitmapButton, NULL };
static int LUACALL wxLua_wxBitmapButton_GetBitmapLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapButton_GetBitmapLabel[1] = {{ wxLua_wxBitmapButton_GetBitmapLabel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmapButton_GetBitmapLabel }};
//     wxBitmap GetBitmapLabel() const
static int LUACALL wxLua_wxBitmapButton_GetBitmapLabel(lua_State *L)
{
    // get this
    wxBitmapButton * self = (wxBitmapButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapButton);
    // call GetBitmapLabel
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetBitmapLabel());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapButton_GetBitmapSelected[] = { &wxluatype_wxBitmapButton, NULL };
static int LUACALL wxLua_wxBitmapButton_GetBitmapSelected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapButton_GetBitmapSelected[1] = {{ wxLua_wxBitmapButton_GetBitmapSelected, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmapButton_GetBitmapSelected }};
//     wxBitmap GetBitmapSelected() const
static int LUACALL wxLua_wxBitmapButton_GetBitmapSelected(lua_State *L)
{
    // get this
    wxBitmapButton * self = (wxBitmapButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapButton);
    // call GetBitmapSelected
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetBitmapSelected());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapButton_SetBitmapDisabled[] = { &wxluatype_wxBitmapButton, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmapButton_SetBitmapDisabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapButton_SetBitmapDisabled[1] = {{ wxLua_wxBitmapButton_SetBitmapDisabled, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmapButton_SetBitmapDisabled }};
//     void     SetBitmapDisabled(const wxBitmap& bitmap)
static int LUACALL wxLua_wxBitmapButton_SetBitmapDisabled(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxBitmapButton * self = (wxBitmapButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapButton);
    // call SetBitmapDisabled
    self->SetBitmapDisabled(*bitmap);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapButton_SetBitmapFocus[] = { &wxluatype_wxBitmapButton, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmapButton_SetBitmapFocus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapButton_SetBitmapFocus[1] = {{ wxLua_wxBitmapButton_SetBitmapFocus, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmapButton_SetBitmapFocus }};
//     void     SetBitmapFocus(const wxBitmap& bitmap)
static int LUACALL wxLua_wxBitmapButton_SetBitmapFocus(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxBitmapButton * self = (wxBitmapButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapButton);
    // call SetBitmapFocus
    self->SetBitmapFocus(*bitmap);

    return 0;
}

#endif // ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxBitmap) && ((wxCHECK_VERSION(2,8,0)) && ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapButton_SetBitmapHover[] = { &wxluatype_wxBitmapButton, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmapButton_SetBitmapHover(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapButton_SetBitmapHover[1] = {{ wxLua_wxBitmapButton_SetBitmapHover, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmapButton_SetBitmapHover }};
//     %wxchkver_2_8 void SetBitmapHover(const wxBitmap& hover)
static int LUACALL wxLua_wxBitmapButton_SetBitmapHover(lua_State *L)
{
    // const wxBitmap hover
    const wxBitmap * hover = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxBitmapButton * self = (wxBitmapButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapButton);
    // call SetBitmapHover
    self->SetBitmapHover(*hover);

    return 0;
}

#endif // (wxLUA_USE_wxBitmap) && ((wxCHECK_VERSION(2,8,0)) && ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)))

#if ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapButton_SetBitmapLabel[] = { &wxluatype_wxBitmapButton, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmapButton_SetBitmapLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapButton_SetBitmapLabel[1] = {{ wxLua_wxBitmapButton_SetBitmapLabel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmapButton_SetBitmapLabel }};
//     void     SetBitmapLabel(const wxBitmap& bitmap)
static int LUACALL wxLua_wxBitmapButton_SetBitmapLabel(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxBitmapButton * self = (wxBitmapButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapButton);
    // call SetBitmapLabel
    self->SetBitmapLabel(*bitmap);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapButton_SetBitmapSelected[] = { &wxluatype_wxBitmapButton, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmapButton_SetBitmapSelected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapButton_SetBitmapSelected[1] = {{ wxLua_wxBitmapButton_SetBitmapSelected, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmapButton_SetBitmapSelected }};
//     void     SetBitmapSelected(const wxBitmap& bitmap)
static int LUACALL wxLua_wxBitmapButton_SetBitmapSelected(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxBitmapButton * self = (wxBitmapButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapButton);
    // call SetBitmapSelected
    self->SetBitmapSelected(*bitmap);

    return 0;
}

#endif // ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)

#if ((((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapButton_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxBitmap, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxBitmapButton_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapButton_constructor1[1] = {{ wxLua_wxBitmapButton_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 8, s_wxluatypeArray_wxLua_wxBitmapButton_constructor1 }};
//     wxBitmapButton( wxWindow* parent, wxWindowID id, const wxBitmap& bitmap, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxBU_AUTODRAW, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxBitmapButton")
static int LUACALL wxLua_wxBitmapButton_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxBitmapButton"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxBitmapButton")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxBU_AUTODRAW
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxBU_AUTODRAW);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 3, wxluatype_wxBitmap);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxBitmapButton* returns = new wxBitmapButton(parent, id, *bitmap, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmapButton);

    return 1;
}

#endif // ((((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxBitmapButton_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapButton_constructor[1] = {{ wxLua_wxBitmapButton_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxBitmapButton()
static int LUACALL wxLua_wxBitmapButton_constructor(lua_State *L)
{
    // call constructor
    wxBitmapButton* returns = new wxBitmapButton();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmapButton);

    return 1;
}




#if (((((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapButton_constructor_overload[] =
{

#if ((((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxBitmapButton_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 8, s_wxluatypeArray_wxLua_wxBitmapButton_constructor1 },
#endif // ((((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxBitmapButton_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxBitmapButton_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxBitmapButton_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxBitmapButton_methods[] = {
#if ((((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapButton_Create, 1, NULL },
#endif // ((((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

#if ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)
    { "GetBitmapDisabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapButton_GetBitmapDisabled, 1, NULL },
    { "GetBitmapFocus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapButton_GetBitmapFocus, 1, NULL },
#endif // ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxBitmap) && ((wxCHECK_VERSION(2,8,0)) && ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)))
    { "GetBitmapHover", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapButton_GetBitmapHover, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && ((wxCHECK_VERSION(2,8,0)) && ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)))

#if ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)
    { "GetBitmapLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapButton_GetBitmapLabel, 1, NULL },
    { "GetBitmapSelected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapButton_GetBitmapSelected, 1, NULL },
    { "SetBitmapDisabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapButton_SetBitmapDisabled, 1, NULL },
    { "SetBitmapFocus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapButton_SetBitmapFocus, 1, NULL },
#endif // ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxBitmap) && ((wxCHECK_VERSION(2,8,0)) && ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)))
    { "SetBitmapHover", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapButton_SetBitmapHover, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && ((wxCHECK_VERSION(2,8,0)) && ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)))

#if ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)
    { "SetBitmapLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapButton_SetBitmapLabel, 1, NULL },
    { "SetBitmapSelected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapButton_SetBitmapSelected, 1, NULL },
#endif // ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)

#if (((((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON))
    { "wxBitmapButton", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxBitmapButton_constructor_overload, s_wxluafunc_wxLua_wxBitmapButton_constructor_overload_count, 0 },
#endif // (((((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON))

    { 0, 0, 0, 0 },
};

int wxBitmapButton_methodCount = sizeof(wxBitmapButton_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxBitmapButton && wxUSE_BMPBUTTON)


#if wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN
// ---------------------------------------------------------------------------
// Bind class wxToggleButton
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxToggleButton'
int wxluatype_wxToggleButton = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToggleButton_Create[] = { &wxluatype_wxToggleButton, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxToggleButton_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToggleButton_Create[1] = {{ wxLua_wxToggleButton_Create, WXLUAMETHOD_METHOD, 4, 9, s_wxluatypeArray_wxLua_wxToggleButton_Create }};
//     bool Create(wxWindow *parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxToggleButton")
static int LUACALL wxLua_wxToggleButton_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxToggleButton"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxToggleButton")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 4);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxToggleButton * self = (wxToggleButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToggleButton);
    // call Create
    bool returns = (self->Create(parent, id, label, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxToggleButton_GetValue[] = { &wxluatype_wxToggleButton, NULL };
static int LUACALL wxLua_wxToggleButton_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToggleButton_GetValue[1] = {{ wxLua_wxToggleButton_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxToggleButton_GetValue }};
//     bool GetValue() const
static int LUACALL wxLua_wxToggleButton_GetValue(lua_State *L)
{
    // get this
    wxToggleButton * self = (wxToggleButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToggleButton);
    // call GetValue
    bool returns = (self->GetValue());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxToggleButton_SetValue[] = { &wxluatype_wxToggleButton, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxToggleButton_SetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToggleButton_SetValue[1] = {{ wxLua_wxToggleButton_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxToggleButton_SetValue }};
//     void SetValue(bool state)
static int LUACALL wxLua_wxToggleButton_SetValue(lua_State *L)
{
    // bool state
    bool state = wxlua_getbooleantype(L, 2);
    // get this
    wxToggleButton * self = (wxToggleButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxToggleButton);
    // call SetValue
    self->SetValue(state);

    return 0;
}


#if ((wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxToggleButton_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxToggleButton_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxToggleButton_constructor1[1] = {{ wxLua_wxToggleButton_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 8, s_wxluatypeArray_wxLua_wxToggleButton_constructor1 }};
//     wxToggleButton(wxWindow *parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxToggleButton")
static int LUACALL wxLua_wxToggleButton_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxToggleButton"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxToggleButton")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxToggleButton* returns = new wxToggleButton(parent, id, label, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToggleButton);

    return 1;
}

#endif // ((wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxToggleButton_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxToggleButton_constructor[1] = {{ wxLua_wxToggleButton_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxToggleButton()
static int LUACALL wxLua_wxToggleButton_constructor(lua_State *L)
{
    // call constructor
    wxToggleButton* returns = new wxToggleButton();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxToggleButton);

    return 1;
}




#if (((wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxToggleButton_constructor_overload[] =
{

#if ((wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxToggleButton_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 8, s_wxluatypeArray_wxLua_wxToggleButton_constructor1 },
#endif // ((wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxToggleButton_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxToggleButton_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxToggleButton_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxToggleButton_methods[] = {
#if ((wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToggleButton_Create, 1, NULL },
#endif // ((wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToggleButton_GetValue, 1, NULL },
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxToggleButton_SetValue, 1, NULL },

#if (((wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN)
    { "wxToggleButton", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxToggleButton_constructor_overload, s_wxluafunc_wxLua_wxToggleButton_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN)

    { 0, 0, 0, 0 },
};

int wxToggleButton_methodCount = sizeof(wxToggleButton_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxToggleButton && wxUSE_TOGGLEBTN


#if wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX
// ---------------------------------------------------------------------------
// Bind class wxCheckBox
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxCheckBox'
int wxluatype_wxCheckBox = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCheckBox_Create[] = { &wxluatype_wxCheckBox, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxCheckBox_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckBox_Create[1] = {{ wxLua_wxCheckBox_Create, WXLUAMETHOD_METHOD, 4, 9, s_wxluatypeArray_wxLua_wxCheckBox_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& val = wxDefaultValidator, const wxString& name = "wxCheckBox")
static int LUACALL wxLua_wxCheckBox_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxCheckBox"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxCheckBox")));
    // const wxValidator val = wxDefaultValidator
    const wxValidator * val = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 4);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxCheckBox * self = (wxCheckBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCheckBox);
    // call Create
    bool returns = (self->Create(parent, id, label, *pos, *size, style, *val, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCheckBox_Get3StateValue[] = { &wxluatype_wxCheckBox, NULL };
static int LUACALL wxLua_wxCheckBox_Get3StateValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckBox_Get3StateValue[1] = {{ wxLua_wxCheckBox_Get3StateValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCheckBox_Get3StateValue }};
//     wxCheckBoxState Get3StateValue() const
static int LUACALL wxLua_wxCheckBox_Get3StateValue(lua_State *L)
{
    // get this
    wxCheckBox * self = (wxCheckBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCheckBox);
    // call Get3StateValue
    wxCheckBoxState returns = (self->Get3StateValue());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCheckBox_GetValue[] = { &wxluatype_wxCheckBox, NULL };
static int LUACALL wxLua_wxCheckBox_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckBox_GetValue[1] = {{ wxLua_wxCheckBox_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCheckBox_GetValue }};
//     bool GetValue() const
static int LUACALL wxLua_wxCheckBox_GetValue(lua_State *L)
{
    // get this
    wxCheckBox * self = (wxCheckBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCheckBox);
    // call GetValue
    bool returns = (self->GetValue());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCheckBox_Is3State[] = { &wxluatype_wxCheckBox, NULL };
static int LUACALL wxLua_wxCheckBox_Is3State(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckBox_Is3State[1] = {{ wxLua_wxCheckBox_Is3State, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCheckBox_Is3State }};
//     bool Is3State() const
static int LUACALL wxLua_wxCheckBox_Is3State(lua_State *L)
{
    // get this
    wxCheckBox * self = (wxCheckBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCheckBox);
    // call Is3State
    bool returns = (self->Is3State());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCheckBox_Is3rdStateAllowedForUser[] = { &wxluatype_wxCheckBox, NULL };
static int LUACALL wxLua_wxCheckBox_Is3rdStateAllowedForUser(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckBox_Is3rdStateAllowedForUser[1] = {{ wxLua_wxCheckBox_Is3rdStateAllowedForUser, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCheckBox_Is3rdStateAllowedForUser }};
//     bool Is3rdStateAllowedForUser() const
static int LUACALL wxLua_wxCheckBox_Is3rdStateAllowedForUser(lua_State *L)
{
    // get this
    wxCheckBox * self = (wxCheckBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCheckBox);
    // call Is3rdStateAllowedForUser
    bool returns = (self->Is3rdStateAllowedForUser());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCheckBox_IsChecked[] = { &wxluatype_wxCheckBox, NULL };
static int LUACALL wxLua_wxCheckBox_IsChecked(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckBox_IsChecked[1] = {{ wxLua_wxCheckBox_IsChecked, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCheckBox_IsChecked }};
//     bool IsChecked() const
static int LUACALL wxLua_wxCheckBox_IsChecked(lua_State *L)
{
    // get this
    wxCheckBox * self = (wxCheckBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCheckBox);
    // call IsChecked
    bool returns = (self->IsChecked());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCheckBox_Set3StateValue[] = { &wxluatype_wxCheckBox, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxCheckBox_Set3StateValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckBox_Set3StateValue[1] = {{ wxLua_wxCheckBox_Set3StateValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCheckBox_Set3StateValue }};
//     void Set3StateValue(const wxCheckBoxState state)
static int LUACALL wxLua_wxCheckBox_Set3StateValue(lua_State *L)
{
    // const wxCheckBoxState state
    const wxCheckBoxState state = (const wxCheckBoxState)wxlua_getenumtype(L, 2);
    // get this
    wxCheckBox * self = (wxCheckBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCheckBox);
    // call Set3StateValue
    self->Set3StateValue(state);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCheckBox_SetValue[] = { &wxluatype_wxCheckBox, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxCheckBox_SetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckBox_SetValue[1] = {{ wxLua_wxCheckBox_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCheckBox_SetValue }};
//     void SetValue(const bool state)
static int LUACALL wxLua_wxCheckBox_SetValue(lua_State *L)
{
    // const bool state
    const bool state = wxlua_getbooleantype(L, 2);
    // get this
    wxCheckBox * self = (wxCheckBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCheckBox);
    // call SetValue
    self->SetValue(state);

    return 0;
}


#if ((wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCheckBox_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxCheckBox_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckBox_constructor1[1] = {{ wxLua_wxCheckBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 8, s_wxluatypeArray_wxLua_wxCheckBox_constructor1 }};
//     wxCheckBox(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& val = wxDefaultValidator, const wxString& name = "wxCheckBox")
static int LUACALL wxLua_wxCheckBox_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxCheckBox"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxCheckBox")));
    // const wxValidator val = wxDefaultValidator
    const wxValidator * val = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxCheckBox* returns = new wxCheckBox(parent, id, label, *pos, *size, style, *val, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCheckBox);

    return 1;
}

#endif // ((wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxCheckBox_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckBox_constructor[1] = {{ wxLua_wxCheckBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxCheckBox()
static int LUACALL wxLua_wxCheckBox_constructor(lua_State *L)
{
    // call constructor
    wxCheckBox* returns = new wxCheckBox();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCheckBox);

    return 1;
}




#if (((wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckBox_constructor_overload[] =
{

#if ((wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxCheckBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 8, s_wxluatypeArray_wxLua_wxCheckBox_constructor1 },
#endif // ((wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxCheckBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxCheckBox_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxCheckBox_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxCheckBox_methods[] = {
#if ((wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCheckBox_Create, 1, NULL },
#endif // ((wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

    { "Get3StateValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCheckBox_Get3StateValue, 1, NULL },
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCheckBox_GetValue, 1, NULL },
    { "Is3State", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCheckBox_Is3State, 1, NULL },
    { "Is3rdStateAllowedForUser", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCheckBox_Is3rdStateAllowedForUser, 1, NULL },
    { "IsChecked", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCheckBox_IsChecked, 1, NULL },
    { "Set3StateValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCheckBox_Set3StateValue, 1, NULL },
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCheckBox_SetValue, 1, NULL },

#if (((wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)
    { "wxCheckBox", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxCheckBox_constructor_overload, s_wxluafunc_wxLua_wxCheckBox_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)

    { 0, 0, 0, 0 },
};

int wxCheckBox_methodCount = sizeof(wxCheckBox_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX


#if (wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS
// ---------------------------------------------------------------------------
// Bind class wxControlWithItems
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxControlWithItems'
int wxluatype_wxControlWithItems = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_Append3[] = { &wxluatype_wxControlWithItems, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxControlWithItems_Append3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_Append3[1] = {{ wxLua_wxControlWithItems_Append3, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxControlWithItems_Append3 }};
//     void Append(const wxArrayString& strings)
static int LUACALL wxLua_wxControlWithItems_Append3(lua_State *L)
{
    // const wxArrayString strings
    wxLuaSmartwxArrayString strings = wxlua_getwxArrayString(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call Append
    self->Append(strings);

    return 0;
}

#endif // (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_Append2[] = { &wxluatype_wxControlWithItems, &wxluatype_TSTRING, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxControlWithItems_Append2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_Append2[1] = {{ wxLua_wxControlWithItems_Append2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxControlWithItems_Append2 }};
//     int Append(const wxString&  item, wxClientData *clientData)
static int LUACALL wxLua_wxControlWithItems_Append2(lua_State *L)
{
    // wxClientData clientData
    wxClientData * clientData = (wxClientData *)wxluaT_getuserdatatype(L, 3, wxluatype_wxClientData);
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call Append
    int returns = (self->Append(item, clientData));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_Append1[] = { &wxluatype_wxControlWithItems, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxControlWithItems_Append1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_Append1[1] = {{ wxLua_wxControlWithItems_Append1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxControlWithItems_Append1 }};
//     int Append(const wxString&  item, voidptr_long number) // C++ is (void *clientData) You can put a number here
static int LUACALL wxLua_wxControlWithItems_Append1(lua_State *L)
{
    // voidptr_long number
    long number = (long)wxlua_getnumbertype(L, 3);
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call Append
    int returns = (self->Append(item, (void*)number));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_Append[] = { &wxluatype_wxControlWithItems, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxControlWithItems_Append(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_Append[1] = {{ wxLua_wxControlWithItems_Append, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxControlWithItems_Append }};
//     int Append(const wxString&  item)
static int LUACALL wxLua_wxControlWithItems_Append(lua_State *L)
{
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call Append
    int returns = (self->Append(item));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_Clear[] = { &wxluatype_wxControlWithItems, NULL };
static int LUACALL wxLua_wxControlWithItems_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_Clear[1] = {{ wxLua_wxControlWithItems_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxControlWithItems_Clear }};
//     void Clear()
static int LUACALL wxLua_wxControlWithItems_Clear(lua_State *L)
{
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_Delete[] = { &wxluatype_wxControlWithItems, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxControlWithItems_Delete(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_Delete[1] = {{ wxLua_wxControlWithItems_Delete, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxControlWithItems_Delete }};
//     void Delete(unsigned int n)
static int LUACALL wxLua_wxControlWithItems_Delete(lua_State *L)
{
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call Delete
    self->Delete(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_FindString[] = { &wxluatype_wxControlWithItems, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxControlWithItems_FindString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_FindString[1] = {{ wxLua_wxControlWithItems_FindString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxControlWithItems_FindString }};
//     int FindString(const wxString& string)
static int LUACALL wxLua_wxControlWithItems_FindString(lua_State *L)
{
    // const wxString string
    const wxString string = wxlua_getwxStringtype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call FindString
    int returns = (self->FindString(string));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_GetClientData[] = { &wxluatype_wxControlWithItems, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxControlWithItems_GetClientData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_GetClientData[1] = {{ wxLua_wxControlWithItems_GetClientData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxControlWithItems_GetClientData }};
//     voidptr_long GetClientData(unsigned int n) const // C++ returns (void *) You get a number here
static int LUACALL wxLua_wxControlWithItems_GetClientData(lua_State *L)
{
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call GetClientData
    long  returns = (long )self->GetClientData(n);
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_GetClientObject[] = { &wxluatype_wxControlWithItems, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxControlWithItems_GetClientObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_GetClientObject[1] = {{ wxLua_wxControlWithItems_GetClientObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxControlWithItems_GetClientObject }};
//     wxClientData* GetClientObject(unsigned int n) const
static int LUACALL wxLua_wxControlWithItems_GetClientObject(lua_State *L)
{
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call GetClientObject
    wxClientData* returns = (wxClientData*)self->GetClientObject(n);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClientData);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_GetCount[] = { &wxluatype_wxControlWithItems, NULL };
static int LUACALL wxLua_wxControlWithItems_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_GetCount[1] = {{ wxLua_wxControlWithItems_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxControlWithItems_GetCount }};
//     int GetCount() const
static int LUACALL wxLua_wxControlWithItems_GetCount(lua_State *L)
{
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_GetSelection[] = { &wxluatype_wxControlWithItems, NULL };
static int LUACALL wxLua_wxControlWithItems_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_GetSelection[1] = {{ wxLua_wxControlWithItems_GetSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxControlWithItems_GetSelection }};
//     int GetSelection() const
static int LUACALL wxLua_wxControlWithItems_GetSelection(lua_State *L)
{
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call GetSelection
    int returns = (self->GetSelection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_GetString[] = { &wxluatype_wxControlWithItems, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxControlWithItems_GetString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_GetString[1] = {{ wxLua_wxControlWithItems_GetString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxControlWithItems_GetString }};
//     wxString GetString(unsigned int n) const
static int LUACALL wxLua_wxControlWithItems_GetString(lua_State *L)
{
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call GetString
    wxString returns = (self->GetString(n));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_GetStringClientObject[] = { &wxluatype_wxControlWithItems, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxControlWithItems_GetStringClientObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_GetStringClientObject[1] = {{ wxLua_wxControlWithItems_GetStringClientObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxControlWithItems_GetStringClientObject }};
//     %rename GetStringClientObject wxStringClientData* GetClientObject(unsigned int n) const
static int LUACALL wxLua_wxControlWithItems_GetStringClientObject(lua_State *L)
{
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call GetClientObject
    wxStringClientData* returns = (wxStringClientData*)self->GetClientObject(n);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxStringClientData);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_GetStringSelection[] = { &wxluatype_wxControlWithItems, NULL };
static int LUACALL wxLua_wxControlWithItems_GetStringSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_GetStringSelection[1] = {{ wxLua_wxControlWithItems_GetStringSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxControlWithItems_GetStringSelection }};
//     wxString GetStringSelection() const
static int LUACALL wxLua_wxControlWithItems_GetStringSelection(lua_State *L)
{
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call GetStringSelection
    wxString returns = (self->GetStringSelection());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_Insert2[] = { &wxluatype_wxControlWithItems, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxControlWithItems_Insert2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_Insert2[1] = {{ wxLua_wxControlWithItems_Insert2, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxControlWithItems_Insert2 }};
//     int Insert(const wxString& item, unsigned int pos, wxClientData *clientData)
static int LUACALL wxLua_wxControlWithItems_Insert2(lua_State *L)
{
    // wxClientData clientData
    wxClientData * clientData = (wxClientData *)wxluaT_getuserdatatype(L, 4, wxluatype_wxClientData);
    // unsigned int pos
    unsigned int pos = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call Insert
    int returns = (self->Insert(item, pos, clientData));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_Insert1[] = { &wxluatype_wxControlWithItems, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxControlWithItems_Insert1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_Insert1[1] = {{ wxLua_wxControlWithItems_Insert1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxControlWithItems_Insert1 }};
//     int Insert(const wxString&  item, unsigned int pos, voidptr_long number) // C++ is (void *clientData) You can put a number here
static int LUACALL wxLua_wxControlWithItems_Insert1(lua_State *L)
{
    // voidptr_long number
    long number = (long)wxlua_getnumbertype(L, 4);
    // unsigned int pos
    unsigned int pos = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call Insert
    int returns = (self->Insert(item, pos, (void*)number));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_Insert[] = { &wxluatype_wxControlWithItems, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxControlWithItems_Insert(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_Insert[1] = {{ wxLua_wxControlWithItems_Insert, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxControlWithItems_Insert }};
//     int Insert(const wxString&  item, int pos)
static int LUACALL wxLua_wxControlWithItems_Insert(lua_State *L)
{
    // int pos
    int pos = (int)wxlua_getnumbertype(L, 3);
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call Insert
    int returns = (self->Insert(item, pos));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_IsEmpty[] = { &wxluatype_wxControlWithItems, NULL };
static int LUACALL wxLua_wxControlWithItems_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_IsEmpty[1] = {{ wxLua_wxControlWithItems_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxControlWithItems_IsEmpty }};
//     bool IsEmpty() const
static int LUACALL wxLua_wxControlWithItems_IsEmpty(lua_State *L)
{
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_Select[] = { &wxluatype_wxControlWithItems, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxControlWithItems_Select(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_Select[1] = {{ wxLua_wxControlWithItems_Select, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxControlWithItems_Select }};
//     void Select(int n)
static int LUACALL wxLua_wxControlWithItems_Select(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call Select
    self->Select(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_SetClientData[] = { &wxluatype_wxControlWithItems, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxControlWithItems_SetClientData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_SetClientData[1] = {{ wxLua_wxControlWithItems_SetClientData, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxControlWithItems_SetClientData }};
//     void SetClientData(unsigned int n, voidptr_long number) // C++ is (void *clientData) You can put a number here
static int LUACALL wxLua_wxControlWithItems_SetClientData(lua_State *L)
{
    // voidptr_long number
    long number = (long)wxlua_getnumbertype(L, 3);
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call SetClientData
    self->SetClientData(n, (void*)number);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_SetClientObject[] = { &wxluatype_wxControlWithItems, &wxluatype_TINTEGER, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxControlWithItems_SetClientObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_SetClientObject[1] = {{ wxLua_wxControlWithItems_SetClientObject, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxControlWithItems_SetClientObject }};
//     void SetClientObject(unsigned int n, wxClientData *data)
static int LUACALL wxLua_wxControlWithItems_SetClientObject(lua_State *L)
{
    // wxClientData data
    wxClientData * data = (wxClientData *)wxluaT_getuserdatatype(L, 3, wxluatype_wxClientData);
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call SetClientObject
    self->SetClientObject(n, data);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_SetSelection[] = { &wxluatype_wxControlWithItems, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxControlWithItems_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_SetSelection[1] = {{ wxLua_wxControlWithItems_SetSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxControlWithItems_SetSelection }};
//     void SetSelection(unsigned int n)
static int LUACALL wxLua_wxControlWithItems_SetSelection(lua_State *L)
{
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call SetSelection
    self->SetSelection(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_SetString[] = { &wxluatype_wxControlWithItems, &wxluatype_TINTEGER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxControlWithItems_SetString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_SetString[1] = {{ wxLua_wxControlWithItems_SetString, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxControlWithItems_SetString }};
//     void SetString(unsigned int n, const wxString&  string)
static int LUACALL wxLua_wxControlWithItems_SetString(lua_State *L)
{
    // const wxString string
    const wxString string = wxlua_getwxStringtype(L, 3);
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call SetString
    self->SetString(n, string);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxControlWithItems_SetStringSelection[] = { &wxluatype_wxControlWithItems, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxControlWithItems_SetStringSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_SetStringSelection[1] = {{ wxLua_wxControlWithItems_SetStringSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxControlWithItems_SetStringSelection }};
//     bool SetStringSelection(const wxString&  string)
static int LUACALL wxLua_wxControlWithItems_SetStringSelection(lua_State *L)
{
    // const wxString string
    const wxString string = wxlua_getwxStringtype(L, 2);
    // get this
    wxControlWithItems * self = (wxControlWithItems *)wxluaT_getuserdatatype(L, 1, wxluatype_wxControlWithItems);
    // call SetStringSelection
    bool returns = (self->SetStringSelection(string));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}




#if ((wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS))||((wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_Append_overload[] =
{

#if (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS)
    { wxLua_wxControlWithItems_Append3, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxControlWithItems_Append3 },
#endif // (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS)
    { wxLua_wxControlWithItems_Append2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxControlWithItems_Append2 },
    { wxLua_wxControlWithItems_Append1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxControlWithItems_Append1 },
    { wxLua_wxControlWithItems_Append, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxControlWithItems_Append },
};
static int s_wxluafunc_wxLua_wxControlWithItems_Append_overload_count = sizeof(s_wxluafunc_wxLua_wxControlWithItems_Append_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS))||((wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS)

#if ((wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxControlWithItems_Insert_overload[] =
{
    { wxLua_wxControlWithItems_Insert2, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxControlWithItems_Insert2 },
    { wxLua_wxControlWithItems_Insert1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxControlWithItems_Insert1 },
    { wxLua_wxControlWithItems_Insert, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxControlWithItems_Insert },
};
static int s_wxluafunc_wxLua_wxControlWithItems_Insert_overload_count = sizeof(s_wxluafunc_wxLua_wxControlWithItems_Insert_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxControlWithItems_methods[] = {
#if ((wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS))||((wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS)
    { "Append", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_Append_overload, s_wxluafunc_wxLua_wxControlWithItems_Append_overload_count, 0 },
#endif // ((wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS))||((wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS)

    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_Clear, 1, NULL },
    { "Delete", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_Delete, 1, NULL },
    { "FindString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_FindString, 1, NULL },
    { "GetClientData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_GetClientData, 1, NULL },
    { "GetClientObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_GetClientObject, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_GetCount, 1, NULL },
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_GetSelection, 1, NULL },
    { "GetString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_GetString, 1, NULL },
    { "GetStringClientObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_GetStringClientObject, 1, NULL },
    { "GetStringSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_GetStringSelection, 1, NULL },

#if ((wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS)
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_Insert_overload, s_wxluafunc_wxLua_wxControlWithItems_Insert_overload_count, 0 },
#endif // ((wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS)

    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_IsEmpty, 1, NULL },
    { "Select", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_Select, 1, NULL },
    { "SetClientData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_SetClientData, 1, NULL },
    { "SetClientObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_SetClientObject, 1, NULL },
    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_SetSelection, 1, NULL },
    { "SetString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_SetString, 1, NULL },
    { "SetStringSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxControlWithItems_SetStringSelection, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxControlWithItems_methodCount = sizeof(wxControlWithItems_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxChoice || wxLUA_USE_wxComboBox || wxLUA_USE_wxListBox ) && wxUSE_CONTROLS


#if wxLUA_USE_wxChoice && wxUSE_CHOICE
// ---------------------------------------------------------------------------
// Bind class wxChoice
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxChoice'
int wxluatype_wxChoice = WXLUA_TUNKNOWN;

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxChoice_Create[] = { &wxluatype_wxChoice, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayString, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxChoice_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxChoice_Create[1] = {{ wxLua_wxChoice_Create, WXLUAMETHOD_METHOD, 3, 9, s_wxluatypeArray_wxLua_wxChoice_Create }};
//     bool Create(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, const wxArrayString& choices = wxLuaNullSmartwxArrayString, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxChoice")
static int LUACALL wxLua_wxChoice_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxChoice"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxChoice")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : 0);
    // const wxArrayString choices = wxLuaNullSmartwxArrayString
    wxLuaSmartwxArrayString choices = (argCount >= 6 ? wxlua_getwxArrayString(L, 6) : wxLuaNullSmartwxArrayString);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxChoice * self = (wxChoice *)wxluaT_getuserdatatype(L, 1, wxluatype_wxChoice);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, choices, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxChoice_GetCurrentSelection[] = { &wxluatype_wxChoice, NULL };
static int LUACALL wxLua_wxChoice_GetCurrentSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxChoice_GetCurrentSelection[1] = {{ wxLua_wxChoice_GetCurrentSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxChoice_GetCurrentSelection }};
//     int    GetCurrentSelection() const
static int LUACALL wxLua_wxChoice_GetCurrentSelection(lua_State *L)
{
    // get this
    wxChoice * self = (wxChoice *)wxluaT_getuserdatatype(L, 1, wxluatype_wxChoice);
    // call GetCurrentSelection
    int returns = (self->GetCurrentSelection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxChoice_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayString, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxChoice_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxChoice_constructor1[1] = {{ wxLua_wxChoice_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 8, s_wxluatypeArray_wxLua_wxChoice_constructor1 }};
//     wxChoice(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, const wxArrayString& choices = wxLuaNullSmartwxArrayString, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxChoice")
static int LUACALL wxLua_wxChoice_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxChoice"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxChoice")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxArrayString choices = wxLuaNullSmartwxArrayString
    wxLuaSmartwxArrayString choices = (argCount >= 5 ? wxlua_getwxArrayString(L, 5) : wxLuaNullSmartwxArrayString);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxChoice* returns = new wxChoice(parent, id, *pos, *size, choices, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxChoice);

    return 1;
}

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxChoice_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxChoice_constructor[1] = {{ wxLua_wxChoice_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxChoice()
static int LUACALL wxLua_wxChoice_constructor(lua_State *L)
{
    // call constructor
    wxChoice* returns = new wxChoice();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxChoice);

    return 1;
}




#if ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxChoice && wxUSE_CHOICE)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxChoice_constructor_overload[] =
{

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxChoice_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 8, s_wxluatypeArray_wxLua_wxChoice_constructor1 },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxChoice_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxChoice_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxChoice_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxChoice && wxUSE_CHOICE)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxChoice_methods[] = {
#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxChoice_Create, 1, NULL },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)

    { "GetCurrentSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxChoice_GetCurrentSelection, 1, NULL },

#if ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxChoice && wxUSE_CHOICE)
    { "wxChoice", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxChoice_constructor_overload, s_wxluafunc_wxLua_wxChoice_constructor_overload_count, 0 },
#endif // ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxChoice && wxUSE_CHOICE)

    { 0, 0, 0, 0 },
};

int wxChoice_methodCount = sizeof(wxChoice_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxChoice && wxUSE_CHOICE


#if wxLUA_USE_wxComboBox && wxUSE_COMBOBOX
// ---------------------------------------------------------------------------
// Bind class wxComboBox
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxComboBox'
int wxluatype_wxComboBox = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_CanCopy[] = { &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxComboBox_CanCopy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_CanCopy[1] = {{ wxLua_wxComboBox_CanCopy, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxComboBox_CanCopy }};
//     bool     CanCopy() const
static int LUACALL wxLua_wxComboBox_CanCopy(lua_State *L)
{
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call CanCopy
    bool returns = (self->CanCopy());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_CanCut[] = { &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxComboBox_CanCut(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_CanCut[1] = {{ wxLua_wxComboBox_CanCut, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxComboBox_CanCut }};
//     bool     CanCut() const
static int LUACALL wxLua_wxComboBox_CanCut(lua_State *L)
{
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call CanCut
    bool returns = (self->CanCut());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_CanPaste[] = { &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxComboBox_CanPaste(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_CanPaste[1] = {{ wxLua_wxComboBox_CanPaste, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxComboBox_CanPaste }};
//     bool     CanPaste() const
static int LUACALL wxLua_wxComboBox_CanPaste(lua_State *L)
{
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call CanPaste
    bool returns = (self->CanPaste());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_CanRedo[] = { &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxComboBox_CanRedo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_CanRedo[1] = {{ wxLua_wxComboBox_CanRedo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxComboBox_CanRedo }};
//     bool     CanRedo() const
static int LUACALL wxLua_wxComboBox_CanRedo(lua_State *L)
{
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call CanRedo
    bool returns = (self->CanRedo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_CanUndo[] = { &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxComboBox_CanUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_CanUndo[1] = {{ wxLua_wxComboBox_CanUndo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxComboBox_CanUndo }};
//     bool     CanUndo() const
static int LUACALL wxLua_wxComboBox_CanUndo(lua_State *L)
{
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call CanUndo
    bool returns = (self->CanUndo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_Copy[] = { &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxComboBox_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_Copy[1] = {{ wxLua_wxComboBox_Copy, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxComboBox_Copy }};
//     void     Copy()
static int LUACALL wxLua_wxComboBox_Copy(lua_State *L)
{
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call Copy
    self->Copy();

    return 0;
}


#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_Create[] = { &wxluatype_wxComboBox, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayString, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxComboBox_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_Create[1] = {{ wxLua_wxComboBox_Create, WXLUAMETHOD_METHOD, 3, 10, s_wxluatypeArray_wxLua_wxComboBox_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, const wxArrayString& choices = wxLuaNullSmartwxArrayString, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxComboBox")
static int LUACALL wxLua_wxComboBox_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxComboBox"
    const wxString name = (argCount >= 10 ? wxlua_getwxStringtype(L, 10) : wxString(wxT("wxComboBox")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 9 ? (const wxValidator *)wxluaT_getuserdatatype(L, 9, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 8 ? (long)wxlua_getnumbertype(L, 8) : 0);
    // const wxArrayString choices = wxLuaNullSmartwxArrayString
    wxLuaSmartwxArrayString choices = (argCount >= 7 ? wxlua_getwxArrayString(L, 7) : wxLuaNullSmartwxArrayString);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString value = ""
    const wxString value = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call Create
    bool returns = (self->Create(parent, id, value, *pos, *size, choices, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_Cut[] = { &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxComboBox_Cut(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_Cut[1] = {{ wxLua_wxComboBox_Cut, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxComboBox_Cut }};
//     void     Cut()
static int LUACALL wxLua_wxComboBox_Cut(lua_State *L)
{
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call Cut
    self->Cut();

    return 0;
}


#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_GetCurrentSelection[] = { &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxComboBox_GetCurrentSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_GetCurrentSelection[1] = {{ wxLua_wxComboBox_GetCurrentSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxComboBox_GetCurrentSelection }};
//     %wxchkver_2_8 virtual int GetCurrentSelection() const
static int LUACALL wxLua_wxComboBox_GetCurrentSelection(lua_State *L)
{
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call GetCurrentSelection
    int returns = (self->GetCurrentSelection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_GetInsertionPoint[] = { &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxComboBox_GetInsertionPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_GetInsertionPoint[1] = {{ wxLua_wxComboBox_GetInsertionPoint, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxComboBox_GetInsertionPoint }};
//     long     GetInsertionPoint() const
static int LUACALL wxLua_wxComboBox_GetInsertionPoint(lua_State *L)
{
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call GetInsertionPoint
    long  returns = (self->GetInsertionPoint());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_GetLastPosition[] = { &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxComboBox_GetLastPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_GetLastPosition[1] = {{ wxLua_wxComboBox_GetLastPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxComboBox_GetLastPosition }};
//     long     GetLastPosition() const
static int LUACALL wxLua_wxComboBox_GetLastPosition(lua_State *L)
{
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call GetLastPosition
    long  returns = (self->GetLastPosition());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_GetValue[] = { &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxComboBox_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_GetValue[1] = {{ wxLua_wxComboBox_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxComboBox_GetValue }};
//     wxString GetValue() const
static int LUACALL wxLua_wxComboBox_GetValue(lua_State *L)
{
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call GetValue
    wxString returns = (self->GetValue());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_Paste[] = { &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxComboBox_Paste(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_Paste[1] = {{ wxLua_wxComboBox_Paste, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxComboBox_Paste }};
//     void     Paste()
static int LUACALL wxLua_wxComboBox_Paste(lua_State *L)
{
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call Paste
    self->Paste();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_Redo[] = { &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxComboBox_Redo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_Redo[1] = {{ wxLua_wxComboBox_Redo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxComboBox_Redo }};
//     void     Redo()
static int LUACALL wxLua_wxComboBox_Redo(lua_State *L)
{
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call Redo
    self->Redo();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_Remove[] = { &wxluatype_wxComboBox, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxComboBox_Remove(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_Remove[1] = {{ wxLua_wxComboBox_Remove, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxComboBox_Remove }};
//     void     Remove(long from, long to)
static int LUACALL wxLua_wxComboBox_Remove(lua_State *L)
{
    // long to
    long to = (long)wxlua_getnumbertype(L, 3);
    // long from
    long from = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call Remove
    self->Remove(from, to);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_Replace[] = { &wxluatype_wxComboBox, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxComboBox_Replace(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_Replace[1] = {{ wxLua_wxComboBox_Replace, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxComboBox_Replace }};
//     void     Replace(long from, long to, const wxString& text)
static int LUACALL wxLua_wxComboBox_Replace(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 4);
    // long to
    long to = (long)wxlua_getnumbertype(L, 3);
    // long from
    long from = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call Replace
    self->Replace(from, to, text);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_SetInsertionPoint[] = { &wxluatype_wxComboBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxComboBox_SetInsertionPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_SetInsertionPoint[1] = {{ wxLua_wxComboBox_SetInsertionPoint, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxComboBox_SetInsertionPoint }};
//     void     SetInsertionPoint(long pos)
static int LUACALL wxLua_wxComboBox_SetInsertionPoint(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call SetInsertionPoint
    self->SetInsertionPoint(pos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_SetInsertionPointEnd[] = { &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxComboBox_SetInsertionPointEnd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_SetInsertionPointEnd[1] = {{ wxLua_wxComboBox_SetInsertionPointEnd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxComboBox_SetInsertionPointEnd }};
//     void     SetInsertionPointEnd()
static int LUACALL wxLua_wxComboBox_SetInsertionPointEnd(lua_State *L)
{
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call SetInsertionPointEnd
    self->SetInsertionPointEnd();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_SetSelection[] = { &wxluatype_wxComboBox, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxComboBox_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_SetSelection[1] = {{ wxLua_wxComboBox_SetSelection, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxComboBox_SetSelection }};
//     void     SetSelection(long from, long to)
static int LUACALL wxLua_wxComboBox_SetSelection(lua_State *L)
{
    // long to
    long to = (long)wxlua_getnumbertype(L, 3);
    // long from
    long from = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call SetSelection
    self->SetSelection(from, to);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_SetValue[] = { &wxluatype_wxComboBox, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxComboBox_SetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_SetValue[1] = {{ wxLua_wxComboBox_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxComboBox_SetValue }};
//     void     SetValue(const wxString& text)
static int LUACALL wxLua_wxComboBox_SetValue(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call SetValue
    self->SetValue(text);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_Undo[] = { &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxComboBox_Undo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_Undo[1] = {{ wxLua_wxComboBox_Undo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxComboBox_Undo }};
//     void     Undo()
static int LUACALL wxLua_wxComboBox_Undo(lua_State *L)
{
    // get this
    wxComboBox * self = (wxComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxComboBox);
    // call Undo
    self->Undo();

    return 0;
}


#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
static wxLuaArgType s_wxluatypeArray_wxLua_wxComboBox_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayString, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxComboBox_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_constructor1[1] = {{ wxLua_wxComboBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 9, s_wxluatypeArray_wxLua_wxComboBox_constructor1 }};
//     wxComboBox(wxWindow* parent, wxWindowID id, const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, const wxArrayString& choices = wxLuaNullSmartwxArrayString, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxComboBox")
static int LUACALL wxLua_wxComboBox_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxComboBox"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxComboBox")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : 0);
    // const wxArrayString choices = wxLuaNullSmartwxArrayString
    wxLuaSmartwxArrayString choices = (argCount >= 6 ? wxlua_getwxArrayString(L, 6) : wxLuaNullSmartwxArrayString);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString value = ""
    const wxString value = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxComboBox* returns = new wxComboBox(parent, id, value, *pos, *size, choices, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxComboBox);

    return 1;
}

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

static int LUACALL wxLua_wxComboBox_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_constructor[1] = {{ wxLua_wxComboBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxComboBox()
static int LUACALL wxLua_wxComboBox_constructor(lua_State *L)
{
    // call constructor
    wxComboBox* returns = new wxComboBox();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxComboBox);

    return 1;
}




#if ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX))||(wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxComboBox_constructor_overload[] =
{

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
    { wxLua_wxComboBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 9, s_wxluatypeArray_wxLua_wxComboBox_constructor1 },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
    { wxLua_wxComboBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxComboBox_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxComboBox_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX))||(wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxComboBox_methods[] = {
    { "CanCopy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_CanCopy, 1, NULL },
    { "CanCut", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_CanCut, 1, NULL },
    { "CanPaste", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_CanPaste, 1, NULL },
    { "CanRedo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_CanRedo, 1, NULL },
    { "CanUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_CanUndo, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_Copy, 1, NULL },

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_Create, 1, NULL },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

    { "Cut", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_Cut, 1, NULL },

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
    { "GetCurrentSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_GetCurrentSelection, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

    { "GetInsertionPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_GetInsertionPoint, 1, NULL },
    { "GetLastPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_GetLastPosition, 1, NULL },
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_GetValue, 1, NULL },
    { "Paste", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_Paste, 1, NULL },
    { "Redo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_Redo, 1, NULL },
    { "Remove", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_Remove, 1, NULL },
    { "Replace", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_Replace, 1, NULL },
    { "SetInsertionPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_SetInsertionPoint, 1, NULL },
    { "SetInsertionPointEnd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_SetInsertionPointEnd, 1, NULL },
    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_SetSelection, 1, NULL },
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_SetValue, 1, NULL },
    { "Undo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxComboBox_Undo, 1, NULL },

#if ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX))||(wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
    { "wxComboBox", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxComboBox_constructor_overload, s_wxluafunc_wxLua_wxComboBox_constructor_overload_count, 0 },
#endif // ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX))||(wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

    { 0, 0, 0, 0 },
};

int wxComboBox_methodCount = sizeof(wxComboBox_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxComboBox && wxUSE_COMBOBOX


#if wxLUA_USE_wxGauge && wxUSE_GAUGE
// ---------------------------------------------------------------------------
// Bind class wxGauge
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGauge'
int wxluatype_wxGauge = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxGauge && wxUSE_GAUGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGauge_Create[] = { &wxluatype_wxGauge, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGauge_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGauge_Create[1] = {{ wxLua_wxGauge_Create, WXLUAMETHOD_METHOD, 4, 9, s_wxluatypeArray_wxLua_wxGauge_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, int range, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxGA_HORIZONTAL, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxGauge")
static int LUACALL wxLua_wxGauge_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxGauge"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxGauge")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxGA_HORIZONTAL
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxGA_HORIZONTAL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // int range
    int range = (int)wxlua_getnumbertype(L, 4);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxGauge * self = (wxGauge *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGauge);
    // call Create
    bool returns = (self->Create(parent, id, range, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxGauge && wxUSE_GAUGE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGauge_GetBezelFace[] = { &wxluatype_wxGauge, NULL };
static int LUACALL wxLua_wxGauge_GetBezelFace(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGauge_GetBezelFace[1] = {{ wxLua_wxGauge_GetBezelFace, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGauge_GetBezelFace }};
//     int      GetBezelFace() const
static int LUACALL wxLua_wxGauge_GetBezelFace(lua_State *L)
{
    // get this
    wxGauge * self = (wxGauge *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGauge);
    // call GetBezelFace
    int returns = (self->GetBezelFace());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGauge_GetRange[] = { &wxluatype_wxGauge, NULL };
static int LUACALL wxLua_wxGauge_GetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGauge_GetRange[1] = {{ wxLua_wxGauge_GetRange, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGauge_GetRange }};
//     int      GetRange() const
static int LUACALL wxLua_wxGauge_GetRange(lua_State *L)
{
    // get this
    wxGauge * self = (wxGauge *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGauge);
    // call GetRange
    int returns = (self->GetRange());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGauge_GetShadowWidth[] = { &wxluatype_wxGauge, NULL };
static int LUACALL wxLua_wxGauge_GetShadowWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGauge_GetShadowWidth[1] = {{ wxLua_wxGauge_GetShadowWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGauge_GetShadowWidth }};
//     int      GetShadowWidth() const
static int LUACALL wxLua_wxGauge_GetShadowWidth(lua_State *L)
{
    // get this
    wxGauge * self = (wxGauge *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGauge);
    // call GetShadowWidth
    int returns = (self->GetShadowWidth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGauge_GetValue[] = { &wxluatype_wxGauge, NULL };
static int LUACALL wxLua_wxGauge_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGauge_GetValue[1] = {{ wxLua_wxGauge_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGauge_GetValue }};
//     int      GetValue() const
static int LUACALL wxLua_wxGauge_GetValue(lua_State *L)
{
    // get this
    wxGauge * self = (wxGauge *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGauge);
    // call GetValue
    int returns = (self->GetValue());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGauge_IsVertical[] = { &wxluatype_wxGauge, NULL };
static int LUACALL wxLua_wxGauge_IsVertical(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGauge_IsVertical[1] = {{ wxLua_wxGauge_IsVertical, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGauge_IsVertical }};
//     bool     IsVertical() const
static int LUACALL wxLua_wxGauge_IsVertical(lua_State *L)
{
    // get this
    wxGauge * self = (wxGauge *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGauge);
    // call IsVertical
    bool returns = (self->IsVertical());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxGauge && wxUSE_GAUGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGauge_Pulse[] = { &wxluatype_wxGauge, NULL };
static int LUACALL wxLua_wxGauge_Pulse(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGauge_Pulse[1] = {{ wxLua_wxGauge_Pulse, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGauge_Pulse }};
//     %wxchkver_2_8 void Pulse()
static int LUACALL wxLua_wxGauge_Pulse(lua_State *L)
{
    // get this
    wxGauge * self = (wxGauge *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGauge);
    // call Pulse
    self->Pulse();

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxGauge && wxUSE_GAUGE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGauge_SetBezelFace[] = { &wxluatype_wxGauge, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGauge_SetBezelFace(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGauge_SetBezelFace[1] = {{ wxLua_wxGauge_SetBezelFace, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGauge_SetBezelFace }};
//     void     SetBezelFace(int width)
static int LUACALL wxLua_wxGauge_SetBezelFace(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGauge * self = (wxGauge *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGauge);
    // call SetBezelFace
    self->SetBezelFace(width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGauge_SetRange[] = { &wxluatype_wxGauge, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGauge_SetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGauge_SetRange[1] = {{ wxLua_wxGauge_SetRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGauge_SetRange }};
//     void     SetRange(int range)
static int LUACALL wxLua_wxGauge_SetRange(lua_State *L)
{
    // int range
    int range = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGauge * self = (wxGauge *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGauge);
    // call SetRange
    self->SetRange(range);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGauge_SetShadowWidth[] = { &wxluatype_wxGauge, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGauge_SetShadowWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGauge_SetShadowWidth[1] = {{ wxLua_wxGauge_SetShadowWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGauge_SetShadowWidth }};
//     void     SetShadowWidth(int width)
static int LUACALL wxLua_wxGauge_SetShadowWidth(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGauge * self = (wxGauge *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGauge);
    // call SetShadowWidth
    self->SetShadowWidth(width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGauge_SetValue[] = { &wxluatype_wxGauge, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGauge_SetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGauge_SetValue[1] = {{ wxLua_wxGauge_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGauge_SetValue }};
//     void     SetValue(int pos)
static int LUACALL wxLua_wxGauge_SetValue(lua_State *L)
{
    // int pos
    int pos = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGauge * self = (wxGauge *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGauge);
    // call SetValue
    self->SetValue(pos);

    return 0;
}


#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxGauge && wxUSE_GAUGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGauge_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGauge_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGauge_constructor1[1] = {{ wxLua_wxGauge_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 8, s_wxluatypeArray_wxLua_wxGauge_constructor1 }};
//     wxGauge(wxWindow* parent, wxWindowID id, int range, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxGA_HORIZONTAL, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxGauge")
static int LUACALL wxLua_wxGauge_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxGauge"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxGauge")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxGA_HORIZONTAL
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxGA_HORIZONTAL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // int range
    int range = (int)wxlua_getnumbertype(L, 3);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxGauge* returns = new wxGauge(parent, id, range, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGauge);

    return 1;
}

#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxGauge && wxUSE_GAUGE)

static int LUACALL wxLua_wxGauge_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGauge_constructor[1] = {{ wxLua_wxGauge_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxGauge()
static int LUACALL wxLua_wxGauge_constructor(lua_State *L)
{
    // call constructor
    wxGauge* returns = new wxGauge();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGauge);

    return 1;
}




#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxGauge && wxUSE_GAUGE))||(wxLUA_USE_wxGauge && wxUSE_GAUGE)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGauge_constructor_overload[] =
{

#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxGauge && wxUSE_GAUGE)
    { wxLua_wxGauge_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 8, s_wxluatypeArray_wxLua_wxGauge_constructor1 },
#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxGauge && wxUSE_GAUGE)
    { wxLua_wxGauge_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxGauge_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxGauge_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxGauge && wxUSE_GAUGE))||(wxLUA_USE_wxGauge && wxUSE_GAUGE)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGauge_methods[] = {
#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxGauge && wxUSE_GAUGE)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGauge_Create, 1, NULL },
#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxGauge && wxUSE_GAUGE)

    { "GetBezelFace", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGauge_GetBezelFace, 1, NULL },
    { "GetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGauge_GetRange, 1, NULL },
    { "GetShadowWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGauge_GetShadowWidth, 1, NULL },
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGauge_GetValue, 1, NULL },
    { "IsVertical", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGauge_IsVertical, 1, NULL },

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxGauge && wxUSE_GAUGE)
    { "Pulse", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGauge_Pulse, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxGauge && wxUSE_GAUGE)

    { "SetBezelFace", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGauge_SetBezelFace, 1, NULL },
    { "SetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGauge_SetRange, 1, NULL },
    { "SetShadowWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGauge_SetShadowWidth, 1, NULL },
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGauge_SetValue, 1, NULL },

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxGauge && wxUSE_GAUGE))||(wxLUA_USE_wxGauge && wxUSE_GAUGE)
    { "wxGauge", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGauge_constructor_overload, s_wxluafunc_wxLua_wxGauge_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxGauge && wxUSE_GAUGE))||(wxLUA_USE_wxGauge && wxUSE_GAUGE)

    { 0, 0, 0, 0 },
};

int wxGauge_methodCount = sizeof(wxGauge_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGauge && wxUSE_GAUGE


#if wxLUA_USE_wxListBox && wxUSE_LISTBOX
// ---------------------------------------------------------------------------
// Bind class wxListBox
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxListBox'
int wxluatype_wxListBox = WXLUA_TUNKNOWN;

#if (((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListBox_Create[] = { &wxluatype_wxListBox, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayString, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxListBox_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListBox_Create[1] = {{ wxLua_wxListBox_Create, WXLUAMETHOD_METHOD, 3, 9, s_wxluatypeArray_wxLua_wxListBox_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, const wxArrayString& choices = wxLuaNullSmartwxArrayString, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxListBox")
static int LUACALL wxLua_wxListBox_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxListBox"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxListBox")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : 0);
    // const wxArrayString choices = wxLuaNullSmartwxArrayString
    wxLuaSmartwxArrayString choices = (argCount >= 6 ? wxlua_getwxArrayString(L, 6) : wxLuaNullSmartwxArrayString);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxListBox * self = (wxListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListBox);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, choices, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListBox_Deselect[] = { &wxluatype_wxListBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListBox_Deselect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListBox_Deselect[1] = {{ wxLua_wxListBox_Deselect, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListBox_Deselect }};
//     void     Deselect(int n)
static int LUACALL wxLua_wxListBox_Deselect(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxListBox * self = (wxListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListBox);
    // call Deselect
    self->Deselect(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListBox_GetSelections[] = { &wxluatype_wxListBox, NULL };
static int LUACALL wxLua_wxListBox_GetSelections(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListBox_GetSelections[1] = {{ wxLua_wxListBox_GetSelections, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListBox_GetSelections }};
// %override wxLua_wxListBox_GetSelections
//     int      GetSelections(wxArrayInt& selections) const
static int LUACALL wxLua_wxListBox_GetSelections(lua_State *L)
{
    // wxArrayInt selections
    wxArrayInt selections;
    // get this
    wxListBox * self = (wxListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListBox);
    // call GetSelections
    int returns = self->GetSelections(selections);
    // push the result number
    lua_pushnumber(L, returns);
    // push the selects as a table
    wxlua_pushwxArrayInttable(L, selections);

    return 2;
}



#if (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxListBox && wxUSE_LISTBOX))
static wxLuaArgType s_wxluatypeArray_wxLua_wxListBox_HitTest[] = { &wxluatype_wxListBox, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxListBox_HitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListBox_HitTest[1] = {{ wxLua_wxListBox_HitTest, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListBox_HitTest }};
//     %wxchkver_2_8 int HitTest(const wxPoint& point) const
static int LUACALL wxLua_wxListBox_HitTest(lua_State *L)
{
    // const wxPoint point
    const wxPoint * point = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxListBox * self = (wxListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListBox);
    // call HitTest
    int returns = (self->HitTest(*point));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxListBox && wxUSE_LISTBOX))

#if (wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListBox_InsertItems[] = { &wxluatype_wxListBox, &wxluatype_wxArrayString, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListBox_InsertItems(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListBox_InsertItems[1] = {{ wxLua_wxListBox_InsertItems, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListBox_InsertItems }};
//     void     InsertItems(const wxArrayString& items, int pos)
static int LUACALL wxLua_wxListBox_InsertItems(lua_State *L)
{
    // int pos
    int pos = (int)wxlua_getnumbertype(L, 3);
    // const wxArrayString items
    wxLuaSmartwxArrayString items = wxlua_getwxArrayString(L, 2);
    // get this
    wxListBox * self = (wxListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListBox);
    // call InsertItems
    self->InsertItems(items, pos);

    return 0;
}

#endif // (wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListBox_IsSelected[] = { &wxluatype_wxListBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListBox_IsSelected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListBox_IsSelected[1] = {{ wxLua_wxListBox_IsSelected, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListBox_IsSelected }};
//     bool     IsSelected(int n) const
static int LUACALL wxLua_wxListBox_IsSelected(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxListBox * self = (wxListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListBox);
    // call IsSelected
    bool returns = (self->IsSelected(n));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListBox_Set[] = { &wxluatype_wxListBox, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxListBox_Set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListBox_Set[1] = {{ wxLua_wxListBox_Set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListBox_Set }};
//     void     Set(const wxArrayString& choices)
static int LUACALL wxLua_wxListBox_Set(lua_State *L)
{
    // const wxArrayString choices
    wxLuaSmartwxArrayString choices = wxlua_getwxArrayString(L, 2);
    // get this
    wxListBox * self = (wxListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListBox);
    // call Set
    self->Set(choices);

    return 0;
}

#endif // (wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListBox_SetFirstItem[] = { &wxluatype_wxListBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListBox_SetFirstItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListBox_SetFirstItem[1] = {{ wxLua_wxListBox_SetFirstItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListBox_SetFirstItem }};
//     void     SetFirstItem(int n)
static int LUACALL wxLua_wxListBox_SetFirstItem(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxListBox * self = (wxListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListBox);
    // call SetFirstItem
    self->SetFirstItem(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListBox_SetSelection[] = { &wxluatype_wxListBox, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxListBox_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListBox_SetSelection[1] = {{ wxLua_wxListBox_SetSelection, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxListBox_SetSelection }};
//     void     SetSelection(int n, bool select = true)
static int LUACALL wxLua_wxListBox_SetSelection(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool select = true
    bool select = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxListBox * self = (wxListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListBox);
    // call SetSelection
    self->SetSelection(n, select);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListBox_SetStringSelection[] = { &wxluatype_wxListBox, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxListBox_SetStringSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListBox_SetStringSelection[1] = {{ wxLua_wxListBox_SetStringSelection, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxListBox_SetStringSelection }};
//     void     SetStringSelection(const wxString& string, bool select = true)
static int LUACALL wxLua_wxListBox_SetStringSelection(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool select = true
    bool select = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxString string
    const wxString string = wxlua_getwxStringtype(L, 2);
    // get this
    wxListBox * self = (wxListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListBox);
    // call SetStringSelection
    self->SetStringSelection(string, select);

    return 0;
}


#if (((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListBox_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayString, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxListBox_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListBox_constructor1[1] = {{ wxLua_wxListBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 8, s_wxluatypeArray_wxLua_wxListBox_constructor1 }};
//     wxListBox(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, const wxArrayString& choices = wxLuaNullSmartwxArrayString, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxListBox")
static int LUACALL wxLua_wxListBox_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxListBox"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxListBox")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxArrayString choices = wxLuaNullSmartwxArrayString
    wxLuaSmartwxArrayString choices = (argCount >= 5 ? wxlua_getwxArrayString(L, 5) : wxLuaNullSmartwxArrayString);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxListBox* returns = new wxListBox(parent, id, *pos, *size, choices, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxListBox);

    return 1;
}

#endif // (((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxListBox_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListBox_constructor[1] = {{ wxLua_wxListBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxListBox()
static int LUACALL wxLua_wxListBox_constructor(lua_State *L)
{
    // call constructor
    wxListBox* returns = new wxListBox();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxListBox);

    return 1;
}




#if ((((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxListBox && wxUSE_LISTBOX)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListBox_constructor_overload[] =
{

#if (((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxListBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 8, s_wxluatypeArray_wxLua_wxListBox_constructor1 },
#endif // (((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxListBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxListBox_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxListBox_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxListBox && wxUSE_LISTBOX)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxListBox_methods[] = {
#if (((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListBox_Create, 1, NULL },
#endif // (((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

    { "Deselect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListBox_Deselect, 1, NULL },
    { "GetSelections", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListBox_GetSelections, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxListBox && wxUSE_LISTBOX))
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListBox_HitTest, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxListBox && wxUSE_LISTBOX))

#if (wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)
    { "InsertItems", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListBox_InsertItems, 1, NULL },
#endif // (wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)

    { "IsSelected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListBox_IsSelected, 1, NULL },

#if (wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)
    { "Set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListBox_Set, 1, NULL },
#endif // (wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)

    { "SetFirstItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListBox_SetFirstItem, 1, NULL },
    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListBox_SetSelection, 1, NULL },
    { "SetStringSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListBox_SetStringSelection, 1, NULL },

#if ((((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxListBox && wxUSE_LISTBOX)
    { "wxListBox", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxListBox_constructor_overload, s_wxluafunc_wxLua_wxListBox_constructor_overload_count, 0 },
#endif // ((((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxListBox && wxUSE_LISTBOX)

    { 0, 0, 0, 0 },
};

int wxListBox_methodCount = sizeof(wxListBox_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxListBox && wxUSE_LISTBOX


#if (wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX)
// ---------------------------------------------------------------------------
// Bind class wxCheckListBox
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxCheckListBox'
int wxluatype_wxCheckListBox = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxCheckListBox_Check[] = { &wxluatype_wxCheckListBox, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxCheckListBox_Check(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckListBox_Check[1] = {{ wxLua_wxCheckListBox_Check, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxCheckListBox_Check }};
//     void     Check(int item, bool check = true)
static int LUACALL wxLua_wxCheckListBox_Check(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool check = true
    bool check = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // int item
    int item = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxCheckListBox * self = (wxCheckListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCheckListBox);
    // call Check
    self->Check(item, check);

    return 0;
}


#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && ((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX))) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCheckListBox_Create[] = { &wxluatype_wxCheckListBox, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayString, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxCheckListBox_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckListBox_Create[1] = {{ wxLua_wxCheckListBox_Create, WXLUAMETHOD_METHOD, 3, 9, s_wxluatypeArray_wxLua_wxCheckListBox_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, const wxArrayString& choices = wxLuaNullSmartwxArrayString, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxCheckListBox")
static int LUACALL wxLua_wxCheckListBox_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxCheckListBox"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxCheckListBox")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : 0);
    // const wxArrayString choices = wxLuaNullSmartwxArrayString
    wxLuaSmartwxArrayString choices = (argCount >= 6 ? wxlua_getwxArrayString(L, 6) : wxLuaNullSmartwxArrayString);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxCheckListBox * self = (wxCheckListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCheckListBox);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, choices, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && ((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX))) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCheckListBox_IsChecked[] = { &wxluatype_wxCheckListBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCheckListBox_IsChecked(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckListBox_IsChecked[1] = {{ wxLua_wxCheckListBox_IsChecked, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCheckListBox_IsChecked }};
//     bool     IsChecked(int item) const
static int LUACALL wxLua_wxCheckListBox_IsChecked(lua_State *L)
{
    // int item
    int item = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxCheckListBox * self = (wxCheckListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCheckListBox);
    // call IsChecked
    bool returns = (self->IsChecked(item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && ((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX))) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCheckListBox_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayString, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxCheckListBox_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckListBox_constructor1[1] = {{ wxLua_wxCheckListBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 8, s_wxluatypeArray_wxLua_wxCheckListBox_constructor1 }};
//     wxCheckListBox(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, const wxArrayString& choices = wxLuaNullSmartwxArrayString, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxCheckListBox")
static int LUACALL wxLua_wxCheckListBox_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxCheckListBox"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxCheckListBox")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxArrayString choices = wxLuaNullSmartwxArrayString
    wxLuaSmartwxArrayString choices = (argCount >= 5 ? wxlua_getwxArrayString(L, 5) : wxLuaNullSmartwxArrayString);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxCheckListBox* returns = new wxCheckListBox(parent, id, *pos, *size, choices, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCheckListBox);

    return 1;
}

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && ((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX))) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxCheckListBox_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckListBox_constructor[1] = {{ wxLua_wxCheckListBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxCheckListBox()
static int LUACALL wxLua_wxCheckListBox_constructor(lua_State *L)
{
    // call constructor
    wxCheckListBox* returns = new wxCheckListBox();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCheckListBox);

    return 1;
}




#if ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && ((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX))) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCheckListBox_constructor_overload[] =
{

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && ((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX))) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxCheckListBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 8, s_wxluatypeArray_wxLua_wxCheckListBox_constructor1 },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && ((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX))) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxCheckListBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxCheckListBox_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxCheckListBox_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && ((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX))) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxCheckListBox_methods[] = {
    { "Check", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCheckListBox_Check, 1, NULL },

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && ((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX))) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCheckListBox_Create, 1, NULL },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && ((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX))) && (wxLUA_USE_wxPointSizeRect)

    { "IsChecked", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCheckListBox_IsChecked, 1, NULL },

#if ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && ((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX))) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX))
    { "wxCheckListBox", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxCheckListBox_constructor_overload, s_wxluafunc_wxLua_wxCheckListBox_constructor_overload_count, 0 },
#endif // ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && ((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX))) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX))

    { 0, 0, 0, 0 },
};

int wxCheckListBox_methodCount = sizeof(wxCheckListBox_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxListBox && wxUSE_LISTBOX) && (wxLUA_USE_wxCheckListBox && wxUSE_CHECKLISTBOX)


#if wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL
// ---------------------------------------------------------------------------
// Bind class wxListCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxListCtrl'
int wxluatype_wxListCtrl = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_Arrange[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_Arrange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_Arrange[1] = {{ wxLua_wxListCtrl_Arrange, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxListCtrl_Arrange }};
//     bool     Arrange(int flag = wxLIST_ALIGN_DEFAULT)
static int LUACALL wxLua_wxListCtrl_Arrange(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flag = wxLIST_ALIGN_DEFAULT
    int flag = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxLIST_ALIGN_DEFAULT);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call Arrange
    bool returns = (self->Arrange(flag));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxImageList)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_AssignImageList[] = { &wxluatype_wxListCtrl, &wxluatype_wxImageList, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_AssignImageList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_AssignImageList[1] = {{ wxLua_wxListCtrl_AssignImageList, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_AssignImageList }};
//     void     AssignImageList(%ungc wxImageList *imageList, int which)
static int LUACALL wxLua_wxListCtrl_AssignImageList(lua_State *L)
{
    // int which
    int which = (int)wxlua_getnumbertype(L, 3);
    // wxImageList imageList
    wxImageList * imageList = (wxImageList *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImageList);
    if (wxluaO_isgcobject(L, imageList)) wxluaO_undeletegcobject(L, imageList);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call AssignImageList
    self->AssignImageList(imageList, which);

    return 0;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxImageList)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_ClearAll[] = { &wxluatype_wxListCtrl, NULL };
static int LUACALL wxLua_wxListCtrl_ClearAll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_ClearAll[1] = {{ wxLua_wxListCtrl_ClearAll, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListCtrl_ClearAll }};
//     void     ClearAll()
static int LUACALL wxLua_wxListCtrl_ClearAll(lua_State *L)
{
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call ClearAll
    self->ClearAll();

    return 0;
}


#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_Create[] = { &wxluatype_wxListCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxListCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_Create[1] = {{ wxLua_wxListCtrl_Create, WXLUAMETHOD_METHOD, 3, 8, s_wxluatypeArray_wxLua_wxListCtrl_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxLC_ICON, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxListCtrl")
static int LUACALL wxLua_wxListCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxListCtrl"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxListCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxLC_ICON
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxLC_ICON);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_DeleteAllItems[] = { &wxluatype_wxListCtrl, NULL };
static int LUACALL wxLua_wxListCtrl_DeleteAllItems(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_DeleteAllItems[1] = {{ wxLua_wxListCtrl_DeleteAllItems, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListCtrl_DeleteAllItems }};
//     bool     DeleteAllItems()
static int LUACALL wxLua_wxListCtrl_DeleteAllItems(lua_State *L)
{
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call DeleteAllItems
    bool returns = (self->DeleteAllItems());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_DeleteColumn[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_DeleteColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_DeleteColumn[1] = {{ wxLua_wxListCtrl_DeleteColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_DeleteColumn }};
//     bool     DeleteColumn(int col)
static int LUACALL wxLua_wxListCtrl_DeleteColumn(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call DeleteColumn
    bool returns = (self->DeleteColumn(col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_DeleteItem[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_DeleteItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_DeleteItem[1] = {{ wxLua_wxListCtrl_DeleteItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_DeleteItem }};
//     bool     DeleteItem(long item)
static int LUACALL wxLua_wxListCtrl_DeleteItem(lua_State *L)
{
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call DeleteItem
    bool returns = (self->DeleteItem(item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_EditLabel[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_EditLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_EditLabel[1] = {{ wxLua_wxListCtrl_EditLabel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_EditLabel }};
//     void     EditLabel(long item)
static int LUACALL wxLua_wxListCtrl_EditLabel(lua_State *L)
{
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call EditLabel
    self->EditLabel(item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_EnsureVisible[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_EnsureVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_EnsureVisible[1] = {{ wxLua_wxListCtrl_EnsureVisible, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_EnsureVisible }};
//     bool     EnsureVisible(long item)
static int LUACALL wxLua_wxListCtrl_EnsureVisible(lua_State *L)
{
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call EnsureVisible
    bool returns = (self->EnsureVisible(item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_FindItem2[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_FindItem2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_FindItem2[1] = {{ wxLua_wxListCtrl_FindItem2, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxListCtrl_FindItem2 }};
//     long     FindItem(long start, const wxPoint& pt, int direction)
static int LUACALL wxLua_wxListCtrl_FindItem2(lua_State *L)
{
    // int direction
    int direction = (int)wxlua_getnumbertype(L, 4);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint);
    // long start
    long start = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call FindItem
    long  returns = (self->FindItem(start, *pt, direction));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_FindItem1[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_FindItem1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_FindItem1[1] = {{ wxLua_wxListCtrl_FindItem1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_FindItem1 }};
//     long     FindItem(long start, long data)
static int LUACALL wxLua_wxListCtrl_FindItem1(lua_State *L)
{
    // long data
    long data = (long)wxlua_getnumbertype(L, 3);
    // long start
    long start = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call FindItem
    long  returns = (self->FindItem(start, data));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_FindItem[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxListCtrl_FindItem(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_FindItem[1] = {{ wxLua_wxListCtrl_FindItem, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxListCtrl_FindItem }};
//     long     FindItem(long start, const wxString& str, const bool partial = false)
static int LUACALL wxLua_wxListCtrl_FindItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const bool partial = false
    const bool partial = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : false);
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 3);
    // long start
    long start = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call FindItem
    long  returns = (self->FindItem(start, str, partial));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetColumn[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListCtrl_GetColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetColumn[1] = {{ wxLua_wxListCtrl_GetColumn, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_GetColumn }};
//     bool     GetColumn(int col, wxListItem& item) const
static int LUACALL wxLua_wxListCtrl_GetColumn(lua_State *L)
{
    // wxListItem item
    wxListItem * item = (wxListItem *)wxluaT_getuserdatatype(L, 3, wxluatype_wxListItem);
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetColumn
    bool returns = (self->GetColumn(col, *item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetColumnCount[] = { &wxluatype_wxListCtrl, NULL };
static int LUACALL wxLua_wxListCtrl_GetColumnCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetColumnCount[1] = {{ wxLua_wxListCtrl_GetColumnCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListCtrl_GetColumnCount }};
//     int      GetColumnCount() const
static int LUACALL wxLua_wxListCtrl_GetColumnCount(lua_State *L)
{
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetColumnCount
    int returns = (self->GetColumnCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetColumnWidth[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_GetColumnWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetColumnWidth[1] = {{ wxLua_wxListCtrl_GetColumnWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_GetColumnWidth }};
//     int      GetColumnWidth(int col) const
static int LUACALL wxLua_wxListCtrl_GetColumnWidth(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetColumnWidth
    int returns = (self->GetColumnWidth(col));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetCountPerPage[] = { &wxluatype_wxListCtrl, NULL };
static int LUACALL wxLua_wxListCtrl_GetCountPerPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetCountPerPage[1] = {{ wxLua_wxListCtrl_GetCountPerPage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListCtrl_GetCountPerPage }};
//     int      GetCountPerPage() const
static int LUACALL wxLua_wxListCtrl_GetCountPerPage(lua_State *L)
{
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetCountPerPage
    int returns = (self->GetCountPerPage());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && ((defined(__WXMSW__) || wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL))
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetEditControl[] = { &wxluatype_wxListCtrl, NULL };
static int LUACALL wxLua_wxListCtrl_GetEditControl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetEditControl[1] = {{ wxLua_wxListCtrl_GetEditControl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListCtrl_GetEditControl }};
//     %win|%wxchkver_2_8 wxTextCtrl* GetEditControl() const
static int LUACALL wxLua_wxListCtrl_GetEditControl(lua_State *L)
{
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetEditControl
    wxTextCtrl* returns = (wxTextCtrl*)self->GetEditControl();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextCtrl);

    return 1;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && ((defined(__WXMSW__) || wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL))

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxImageList)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetImageList[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_GetImageList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetImageList[1] = {{ wxLua_wxListCtrl_GetImageList, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_GetImageList }};
//     wxImageList* GetImageList(int which) const
static int LUACALL wxLua_wxListCtrl_GetImageList(lua_State *L)
{
    // int which
    int which = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetImageList
    wxImageList* returns = (wxImageList*)self->GetImageList(which);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImageList);

    return 1;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxImageList)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetItem[] = { &wxluatype_wxListCtrl, &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListCtrl_GetItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetItem[1] = {{ wxLua_wxListCtrl_GetItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_GetItem }};
//     bool     GetItem(wxListItem& info) const
static int LUACALL wxLua_wxListCtrl_GetItem(lua_State *L)
{
    // wxListItem info
    wxListItem * info = (wxListItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxListItem);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetItem
    bool returns = (self->GetItem(*info));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetItemCount[] = { &wxluatype_wxListCtrl, NULL };
static int LUACALL wxLua_wxListCtrl_GetItemCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetItemCount[1] = {{ wxLua_wxListCtrl_GetItemCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListCtrl_GetItemCount }};
//     int      GetItemCount() const
static int LUACALL wxLua_wxListCtrl_GetItemCount(lua_State *L)
{
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetItemCount
    int returns = (self->GetItemCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetItemData[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_GetItemData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetItemData[1] = {{ wxLua_wxListCtrl_GetItemData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_GetItemData }};
//     long     GetItemData(long item) const
static int LUACALL wxLua_wxListCtrl_GetItemData(lua_State *L)
{
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetItemData
    long  returns = (self->GetItemData(item));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetItemFont[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_GetItemFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetItemFont[1] = {{ wxLua_wxListCtrl_GetItemFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_GetItemFont }};
//     wxFont   GetItemFont(long item) const
static int LUACALL wxLua_wxListCtrl_GetItemFont(lua_State *L)
{
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetItemFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetItemFont(item));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxFont*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetItemPosition[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxListCtrl_GetItemPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetItemPosition[1] = {{ wxLua_wxListCtrl_GetItemPosition, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_GetItemPosition }};
//     bool     GetItemPosition(long item, wxPoint& pos) const
static int LUACALL wxLua_wxListCtrl_GetItemPosition(lua_State *L)
{
    // wxPoint pos
    wxPoint * pos = (wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint);
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetItemPosition
    bool returns = (self->GetItemPosition(item, *pos));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetItemRect[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_GetItemRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetItemRect[1] = {{ wxLua_wxListCtrl_GetItemRect, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxListCtrl_GetItemRect }};
//     bool     GetItemRect(long item, wxRect& rect, int code = wxLIST_RECT_BOUNDS) const
static int LUACALL wxLua_wxListCtrl_GetItemRect(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int code = wxLIST_RECT_BOUNDS
    int code = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxLIST_RECT_BOUNDS);
    // wxRect rect
    wxRect * rect = (wxRect *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRect);
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetItemRect
    bool returns = (self->GetItemRect(item, *rect, code));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL))
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetItemSpacing1[] = { &wxluatype_wxListCtrl, NULL };
static int LUACALL wxLua_wxListCtrl_GetItemSpacing1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetItemSpacing1[1] = {{ wxLua_wxListCtrl_GetItemSpacing1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListCtrl_GetItemSpacing1 }};
//     %wxchkver_2_6 wxSize GetItemSpacing() const
static int LUACALL wxLua_wxListCtrl_GetItemSpacing1(lua_State *L)
{
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetItemSpacing
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetItemSpacing());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL))

#if (!wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetItemSpacing[] = { &wxluatype_wxListCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxListCtrl_GetItemSpacing(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetItemSpacing[1] = {{ wxLua_wxListCtrl_GetItemSpacing, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_GetItemSpacing }};
//     !%wxchkver_2_6 int   GetItemSpacing(bool isSmall) const
static int LUACALL wxLua_wxListCtrl_GetItemSpacing(lua_State *L)
{
    // bool isSmall
    bool isSmall = wxlua_getbooleantype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetItemSpacing
    int returns = (self->GetItemSpacing(isSmall));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (!wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetItemState[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_GetItemState(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetItemState[1] = {{ wxLua_wxListCtrl_GetItemState, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_GetItemState }};
//     int      GetItemState(long item, long stateMask) const
static int LUACALL wxLua_wxListCtrl_GetItemState(lua_State *L)
{
    // long stateMask
    long stateMask = (long)wxlua_getnumbertype(L, 3);
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetItemState
    int returns = (self->GetItemState(item, stateMask));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetItemText[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_GetItemText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetItemText[1] = {{ wxLua_wxListCtrl_GetItemText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_GetItemText }};
//     wxString GetItemText(long item) const
static int LUACALL wxLua_wxListCtrl_GetItemText(lua_State *L)
{
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetItemText
    wxString returns = (self->GetItemText(item));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetNextItem[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_GetNextItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetNextItem[1] = {{ wxLua_wxListCtrl_GetNextItem, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxListCtrl_GetNextItem }};
//     long     GetNextItem(long item, int geometry = wxLIST_NEXT_ALL, int state = wxLIST_STATE_DONTCARE) const
static int LUACALL wxLua_wxListCtrl_GetNextItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int state = wxLIST_STATE_DONTCARE
    int state = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxLIST_STATE_DONTCARE);
    // int geometry = wxLIST_NEXT_ALL
    int geometry = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxLIST_NEXT_ALL);
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetNextItem
    long  returns = (self->GetNextItem(item, geometry, state));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetSelectedItemCount[] = { &wxluatype_wxListCtrl, NULL };
static int LUACALL wxLua_wxListCtrl_GetSelectedItemCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetSelectedItemCount[1] = {{ wxLua_wxListCtrl_GetSelectedItemCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListCtrl_GetSelectedItemCount }};
//     int      GetSelectedItemCount() const
static int LUACALL wxLua_wxListCtrl_GetSelectedItemCount(lua_State *L)
{
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetSelectedItemCount
    int returns = (self->GetSelectedItemCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetTextColour[] = { &wxluatype_wxListCtrl, NULL };
static int LUACALL wxLua_wxListCtrl_GetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetTextColour[1] = {{ wxLua_wxListCtrl_GetTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListCtrl_GetTextColour }};
//     wxColour GetTextColour() const
static int LUACALL wxLua_wxListCtrl_GetTextColour(lua_State *L)
{
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetTextColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetTextColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetTopItem[] = { &wxluatype_wxListCtrl, NULL };
static int LUACALL wxLua_wxListCtrl_GetTopItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetTopItem[1] = {{ wxLua_wxListCtrl_GetTopItem, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListCtrl_GetTopItem }};
//     long     GetTopItem() const
static int LUACALL wxLua_wxListCtrl_GetTopItem(lua_State *L)
{
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetTopItem
    long  returns = (self->GetTopItem());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_GetViewRect[] = { &wxluatype_wxListCtrl, NULL };
static int LUACALL wxLua_wxListCtrl_GetViewRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetViewRect[1] = {{ wxLua_wxListCtrl_GetViewRect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListCtrl_GetViewRect }};
//     wxRect   GetViewRect() const
static int LUACALL wxLua_wxListCtrl_GetViewRect(lua_State *L)
{
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call GetViewRect
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetViewRect());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_HitTest[] = { &wxluatype_wxListCtrl, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxListCtrl_HitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_HitTest[1] = {{ wxLua_wxListCtrl_HitTest, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_HitTest }};
// %override wxLua_wxListCtrl_HitTest
// long     HitTest(const wxPoint& point, int& flags)
static int LUACALL wxLua_wxListCtrl_HitTest(lua_State *L)
{
    // int& flags
    int flags;
    // const wxPoint& point
    const wxPoint *point = (wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxListCtrl *self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call HitTest
    long returns = self->HitTest(*point, flags);
    // push the result number
    lua_pushnumber(L, returns);
    // push the result flags
    lua_pushnumber(L, flags);
    // return the number of parameters
    return 2;
}


#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_InsertColumn1[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_InsertColumn1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_InsertColumn1[1] = {{ wxLua_wxListCtrl_InsertColumn1, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxListCtrl_InsertColumn1 }};
//     long     InsertColumn(long col, const wxString& heading, int format = wxLIST_FORMAT_LEFT, int width = -1)
static int LUACALL wxLua_wxListCtrl_InsertColumn1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // int format = wxLIST_FORMAT_LEFT
    int format = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxLIST_FORMAT_LEFT);
    // const wxString heading
    const wxString heading = wxlua_getwxStringtype(L, 3);
    // long col
    long col = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call InsertColumn
    long  returns = (self->InsertColumn(col, heading, format, width));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_InsertColumn[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListCtrl_InsertColumn(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_InsertColumn[1] = {{ wxLua_wxListCtrl_InsertColumn, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_InsertColumn }};
//     long     InsertColumn(long col, wxListItem& info)
static int LUACALL wxLua_wxListCtrl_InsertColumn(lua_State *L)
{
    // wxListItem info
    wxListItem * info = (wxListItem *)wxluaT_getuserdatatype(L, 3, wxluatype_wxListItem);
    // long col
    long col = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call InsertColumn
    long  returns = (self->InsertColumn(col, *info));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_InsertItem3[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_InsertItem3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_InsertItem3[1] = {{ wxLua_wxListCtrl_InsertItem3, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxListCtrl_InsertItem3 }};
//     long     InsertItem(long index, const wxString& label, int imageIndex)
static int LUACALL wxLua_wxListCtrl_InsertItem3(lua_State *L)
{
    // int imageIndex
    int imageIndex = (int)wxlua_getnumbertype(L, 4);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // long index
    long index = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call InsertItem
    long  returns = (self->InsertItem(index, label, imageIndex));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_InsertItem2[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_InsertItem2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_InsertItem2[1] = {{ wxLua_wxListCtrl_InsertItem2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_InsertItem2 }};
//     long     InsertItem(long index, int imageIndex)
static int LUACALL wxLua_wxListCtrl_InsertItem2(lua_State *L)
{
    // int imageIndex
    int imageIndex = (int)wxlua_getnumbertype(L, 3);
    // long index
    long index = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call InsertItem
    long  returns = (self->InsertItem(index, imageIndex));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_InsertItem1[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxListCtrl_InsertItem1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_InsertItem1[1] = {{ wxLua_wxListCtrl_InsertItem1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_InsertItem1 }};
//     long     InsertItem(long index, const wxString& label)
static int LUACALL wxLua_wxListCtrl_InsertItem1(lua_State *L)
{
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // long index
    long index = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call InsertItem
    long  returns = (self->InsertItem(index, label));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_InsertItem[] = { &wxluatype_wxListCtrl, &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListCtrl_InsertItem(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_InsertItem[1] = {{ wxLua_wxListCtrl_InsertItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_InsertItem }};
//     long     InsertItem(wxListItem& info)
static int LUACALL wxLua_wxListCtrl_InsertItem(lua_State *L)
{
    // wxListItem info
    wxListItem * info = (wxListItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxListItem);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call InsertItem
    long  returns = (self->InsertItem(*info));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_ScrollList[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_ScrollList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_ScrollList[1] = {{ wxLua_wxListCtrl_ScrollList, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_ScrollList }};
//     bool     ScrollList(int dx, int dy)
static int LUACALL wxLua_wxListCtrl_ScrollList(lua_State *L)
{
    // int dy
    int dy = (int)wxlua_getnumbertype(L, 3);
    // int dx
    int dx = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call ScrollList
    bool returns = (self->ScrollList(dx, dy));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_SetColumn[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListCtrl_SetColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SetColumn[1] = {{ wxLua_wxListCtrl_SetColumn, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_SetColumn }};
//     bool     SetColumn(int col, wxListItem& item)
static int LUACALL wxLua_wxListCtrl_SetColumn(lua_State *L)
{
    // wxListItem item
    wxListItem * item = (wxListItem *)wxluaT_getuserdatatype(L, 3, wxluatype_wxListItem);
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call SetColumn
    bool returns = (self->SetColumn(col, *item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_SetColumnWidth[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_SetColumnWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SetColumnWidth[1] = {{ wxLua_wxListCtrl_SetColumnWidth, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_SetColumnWidth }};
//     bool     SetColumnWidth(int col, int width)
static int LUACALL wxLua_wxListCtrl_SetColumnWidth(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 3);
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call SetColumnWidth
    bool returns = (self->SetColumnWidth(col, width));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxImageList)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_SetImageList[] = { &wxluatype_wxListCtrl, &wxluatype_wxImageList, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_SetImageList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SetImageList[1] = {{ wxLua_wxListCtrl_SetImageList, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_SetImageList }};
//     void     SetImageList(wxImageList* imageList, int which)
static int LUACALL wxLua_wxListCtrl_SetImageList(lua_State *L)
{
    // int which
    int which = (int)wxlua_getnumbertype(L, 3);
    // wxImageList imageList
    wxImageList * imageList = (wxImageList *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImageList);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call SetImageList
    self->SetImageList(imageList, which);

    return 0;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxImageList)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_SetItem1[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_SetItem1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SetItem1[1] = {{ wxLua_wxListCtrl_SetItem1, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxListCtrl_SetItem1 }};
//     long     SetItem(long index, int col, const wxString& label, int imageId = -1)
static int LUACALL wxLua_wxListCtrl_SetItem1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int imageId = -1
    int imageId = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 4);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // long index
    long index = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call SetItem
    long  returns = (self->SetItem(index, col, label, imageId));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_SetItem[] = { &wxluatype_wxListCtrl, &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListCtrl_SetItem(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SetItem[1] = {{ wxLua_wxListCtrl_SetItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_SetItem }};
//     bool     SetItem(wxListItem& info)
static int LUACALL wxLua_wxListCtrl_SetItem(lua_State *L)
{
    // wxListItem info
    wxListItem * info = (wxListItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxListItem);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call SetItem
    bool returns = (self->SetItem(*info));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_SetItemBackgroundColour[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxListCtrl_SetItemBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SetItemBackgroundColour[1] = {{ wxLua_wxListCtrl_SetItemBackgroundColour, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_SetItemBackgroundColour }};
//     void     SetItemBackgroundColour(long item, const wxColour& col)
static int LUACALL wxLua_wxListCtrl_SetItemBackgroundColour(lua_State *L)
{
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call SetItemBackgroundColour
    self->SetItemBackgroundColour(item, *col);

    return 0;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_SetItemColumnImage[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_SetItemColumnImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SetItemColumnImage[1] = {{ wxLua_wxListCtrl_SetItemColumnImage, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxListCtrl_SetItemColumnImage }};
//     bool     SetItemColumnImage(long item, long column, int image)
static int LUACALL wxLua_wxListCtrl_SetItemColumnImage(lua_State *L)
{
    // int image
    int image = (int)wxlua_getnumbertype(L, 4);
    // long column
    long column = (long)wxlua_getnumbertype(L, 3);
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call SetItemColumnImage
    bool returns = (self->SetItemColumnImage(item, column, image));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_SetItemData[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_SetItemData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SetItemData[1] = {{ wxLua_wxListCtrl_SetItemData, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_SetItemData }};
//     bool     SetItemData(long item, long data)
static int LUACALL wxLua_wxListCtrl_SetItemData(lua_State *L)
{
    // long data
    long data = (long)wxlua_getnumbertype(L, 3);
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call SetItemData
    bool returns = (self->SetItemData(item, data));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_SetItemImage[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_SetItemImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SetItemImage[1] = {{ wxLua_wxListCtrl_SetItemImage, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_SetItemImage }};
//     bool     SetItemImage(long item, int image) // int selImage) selImage is deprecated and isn't used anyway
static int LUACALL wxLua_wxListCtrl_SetItemImage(lua_State *L)
{
    // int image
    int image = (int)wxlua_getnumbertype(L, 3);
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call SetItemImage
    bool returns = (self->SetItemImage(item, image));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_SetItemPosition[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxListCtrl_SetItemPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SetItemPosition[1] = {{ wxLua_wxListCtrl_SetItemPosition, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_SetItemPosition }};
//     bool     SetItemPosition(long item, const wxPoint& pos)
static int LUACALL wxLua_wxListCtrl_SetItemPosition(lua_State *L)
{
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint);
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call SetItemPosition
    bool returns = (self->SetItemPosition(item, *pos));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_SetItemState[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_SetItemState(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SetItemState[1] = {{ wxLua_wxListCtrl_SetItemState, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxListCtrl_SetItemState }};
//     bool     SetItemState(long item, long state, long stateMask)
static int LUACALL wxLua_wxListCtrl_SetItemState(lua_State *L)
{
    // long stateMask
    long stateMask = (long)wxlua_getnumbertype(L, 4);
    // long state
    long state = (long)wxlua_getnumbertype(L, 3);
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call SetItemState
    bool returns = (self->SetItemState(item, state, stateMask));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_SetItemText[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxListCtrl_SetItemText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SetItemText[1] = {{ wxLua_wxListCtrl_SetItemText, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_SetItemText }};
//     void     SetItemText(long item, const wxString& text)
static int LUACALL wxLua_wxListCtrl_SetItemText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call SetItemText
    self->SetItemText(item, text);

    return 0;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_SetItemTextColour[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxListCtrl_SetItemTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SetItemTextColour[1] = {{ wxLua_wxListCtrl_SetItemTextColour, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_SetItemTextColour }};
//     void     SetItemTextColour(long item, const wxColour& col)
static int LUACALL wxLua_wxListCtrl_SetItemTextColour(lua_State *L)
{
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call SetItemTextColour
    self->SetItemTextColour(item, *col);

    return 0;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_SetSingleStyle[] = { &wxluatype_wxListCtrl, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxListCtrl_SetSingleStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SetSingleStyle[1] = {{ wxLua_wxListCtrl_SetSingleStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxListCtrl_SetSingleStyle }};
//     void     SetSingleStyle(long style, const bool add = true)
static int LUACALL wxLua_wxListCtrl_SetSingleStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const bool add = true
    const bool add = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // long style
    long style = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call SetSingleStyle
    self->SetSingleStyle(style, add);

    return 0;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_SetTextColour[] = { &wxluatype_wxListCtrl, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxListCtrl_SetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SetTextColour[1] = {{ wxLua_wxListCtrl_SetTextColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_SetTextColour }};
//     void     SetTextColour(const wxColour& col)
static int LUACALL wxLua_wxListCtrl_SetTextColour(lua_State *L)
{
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxListCtrl * self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);
    // call SetTextColour
    self->SetTextColour(*col);

    return 0;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_SortItems[] = { &wxluatype_wxListCtrl, &wxluatype_TFUNCTION, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListCtrl_SortItems(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SortItems[1] = {{ wxLua_wxListCtrl_SortItems, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_SortItems }};
// %override wxLua_wxListCtrl_SortItems


struct wxLua_LCF_data // wrap up the wxLuaState, lua_tag, and the compare data
{
    wxLuaState* wxlState;
    int lua_tag;
    long data;
};

int wxCALLBACK wxLua_ListCompareFunction(long item1, long item2, long sortData)
{
    wxLua_LCF_data* LCF_data = (wxLua_LCF_data*)sortData;

    lua_State *L = LCF_data->wxlState->GetLuaState();
    int old_top = lua_gettop(L);

    lua_rawgeti(L, LUA_REGISTRYINDEX, LCF_data->lua_tag);
    lua_pushnumber(L, item1);
    lua_pushnumber(L, item2);
    lua_pushnumber(L, LCF_data->data);

    LCF_data->wxlState->LuaPCall(3, 1);

    // for some bizarre reason lua converts the return to a string! try to get it back as a number
    // Happens with lua 5.1.2
    int ret = (int)lua_tonumber(L, -1); //LCF_data->wxlState->GetNumberType(0);
    lua_settop(L, old_top); // pop results

    return ret;
}

// bool SortItems(LuaFunction fnSortCallBack, long data)
static int LUACALL wxLua_wxListCtrl_SortItems(lua_State *L)
{
    wxLuaState wxlState(L);

    // long data
    long data = (long)wxlua_getintegertype(L, 3);
    wxLua_LCF_data LCF_data = { &wxlState, -1, data }; // only exists for this function

    if (lua_isfunction (L, 2))
    {
        lua_pushvalue(L, 2); // push function to top of stack
        LCF_data.lua_tag = luaL_ref(L, LUA_REGISTRYINDEX); // ref function and pop it from stack
    }
    else
        wxlua_argerror(L, 2, wxT("a 'lua function(long item1, long item2, long data)'"));

    // get this
    wxListCtrl *self = (wxListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListCtrl);

    // call SortItems
    bool returns = self->SortItems(wxLua_ListCompareFunction, (long)&LCF_data);

    luaL_unref(L, LUA_REGISTRYINDEX, LCF_data.lua_tag); // remove ref to function

    // push the result number
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 1;
}



#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxListCtrl_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_constructor1[1] = {{ wxLua_wxListCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 7, s_wxluatypeArray_wxLua_wxListCtrl_constructor1 }};
//     wxListCtrl(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxLC_ICON, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxListCtrl")
static int LUACALL wxLua_wxListCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxListCtrl"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxListCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 6 ? (const wxValidator *)wxluaT_getuserdatatype(L, 6, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxLC_ICON
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxLC_ICON);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxListCtrl* returns = new wxListCtrl(parent, id, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxListCtrl);

    return 1;
}

#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxListCtrl_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_constructor[1] = {{ wxLua_wxListCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxListCtrl()
static int LUACALL wxLua_wxListCtrl_constructor(lua_State *L)
{
    // call constructor
    wxListCtrl* returns = new wxListCtrl();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxListCtrl);

    return 1;
}




#if ((wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_FindItem_overload[] =
{

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxListCtrl_FindItem2, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxListCtrl_FindItem2 },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxListCtrl_FindItem1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_FindItem1 },
    { wxLua_wxListCtrl_FindItem, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxListCtrl_FindItem },
};
static int s_wxluafunc_wxLua_wxListCtrl_FindItem_overload_count = sizeof(s_wxluafunc_wxLua_wxListCtrl_FindItem_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)

#if ((wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)))||((!wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_GetItemSpacing_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL))
    { wxLua_wxListCtrl_GetItemSpacing1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListCtrl_GetItemSpacing1 },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL))

#if (!wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
    { wxLua_wxListCtrl_GetItemSpacing, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_GetItemSpacing },
#endif // (!wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
};
static int s_wxluafunc_wxLua_wxListCtrl_GetItemSpacing_overload_count = sizeof(s_wxluafunc_wxLua_wxListCtrl_GetItemSpacing_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)))||((!wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL))

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_InsertColumn_overload[] =
{
    { wxLua_wxListCtrl_InsertColumn1, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxListCtrl_InsertColumn1 },
    { wxLua_wxListCtrl_InsertColumn, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_InsertColumn },
};
static int s_wxluafunc_wxLua_wxListCtrl_InsertColumn_overload_count = sizeof(s_wxluafunc_wxLua_wxListCtrl_InsertColumn_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_InsertItem_overload[] =
{
    { wxLua_wxListCtrl_InsertItem3, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxListCtrl_InsertItem3 },
    { wxLua_wxListCtrl_InsertItem2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_InsertItem2 },
    { wxLua_wxListCtrl_InsertItem1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListCtrl_InsertItem1 },
    { wxLua_wxListCtrl_InsertItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_InsertItem },
};
static int s_wxluafunc_wxLua_wxListCtrl_InsertItem_overload_count = sizeof(s_wxluafunc_wxLua_wxListCtrl_InsertItem_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_SetItem_overload[] =
{
    { wxLua_wxListCtrl_SetItem1, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxListCtrl_SetItem1 },
    { wxLua_wxListCtrl_SetItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListCtrl_SetItem },
};
static int s_wxluafunc_wxLua_wxListCtrl_SetItem_overload_count = sizeof(s_wxluafunc_wxLua_wxListCtrl_SetItem_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListCtrl_constructor_overload[] =
{

#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxListCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 7, s_wxluatypeArray_wxLua_wxListCtrl_constructor1 },
#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxListCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxListCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxListCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxListCtrl_methods[] = {
    { "Arrange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_Arrange, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxImageList)
    { "AssignImageList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_AssignImageList, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxImageList)

    { "ClearAll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_ClearAll, 1, NULL },

#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_Create, 1, NULL },
#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect)

    { "DeleteAllItems", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_DeleteAllItems, 1, NULL },
    { "DeleteColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_DeleteColumn, 1, NULL },
    { "DeleteItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_DeleteItem, 1, NULL },
    { "EditLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_EditLabel, 1, NULL },
    { "EnsureVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_EnsureVisible, 1, NULL },

#if ((wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
    { "FindItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_FindItem_overload, s_wxluafunc_wxLua_wxListCtrl_FindItem_overload_count, 0 },
#endif // ((wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)

    { "GetColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetColumn, 1, NULL },
    { "GetColumnCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetColumnCount, 1, NULL },
    { "GetColumnWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetColumnWidth, 1, NULL },
    { "GetCountPerPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetCountPerPage, 1, NULL },

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && ((defined(__WXMSW__) || wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL))
    { "GetEditControl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetEditControl, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && ((defined(__WXMSW__) || wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL))

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxImageList)
    { "GetImageList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetImageList, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxImageList)

    { "GetItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetItem, 1, NULL },
    { "GetItemCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetItemCount, 1, NULL },
    { "GetItemData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetItemData, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)
    { "GetItemFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetItemFont, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)
    { "GetItemPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetItemPosition, 1, NULL },
    { "GetItemRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetItemRect, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)

#if ((wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)))||((!wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL))
    { "GetItemSpacing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetItemSpacing_overload, s_wxluafunc_wxLua_wxListCtrl_GetItemSpacing_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && ((wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)))||((!wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL))

    { "GetItemState", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetItemState, 1, NULL },
    { "GetItemText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetItemText, 1, NULL },
    { "GetNextItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetNextItem, 1, NULL },
    { "GetSelectedItemCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetSelectedItemCount, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "GetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "GetTopItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetTopItem, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)
    { "GetViewRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_GetViewRect, 1, NULL },
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_HitTest, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
    { "InsertColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_InsertColumn_overload, s_wxluafunc_wxLua_wxListCtrl_InsertColumn_overload_count, 0 },
    { "InsertItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_InsertItem_overload, s_wxluafunc_wxLua_wxListCtrl_InsertItem_overload_count, 0 },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)

    { "ScrollList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_ScrollList, 1, NULL },
    { "SetColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_SetColumn, 1, NULL },
    { "SetColumnWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_SetColumnWidth, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxImageList)
    { "SetImageList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_SetImageList, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxImageList)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
    { "SetItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_SetItem_overload, s_wxluafunc_wxLua_wxListCtrl_SetItem_overload_count, 0 },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "SetItemBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_SetItemBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "SetItemColumnImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_SetItemColumnImage, 1, NULL },
    { "SetItemData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_SetItemData, 1, NULL },
    { "SetItemImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_SetItemImage, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)
    { "SetItemPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_SetItemPosition, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)

    { "SetItemState", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_SetItemState, 1, NULL },
    { "SetItemText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_SetItemText, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "SetItemTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_SetItemTextColour, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "SetSingleStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_SetSingleStyle, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "SetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_SetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "SortItems", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListCtrl_SortItems, 1, NULL },

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
    { "wxListCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxListCtrl_constructor_overload, s_wxluafunc_wxLua_wxListCtrl_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)

    { 0, 0, 0, 0 },
};

int wxListCtrl_methodCount = sizeof(wxListCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL


#if wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL
// ---------------------------------------------------------------------------
// Bind class wxListItemAttr
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxListItemAttr'
int wxluatype_wxListItemAttr = WXLUA_TUNKNOWN;

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListItemAttr_AssignFrom[] = { &wxluatype_wxListItemAttr, &wxluatype_wxListItemAttr, NULL };
static int LUACALL wxLua_wxListItemAttr_AssignFrom(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItemAttr_AssignFrom[1] = {{ wxLua_wxListItemAttr_AssignFrom, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItemAttr_AssignFrom }};
//     %wxchkver_2_8 void AssignFrom(const wxListItemAttr& source)
static int LUACALL wxLua_wxListItemAttr_AssignFrom(lua_State *L)
{
    // const wxListItemAttr source
    const wxListItemAttr * source = (const wxListItemAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxListItemAttr);
    // get this
    wxListItemAttr * self = (wxListItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItemAttr);
    // call AssignFrom
    self->AssignFrom(*source);

    return 0;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListItemAttr_GetBackgroundColour[] = { &wxluatype_wxListItemAttr, NULL };
static int LUACALL wxLua_wxListItemAttr_GetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItemAttr_GetBackgroundColour[1] = {{ wxLua_wxListItemAttr_GetBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItemAttr_GetBackgroundColour }};
//     wxColour GetBackgroundColour()
static int LUACALL wxLua_wxListItemAttr_GetBackgroundColour(lua_State *L)
{
    // get this
    wxListItemAttr * self = (wxListItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItemAttr);
    // call GetBackgroundColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetBackgroundColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListItemAttr_GetFont[] = { &wxluatype_wxListItemAttr, NULL };
static int LUACALL wxLua_wxListItemAttr_GetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItemAttr_GetFont[1] = {{ wxLua_wxListItemAttr_GetFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItemAttr_GetFont }};
//     wxFont GetFont()
static int LUACALL wxLua_wxListItemAttr_GetFont(lua_State *L)
{
    // get this
    wxListItemAttr * self = (wxListItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItemAttr);
    // call GetFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetFont());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxFont*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListItemAttr_GetTextColour[] = { &wxluatype_wxListItemAttr, NULL };
static int LUACALL wxLua_wxListItemAttr_GetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItemAttr_GetTextColour[1] = {{ wxLua_wxListItemAttr_GetTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItemAttr_GetTextColour }};
//     wxColour GetTextColour()
static int LUACALL wxLua_wxListItemAttr_GetTextColour(lua_State *L)
{
    // get this
    wxListItemAttr * self = (wxListItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItemAttr);
    // call GetTextColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetTextColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItemAttr_HasBackgroundColour[] = { &wxluatype_wxListItemAttr, NULL };
static int LUACALL wxLua_wxListItemAttr_HasBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItemAttr_HasBackgroundColour[1] = {{ wxLua_wxListItemAttr_HasBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItemAttr_HasBackgroundColour }};
//     bool HasBackgroundColour()
static int LUACALL wxLua_wxListItemAttr_HasBackgroundColour(lua_State *L)
{
    // get this
    wxListItemAttr * self = (wxListItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItemAttr);
    // call HasBackgroundColour
    bool returns = (self->HasBackgroundColour());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItemAttr_HasFont[] = { &wxluatype_wxListItemAttr, NULL };
static int LUACALL wxLua_wxListItemAttr_HasFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItemAttr_HasFont[1] = {{ wxLua_wxListItemAttr_HasFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItemAttr_HasFont }};
//     bool HasFont()
static int LUACALL wxLua_wxListItemAttr_HasFont(lua_State *L)
{
    // get this
    wxListItemAttr * self = (wxListItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItemAttr);
    // call HasFont
    bool returns = (self->HasFont());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItemAttr_HasTextColour[] = { &wxluatype_wxListItemAttr, NULL };
static int LUACALL wxLua_wxListItemAttr_HasTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItemAttr_HasTextColour[1] = {{ wxLua_wxListItemAttr_HasTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItemAttr_HasTextColour }};
//     bool HasTextColour()
static int LUACALL wxLua_wxListItemAttr_HasTextColour(lua_State *L)
{
    // get this
    wxListItemAttr * self = (wxListItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItemAttr);
    // call HasTextColour
    bool returns = (self->HasTextColour());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListItemAttr_SetBackgroundColour[] = { &wxluatype_wxListItemAttr, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxListItemAttr_SetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItemAttr_SetBackgroundColour[1] = {{ wxLua_wxListItemAttr_SetBackgroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItemAttr_SetBackgroundColour }};
//     void SetBackgroundColour(const wxColour& colBack)
static int LUACALL wxLua_wxListItemAttr_SetBackgroundColour(lua_State *L)
{
    // const wxColour colBack
    const wxColour * colBack = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxListItemAttr * self = (wxListItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItemAttr);
    // call SetBackgroundColour
    self->SetBackgroundColour(*colBack);

    return 0;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListItemAttr_SetFont[] = { &wxluatype_wxListItemAttr, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxListItemAttr_SetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItemAttr_SetFont[1] = {{ wxLua_wxListItemAttr_SetFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItemAttr_SetFont }};
//     void SetFont(const wxFont& font)
static int LUACALL wxLua_wxListItemAttr_SetFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxListItemAttr * self = (wxListItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItemAttr);
    // call SetFont
    self->SetFont(*font);

    return 0;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListItemAttr_SetTextColour[] = { &wxluatype_wxListItemAttr, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxListItemAttr_SetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItemAttr_SetTextColour[1] = {{ wxLua_wxListItemAttr_SetTextColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItemAttr_SetTextColour }};
//     void SetTextColour(const wxColour& colText)
static int LUACALL wxLua_wxListItemAttr_SetTextColour(lua_State *L)
{
    // const wxColour colText
    const wxColour * colText = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxListItemAttr * self = (wxListItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItemAttr);
    // call SetTextColour
    self->SetTextColour(*colText);

    return 0;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItemAttr_delete[] = { &wxluatype_wxListItemAttr, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItemAttr_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxListItemAttr_delete }};


#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListItemAttr_constructor[] = { &wxluatype_wxColour, &wxluatype_wxColour, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxListItemAttr_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItemAttr_constructor[1] = {{ wxLua_wxListItemAttr_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxListItemAttr_constructor }};
//     wxListItemAttr(const wxColour& colText = wxNullColour, const wxColour& colBack = wxNullColour, const wxFont& font = wxNullFont)
static int LUACALL wxLua_wxListItemAttr_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxFont font = wxNullFont
    const wxFont * font = (argCount >= 3 ? (const wxFont *)wxluaT_getuserdatatype(L, 3, wxluatype_wxFont) : &wxNullFont);
    // const wxColour colBack = wxNullColour
    const wxColour * colBack = (argCount >= 2 ? (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour) : &wxNullColour);
    // const wxColour colText = wxNullColour
    const wxColour * colText = (argCount >= 1 ? (const wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour) : &wxNullColour);
    // call constructor
    wxListItemAttr* returns = new wxListItemAttr(*colText, *colBack, *font);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxListItemAttr((wxListItemAttr*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxListItemAttr);

    return 1;
}

#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxListItemAttr_methods[] = {
#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
    { "AssignFrom", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItemAttr_AssignFrom, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "GetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItemAttr_GetBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)
    { "GetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItemAttr_GetFont, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "GetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItemAttr_GetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "HasBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItemAttr_HasBackgroundColour, 1, NULL },
    { "HasFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItemAttr_HasFont, 1, NULL },
    { "HasTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItemAttr_HasTextColour, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "SetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItemAttr_SetBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)
    { "SetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItemAttr_SetFont, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "SetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItemAttr_SetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxListItemAttr_delete, 1, NULL },

#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
    { "wxListItemAttr", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxListItemAttr_constructor, 1, NULL },
#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)

    { 0, 0, 0, 0 },
};

int wxListItemAttr_methodCount = sizeof(wxListItemAttr_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL


#if wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL
// ---------------------------------------------------------------------------
// Bind class wxListItem
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxListItem'
int wxluatype_wxListItem = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_Clear[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_Clear[1] = {{ wxLua_wxListItem_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItem_Clear }};
//     void     Clear()
static int LUACALL wxLua_wxListItem_Clear(lua_State *L)
{
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_ClearAttributes[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_ClearAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_ClearAttributes[1] = {{ wxLua_wxListItem_ClearAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItem_ClearAttributes }};
//     void     ClearAttributes()
static int LUACALL wxLua_wxListItem_ClearAttributes(lua_State *L)
{
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call ClearAttributes
    self->ClearAttributes();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_GetAlign[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_GetAlign(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_GetAlign[1] = {{ wxLua_wxListItem_GetAlign, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItem_GetAlign }};
//     wxListColumnFormat GetAlign()
static int LUACALL wxLua_wxListItem_GetAlign(lua_State *L)
{
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call GetAlign
    wxListColumnFormat returns = (self->GetAlign());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_GetAttributes[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_GetAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_GetAttributes[1] = {{ wxLua_wxListItem_GetAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItem_GetAttributes }};
//     wxListItemAttr *GetAttributes()
static int LUACALL wxLua_wxListItem_GetAttributes(lua_State *L)
{
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call GetAttributes
    wxListItemAttr* returns = (wxListItemAttr*)self->GetAttributes();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxListItemAttr);

    return 1;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_GetBackgroundColour[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_GetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_GetBackgroundColour[1] = {{ wxLua_wxListItem_GetBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItem_GetBackgroundColour }};
//     wxColour GetBackgroundColour() const
static int LUACALL wxLua_wxListItem_GetBackgroundColour(lua_State *L)
{
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call GetBackgroundColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetBackgroundColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_GetColumn[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_GetColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_GetColumn[1] = {{ wxLua_wxListItem_GetColumn, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItem_GetColumn }};
//     int      GetColumn()
static int LUACALL wxLua_wxListItem_GetColumn(lua_State *L)
{
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call GetColumn
    int returns = (self->GetColumn());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_GetData[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_GetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_GetData[1] = {{ wxLua_wxListItem_GetData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItem_GetData }};
//     long     GetData()
static int LUACALL wxLua_wxListItem_GetData(lua_State *L)
{
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call GetData
    long  returns = (self->GetData());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_GetFont[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_GetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_GetFont[1] = {{ wxLua_wxListItem_GetFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItem_GetFont }};
//     wxFont   GetFont() const
static int LUACALL wxLua_wxListItem_GetFont(lua_State *L)
{
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call GetFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetFont());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxFont*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_GetId[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_GetId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_GetId[1] = {{ wxLua_wxListItem_GetId, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItem_GetId }};
//     long     GetId()
static int LUACALL wxLua_wxListItem_GetId(lua_State *L)
{
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call GetId
    long  returns = (self->GetId());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_GetImage[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_GetImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_GetImage[1] = {{ wxLua_wxListItem_GetImage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItem_GetImage }};
//     int      GetImage()
static int LUACALL wxLua_wxListItem_GetImage(lua_State *L)
{
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call GetImage
    int returns = (self->GetImage());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_GetMask[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_GetMask(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_GetMask[1] = {{ wxLua_wxListItem_GetMask, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItem_GetMask }};
//     long     GetMask()
static int LUACALL wxLua_wxListItem_GetMask(lua_State *L)
{
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call GetMask
    long  returns = (self->GetMask());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_GetState[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_GetState(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_GetState[1] = {{ wxLua_wxListItem_GetState, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItem_GetState }};
//     long     GetState()
static int LUACALL wxLua_wxListItem_GetState(lua_State *L)
{
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call GetState
    long  returns = (self->GetState());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_GetText[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_GetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_GetText[1] = {{ wxLua_wxListItem_GetText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItem_GetText }};
//     wxString GetText()
static int LUACALL wxLua_wxListItem_GetText(lua_State *L)
{
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call GetText
    wxString returns = (self->GetText());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_GetTextColour[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_GetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_GetTextColour[1] = {{ wxLua_wxListItem_GetTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItem_GetTextColour }};
//     wxColour GetTextColour() const
static int LUACALL wxLua_wxListItem_GetTextColour(lua_State *L)
{
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call GetTextColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetTextColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_GetWidth[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_GetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_GetWidth[1] = {{ wxLua_wxListItem_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItem_GetWidth }};
//     int      GetWidth()
static int LUACALL wxLua_wxListItem_GetWidth(lua_State *L)
{
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call GetWidth
    int returns = (self->GetWidth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_HasAttributes[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_HasAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_HasAttributes[1] = {{ wxLua_wxListItem_HasAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListItem_HasAttributes }};
//     bool     HasAttributes()
static int LUACALL wxLua_wxListItem_HasAttributes(lua_State *L)
{
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call HasAttributes
    bool returns = (self->HasAttributes());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_SetAlign[] = { &wxluatype_wxListItem, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxListItem_SetAlign(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_SetAlign[1] = {{ wxLua_wxListItem_SetAlign, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItem_SetAlign }};
//     void     SetAlign(wxListColumnFormat align)
static int LUACALL wxLua_wxListItem_SetAlign(lua_State *L)
{
    // wxListColumnFormat align
    wxListColumnFormat align = (wxListColumnFormat)wxlua_getenumtype(L, 2);
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call SetAlign
    self->SetAlign(align);

    return 0;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_SetBackgroundColour[] = { &wxluatype_wxListItem, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxListItem_SetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_SetBackgroundColour[1] = {{ wxLua_wxListItem_SetBackgroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItem_SetBackgroundColour }};
//     void     SetBackgroundColour(const wxColour& colBack)
static int LUACALL wxLua_wxListItem_SetBackgroundColour(lua_State *L)
{
    // const wxColour colBack
    const wxColour * colBack = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call SetBackgroundColour
    self->SetBackgroundColour(*colBack);

    return 0;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_SetColumn[] = { &wxluatype_wxListItem, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListItem_SetColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_SetColumn[1] = {{ wxLua_wxListItem_SetColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItem_SetColumn }};
//     void     SetColumn(int col)
static int LUACALL wxLua_wxListItem_SetColumn(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call SetColumn
    self->SetColumn(col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_SetData[] = { &wxluatype_wxListItem, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListItem_SetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_SetData[1] = {{ wxLua_wxListItem_SetData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItem_SetData }};
//     void     SetData(long data)
static int LUACALL wxLua_wxListItem_SetData(lua_State *L)
{
    // long data
    long data = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call SetData
    self->SetData(data);

    return 0;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_SetFont[] = { &wxluatype_wxListItem, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxListItem_SetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_SetFont[1] = {{ wxLua_wxListItem_SetFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItem_SetFont }};
//     void     SetFont(const wxFont& font)
static int LUACALL wxLua_wxListItem_SetFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call SetFont
    self->SetFont(*font);

    return 0;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_SetId[] = { &wxluatype_wxListItem, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListItem_SetId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_SetId[1] = {{ wxLua_wxListItem_SetId, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItem_SetId }};
//     void     SetId(long id)
static int LUACALL wxLua_wxListItem_SetId(lua_State *L)
{
    // long id
    long id = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call SetId
    self->SetId(id);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_SetImage[] = { &wxluatype_wxListItem, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListItem_SetImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_SetImage[1] = {{ wxLua_wxListItem_SetImage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItem_SetImage }};
//     void     SetImage(int image)
static int LUACALL wxLua_wxListItem_SetImage(lua_State *L)
{
    // int image
    int image = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call SetImage
    self->SetImage(image);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_SetMask[] = { &wxluatype_wxListItem, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListItem_SetMask(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_SetMask[1] = {{ wxLua_wxListItem_SetMask, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItem_SetMask }};
//     void     SetMask(long mask)
static int LUACALL wxLua_wxListItem_SetMask(lua_State *L)
{
    // long mask
    long mask = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call SetMask
    self->SetMask(mask);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_SetState[] = { &wxluatype_wxListItem, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListItem_SetState(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_SetState[1] = {{ wxLua_wxListItem_SetState, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItem_SetState }};
//     void     SetState(long state)
static int LUACALL wxLua_wxListItem_SetState(lua_State *L)
{
    // long state
    long state = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call SetState
    self->SetState(state);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_SetStateMask[] = { &wxluatype_wxListItem, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListItem_SetStateMask(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_SetStateMask[1] = {{ wxLua_wxListItem_SetStateMask, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItem_SetStateMask }};
//     void     SetStateMask(long stateMask)
static int LUACALL wxLua_wxListItem_SetStateMask(lua_State *L)
{
    // long stateMask
    long stateMask = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call SetStateMask
    self->SetStateMask(stateMask);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_SetText[] = { &wxluatype_wxListItem, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxListItem_SetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_SetText[1] = {{ wxLua_wxListItem_SetText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItem_SetText }};
//     void     SetText(const wxString& text)
static int LUACALL wxLua_wxListItem_SetText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call SetText
    self->SetText(text);

    return 0;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_SetTextColour[] = { &wxluatype_wxListItem, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxListItem_SetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_SetTextColour[1] = {{ wxLua_wxListItem_SetTextColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItem_SetTextColour }};
//     void     SetTextColour(const wxColour& colText)
static int LUACALL wxLua_wxListItem_SetTextColour(lua_State *L)
{
    // const wxColour colText
    const wxColour * colText = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call SetTextColour
    self->SetTextColour(*colText);

    return 0;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_SetWidth[] = { &wxluatype_wxListItem, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListItem_SetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_SetWidth[1] = {{ wxLua_wxListItem_SetWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListItem_SetWidth }};
//     void     SetWidth(int width)
static int LUACALL wxLua_wxListItem_SetWidth(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxListItem * self = (wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call SetWidth
    self->SetWidth(width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_delete[] = { &wxluatype_wxListItem, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxListItem_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxListItem_constructor1[] = { &wxluatype_wxListItem, NULL };
static int LUACALL wxLua_wxListItem_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_constructor1[1] = {{ wxLua_wxListItem_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxListItem_constructor1 }};
//     wxListItem(const wxListItem& item)
static int LUACALL wxLua_wxListItem_constructor1(lua_State *L)
{
    // const wxListItem item
    const wxListItem * item = (const wxListItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListItem);
    // call constructor
    wxListItem* returns = new wxListItem(*item);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxListItem);

    return 1;
}

static int LUACALL wxLua_wxListItem_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_constructor[1] = {{ wxLua_wxListItem_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxListItem()
static int LUACALL wxLua_wxListItem_constructor(lua_State *L)
{
    // call constructor
    wxListItem* returns = new wxListItem();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxListItem);

    return 1;
}




#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListItem_constructor_overload[] =
{
    { wxLua_wxListItem_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxListItem_constructor1 },
    { wxLua_wxListItem_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxListItem_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxListItem_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxListItem_methods[] = {
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_Clear, 1, NULL },
    { "ClearAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_ClearAttributes, 1, NULL },
    { "GetAlign", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_GetAlign, 1, NULL },
    { "GetAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_GetAttributes, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "GetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_GetBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "GetColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_GetColumn, 1, NULL },
    { "GetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_GetData, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)
    { "GetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_GetFont, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)

    { "GetId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_GetId, 1, NULL },
    { "GetImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_GetImage, 1, NULL },
    { "GetMask", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_GetMask, 1, NULL },
    { "GetState", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_GetState, 1, NULL },
    { "GetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_GetText, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "GetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_GetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "GetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_GetWidth, 1, NULL },
    { "HasAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_HasAttributes, 1, NULL },
    { "SetAlign", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_SetAlign, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "SetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_SetBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "SetColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_SetColumn, 1, NULL },
    { "SetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_SetData, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)
    { "SetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_SetFont, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxFont)

    { "SetId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_SetId, 1, NULL },
    { "SetImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_SetImage, 1, NULL },
    { "SetMask", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_SetMask, 1, NULL },
    { "SetState", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_SetState, 1, NULL },
    { "SetStateMask", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_SetStateMask, 1, NULL },
    { "SetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_SetText, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "SetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_SetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "SetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListItem_SetWidth, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxListItem_delete, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
    { "wxListItem", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxListItem_constructor_overload, s_wxluafunc_wxLua_wxListItem_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)

    { 0, 0, 0, 0 },
};

int wxListItem_methodCount = sizeof(wxListItem_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL


#if wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL
// ---------------------------------------------------------------------------
// Bind class wxListEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxListEvent'
int wxluatype_wxListEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxListEvent_GetColumn[] = { &wxluatype_wxListEvent, NULL };
static int LUACALL wxLua_wxListEvent_GetColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListEvent_GetColumn[1] = {{ wxLua_wxListEvent_GetColumn, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListEvent_GetColumn }};
//     int GetColumn() const
static int LUACALL wxLua_wxListEvent_GetColumn(lua_State *L)
{
    // get this
    wxListEvent * self = (wxListEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListEvent);
    // call GetColumn
    int returns = (self->GetColumn());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListEvent_GetData[] = { &wxluatype_wxListEvent, NULL };
static int LUACALL wxLua_wxListEvent_GetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListEvent_GetData[1] = {{ wxLua_wxListEvent_GetData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListEvent_GetData }};
//     long GetData() const
static int LUACALL wxLua_wxListEvent_GetData(lua_State *L)
{
    // get this
    wxListEvent * self = (wxListEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListEvent);
    // call GetData
    long  returns = (self->GetData());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListEvent_GetImage[] = { &wxluatype_wxListEvent, NULL };
static int LUACALL wxLua_wxListEvent_GetImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListEvent_GetImage[1] = {{ wxLua_wxListEvent_GetImage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListEvent_GetImage }};
//     int GetImage() const
static int LUACALL wxLua_wxListEvent_GetImage(lua_State *L)
{
    // get this
    wxListEvent * self = (wxListEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListEvent);
    // call GetImage
    int returns = (self->GetImage());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListEvent_GetIndex[] = { &wxluatype_wxListEvent, NULL };
static int LUACALL wxLua_wxListEvent_GetIndex(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListEvent_GetIndex[1] = {{ wxLua_wxListEvent_GetIndex, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListEvent_GetIndex }};
//     long GetIndex() const
static int LUACALL wxLua_wxListEvent_GetIndex(lua_State *L)
{
    // get this
    wxListEvent * self = (wxListEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListEvent);
    // call GetIndex
    long  returns = (self->GetIndex());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListEvent_GetItem[] = { &wxluatype_wxListEvent, NULL };
static int LUACALL wxLua_wxListEvent_GetItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListEvent_GetItem[1] = {{ wxLua_wxListEvent_GetItem, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListEvent_GetItem }};
//     const wxListItem& GetItem() const
static int LUACALL wxLua_wxListEvent_GetItem(lua_State *L)
{
    // get this
    wxListEvent * self = (wxListEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListEvent);
    // call GetItem
    const wxListItem* returns = &self->GetItem();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxListItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListEvent_GetKeyCode[] = { &wxluatype_wxListEvent, NULL };
static int LUACALL wxLua_wxListEvent_GetKeyCode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListEvent_GetKeyCode[1] = {{ wxLua_wxListEvent_GetKeyCode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListEvent_GetKeyCode }};
//     int GetKeyCode() const
static int LUACALL wxLua_wxListEvent_GetKeyCode(lua_State *L)
{
    // get this
    wxListEvent * self = (wxListEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListEvent);
    // call GetKeyCode
    int returns = (self->GetKeyCode());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListEvent_GetLabel[] = { &wxluatype_wxListEvent, NULL };
static int LUACALL wxLua_wxListEvent_GetLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListEvent_GetLabel[1] = {{ wxLua_wxListEvent_GetLabel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListEvent_GetLabel }};
//     const wxString& GetLabel() const
static int LUACALL wxLua_wxListEvent_GetLabel(lua_State *L)
{
    // get this
    wxListEvent * self = (wxListEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListEvent);
    // call GetLabel
    wxString returns = (self->GetLabel());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListEvent_GetMask[] = { &wxluatype_wxListEvent, NULL };
static int LUACALL wxLua_wxListEvent_GetMask(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListEvent_GetMask[1] = {{ wxLua_wxListEvent_GetMask, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListEvent_GetMask }};
//     long GetMask() const
static int LUACALL wxLua_wxListEvent_GetMask(lua_State *L)
{
    // get this
    wxListEvent * self = (wxListEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListEvent);
    // call GetMask
    long  returns = (self->GetMask());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListEvent_GetPoint[] = { &wxluatype_wxListEvent, NULL };
static int LUACALL wxLua_wxListEvent_GetPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListEvent_GetPoint[1] = {{ wxLua_wxListEvent_GetPoint, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListEvent_GetPoint }};
//     wxPoint GetPoint() const
static int LUACALL wxLua_wxListEvent_GetPoint(lua_State *L)
{
    // get this
    wxListEvent * self = (wxListEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListEvent);
    // call GetPoint
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPoint());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListEvent_GetText[] = { &wxluatype_wxListEvent, NULL };
static int LUACALL wxLua_wxListEvent_GetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListEvent_GetText[1] = {{ wxLua_wxListEvent_GetText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListEvent_GetText }};
//     const wxString& GetText() const
static int LUACALL wxLua_wxListEvent_GetText(lua_State *L)
{
    // get this
    wxListEvent * self = (wxListEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListEvent);
    // call GetText
    wxString returns = (self->GetText());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListEvent_IsEditCancelled[] = { &wxluatype_wxListEvent, NULL };
static int LUACALL wxLua_wxListEvent_IsEditCancelled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListEvent_IsEditCancelled[1] = {{ wxLua_wxListEvent_IsEditCancelled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListEvent_IsEditCancelled }};
//     bool IsEditCancelled() const
static int LUACALL wxLua_wxListEvent_IsEditCancelled(lua_State *L)
{
    // get this
    wxListEvent * self = (wxListEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListEvent);
    // call IsEditCancelled
    bool returns = (self->IsEditCancelled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListEvent_delete[] = { &wxluatype_wxListEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxListEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxListEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListEvent_constructor[1] = {{ wxLua_wxListEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxListEvent_constructor }};
//     wxListEvent(wxEventType commandType = 0, int id = 0)
static int LUACALL wxLua_wxListEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType commandType = 0
    wxEventType commandType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxListEvent* returns = new wxListEvent(commandType, id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxListEvent);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxListEvent_methods[] = {
    { "GetColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListEvent_GetColumn, 1, NULL },
    { "GetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListEvent_GetData, 1, NULL },
    { "GetImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListEvent_GetImage, 1, NULL },
    { "GetIndex", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListEvent_GetIndex, 1, NULL },
    { "GetItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListEvent_GetItem, 1, NULL },
    { "GetKeyCode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListEvent_GetKeyCode, 1, NULL },
    { "GetLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListEvent_GetLabel, 1, NULL },
    { "GetMask", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListEvent_GetMask, 1, NULL },

#if (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)
    { "GetPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListEvent_GetPoint, 1, NULL },
#endif // (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL) && (wxLUA_USE_wxPointSizeRect)

    { "GetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListEvent_GetText, 1, NULL },
    { "IsEditCancelled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListEvent_IsEditCancelled, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxListEvent_delete, 1, NULL },
    { "wxListEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxListEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxListEvent_methodCount = sizeof(wxListEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL


#if wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL
// ---------------------------------------------------------------------------
// Bind class wxListView
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxListView'
int wxluatype_wxListView = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxListView_ClearColumnImage[] = { &wxluatype_wxListView, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListView_ClearColumnImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListView_ClearColumnImage[1] = {{ wxLua_wxListView_ClearColumnImage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListView_ClearColumnImage }};
//     void ClearColumnImage(int col)
static int LUACALL wxLua_wxListView_ClearColumnImage(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxListView * self = (wxListView *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListView);
    // call ClearColumnImage
    self->ClearColumnImage(col);

    return 0;
}


#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListView_Create[] = { &wxluatype_wxListView, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxListView_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListView_Create[1] = {{ wxLua_wxListView_Create, WXLUAMETHOD_METHOD, 3, 8, s_wxluatypeArray_wxLua_wxListView_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxLC_ICON, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxListView")
static int LUACALL wxLua_wxListView_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxListView"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxListView")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxLC_ICON
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxLC_ICON);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxListView * self = (wxListView *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListView);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxListView_Focus[] = { &wxluatype_wxListView, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListView_Focus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListView_Focus[1] = {{ wxLua_wxListView_Focus, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListView_Focus }};
//     void Focus(long index)
static int LUACALL wxLua_wxListView_Focus(lua_State *L)
{
    // long index
    long index = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListView * self = (wxListView *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListView);
    // call Focus
    self->Focus(index);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListView_GetFirstSelected[] = { &wxluatype_wxListView, NULL };
static int LUACALL wxLua_wxListView_GetFirstSelected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListView_GetFirstSelected[1] = {{ wxLua_wxListView_GetFirstSelected, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListView_GetFirstSelected }};
//     long GetFirstSelected() const
static int LUACALL wxLua_wxListView_GetFirstSelected(lua_State *L)
{
    // get this
    wxListView * self = (wxListView *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListView);
    // call GetFirstSelected
    long  returns = (self->GetFirstSelected());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListView_GetFocusedItem[] = { &wxluatype_wxListView, NULL };
static int LUACALL wxLua_wxListView_GetFocusedItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListView_GetFocusedItem[1] = {{ wxLua_wxListView_GetFocusedItem, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxListView_GetFocusedItem }};
//     long GetFocusedItem() const
static int LUACALL wxLua_wxListView_GetFocusedItem(lua_State *L)
{
    // get this
    wxListView * self = (wxListView *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListView);
    // call GetFocusedItem
    long  returns = (self->GetFocusedItem());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListView_GetNextSelected[] = { &wxluatype_wxListView, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListView_GetNextSelected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListView_GetNextSelected[1] = {{ wxLua_wxListView_GetNextSelected, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListView_GetNextSelected }};
//     long GetNextSelected(long item) const
static int LUACALL wxLua_wxListView_GetNextSelected(lua_State *L)
{
    // long item
    long item = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListView * self = (wxListView *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListView);
    // call GetNextSelected
    long  returns = (self->GetNextSelected(item));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListView_IsSelected[] = { &wxluatype_wxListView, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListView_IsSelected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListView_IsSelected[1] = {{ wxLua_wxListView_IsSelected, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxListView_IsSelected }};
//     bool IsSelected(long index)
static int LUACALL wxLua_wxListView_IsSelected(lua_State *L)
{
    // long index
    long index = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListView * self = (wxListView *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListView);
    // call IsSelected
    bool returns = (self->IsSelected(index));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListView_Select[] = { &wxluatype_wxListView, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxListView_Select(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListView_Select[1] = {{ wxLua_wxListView_Select, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxListView_Select }};
//     void Select(long n, bool on = true)
static int LUACALL wxLua_wxListView_Select(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool on = true
    bool on = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // long n
    long n = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxListView * self = (wxListView *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListView);
    // call Select
    self->Select(n, on);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxListView_SetColumnImage[] = { &wxluatype_wxListView, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxListView_SetColumnImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListView_SetColumnImage[1] = {{ wxLua_wxListView_SetColumnImage, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxListView_SetColumnImage }};
//     void SetColumnImage(int col, int image)
static int LUACALL wxLua_wxListView_SetColumnImage(lua_State *L)
{
    // int image
    int image = (int)wxlua_getnumbertype(L, 3);
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxListView * self = (wxListView *)wxluaT_getuserdatatype(L, 1, wxluatype_wxListView);
    // call SetColumnImage
    self->SetColumnImage(col, image);

    return 0;
}


#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxListView_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxListView_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListView_constructor1[1] = {{ wxLua_wxListView_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 7, s_wxluatypeArray_wxLua_wxListView_constructor1 }};
//     wxListView(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxLC_ICON, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxListView")
static int LUACALL wxLua_wxListView_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxListView"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxListView")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 6 ? (const wxValidator *)wxluaT_getuserdatatype(L, 6, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxLC_ICON
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxLC_ICON);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxListView* returns = new wxListView(parent, id, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxListView);

    return 1;
}

#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxListView_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxListView_constructor[1] = {{ wxLua_wxListView_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxListView()
static int LUACALL wxLua_wxListView_constructor(lua_State *L)
{
    // call constructor
    wxListView* returns = new wxListView();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxListView);

    return 1;
}




#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxListView_constructor_overload[] =
{

#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxListView_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 7, s_wxluatypeArray_wxLua_wxListView_constructor1 },
#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxListView_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxListView_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxListView_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxListView_methods[] = {
    { "ClearColumnImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListView_ClearColumnImage, 1, NULL },

#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListView_Create, 1, NULL },
#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect)

    { "Focus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListView_Focus, 1, NULL },
    { "GetFirstSelected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListView_GetFirstSelected, 1, NULL },
    { "GetFocusedItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListView_GetFocusedItem, 1, NULL },
    { "GetNextSelected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListView_GetNextSelected, 1, NULL },
    { "IsSelected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListView_IsSelected, 1, NULL },
    { "Select", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListView_Select, 1, NULL },
    { "SetColumnImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxListView_SetColumnImage, 1, NULL },

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)
    { "wxListView", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxListView_constructor_overload, s_wxluafunc_wxLua_wxListView_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL)

    { 0, 0, 0, 0 },
};

int wxListView_methodCount = sizeof(wxListView_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxListCtrl && wxUSE_LISTCTRL


#if wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX
// ---------------------------------------------------------------------------
// Bind class wxRadioBox
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRadioBox'
int wxluatype_wxRadioBox = WXLUA_TUNKNOWN;

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioBox_Create[] = { &wxluatype_wxRadioBox, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayString, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRadioBox_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioBox_Create[1] = {{ wxLua_wxRadioBox_Create, WXLUAMETHOD_METHOD, 4, 11, s_wxluatypeArray_wxLua_wxRadioBox_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& point = wxDefaultPosition, const wxSize& size = wxDefaultSize, const wxArrayString& choices = wxLuaNullSmartwxArrayString, int majorDimension = 0, long style = wxRA_SPECIFY_COLS, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxRadioBox")
static int LUACALL wxLua_wxRadioBox_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxRadioBox"
    const wxString name = (argCount >= 11 ? wxlua_getwxStringtype(L, 11) : wxString(wxT("wxRadioBox")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 10 ? (const wxValidator *)wxluaT_getuserdatatype(L, 10, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxRA_SPECIFY_COLS
    long style = (argCount >= 9 ? (long)wxlua_getnumbertype(L, 9) : wxRA_SPECIFY_COLS);
    // int majorDimension = 0
    int majorDimension = (argCount >= 8 ? (int)wxlua_getnumbertype(L, 8) : 0);
    // const wxArrayString choices = wxLuaNullSmartwxArrayString
    wxLuaSmartwxArrayString choices = (argCount >= 7 ? wxlua_getwxArrayString(L, 7) : wxLuaNullSmartwxArrayString);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint point = wxDefaultPosition
    const wxPoint * point = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 4);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRadioBox * self = (wxRadioBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRadioBox);
    // call Create
    bool returns = (self->Create(parent, id, label, *point, *size, choices, majorDimension, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioBox_Enable1[] = { &wxluatype_wxRadioBox, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRadioBox_Enable1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioBox_Enable1[1] = {{ wxLua_wxRadioBox_Enable1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRadioBox_Enable1 }};
//     void Enable(int n, bool enable)
static int LUACALL wxLua_wxRadioBox_Enable1(lua_State *L)
{
    // bool enable
    bool enable = wxlua_getbooleantype(L, 3);
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRadioBox * self = (wxRadioBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRadioBox);
    // call Enable
    self->Enable(n, enable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioBox_Enable[] = { &wxluatype_wxRadioBox, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRadioBox_Enable(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioBox_Enable[1] = {{ wxLua_wxRadioBox_Enable, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRadioBox_Enable }};
//     void Enable(bool enable)
static int LUACALL wxLua_wxRadioBox_Enable(lua_State *L)
{
    // bool enable
    bool enable = wxlua_getbooleantype(L, 2);
    // get this
    wxRadioBox * self = (wxRadioBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRadioBox);
    // call Enable
    self->Enable(enable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioBox_FindString[] = { &wxluatype_wxRadioBox, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRadioBox_FindString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioBox_FindString[1] = {{ wxLua_wxRadioBox_FindString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRadioBox_FindString }};
//     int FindString(const wxString& string) const
static int LUACALL wxLua_wxRadioBox_FindString(lua_State *L)
{
    // const wxString string
    const wxString string = wxlua_getwxStringtype(L, 2);
    // get this
    wxRadioBox * self = (wxRadioBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRadioBox);
    // call FindString
    int returns = (self->FindString(string));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioBox_GetCount[] = { &wxluatype_wxRadioBox, NULL };
static int LUACALL wxLua_wxRadioBox_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioBox_GetCount[1] = {{ wxLua_wxRadioBox_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRadioBox_GetCount }};
//     int GetCount() const
static int LUACALL wxLua_wxRadioBox_GetCount(lua_State *L)
{
    // get this
    wxRadioBox * self = (wxRadioBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRadioBox);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioBox_GetSelection[] = { &wxluatype_wxRadioBox, NULL };
static int LUACALL wxLua_wxRadioBox_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioBox_GetSelection[1] = {{ wxLua_wxRadioBox_GetSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRadioBox_GetSelection }};
//     int GetSelection() const
static int LUACALL wxLua_wxRadioBox_GetSelection(lua_State *L)
{
    // get this
    wxRadioBox * self = (wxRadioBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRadioBox);
    // call GetSelection
    int returns = (self->GetSelection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioBox_GetString[] = { &wxluatype_wxRadioBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRadioBox_GetString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioBox_GetString[1] = {{ wxLua_wxRadioBox_GetString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRadioBox_GetString }};
//     wxString GetString(int n) const
static int LUACALL wxLua_wxRadioBox_GetString(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRadioBox * self = (wxRadioBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRadioBox);
    // call GetString
    wxString returns = (self->GetString(n));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioBox_GetStringSelection[] = { &wxluatype_wxRadioBox, NULL };
static int LUACALL wxLua_wxRadioBox_GetStringSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioBox_GetStringSelection[1] = {{ wxLua_wxRadioBox_GetStringSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRadioBox_GetStringSelection }};
//     wxString GetStringSelection() const
static int LUACALL wxLua_wxRadioBox_GetStringSelection(lua_State *L)
{
    // get this
    wxRadioBox * self = (wxRadioBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRadioBox);
    // call GetStringSelection
    wxString returns = (self->GetStringSelection());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioBox_SetSelection[] = { &wxluatype_wxRadioBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRadioBox_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioBox_SetSelection[1] = {{ wxLua_wxRadioBox_SetSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRadioBox_SetSelection }};
//     void SetSelection(int n)
static int LUACALL wxLua_wxRadioBox_SetSelection(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRadioBox * self = (wxRadioBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRadioBox);
    // call SetSelection
    self->SetSelection(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioBox_SetString[] = { &wxluatype_wxRadioBox, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRadioBox_SetString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioBox_SetString[1] = {{ wxLua_wxRadioBox_SetString, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRadioBox_SetString }};
//     void SetString(int n, const wxString &label)
static int LUACALL wxLua_wxRadioBox_SetString(lua_State *L)
{
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRadioBox * self = (wxRadioBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRadioBox);
    // call SetString
    self->SetString(n, label);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioBox_SetStringSelection[] = { &wxluatype_wxRadioBox, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRadioBox_SetStringSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioBox_SetStringSelection[1] = {{ wxLua_wxRadioBox_SetStringSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRadioBox_SetStringSelection }};
//     void SetStringSelection(const wxString& string)
static int LUACALL wxLua_wxRadioBox_SetStringSelection(lua_State *L)
{
    // const wxString string
    const wxString string = wxlua_getwxStringtype(L, 2);
    // get this
    wxRadioBox * self = (wxRadioBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRadioBox);
    // call SetStringSelection
    self->SetStringSelection(string);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioBox_Show[] = { &wxluatype_wxRadioBox, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRadioBox_Show(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioBox_Show[1] = {{ wxLua_wxRadioBox_Show, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRadioBox_Show }};
//     bool Show(int item, bool show) // must specify both for overload
static int LUACALL wxLua_wxRadioBox_Show(lua_State *L)
{
    // bool show
    bool show = wxlua_getbooleantype(L, 3);
    // int item
    int item = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRadioBox * self = (wxRadioBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRadioBox);
    // call Show
    bool returns = (self->Show(item, show));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioBox_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayString, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRadioBox_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioBox_constructor1[1] = {{ wxLua_wxRadioBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 10, s_wxluatypeArray_wxLua_wxRadioBox_constructor1 }};
//     wxRadioBox(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& point = wxDefaultPosition, const wxSize& size = wxDefaultSize, const wxArrayString& choices = wxLuaNullSmartwxArrayString, int majorDimension = 0, long style = wxRA_SPECIFY_COLS, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxRadioBox")
static int LUACALL wxLua_wxRadioBox_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxRadioBox"
    const wxString name = (argCount >= 10 ? wxlua_getwxStringtype(L, 10) : wxString(wxT("wxRadioBox")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 9 ? (const wxValidator *)wxluaT_getuserdatatype(L, 9, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxRA_SPECIFY_COLS
    long style = (argCount >= 8 ? (long)wxlua_getnumbertype(L, 8) : wxRA_SPECIFY_COLS);
    // int majorDimension = 0
    int majorDimension = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : 0);
    // const wxArrayString choices = wxLuaNullSmartwxArrayString
    wxLuaSmartwxArrayString choices = (argCount >= 6 ? wxlua_getwxArrayString(L, 6) : wxLuaNullSmartwxArrayString);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint point = wxDefaultPosition
    const wxPoint * point = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxRadioBox* returns = new wxRadioBox(parent, id, label, *point, *size, choices, majorDimension, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRadioBox);

    return 1;
}

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxRadioBox_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioBox_constructor[1] = {{ wxLua_wxRadioBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRadioBox()
static int LUACALL wxLua_wxRadioBox_constructor(lua_State *L)
{
    // call constructor
    wxRadioBox* returns = new wxRadioBox();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRadioBox);

    return 1;
}




#if (wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioBox_Enable_overload[] =
{
    { wxLua_wxRadioBox_Enable1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRadioBox_Enable1 },
    { wxLua_wxRadioBox_Enable, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRadioBox_Enable },
};
static int s_wxluafunc_wxLua_wxRadioBox_Enable_overload_count = sizeof(s_wxluafunc_wxLua_wxRadioBox_Enable_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)

#if ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioBox_constructor_overload[] =
{

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRadioBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 10, s_wxluatypeArray_wxLua_wxRadioBox_constructor1 },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRadioBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRadioBox_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRadioBox_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRadioBox_methods[] = {
#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRadioBox_Create, 1, NULL },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)
    { "Enable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRadioBox_Enable_overload, s_wxluafunc_wxLua_wxRadioBox_Enable_overload_count, 0 },
#endif // (wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)

    { "FindString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRadioBox_FindString, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRadioBox_GetCount, 1, NULL },
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRadioBox_GetSelection, 1, NULL },
    { "GetString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRadioBox_GetString, 1, NULL },
    { "GetStringSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRadioBox_GetStringSelection, 1, NULL },
    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRadioBox_SetSelection, 1, NULL },
    { "SetString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRadioBox_SetString, 1, NULL },
    { "SetStringSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRadioBox_SetStringSelection, 1, NULL },
    { "Show", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRadioBox_Show, 1, NULL },

#if ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)
    { "wxRadioBox", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRadioBox_constructor_overload, s_wxluafunc_wxLua_wxRadioBox_constructor_overload_count, 0 },
#endif // ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX)

    { 0, 0, 0, 0 },
};

int wxRadioBox_methodCount = sizeof(wxRadioBox_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRadioBox && wxUSE_RADIOBOX


#if wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN
// ---------------------------------------------------------------------------
// Bind class wxRadioButton
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRadioButton'
int wxluatype_wxRadioButton = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioButton_Create[] = { &wxluatype_wxRadioButton, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRadioButton_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioButton_Create[1] = {{ wxLua_wxRadioButton_Create, WXLUAMETHOD_METHOD, 4, 9, s_wxluatypeArray_wxLua_wxRadioButton_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxRadioButton")
static int LUACALL wxLua_wxRadioButton_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxRadioButton"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxRadioButton")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 4);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRadioButton * self = (wxRadioButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRadioButton);
    // call Create
    bool returns = (self->Create(parent, id, label, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioButton_GetValue[] = { &wxluatype_wxRadioButton, NULL };
static int LUACALL wxLua_wxRadioButton_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioButton_GetValue[1] = {{ wxLua_wxRadioButton_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRadioButton_GetValue }};
//     bool GetValue() const
static int LUACALL wxLua_wxRadioButton_GetValue(lua_State *L)
{
    // get this
    wxRadioButton * self = (wxRadioButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRadioButton);
    // call GetValue
    bool returns = (self->GetValue());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioButton_SetValue[] = { &wxluatype_wxRadioButton, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRadioButton_SetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioButton_SetValue[1] = {{ wxLua_wxRadioButton_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRadioButton_SetValue }};
//     void SetValue(const bool value)
static int LUACALL wxLua_wxRadioButton_SetValue(lua_State *L)
{
    // const bool value
    const bool value = wxlua_getbooleantype(L, 2);
    // get this
    wxRadioButton * self = (wxRadioButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRadioButton);
    // call SetValue
    self->SetValue(value);

    return 0;
}


#if ((wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRadioButton_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRadioButton_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioButton_constructor1[1] = {{ wxLua_wxRadioButton_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 8, s_wxluatypeArray_wxLua_wxRadioButton_constructor1 }};
//     wxRadioButton(wxWindow* parent, wxWindowID id, const wxString& label, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxRadioButton")
static int LUACALL wxLua_wxRadioButton_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxRadioButton"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxRadioButton")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxRadioButton* returns = new wxRadioButton(parent, id, label, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRadioButton);

    return 1;
}

#endif // ((wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxRadioButton_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioButton_constructor[1] = {{ wxLua_wxRadioButton_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRadioButton()
static int LUACALL wxLua_wxRadioButton_constructor(lua_State *L)
{
    // call constructor
    wxRadioButton* returns = new wxRadioButton();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRadioButton);

    return 1;
}




#if (((wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRadioButton_constructor_overload[] =
{

#if ((wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRadioButton_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 8, s_wxluatypeArray_wxLua_wxRadioButton_constructor1 },
#endif // ((wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRadioButton_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRadioButton_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRadioButton_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRadioButton_methods[] = {
#if ((wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRadioButton_Create, 1, NULL },
#endif // ((wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRadioButton_GetValue, 1, NULL },
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRadioButton_SetValue, 1, NULL },

#if (((wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN)
    { "wxRadioButton", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRadioButton_constructor_overload, s_wxluafunc_wxLua_wxRadioButton_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN)

    { 0, 0, 0, 0 },
};

int wxRadioButton_methodCount = sizeof(wxRadioButton_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRadioButton && wxUSE_RADIOBTN


#if wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR
// ---------------------------------------------------------------------------
// Bind class wxScrollBar
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxScrollBar'
int wxluatype_wxScrollBar = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxScrollBar_Create[] = { &wxluatype_wxScrollBar, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxScrollBar_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollBar_Create[1] = {{ wxLua_wxScrollBar_Create, WXLUAMETHOD_METHOD, 3, 8, s_wxluatypeArray_wxLua_wxScrollBar_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSB_HORIZONTAL, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxScrollBar")
static int LUACALL wxLua_wxScrollBar_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxScrollBar"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxScrollBar")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxSB_HORIZONTAL
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxSB_HORIZONTAL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxScrollBar * self = (wxScrollBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrollBar);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrollBar_GetPageSize[] = { &wxluatype_wxScrollBar, NULL };
static int LUACALL wxLua_wxScrollBar_GetPageSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollBar_GetPageSize[1] = {{ wxLua_wxScrollBar_GetPageSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxScrollBar_GetPageSize }};
//     int GetPageSize() const
static int LUACALL wxLua_wxScrollBar_GetPageSize(lua_State *L)
{
    // get this
    wxScrollBar * self = (wxScrollBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrollBar);
    // call GetPageSize
    int returns = (self->GetPageSize());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrollBar_GetRange[] = { &wxluatype_wxScrollBar, NULL };
static int LUACALL wxLua_wxScrollBar_GetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollBar_GetRange[1] = {{ wxLua_wxScrollBar_GetRange, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxScrollBar_GetRange }};
//     int GetRange() const
static int LUACALL wxLua_wxScrollBar_GetRange(lua_State *L)
{
    // get this
    wxScrollBar * self = (wxScrollBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrollBar);
    // call GetRange
    int returns = (self->GetRange());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrollBar_GetThumbPosition[] = { &wxluatype_wxScrollBar, NULL };
static int LUACALL wxLua_wxScrollBar_GetThumbPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollBar_GetThumbPosition[1] = {{ wxLua_wxScrollBar_GetThumbPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxScrollBar_GetThumbPosition }};
//     int GetThumbPosition() const
static int LUACALL wxLua_wxScrollBar_GetThumbPosition(lua_State *L)
{
    // get this
    wxScrollBar * self = (wxScrollBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrollBar);
    // call GetThumbPosition
    int returns = (self->GetThumbPosition());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrollBar_GetThumbSize[] = { &wxluatype_wxScrollBar, NULL };
static int LUACALL wxLua_wxScrollBar_GetThumbSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollBar_GetThumbSize[1] = {{ wxLua_wxScrollBar_GetThumbSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxScrollBar_GetThumbSize }};
//     int GetThumbSize() const
static int LUACALL wxLua_wxScrollBar_GetThumbSize(lua_State *L)
{
    // get this
    wxScrollBar * self = (wxScrollBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrollBar);
    // call GetThumbSize
    int returns = (self->GetThumbSize());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrollBar_SetScrollbar[] = { &wxluatype_wxScrollBar, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxScrollBar_SetScrollbar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollBar_SetScrollbar[1] = {{ wxLua_wxScrollBar_SetScrollbar, WXLUAMETHOD_METHOD, 5, 6, s_wxluatypeArray_wxLua_wxScrollBar_SetScrollbar }};
//     virtual void SetScrollbar(int position, int thumbSize, int range, int pageSize, const bool refresh = true)
static int LUACALL wxLua_wxScrollBar_SetScrollbar(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const bool refresh = true
    const bool refresh = (argCount >= 6 ? wxlua_getbooleantype(L, 6) : true);
    // int pageSize
    int pageSize = (int)wxlua_getnumbertype(L, 5);
    // int range
    int range = (int)wxlua_getnumbertype(L, 4);
    // int thumbSize
    int thumbSize = (int)wxlua_getnumbertype(L, 3);
    // int position
    int position = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxScrollBar * self = (wxScrollBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrollBar);
    // call SetScrollbar
    self->SetScrollbar(position, thumbSize, range, pageSize, refresh);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxScrollBar_SetThumbPosition[] = { &wxluatype_wxScrollBar, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxScrollBar_SetThumbPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollBar_SetThumbPosition[1] = {{ wxLua_wxScrollBar_SetThumbPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxScrollBar_SetThumbPosition }};
//     void SetThumbPosition(int viewStart)
static int LUACALL wxLua_wxScrollBar_SetThumbPosition(lua_State *L)
{
    // int viewStart
    int viewStart = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxScrollBar * self = (wxScrollBar *)wxluaT_getuserdatatype(L, 1, wxluatype_wxScrollBar);
    // call SetThumbPosition
    self->SetThumbPosition(viewStart);

    return 0;
}


#if ((wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxScrollBar_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxScrollBar_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollBar_constructor1[1] = {{ wxLua_wxScrollBar_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 7, s_wxluatypeArray_wxLua_wxScrollBar_constructor1 }};
//     wxScrollBar(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSB_HORIZONTAL, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxScrollBar")
static int LUACALL wxLua_wxScrollBar_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxScrollBar"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxScrollBar")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 6 ? (const wxValidator *)wxluaT_getuserdatatype(L, 6, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxSB_HORIZONTAL
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxSB_HORIZONTAL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxScrollBar* returns = new wxScrollBar(parent, id, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxScrollBar);

    return 1;
}

#endif // ((wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxScrollBar_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollBar_constructor[1] = {{ wxLua_wxScrollBar_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxScrollBar()
static int LUACALL wxLua_wxScrollBar_constructor(lua_State *L)
{
    // call constructor
    wxScrollBar* returns = new wxScrollBar();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxScrollBar);

    return 1;
}




#if (((wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxScrollBar_constructor_overload[] =
{

#if ((wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxScrollBar_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 7, s_wxluatypeArray_wxLua_wxScrollBar_constructor1 },
#endif // ((wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxScrollBar_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxScrollBar_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxScrollBar_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxScrollBar_methods[] = {
#if ((wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrollBar_Create, 1, NULL },
#endif // ((wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

    { "GetPageSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrollBar_GetPageSize, 1, NULL },
    { "GetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrollBar_GetRange, 1, NULL },
    { "GetThumbPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrollBar_GetThumbPosition, 1, NULL },
    { "GetThumbSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrollBar_GetThumbSize, 1, NULL },
    { "SetScrollbar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrollBar_SetScrollbar, 1, NULL },
    { "SetThumbPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxScrollBar_SetThumbPosition, 1, NULL },

#if (((wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR)
    { "wxScrollBar", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxScrollBar_constructor_overload, s_wxluafunc_wxLua_wxScrollBar_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR)

    { 0, 0, 0, 0 },
};

int wxScrollBar_methodCount = sizeof(wxScrollBar_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxScrollBar && wxUSE_SCROLLBAR


#if wxLUA_USE_wxSlider && wxUSE_SLIDER
// ---------------------------------------------------------------------------
// Bind class wxSlider
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSlider'
int wxluatype_wxSlider = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_ClearSel[] = { &wxluatype_wxSlider, NULL };
static int LUACALL wxLua_wxSlider_ClearSel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_ClearSel[1] = {{ wxLua_wxSlider_ClearSel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSlider_ClearSel }};
//     void ClearSel()
static int LUACALL wxLua_wxSlider_ClearSel(lua_State *L)
{
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call ClearSel
    self->ClearSel();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_ClearTicks[] = { &wxluatype_wxSlider, NULL };
static int LUACALL wxLua_wxSlider_ClearTicks(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_ClearTicks[1] = {{ wxLua_wxSlider_ClearTicks, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSlider_ClearTicks }};
//     void ClearTicks()
static int LUACALL wxLua_wxSlider_ClearTicks(lua_State *L)
{
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call ClearTicks
    self->ClearTicks();

    return 0;
}


#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxSlider && wxUSE_SLIDER)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_Create[] = { &wxluatype_wxSlider, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSlider_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_Create[1] = {{ wxLua_wxSlider_Create, WXLUAMETHOD_METHOD, 6, 11, s_wxluatypeArray_wxLua_wxSlider_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, int value , int minValue, int maxValue, const wxPoint& point = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSL_HORIZONTAL, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxSlider")
static int LUACALL wxLua_wxSlider_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxSlider"
    const wxString name = (argCount >= 11 ? wxlua_getwxStringtype(L, 11) : wxString(wxT("wxSlider")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 10 ? (const wxValidator *)wxluaT_getuserdatatype(L, 10, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxSL_HORIZONTAL
    long style = (argCount >= 9 ? (long)wxlua_getnumbertype(L, 9) : wxSL_HORIZONTAL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 8 ? (const wxSize *)wxluaT_getuserdatatype(L, 8, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint point = wxDefaultPosition
    const wxPoint * point = (argCount >= 7 ? (const wxPoint *)wxluaT_getuserdatatype(L, 7, wxluatype_wxPoint) : &wxDefaultPosition);
    // int maxValue
    int maxValue = (int)wxlua_getnumbertype(L, 6);
    // int minValue
    int minValue = (int)wxlua_getnumbertype(L, 5);
    // int value
    int value = (int)wxlua_getnumbertype(L, 4);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call Create
    bool returns = (self->Create(parent, id, value, minValue, maxValue, *point, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxSlider && wxUSE_SLIDER)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_GetLineSize[] = { &wxluatype_wxSlider, NULL };
static int LUACALL wxLua_wxSlider_GetLineSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_GetLineSize[1] = {{ wxLua_wxSlider_GetLineSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSlider_GetLineSize }};
//     int GetLineSize() const
static int LUACALL wxLua_wxSlider_GetLineSize(lua_State *L)
{
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call GetLineSize
    int returns = (self->GetLineSize());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_GetMax[] = { &wxluatype_wxSlider, NULL };
static int LUACALL wxLua_wxSlider_GetMax(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_GetMax[1] = {{ wxLua_wxSlider_GetMax, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSlider_GetMax }};
//     int GetMax() const
static int LUACALL wxLua_wxSlider_GetMax(lua_State *L)
{
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call GetMax
    int returns = (self->GetMax());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_GetMin[] = { &wxluatype_wxSlider, NULL };
static int LUACALL wxLua_wxSlider_GetMin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_GetMin[1] = {{ wxLua_wxSlider_GetMin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSlider_GetMin }};
//     int GetMin() const
static int LUACALL wxLua_wxSlider_GetMin(lua_State *L)
{
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call GetMin
    int returns = (self->GetMin());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_GetPageSize[] = { &wxluatype_wxSlider, NULL };
static int LUACALL wxLua_wxSlider_GetPageSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_GetPageSize[1] = {{ wxLua_wxSlider_GetPageSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSlider_GetPageSize }};
//     int GetPageSize() const
static int LUACALL wxLua_wxSlider_GetPageSize(lua_State *L)
{
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call GetPageSize
    int returns = (self->GetPageSize());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_GetSelEnd[] = { &wxluatype_wxSlider, NULL };
static int LUACALL wxLua_wxSlider_GetSelEnd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_GetSelEnd[1] = {{ wxLua_wxSlider_GetSelEnd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSlider_GetSelEnd }};
//     int GetSelEnd() const
static int LUACALL wxLua_wxSlider_GetSelEnd(lua_State *L)
{
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call GetSelEnd
    int returns = (self->GetSelEnd());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_GetSelStart[] = { &wxluatype_wxSlider, NULL };
static int LUACALL wxLua_wxSlider_GetSelStart(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_GetSelStart[1] = {{ wxLua_wxSlider_GetSelStart, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSlider_GetSelStart }};
//     int GetSelStart() const
static int LUACALL wxLua_wxSlider_GetSelStart(lua_State *L)
{
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call GetSelStart
    int returns = (self->GetSelStart());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_GetThumbLength[] = { &wxluatype_wxSlider, NULL };
static int LUACALL wxLua_wxSlider_GetThumbLength(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_GetThumbLength[1] = {{ wxLua_wxSlider_GetThumbLength, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSlider_GetThumbLength }};
//     int GetThumbLength() const
static int LUACALL wxLua_wxSlider_GetThumbLength(lua_State *L)
{
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call GetThumbLength
    int returns = (self->GetThumbLength());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_GetTickFreq[] = { &wxluatype_wxSlider, NULL };
static int LUACALL wxLua_wxSlider_GetTickFreq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_GetTickFreq[1] = {{ wxLua_wxSlider_GetTickFreq, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSlider_GetTickFreq }};
//     int GetTickFreq() const
static int LUACALL wxLua_wxSlider_GetTickFreq(lua_State *L)
{
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call GetTickFreq
    int returns = (self->GetTickFreq());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_GetValue[] = { &wxluatype_wxSlider, NULL };
static int LUACALL wxLua_wxSlider_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_GetValue[1] = {{ wxLua_wxSlider_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSlider_GetValue }};
//     int GetValue() const
static int LUACALL wxLua_wxSlider_GetValue(lua_State *L)
{
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call GetValue
    int returns = (self->GetValue());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_SetLineSize[] = { &wxluatype_wxSlider, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSlider_SetLineSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_SetLineSize[1] = {{ wxLua_wxSlider_SetLineSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSlider_SetLineSize }};
//     void SetLineSize(int lineSize)
static int LUACALL wxLua_wxSlider_SetLineSize(lua_State *L)
{
    // int lineSize
    int lineSize = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call SetLineSize
    self->SetLineSize(lineSize);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_SetPageSize[] = { &wxluatype_wxSlider, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSlider_SetPageSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_SetPageSize[1] = {{ wxLua_wxSlider_SetPageSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSlider_SetPageSize }};
//     void SetPageSize(int pageSize)
static int LUACALL wxLua_wxSlider_SetPageSize(lua_State *L)
{
    // int pageSize
    int pageSize = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call SetPageSize
    self->SetPageSize(pageSize);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_SetRange[] = { &wxluatype_wxSlider, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSlider_SetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_SetRange[1] = {{ wxLua_wxSlider_SetRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSlider_SetRange }};
//     void SetRange(int minValue, int maxValue)
static int LUACALL wxLua_wxSlider_SetRange(lua_State *L)
{
    // int maxValue
    int maxValue = (int)wxlua_getnumbertype(L, 3);
    // int minValue
    int minValue = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call SetRange
    self->SetRange(minValue, maxValue);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_SetSelection[] = { &wxluatype_wxSlider, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSlider_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_SetSelection[1] = {{ wxLua_wxSlider_SetSelection, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSlider_SetSelection }};
//     void SetSelection(int startPos, int endPos)
static int LUACALL wxLua_wxSlider_SetSelection(lua_State *L)
{
    // int endPos
    int endPos = (int)wxlua_getnumbertype(L, 3);
    // int startPos
    int startPos = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call SetSelection
    self->SetSelection(startPos, endPos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_SetThumbLength[] = { &wxluatype_wxSlider, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSlider_SetThumbLength(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_SetThumbLength[1] = {{ wxLua_wxSlider_SetThumbLength, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSlider_SetThumbLength }};
//     void SetThumbLength(int len)
static int LUACALL wxLua_wxSlider_SetThumbLength(lua_State *L)
{
    // int len
    int len = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call SetThumbLength
    self->SetThumbLength(len);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_SetTick[] = { &wxluatype_wxSlider, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSlider_SetTick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_SetTick[1] = {{ wxLua_wxSlider_SetTick, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSlider_SetTick }};
//     void SetTick(int tickPos)
static int LUACALL wxLua_wxSlider_SetTick(lua_State *L)
{
    // int tickPos
    int tickPos = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call SetTick
    self->SetTick(tickPos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_SetTickFreq[] = { &wxluatype_wxSlider, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSlider_SetTickFreq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_SetTickFreq[1] = {{ wxLua_wxSlider_SetTickFreq, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSlider_SetTickFreq }};
//     void SetTickFreq(int n, int pos)
static int LUACALL wxLua_wxSlider_SetTickFreq(lua_State *L)
{
    // int pos
    int pos = (int)wxlua_getnumbertype(L, 3);
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call SetTickFreq
    self->SetTickFreq(n, pos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_SetValue[] = { &wxluatype_wxSlider, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSlider_SetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_SetValue[1] = {{ wxLua_wxSlider_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSlider_SetValue }};
//     void SetValue(int value)
static int LUACALL wxLua_wxSlider_SetValue(lua_State *L)
{
    // int value
    int value = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSlider * self = (wxSlider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSlider);
    // call SetValue
    self->SetValue(value);

    return 0;
}


#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxSlider && wxUSE_SLIDER)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSlider_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSlider_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_constructor1[1] = {{ wxLua_wxSlider_constructor1, WXLUAMETHOD_CONSTRUCTOR, 5, 10, s_wxluatypeArray_wxLua_wxSlider_constructor1 }};
//     wxSlider(wxWindow* parent, wxWindowID id, int value , int minValue, int maxValue, const wxPoint& point = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSL_HORIZONTAL, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxSlider")
static int LUACALL wxLua_wxSlider_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxSlider"
    const wxString name = (argCount >= 10 ? wxlua_getwxStringtype(L, 10) : wxString(wxT("wxSlider")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 9 ? (const wxValidator *)wxluaT_getuserdatatype(L, 9, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxSL_HORIZONTAL
    long style = (argCount >= 8 ? (long)wxlua_getnumbertype(L, 8) : wxSL_HORIZONTAL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 7 ? (const wxSize *)wxluaT_getuserdatatype(L, 7, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint point = wxDefaultPosition
    const wxPoint * point = (argCount >= 6 ? (const wxPoint *)wxluaT_getuserdatatype(L, 6, wxluatype_wxPoint) : &wxDefaultPosition);
    // int maxValue
    int maxValue = (int)wxlua_getnumbertype(L, 5);
    // int minValue
    int minValue = (int)wxlua_getnumbertype(L, 4);
    // int value
    int value = (int)wxlua_getnumbertype(L, 3);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxSlider* returns = new wxSlider(parent, id, value, minValue, maxValue, *point, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSlider);

    return 1;
}

#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxSlider && wxUSE_SLIDER)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxSlider_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_constructor[1] = {{ wxLua_wxSlider_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxSlider()
static int LUACALL wxLua_wxSlider_constructor(lua_State *L)
{
    // call constructor
    wxSlider* returns = new wxSlider();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSlider);

    return 1;
}




#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxSlider && wxUSE_SLIDER)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxSlider && wxUSE_SLIDER)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSlider_constructor_overload[] =
{

#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxSlider && wxUSE_SLIDER)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxSlider_constructor1, WXLUAMETHOD_CONSTRUCTOR, 5, 10, s_wxluatypeArray_wxLua_wxSlider_constructor1 },
#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxSlider && wxUSE_SLIDER)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxSlider_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxSlider_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxSlider_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxSlider && wxUSE_SLIDER)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxSlider && wxUSE_SLIDER)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSlider_methods[] = {
    { "ClearSel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_ClearSel, 1, NULL },
    { "ClearTicks", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_ClearTicks, 1, NULL },

#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxSlider && wxUSE_SLIDER)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_Create, 1, NULL },
#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxSlider && wxUSE_SLIDER)) && (wxLUA_USE_wxPointSizeRect)

    { "GetLineSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_GetLineSize, 1, NULL },
    { "GetMax", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_GetMax, 1, NULL },
    { "GetMin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_GetMin, 1, NULL },
    { "GetPageSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_GetPageSize, 1, NULL },
    { "GetSelEnd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_GetSelEnd, 1, NULL },
    { "GetSelStart", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_GetSelStart, 1, NULL },
    { "GetThumbLength", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_GetThumbLength, 1, NULL },
    { "GetTickFreq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_GetTickFreq, 1, NULL },
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_GetValue, 1, NULL },
    { "SetLineSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_SetLineSize, 1, NULL },
    { "SetPageSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_SetPageSize, 1, NULL },
    { "SetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_SetRange, 1, NULL },
    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_SetSelection, 1, NULL },
    { "SetThumbLength", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_SetThumbLength, 1, NULL },
    { "SetTick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_SetTick, 1, NULL },
    { "SetTickFreq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_SetTickFreq, 1, NULL },
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSlider_SetValue, 1, NULL },

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxSlider && wxUSE_SLIDER)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxSlider && wxUSE_SLIDER)
    { "wxSlider", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSlider_constructor_overload, s_wxluafunc_wxLua_wxSlider_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && (wxLUA_USE_wxSlider && wxUSE_SLIDER)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxSlider && wxUSE_SLIDER)

    { 0, 0, 0, 0 },
};

int wxSlider_methodCount = sizeof(wxSlider_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSlider && wxUSE_SLIDER


#if wxLUA_USE_wxSpinButton && wxUSE_SPINBTN
// ---------------------------------------------------------------------------
// Bind class wxSpinButton
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSpinButton'
int wxluatype_wxSpinButton = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinButton && wxUSE_SPINBTN)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinButton_Create[] = { &wxluatype_wxSpinButton, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSpinButton_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinButton_Create[1] = {{ wxLua_wxSpinButton_Create, WXLUAMETHOD_METHOD, 2, 7, s_wxluatypeArray_wxLua_wxSpinButton_Create }};
//     bool Create(wxWindow *parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSP_VERTICAL | wxSP_ARROW_KEYS, const wxString& name = "wxSpinButton")
static int LUACALL wxLua_wxSpinButton_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxSpinButton"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxSpinButton")));
    // long style = wxSP_VERTICAL | wxSP_ARROW_KEYS
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxSP_VERTICAL | wxSP_ARROW_KEYS);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 3 ? (wxWindowID)wxlua_getnumbertype(L, 3) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSpinButton * self = (wxSpinButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSpinButton);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinButton && wxUSE_SPINBTN)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinButton_GetMax[] = { &wxluatype_wxSpinButton, NULL };
static int LUACALL wxLua_wxSpinButton_GetMax(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinButton_GetMax[1] = {{ wxLua_wxSpinButton_GetMax, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSpinButton_GetMax }};
//     int GetMax() const
static int LUACALL wxLua_wxSpinButton_GetMax(lua_State *L)
{
    // get this
    wxSpinButton * self = (wxSpinButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSpinButton);
    // call GetMax
    int returns = (self->GetMax());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinButton_GetMin[] = { &wxluatype_wxSpinButton, NULL };
static int LUACALL wxLua_wxSpinButton_GetMin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinButton_GetMin[1] = {{ wxLua_wxSpinButton_GetMin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSpinButton_GetMin }};
//     int GetMin() const
static int LUACALL wxLua_wxSpinButton_GetMin(lua_State *L)
{
    // get this
    wxSpinButton * self = (wxSpinButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSpinButton);
    // call GetMin
    int returns = (self->GetMin());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinButton_GetValue[] = { &wxluatype_wxSpinButton, NULL };
static int LUACALL wxLua_wxSpinButton_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinButton_GetValue[1] = {{ wxLua_wxSpinButton_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSpinButton_GetValue }};
//     int GetValue() const
static int LUACALL wxLua_wxSpinButton_GetValue(lua_State *L)
{
    // get this
    wxSpinButton * self = (wxSpinButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSpinButton);
    // call GetValue
    int returns = (self->GetValue());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinButton_SetRange[] = { &wxluatype_wxSpinButton, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSpinButton_SetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinButton_SetRange[1] = {{ wxLua_wxSpinButton_SetRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSpinButton_SetRange }};
//     void SetRange(int min, int max)
static int LUACALL wxLua_wxSpinButton_SetRange(lua_State *L)
{
    // int max
    int max = (int)wxlua_getnumbertype(L, 3);
    // int min
    int min = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSpinButton * self = (wxSpinButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSpinButton);
    // call SetRange
    self->SetRange(min, max);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinButton_SetValue[] = { &wxluatype_wxSpinButton, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSpinButton_SetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinButton_SetValue[1] = {{ wxLua_wxSpinButton_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSpinButton_SetValue }};
//     void SetValue(int value)
static int LUACALL wxLua_wxSpinButton_SetValue(lua_State *L)
{
    // int value
    int value = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSpinButton * self = (wxSpinButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSpinButton);
    // call SetValue
    self->SetValue(value);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinButton && wxUSE_SPINBTN)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinButton_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSpinButton_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinButton_constructor1[1] = {{ wxLua_wxSpinButton_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 6, s_wxluatypeArray_wxLua_wxSpinButton_constructor1 }};
//     wxSpinButton(wxWindow *parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSP_VERTICAL | wxSP_ARROW_KEYS, const wxString& name = "wxSpinButton")
static int LUACALL wxLua_wxSpinButton_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxSpinButton"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxSpinButton")));
    // long style = wxSP_VERTICAL | wxSP_ARROW_KEYS
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxSP_VERTICAL | wxSP_ARROW_KEYS);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxSpinButton* returns = new wxSpinButton(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSpinButton);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinButton && wxUSE_SPINBTN)

static int LUACALL wxLua_wxSpinButton_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinButton_constructor[1] = {{ wxLua_wxSpinButton_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxSpinButton()
static int LUACALL wxLua_wxSpinButton_constructor(lua_State *L)
{
    // call constructor
    wxSpinButton* returns = new wxSpinButton();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSpinButton);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinButton && wxUSE_SPINBTN))||(wxLUA_USE_wxSpinButton && wxUSE_SPINBTN)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinButton_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinButton && wxUSE_SPINBTN)
    { wxLua_wxSpinButton_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 6, s_wxluatypeArray_wxLua_wxSpinButton_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinButton && wxUSE_SPINBTN)
    { wxLua_wxSpinButton_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxSpinButton_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxSpinButton_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinButton && wxUSE_SPINBTN))||(wxLUA_USE_wxSpinButton && wxUSE_SPINBTN)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSpinButton_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinButton && wxUSE_SPINBTN)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSpinButton_Create, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinButton && wxUSE_SPINBTN)

    { "GetMax", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSpinButton_GetMax, 1, NULL },
    { "GetMin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSpinButton_GetMin, 1, NULL },
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSpinButton_GetValue, 1, NULL },
    { "SetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSpinButton_SetRange, 1, NULL },
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSpinButton_SetValue, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinButton && wxUSE_SPINBTN))||(wxLUA_USE_wxSpinButton && wxUSE_SPINBTN)
    { "wxSpinButton", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSpinButton_constructor_overload, s_wxluafunc_wxLua_wxSpinButton_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinButton && wxUSE_SPINBTN))||(wxLUA_USE_wxSpinButton && wxUSE_SPINBTN)

    { 0, 0, 0, 0 },
};

int wxSpinButton_methodCount = sizeof(wxSpinButton_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSpinButton && wxUSE_SPINBTN


#if wxLUA_USE_wxSpinButton && wxUSE_SPINBTN
// ---------------------------------------------------------------------------
// Bind class wxSpinEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSpinEvent'
int wxluatype_wxSpinEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinEvent_GetPosition[] = { &wxluatype_wxSpinEvent, NULL };
static int LUACALL wxLua_wxSpinEvent_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinEvent_GetPosition[1] = {{ wxLua_wxSpinEvent_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSpinEvent_GetPosition }};
//     int GetPosition() const
static int LUACALL wxLua_wxSpinEvent_GetPosition(lua_State *L)
{
    // get this
    wxSpinEvent * self = (wxSpinEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSpinEvent);
    // call GetPosition
    int returns = (self->GetPosition());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinEvent_SetPosition[] = { &wxluatype_wxSpinEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSpinEvent_SetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinEvent_SetPosition[1] = {{ wxLua_wxSpinEvent_SetPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSpinEvent_SetPosition }};
//     void SetPosition(int pos)
static int LUACALL wxLua_wxSpinEvent_SetPosition(lua_State *L)
{
    // int pos
    int pos = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSpinEvent * self = (wxSpinEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSpinEvent);
    // call SetPosition
    self->SetPosition(pos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinEvent_delete[] = { &wxluatype_wxSpinEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSpinEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSpinEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinEvent_constructor[1] = {{ wxLua_wxSpinEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxSpinEvent_constructor }};
//     wxSpinEvent(wxEventType commandType = wxEVT_NULL, int id = 0)
static int LUACALL wxLua_wxSpinEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType commandType = wxEVT_NULL
    wxEventType commandType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxSpinEvent* returns = new wxSpinEvent(commandType, id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSpinEvent);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSpinEvent_methods[] = {
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSpinEvent_GetPosition, 1, NULL },
    { "SetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSpinEvent_SetPosition, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSpinEvent_delete, 1, NULL },
    { "wxSpinEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSpinEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxSpinEvent_methodCount = sizeof(wxSpinEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSpinButton && wxUSE_SPINBTN


#if wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL
// ---------------------------------------------------------------------------
// Bind class wxSpinCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSpinCtrl'
int wxluatype_wxSpinCtrl = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinCtrl_Create[] = { &wxluatype_wxSpinCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSpinCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinCtrl_Create[1] = {{ wxLua_wxSpinCtrl_Create, WXLUAMETHOD_METHOD, 2, 11, s_wxluatypeArray_wxLua_wxSpinCtrl_Create }};
//     bool Create(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& value = wxEmptyString, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSP_ARROW_KEYS, int min = 0, int max = 100, int initial = 0, const wxString& name = "wxSpinCtrl")
static int LUACALL wxLua_wxSpinCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxSpinCtrl"
    const wxString name = (argCount >= 11 ? wxlua_getwxStringtype(L, 11) : wxString(wxT("wxSpinCtrl")));
    // int initial = 0
    int initial = (argCount >= 10 ? (int)wxlua_getnumbertype(L, 10) : 0);
    // int max = 100
    int max = (argCount >= 9 ? (int)wxlua_getnumbertype(L, 9) : 100);
    // int min = 0
    int min = (argCount >= 8 ? (int)wxlua_getnumbertype(L, 8) : 0);
    // long style = wxSP_ARROW_KEYS
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxSP_ARROW_KEYS);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString value = wxEmptyString
    const wxString value = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 3 ? (wxWindowID)wxlua_getnumbertype(L, 3) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSpinCtrl * self = (wxSpinCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSpinCtrl);
    // call Create
    bool returns = (self->Create(parent, id, value, *pos, *size, style, min, max, initial, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinCtrl_GetMax[] = { &wxluatype_wxSpinCtrl, NULL };
static int LUACALL wxLua_wxSpinCtrl_GetMax(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinCtrl_GetMax[1] = {{ wxLua_wxSpinCtrl_GetMax, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSpinCtrl_GetMax }};
//     int GetMax() const
static int LUACALL wxLua_wxSpinCtrl_GetMax(lua_State *L)
{
    // get this
    wxSpinCtrl * self = (wxSpinCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSpinCtrl);
    // call GetMax
    int returns = (self->GetMax());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinCtrl_GetMin[] = { &wxluatype_wxSpinCtrl, NULL };
static int LUACALL wxLua_wxSpinCtrl_GetMin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinCtrl_GetMin[1] = {{ wxLua_wxSpinCtrl_GetMin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSpinCtrl_GetMin }};
//     int GetMin() const
static int LUACALL wxLua_wxSpinCtrl_GetMin(lua_State *L)
{
    // get this
    wxSpinCtrl * self = (wxSpinCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSpinCtrl);
    // call GetMin
    int returns = (self->GetMin());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinCtrl_GetValue[] = { &wxluatype_wxSpinCtrl, NULL };
static int LUACALL wxLua_wxSpinCtrl_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinCtrl_GetValue[1] = {{ wxLua_wxSpinCtrl_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSpinCtrl_GetValue }};
//     int GetValue() const
static int LUACALL wxLua_wxSpinCtrl_GetValue(lua_State *L)
{
    // get this
    wxSpinCtrl * self = (wxSpinCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSpinCtrl);
    // call GetValue
    int returns = (self->GetValue());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinCtrl_SetRange[] = { &wxluatype_wxSpinCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSpinCtrl_SetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinCtrl_SetRange[1] = {{ wxLua_wxSpinCtrl_SetRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSpinCtrl_SetRange }};
//     void SetRange(int minVal, int maxVal)
static int LUACALL wxLua_wxSpinCtrl_SetRange(lua_State *L)
{
    // int maxVal
    int maxVal = (int)wxlua_getnumbertype(L, 3);
    // int minVal
    int minVal = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSpinCtrl * self = (wxSpinCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSpinCtrl);
    // call SetRange
    self->SetRange(minVal, maxVal);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinCtrl_SetSelection[] = { &wxluatype_wxSpinCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSpinCtrl_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinCtrl_SetSelection[1] = {{ wxLua_wxSpinCtrl_SetSelection, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSpinCtrl_SetSelection }};
//     void SetSelection(long from, long to)
static int LUACALL wxLua_wxSpinCtrl_SetSelection(lua_State *L)
{
    // long to
    long to = (long)wxlua_getnumbertype(L, 3);
    // long from
    long from = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxSpinCtrl * self = (wxSpinCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSpinCtrl);
    // call SetSelection
    self->SetSelection(from, to);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinCtrl_SetValue1[] = { &wxluatype_wxSpinCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSpinCtrl_SetValue1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinCtrl_SetValue1[1] = {{ wxLua_wxSpinCtrl_SetValue1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSpinCtrl_SetValue1 }};
//     void SetValue(int iValue)
static int LUACALL wxLua_wxSpinCtrl_SetValue1(lua_State *L)
{
    // int iValue
    int iValue = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSpinCtrl * self = (wxSpinCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSpinCtrl);
    // call SetValue
    self->SetValue(iValue);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinCtrl_SetValue[] = { &wxluatype_wxSpinCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSpinCtrl_SetValue(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinCtrl_SetValue[1] = {{ wxLua_wxSpinCtrl_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSpinCtrl_SetValue }};
//     void SetValue(const wxString& text)
static int LUACALL wxLua_wxSpinCtrl_SetValue(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxSpinCtrl * self = (wxSpinCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSpinCtrl);
    // call SetValue
    self->SetValue(text);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSpinCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSpinCtrl_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinCtrl_constructor1[1] = {{ wxLua_wxSpinCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 10, s_wxluatypeArray_wxLua_wxSpinCtrl_constructor1 }};
//     wxSpinCtrl(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& value = wxEmptyString, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSP_ARROW_KEYS, int min = 0, int max = 100, int initial = 0, const wxString& name = "wxSpinCtrl")
static int LUACALL wxLua_wxSpinCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxSpinCtrl"
    const wxString name = (argCount >= 10 ? wxlua_getwxStringtype(L, 10) : wxString(wxT("wxSpinCtrl")));
    // int initial = 0
    int initial = (argCount >= 9 ? (int)wxlua_getnumbertype(L, 9) : 0);
    // int max = 100
    int max = (argCount >= 8 ? (int)wxlua_getnumbertype(L, 8) : 100);
    // int min = 0
    int min = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : 0);
    // long style = wxSP_ARROW_KEYS
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxSP_ARROW_KEYS);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString value = wxEmptyString
    const wxString value = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxSpinCtrl* returns = new wxSpinCtrl(parent, id, value, *pos, *size, style, min, max, initial, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSpinCtrl);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL)

static int LUACALL wxLua_wxSpinCtrl_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinCtrl_constructor[1] = {{ wxLua_wxSpinCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxSpinCtrl()
static int LUACALL wxLua_wxSpinCtrl_constructor(lua_State *L)
{
    // call constructor
    wxSpinCtrl* returns = new wxSpinCtrl();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSpinCtrl);

    return 1;
}




#if (wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinCtrl_SetValue_overload[] =
{
    { wxLua_wxSpinCtrl_SetValue1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSpinCtrl_SetValue1 },
    { wxLua_wxSpinCtrl_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSpinCtrl_SetValue },
};
static int s_wxluafunc_wxLua_wxSpinCtrl_SetValue_overload_count = sizeof(s_wxluafunc_wxLua_wxSpinCtrl_SetValue_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL)

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL))||(wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSpinCtrl_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL)
    { wxLua_wxSpinCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 10, s_wxluatypeArray_wxLua_wxSpinCtrl_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL)
    { wxLua_wxSpinCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxSpinCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxSpinCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL))||(wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSpinCtrl_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSpinCtrl_Create, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL)

    { "GetMax", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSpinCtrl_GetMax, 1, NULL },
    { "GetMin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSpinCtrl_GetMin, 1, NULL },
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSpinCtrl_GetValue, 1, NULL },
    { "SetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSpinCtrl_SetRange, 1, NULL },
    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSpinCtrl_SetSelection, 1, NULL },

#if (wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL)
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSpinCtrl_SetValue_overload, s_wxluafunc_wxLua_wxSpinCtrl_SetValue_overload_count, 0 },
#endif // (wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL)

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL))||(wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL)
    { "wxSpinCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSpinCtrl_constructor_overload, s_wxluafunc_wxLua_wxSpinCtrl_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL))||(wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL)

    { 0, 0, 0, 0 },
};

int wxSpinCtrl_methodCount = sizeof(wxSpinCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSpinCtrl && wxUSE_SPINCTRL


#if wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL
// ---------------------------------------------------------------------------
// Bind class wxTextCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextCtrl'
int wxluatype_wxTextCtrl = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_AppendText[] = { &wxluatype_wxTextCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextCtrl_AppendText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_AppendText[1] = {{ wxLua_wxTextCtrl_AppendText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_AppendText }};
//     void AppendText(const wxString& text)
static int LUACALL wxLua_wxTextCtrl_AppendText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call AppendText
    self->AppendText(text);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_CanCopy[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_CanCopy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_CanCopy[1] = {{ wxLua_wxTextCtrl_CanCopy, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_CanCopy }};
//     virtual bool CanCopy()
static int LUACALL wxLua_wxTextCtrl_CanCopy(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call CanCopy
    bool returns = (self->CanCopy());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_CanCut[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_CanCut(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_CanCut[1] = {{ wxLua_wxTextCtrl_CanCut, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_CanCut }};
//     virtual bool CanCut()
static int LUACALL wxLua_wxTextCtrl_CanCut(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call CanCut
    bool returns = (self->CanCut());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_CanPaste[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_CanPaste(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_CanPaste[1] = {{ wxLua_wxTextCtrl_CanPaste, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_CanPaste }};
//     virtual bool CanPaste()
static int LUACALL wxLua_wxTextCtrl_CanPaste(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call CanPaste
    bool returns = (self->CanPaste());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_CanRedo[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_CanRedo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_CanRedo[1] = {{ wxLua_wxTextCtrl_CanRedo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_CanRedo }};
//     virtual bool CanRedo()
static int LUACALL wxLua_wxTextCtrl_CanRedo(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call CanRedo
    bool returns = (self->CanRedo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_CanUndo[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_CanUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_CanUndo[1] = {{ wxLua_wxTextCtrl_CanUndo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_CanUndo }};
//     virtual bool CanUndo()
static int LUACALL wxLua_wxTextCtrl_CanUndo(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call CanUndo
    bool returns = (self->CanUndo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_ChangeValue[] = { &wxluatype_wxTextCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextCtrl_ChangeValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_ChangeValue[1] = {{ wxLua_wxTextCtrl_ChangeValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_ChangeValue }};
//     virtual void ChangeValue(const wxString& value)
static int LUACALL wxLua_wxTextCtrl_ChangeValue(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call ChangeValue
    self->ChangeValue(value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_Clear[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_Clear[1] = {{ wxLua_wxTextCtrl_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_Clear }};
//     virtual void Clear()
static int LUACALL wxLua_wxTextCtrl_Clear(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_Copy[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_Copy[1] = {{ wxLua_wxTextCtrl_Copy, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_Copy }};
//     virtual void Copy()
static int LUACALL wxLua_wxTextCtrl_Copy(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call Copy
    self->Copy();

    return 0;
}


#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_Create[] = { &wxluatype_wxTextCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_Create[1] = {{ wxLua_wxTextCtrl_Create, WXLUAMETHOD_METHOD, 3, 9, s_wxluatypeArray_wxLua_wxTextCtrl_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxTextCtrl")
static int LUACALL wxLua_wxTextCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxTextCtrl"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxTextCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString value = ""
    const wxString value = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call Create
    bool returns = (self->Create(parent, id, value, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_Cut[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_Cut(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_Cut[1] = {{ wxLua_wxTextCtrl_Cut, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_Cut }};
//     virtual void Cut()
static int LUACALL wxLua_wxTextCtrl_Cut(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call Cut
    self->Cut();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_DiscardEdits[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_DiscardEdits(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_DiscardEdits[1] = {{ wxLua_wxTextCtrl_DiscardEdits, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_DiscardEdits }};
//     void DiscardEdits()
static int LUACALL wxLua_wxTextCtrl_DiscardEdits(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call DiscardEdits
    self->DiscardEdits();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_EmulateKeyPress[] = { &wxluatype_wxTextCtrl, &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxTextCtrl_EmulateKeyPress(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_EmulateKeyPress[1] = {{ wxLua_wxTextCtrl_EmulateKeyPress, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_EmulateKeyPress }};
//     bool EmulateKeyPress(const wxKeyEvent& event)
static int LUACALL wxLua_wxTextCtrl_EmulateKeyPress(lua_State *L)
{
    // const wxKeyEvent event
    const wxKeyEvent * event = (const wxKeyEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxKeyEvent);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call EmulateKeyPress
    bool returns = (self->EmulateKeyPress(*event));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetDefaultStyle[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_GetDefaultStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetDefaultStyle[1] = {{ wxLua_wxTextCtrl_GetDefaultStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_GetDefaultStyle }};
//     const wxTextAttr&  GetDefaultStyle() const
static int LUACALL wxLua_wxTextCtrl_GetDefaultStyle(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetDefaultStyle
    const wxTextAttr* returns = &self->GetDefaultStyle();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetInsertionPoint[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_GetInsertionPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetInsertionPoint[1] = {{ wxLua_wxTextCtrl_GetInsertionPoint, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_GetInsertionPoint }};
//     virtual long GetInsertionPoint() const
static int LUACALL wxLua_wxTextCtrl_GetInsertionPoint(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetInsertionPoint
    long  returns = (self->GetInsertionPoint());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetLastPosition[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_GetLastPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetLastPosition[1] = {{ wxLua_wxTextCtrl_GetLastPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_GetLastPosition }};
//     virtual long GetLastPosition() const
static int LUACALL wxLua_wxTextCtrl_GetLastPosition(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetLastPosition
    long  returns = (self->GetLastPosition());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetLineLength[] = { &wxluatype_wxTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextCtrl_GetLineLength(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetLineLength[1] = {{ wxLua_wxTextCtrl_GetLineLength, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_GetLineLength }};
//     int GetLineLength(long lineNo) const
static int LUACALL wxLua_wxTextCtrl_GetLineLength(lua_State *L)
{
    // long lineNo
    long lineNo = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetLineLength
    int returns = (self->GetLineLength(lineNo));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetLineText[] = { &wxluatype_wxTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextCtrl_GetLineText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetLineText[1] = {{ wxLua_wxTextCtrl_GetLineText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_GetLineText }};
//     wxString GetLineText(long lineNo) const
static int LUACALL wxLua_wxTextCtrl_GetLineText(lua_State *L)
{
    // long lineNo
    long lineNo = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetLineText
    wxString returns = (self->GetLineText(lineNo));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetNumberOfLines[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_GetNumberOfLines(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetNumberOfLines[1] = {{ wxLua_wxTextCtrl_GetNumberOfLines, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_GetNumberOfLines }};
//     int GetNumberOfLines() const
static int LUACALL wxLua_wxTextCtrl_GetNumberOfLines(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetNumberOfLines
    int returns = (self->GetNumberOfLines());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetRange[] = { &wxluatype_wxTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextCtrl_GetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetRange[1] = {{ wxLua_wxTextCtrl_GetRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextCtrl_GetRange }};
//     virtual wxString GetRange(long from, long to) const
static int LUACALL wxLua_wxTextCtrl_GetRange(lua_State *L)
{
    // long to
    long to = (long)wxlua_getnumbertype(L, 3);
    // long from
    long from = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetRange
    wxString returns = (self->GetRange(from, to));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetSelection[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetSelection[1] = {{ wxLua_wxTextCtrl_GetSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_GetSelection }};
// %override wxLua_wxTextCtrl_GetSelection
// virtual void GetSelection(long* from, long* to)
static int LUACALL wxLua_wxTextCtrl_GetSelection(lua_State *L)
{
    long to;
    long from;
    // get this
    wxTextCtrl *self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetSelection
    self->GetSelection(&from, &to);
    lua_pushnumber(L, from);
    lua_pushnumber(L, to);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetStringSelection[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_GetStringSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetStringSelection[1] = {{ wxLua_wxTextCtrl_GetStringSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_GetStringSelection }};
//     virtual wxString GetStringSelection()
static int LUACALL wxLua_wxTextCtrl_GetStringSelection(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetStringSelection
    wxString returns = (self->GetStringSelection());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetStyle[] = { &wxluatype_wxTextCtrl, &wxluatype_TNUMBER, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextCtrl_GetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetStyle[1] = {{ wxLua_wxTextCtrl_GetStyle, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextCtrl_GetStyle }};
//     bool GetStyle(long position, wxTextAttr& style)
static int LUACALL wxLua_wxTextCtrl_GetStyle(lua_State *L)
{
    // wxTextAttr style
    wxTextAttr * style = (wxTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttr);
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetStyle
    bool returns = (self->GetStyle(position, *style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_GetValue[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_GetValue[1] = {{ wxLua_wxTextCtrl_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_GetValue }};
//     wxString GetValue() const
static int LUACALL wxLua_wxTextCtrl_GetValue(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call GetValue
    wxString returns = (self->GetValue());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_HitTest[] = { &wxluatype_wxTextCtrl, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxTextCtrl_HitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_HitTest[1] = {{ wxLua_wxTextCtrl_HitTest, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_HitTest }};
// %override wxLua_wxTextCtrl_HitTest
//     wxTextCtrlHitTestResult HitTest(const wxPoint& pt, wxTextCoord *col, wxTextCoord *row) const
static int LUACALL wxLua_wxTextCtrl_HitTest(lua_State *L)
{
    // wxTextCoord row
    wxTextCoord row = wxInvalidTextCoord;
    // wxTextCoord col
    wxTextCoord col = wxInvalidTextCoord;
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call HitTest
    wxTextCtrlHitTestResult returns = self->HitTest(*pt, &col, &row);
    // push the result number
    lua_pushnumber(L, returns);
    lua_pushnumber(L, row);
    lua_pushnumber(L, col);

    return 3;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_HitTestPos[] = { &wxluatype_wxTextCtrl, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxTextCtrl_HitTestPos(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_HitTestPos[1] = {{ wxLua_wxTextCtrl_HitTestPos, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_HitTestPos }};
// %override wxLua_wxTextCtrl_HitTestPos
//     wxTextCtrlHitTestResult HitTestPos(const wxPoint& pt, long *pos) const
static int LUACALL wxLua_wxTextCtrl_HitTestPos(lua_State *L)
{
    // long pos
    long pos = wxInvalidTextCoord;
    // wxTextCoord col
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call HitTest
    wxTextCtrlHitTestResult returns = self->HitTest(*pt, &pos);
    // push the result number
    lua_pushnumber(L, returns);
    lua_pushnumber(L, pos);

    return 2;
}


#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_IsEditable[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_IsEditable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_IsEditable[1] = {{ wxLua_wxTextCtrl_IsEditable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_IsEditable }};
//     bool IsEditable() const
static int LUACALL wxLua_wxTextCtrl_IsEditable(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call IsEditable
    bool returns = (self->IsEditable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_IsModified[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_IsModified(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_IsModified[1] = {{ wxLua_wxTextCtrl_IsModified, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_IsModified }};
//     bool IsModified() const
static int LUACALL wxLua_wxTextCtrl_IsModified(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call IsModified
    bool returns = (self->IsModified());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_IsMultiLine[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_IsMultiLine(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_IsMultiLine[1] = {{ wxLua_wxTextCtrl_IsMultiLine, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_IsMultiLine }};
//     bool IsMultiLine() const
static int LUACALL wxLua_wxTextCtrl_IsMultiLine(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call IsMultiLine
    bool returns = (self->IsMultiLine());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_IsSingleLine[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_IsSingleLine(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_IsSingleLine[1] = {{ wxLua_wxTextCtrl_IsSingleLine, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_IsSingleLine }};
//     bool IsSingleLine() const
static int LUACALL wxLua_wxTextCtrl_IsSingleLine(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call IsSingleLine
    bool returns = (self->IsSingleLine());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_LoadFile[] = { &wxluatype_wxTextCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextCtrl_LoadFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_LoadFile[1] = {{ wxLua_wxTextCtrl_LoadFile, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_LoadFile }};
//     bool LoadFile(const wxString& filename)
static int LUACALL wxLua_wxTextCtrl_LoadFile(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call LoadFile
    bool returns = (self->LoadFile(filename));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_MarkDirty[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_MarkDirty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_MarkDirty[1] = {{ wxLua_wxTextCtrl_MarkDirty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_MarkDirty }};
//     void MarkDirty()
static int LUACALL wxLua_wxTextCtrl_MarkDirty(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call MarkDirty
    self->MarkDirty();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_Paste[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_Paste(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_Paste[1] = {{ wxLua_wxTextCtrl_Paste, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_Paste }};
//     virtual void Paste()
static int LUACALL wxLua_wxTextCtrl_Paste(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call Paste
    self->Paste();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_PositionToXY[] = { &wxluatype_wxTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextCtrl_PositionToXY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_PositionToXY[1] = {{ wxLua_wxTextCtrl_PositionToXY, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_PositionToXY }};
// %override wxLua_wxTextCtrl_PositionToXY
// bool PositionToXY(long pos, long *x, long *y) const
static int LUACALL wxLua_wxTextCtrl_PositionToXY(lua_State *L)
{
    long y;
    long x;
    // long pos
    long pos = (long)wxlua_getintegertype(L, 2);
    // get this
    wxTextCtrl *self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call PositionToXY
    bool returns = self->PositionToXY(pos, &x, &y);
    // push the result number
    lua_pushboolean(L, returns);
    lua_pushnumber(L, x);
    lua_pushnumber(L, y);
    // return the number of parameters
    return 3;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_Redo[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_Redo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_Redo[1] = {{ wxLua_wxTextCtrl_Redo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_Redo }};
//     virtual void Redo()
static int LUACALL wxLua_wxTextCtrl_Redo(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call Redo
    self->Redo();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_Remove[] = { &wxluatype_wxTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextCtrl_Remove(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_Remove[1] = {{ wxLua_wxTextCtrl_Remove, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextCtrl_Remove }};
//     virtual void Remove(long from, long to)
static int LUACALL wxLua_wxTextCtrl_Remove(lua_State *L)
{
    // long to
    long to = (long)wxlua_getnumbertype(L, 3);
    // long from
    long from = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call Remove
    self->Remove(from, to);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_Replace[] = { &wxluatype_wxTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextCtrl_Replace(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_Replace[1] = {{ wxLua_wxTextCtrl_Replace, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextCtrl_Replace }};
//     virtual void Replace(long from, long to, const wxString& value)
static int LUACALL wxLua_wxTextCtrl_Replace(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 4);
    // long to
    long to = (long)wxlua_getnumbertype(L, 3);
    // long from
    long from = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call Replace
    self->Replace(from, to, value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SaveFile[] = { &wxluatype_wxTextCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextCtrl_SaveFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SaveFile[1] = {{ wxLua_wxTextCtrl_SaveFile, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_SaveFile }};
//     bool SaveFile(const wxString& filename)
static int LUACALL wxLua_wxTextCtrl_SaveFile(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SaveFile
    bool returns = (self->SaveFile(filename));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetDefaultStyle[] = { &wxluatype_wxTextCtrl, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextCtrl_SetDefaultStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetDefaultStyle[1] = {{ wxLua_wxTextCtrl_SetDefaultStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_SetDefaultStyle }};
//     bool SetDefaultStyle(const wxTextAttr& style)
static int LUACALL wxLua_wxTextCtrl_SetDefaultStyle(lua_State *L)
{
    // const wxTextAttr style
    const wxTextAttr * style = (const wxTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttr);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetDefaultStyle
    bool returns = (self->SetDefaultStyle(*style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetEditable[] = { &wxluatype_wxTextCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTextCtrl_SetEditable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetEditable[1] = {{ wxLua_wxTextCtrl_SetEditable, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_SetEditable }};
//     virtual void SetEditable(bool editable)
static int LUACALL wxLua_wxTextCtrl_SetEditable(lua_State *L)
{
    // bool editable
    bool editable = wxlua_getbooleantype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetEditable
    self->SetEditable(editable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetInsertionPoint[] = { &wxluatype_wxTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextCtrl_SetInsertionPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetInsertionPoint[1] = {{ wxLua_wxTextCtrl_SetInsertionPoint, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_SetInsertionPoint }};
//     virtual void SetInsertionPoint(long pos)
static int LUACALL wxLua_wxTextCtrl_SetInsertionPoint(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetInsertionPoint
    self->SetInsertionPoint(pos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetInsertionPointEnd[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_SetInsertionPointEnd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetInsertionPointEnd[1] = {{ wxLua_wxTextCtrl_SetInsertionPointEnd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_SetInsertionPointEnd }};
//     virtual void SetInsertionPointEnd()
static int LUACALL wxLua_wxTextCtrl_SetInsertionPointEnd(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetInsertionPointEnd
    self->SetInsertionPointEnd();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetMaxLength[] = { &wxluatype_wxTextCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextCtrl_SetMaxLength(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetMaxLength[1] = {{ wxLua_wxTextCtrl_SetMaxLength, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_SetMaxLength }};
//     virtual void SetMaxLength(unsigned long value)
static int LUACALL wxLua_wxTextCtrl_SetMaxLength(lua_State *L)
{
    // unsigned long value
    unsigned long value = (unsigned long)wxlua_getuintegertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetMaxLength
    self->SetMaxLength(value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetSelection[] = { &wxluatype_wxTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextCtrl_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetSelection[1] = {{ wxLua_wxTextCtrl_SetSelection, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextCtrl_SetSelection }};
//     virtual void SetSelection(long from, long to)
static int LUACALL wxLua_wxTextCtrl_SetSelection(lua_State *L)
{
    // long to
    long to = (long)wxlua_getnumbertype(L, 3);
    // long from
    long from = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetSelection
    self->SetSelection(from, to);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetStyle[] = { &wxluatype_wxTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextCtrl_SetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetStyle[1] = {{ wxLua_wxTextCtrl_SetStyle, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextCtrl_SetStyle }};
//     bool SetStyle(long start, long end, const wxTextAttr& style)
static int LUACALL wxLua_wxTextCtrl_SetStyle(lua_State *L)
{
    // const wxTextAttr style
    const wxTextAttr * style = (const wxTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxTextAttr);
    // long end
    long end = (long)wxlua_getnumbertype(L, 3);
    // long start
    long start = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetStyle
    bool returns = (self->SetStyle(start, end, *style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_SetValue[] = { &wxluatype_wxTextCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextCtrl_SetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_SetValue[1] = {{ wxLua_wxTextCtrl_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_SetValue }};
//     virtual void SetValue(const wxString& value)
static int LUACALL wxLua_wxTextCtrl_SetValue(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call SetValue
    self->SetValue(value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_ShowPosition[] = { &wxluatype_wxTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextCtrl_ShowPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_ShowPosition[1] = {{ wxLua_wxTextCtrl_ShowPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_ShowPosition }};
//     void ShowPosition(long pos)
static int LUACALL wxLua_wxTextCtrl_ShowPosition(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call ShowPosition
    self->ShowPosition(pos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_Undo[] = { &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxTextCtrl_Undo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_Undo[1] = {{ wxLua_wxTextCtrl_Undo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextCtrl_Undo }};
//     virtual void Undo()
static int LUACALL wxLua_wxTextCtrl_Undo(lua_State *L)
{
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call Undo
    self->Undo();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_WriteText[] = { &wxluatype_wxTextCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextCtrl_WriteText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_WriteText[1] = {{ wxLua_wxTextCtrl_WriteText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextCtrl_WriteText }};
//     void WriteText(const wxString& text)
static int LUACALL wxLua_wxTextCtrl_WriteText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call WriteText
    self->WriteText(text);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_XYToPosition[] = { &wxluatype_wxTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextCtrl_XYToPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_XYToPosition[1] = {{ wxLua_wxTextCtrl_XYToPosition, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextCtrl_XYToPosition }};
//     long XYToPosition(long x, long y)
static int LUACALL wxLua_wxTextCtrl_XYToPosition(lua_State *L)
{
    // long y
    long y = (long)wxlua_getnumbertype(L, 3);
    // long x
    long x = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxTextCtrl * self = (wxTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextCtrl);
    // call XYToPosition
    long  returns = (self->XYToPosition(x, y));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextCtrl_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_constructor1[1] = {{ wxLua_wxTextCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 8, s_wxluatypeArray_wxLua_wxTextCtrl_constructor1 }};
//     wxTextCtrl(wxWindow *parent, wxWindowID id, const wxString& value = "", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxTextCtrl")
static int LUACALL wxLua_wxTextCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxTextCtrl"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxTextCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString value = ""
    const wxString value = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxTextCtrl* returns = new wxTextCtrl(parent, id, value, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextCtrl);

    return 1;
}

#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxTextCtrl_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_constructor[1] = {{ wxLua_wxTextCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTextCtrl()
static int LUACALL wxLua_wxTextCtrl_constructor(lua_State *L)
{
    // call constructor
    wxTextCtrl* returns = new wxTextCtrl();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextCtrl);

    return 1;
}




#if (((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextCtrl_constructor_overload[] =
{

#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxTextCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 8, s_wxluatypeArray_wxLua_wxTextCtrl_constructor1 },
#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxTextCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxTextCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxTextCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextCtrl_methods[] = {
    { "AppendText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_AppendText, 1, NULL },
    { "CanCopy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_CanCopy, 1, NULL },
    { "CanCut", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_CanCut, 1, NULL },
    { "CanPaste", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_CanPaste, 1, NULL },
    { "CanRedo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_CanRedo, 1, NULL },
    { "CanUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_CanUndo, 1, NULL },
    { "ChangeValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_ChangeValue, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_Clear, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_Copy, 1, NULL },

#if ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_Create, 1, NULL },
#endif // ((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

    { "Cut", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_Cut, 1, NULL },
    { "DiscardEdits", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_DiscardEdits, 1, NULL },
    { "EmulateKeyPress", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_EmulateKeyPress, 1, NULL },
    { "GetDefaultStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetDefaultStyle, 1, NULL },
    { "GetInsertionPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetInsertionPoint, 1, NULL },
    { "GetLastPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetLastPosition, 1, NULL },
    { "GetLineLength", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetLineLength, 1, NULL },
    { "GetLineText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetLineText, 1, NULL },
    { "GetNumberOfLines", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetNumberOfLines, 1, NULL },
    { "GetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetRange, 1, NULL },
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetSelection, 1, NULL },
    { "GetStringSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetStringSelection, 1, NULL },
    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetStyle, 1, NULL },
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_GetValue, 1, NULL },

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxPointSizeRect)
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_HitTest, 1, NULL },
    { "HitTestPos", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_HitTestPos, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxPointSizeRect)

    { "IsEditable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_IsEditable, 1, NULL },
    { "IsModified", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_IsModified, 1, NULL },
    { "IsMultiLine", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_IsMultiLine, 1, NULL },
    { "IsSingleLine", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_IsSingleLine, 1, NULL },
    { "LoadFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_LoadFile, 1, NULL },
    { "MarkDirty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_MarkDirty, 1, NULL },
    { "Paste", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_Paste, 1, NULL },
    { "PositionToXY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_PositionToXY, 1, NULL },
    { "Redo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_Redo, 1, NULL },
    { "Remove", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_Remove, 1, NULL },
    { "Replace", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_Replace, 1, NULL },
    { "SaveFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SaveFile, 1, NULL },
    { "SetDefaultStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetDefaultStyle, 1, NULL },
    { "SetEditable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetEditable, 1, NULL },
    { "SetInsertionPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetInsertionPoint, 1, NULL },
    { "SetInsertionPointEnd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetInsertionPointEnd, 1, NULL },
    { "SetMaxLength", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetMaxLength, 1, NULL },
    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetSelection, 1, NULL },
    { "SetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetStyle, 1, NULL },
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_SetValue, 1, NULL },
    { "ShowPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_ShowPosition, 1, NULL },
    { "Undo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_Undo, 1, NULL },
    { "WriteText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_WriteText, 1, NULL },
    { "XYToPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextCtrl_XYToPosition, 1, NULL },

#if (((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "wxTextCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTextCtrl_constructor_overload, s_wxluafunc_wxLua_wxTextCtrl_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { 0, 0, 0, 0 },
};

int wxTextCtrl_methodCount = sizeof(wxTextCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL


#if wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL
// ---------------------------------------------------------------------------
// Bind class wxTextAttr
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextAttr'
int wxluatype_wxTextAttr = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetAlignment[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetAlignment[1] = {{ wxLua_wxTextAttr_GetAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetAlignment }};
//     wxTextAttrAlignment GetAlignment() const
static int LUACALL wxLua_wxTextAttr_GetAlignment(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetAlignment
    wxTextAttrAlignment returns = (self->GetAlignment());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetBackgroundColour[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetBackgroundColour[1] = {{ wxLua_wxTextAttr_GetBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetBackgroundColour }};
//     wxColour GetBackgroundColour() const
static int LUACALL wxLua_wxTextAttr_GetBackgroundColour(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetBackgroundColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetBackgroundColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetFlags[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetFlags[1] = {{ wxLua_wxTextAttr_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetFlags }};
//     long GetFlags() const
static int LUACALL wxLua_wxTextAttr_GetFlags(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetFlags
    long  returns = (self->GetFlags());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetFont[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetFont[1] = {{ wxLua_wxTextAttr_GetFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetFont }};
//     wxFont GetFont() const
static int LUACALL wxLua_wxTextAttr_GetFont(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetFont());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxFont*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetLeftIndent[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetLeftIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetLeftIndent[1] = {{ wxLua_wxTextAttr_GetLeftIndent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetLeftIndent }};
//     long GetLeftIndent() const
static int LUACALL wxLua_wxTextAttr_GetLeftIndent(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetLeftIndent
    long  returns = (self->GetLeftIndent());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetLeftSubIndent[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetLeftSubIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetLeftSubIndent[1] = {{ wxLua_wxTextAttr_GetLeftSubIndent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetLeftSubIndent }};
//     long GetLeftSubIndent() const
static int LUACALL wxLua_wxTextAttr_GetLeftSubIndent(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetLeftSubIndent
    long  returns = (self->GetLeftSubIndent());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetRightIndent[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetRightIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetRightIndent[1] = {{ wxLua_wxTextAttr_GetRightIndent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetRightIndent }};
//     long GetRightIndent() const
static int LUACALL wxLua_wxTextAttr_GetRightIndent(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetRightIndent
    long  returns = (self->GetRightIndent());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxArrayInt)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetTabs[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetTabs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetTabs[1] = {{ wxLua_wxTextAttr_GetTabs, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetTabs }};
//     const wxArrayInt& GetTabs() const
static int LUACALL wxLua_wxTextAttr_GetTabs(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetTabs
    const wxArrayInt* returns = &self->GetTabs();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayInt);

    return 1;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxArrayInt)

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_GetTextColour[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_GetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_GetTextColour[1] = {{ wxLua_wxTextAttr_GetTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_GetTextColour }};
//     wxColour GetTextColour() const
static int LUACALL wxLua_wxTextAttr_GetTextColour(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call GetTextColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetTextColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasAlignment[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasAlignment[1] = {{ wxLua_wxTextAttr_HasAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasAlignment }};
//     bool HasAlignment() const
static int LUACALL wxLua_wxTextAttr_HasAlignment(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasAlignment
    bool returns = (self->HasAlignment());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasBackgroundColour[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasBackgroundColour[1] = {{ wxLua_wxTextAttr_HasBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasBackgroundColour }};
//     bool HasBackgroundColour() const
static int LUACALL wxLua_wxTextAttr_HasBackgroundColour(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasBackgroundColour
    bool returns = (self->HasBackgroundColour());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasFlag[] = { &wxluatype_wxTextAttr, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttr_HasFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasFlag[1] = {{ wxLua_wxTextAttr_HasFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_HasFlag }};
//     bool HasFlag(long flag) const
static int LUACALL wxLua_wxTextAttr_HasFlag(lua_State *L)
{
    // long flag
    long flag = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasFlag
    bool returns = (self->HasFlag(flag));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasFont[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasFont[1] = {{ wxLua_wxTextAttr_HasFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasFont }};
//     bool HasFont() const
static int LUACALL wxLua_wxTextAttr_HasFont(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasFont
    bool returns = (self->HasFont());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasLeftIndent[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasLeftIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasLeftIndent[1] = {{ wxLua_wxTextAttr_HasLeftIndent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasLeftIndent }};
//     bool HasLeftIndent() const
static int LUACALL wxLua_wxTextAttr_HasLeftIndent(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasLeftIndent
    bool returns = (self->HasLeftIndent());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasRightIndent[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasRightIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasRightIndent[1] = {{ wxLua_wxTextAttr_HasRightIndent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasRightIndent }};
//     bool HasRightIndent() const
static int LUACALL wxLua_wxTextAttr_HasRightIndent(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasRightIndent
    bool returns = (self->HasRightIndent());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasTabs[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasTabs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasTabs[1] = {{ wxLua_wxTextAttr_HasTabs, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasTabs }};
//     bool HasTabs() const
static int LUACALL wxLua_wxTextAttr_HasTabs(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasTabs
    bool returns = (self->HasTabs());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_HasTextColour[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_HasTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_HasTextColour[1] = {{ wxLua_wxTextAttr_HasTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_HasTextColour }};
//     bool HasTextColour() const
static int LUACALL wxLua_wxTextAttr_HasTextColour(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call HasTextColour
    bool returns = (self->HasTextColour());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_IsDefault[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxTextAttr_IsDefault(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_IsDefault[1] = {{ wxLua_wxTextAttr_IsDefault, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_IsDefault }};
//     bool IsDefault() const
static int LUACALL wxLua_wxTextAttr_IsDefault(lua_State *L)
{
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call IsDefault
    bool returns = (self->IsDefault());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetAlignment[] = { &wxluatype_wxTextAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_SetAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetAlignment[1] = {{ wxLua_wxTextAttr_SetAlignment, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetAlignment }};
//     void SetAlignment(wxTextAttrAlignment alignment)
static int LUACALL wxLua_wxTextAttr_SetAlignment(lua_State *L)
{
    // wxTextAttrAlignment alignment
    wxTextAttrAlignment alignment = (wxTextAttrAlignment)wxlua_getenumtype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetAlignment
    self->SetAlignment(alignment);

    return 0;
}


#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetBackgroundColour[] = { &wxluatype_wxTextAttr, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxTextAttr_SetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetBackgroundColour[1] = {{ wxLua_wxTextAttr_SetBackgroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetBackgroundColour }};
//     void SetBackgroundColour(const wxColour& colBack)
static int LUACALL wxLua_wxTextAttr_SetBackgroundColour(lua_State *L)
{
    // const wxColour colBack
    const wxColour * colBack = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetBackgroundColour
    self->SetBackgroundColour(*colBack);

    return 0;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetFlags[] = { &wxluatype_wxTextAttr, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttr_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetFlags[1] = {{ wxLua_wxTextAttr_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetFlags }};
//     void SetFlags(long flags)
static int LUACALL wxLua_wxTextAttr_SetFlags(lua_State *L)
{
    // long flags
    long flags = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}


#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetFont[] = { &wxluatype_wxTextAttr, &wxluatype_wxFont, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttr_SetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetFont[1] = {{ wxLua_wxTextAttr_SetFont, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttr_SetFont }};
//     void SetFont(const wxFont& font, long flags = wxTEXT_ATTR_FONT)
static int LUACALL wxLua_wxTextAttr_SetFont(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long flags = wxTEXT_ATTR_FONT
    long flags = (argCount >= 3 ? (long)wxlua_getnumbertype(L, 3) : wxTEXT_ATTR_FONT);
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetFont
    self->SetFont(*font, flags);

    return 0;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetLeftIndent[] = { &wxluatype_wxTextAttr, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttr_SetLeftIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetLeftIndent[1] = {{ wxLua_wxTextAttr_SetLeftIndent, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttr_SetLeftIndent }};
//     void SetLeftIndent(int indent, int subIndent = 0)
static int LUACALL wxLua_wxTextAttr_SetLeftIndent(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int subIndent = 0
    int subIndent = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int indent
    int indent = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetLeftIndent
    self->SetLeftIndent(indent, subIndent);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetRightIndent[] = { &wxluatype_wxTextAttr, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttr_SetRightIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetRightIndent[1] = {{ wxLua_wxTextAttr_SetRightIndent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetRightIndent }};
//     void SetRightIndent(int indent)
static int LUACALL wxLua_wxTextAttr_SetRightIndent(lua_State *L)
{
    // int indent
    int indent = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetRightIndent
    self->SetRightIndent(indent);

    return 0;
}


#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxArrayInt)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetTabs[] = { &wxluatype_wxTextAttr, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxTextAttr_SetTabs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetTabs[1] = {{ wxLua_wxTextAttr_SetTabs, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetTabs }};
//     void SetTabs(const wxArrayInt& tabs)
static int LUACALL wxLua_wxTextAttr_SetTabs(lua_State *L)
{
    // const wxArrayInt tabs
    wxLuaSmartwxArrayInt tabs = wxlua_getwxArrayInt(L, 2);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetTabs
    self->SetTabs(tabs);

    return 0;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxArrayInt)

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_SetTextColour[] = { &wxluatype_wxTextAttr, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxTextAttr_SetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_SetTextColour[1] = {{ wxLua_wxTextAttr_SetTextColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttr_SetTextColour }};
//     void SetTextColour(const wxColour& colText)
static int LUACALL wxLua_wxTextAttr_SetTextColour(lua_State *L)
{
    // const wxColour colText
    const wxColour * colText = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxTextAttr * self = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call SetTextColour
    self->SetTextColour(*colText);

    return 0;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_delete[] = { &wxluatype_wxTextAttr, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTextAttr_delete }};


#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttr_constructor[] = { &wxluatype_wxColour, &wxluatype_wxColour, &wxluatype_wxFont, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttr_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttr_constructor[1] = {{ wxLua_wxTextAttr_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxTextAttr_constructor }};
//     wxTextAttr(const wxColour& colText = wxNullColour, const wxColour& colBack = wxNullColour, const wxFont& font = wxNullFont, wxTextAttrAlignment alignment = wxTEXT_ALIGNMENT_DEFAULT)
static int LUACALL wxLua_wxTextAttr_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxTextAttrAlignment alignment = wxTEXT_ALIGNMENT_DEFAULT
    wxTextAttrAlignment alignment = (argCount >= 4 ? (wxTextAttrAlignment)wxlua_getenumtype(L, 4) : wxTEXT_ALIGNMENT_DEFAULT);
    // const wxFont font = wxNullFont
    const wxFont * font = (argCount >= 3 ? (const wxFont *)wxluaT_getuserdatatype(L, 3, wxluatype_wxFont) : &wxNullFont);
    // const wxColour colBack = wxNullColour
    const wxColour * colBack = (argCount >= 2 ? (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour) : &wxNullColour);
    // const wxColour colText = wxNullColour
    const wxColour * colText = (argCount >= 1 ? (const wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour) : &wxNullColour);
    // call constructor
    wxTextAttr* returns = new wxTextAttr(*colText, *colBack, *font, alignment);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTextAttr((wxTextAttr*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttr);

    return 1;
}

#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextAttr_methods[] = {
    { "GetAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetAlignment, 1, NULL },

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "GetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetFlags, 1, NULL },

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxFont)
    { "GetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetFont, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxFont)

    { "GetLeftIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetLeftIndent, 1, NULL },
    { "GetLeftSubIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetLeftSubIndent, 1, NULL },
    { "GetRightIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetRightIndent, 1, NULL },

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxArrayInt)
    { "GetTabs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetTabs, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxArrayInt)

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "GetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_GetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "HasAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasAlignment, 1, NULL },
    { "HasBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasBackgroundColour, 1, NULL },
    { "HasFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasFlag, 1, NULL },
    { "HasFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasFont, 1, NULL },
    { "HasLeftIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasLeftIndent, 1, NULL },
    { "HasRightIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasRightIndent, 1, NULL },
    { "HasTabs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasTabs, 1, NULL },
    { "HasTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_HasTextColour, 1, NULL },
    { "IsDefault", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_IsDefault, 1, NULL },
    { "SetAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetAlignment, 1, NULL },

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "SetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetFlags, 1, NULL },

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxFont)
    { "SetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetFont, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxFont)

    { "SetLeftIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetLeftIndent, 1, NULL },
    { "SetRightIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetRightIndent, 1, NULL },

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxArrayInt)
    { "SetTabs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetTabs, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxArrayInt)

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "SetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttr_SetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTextAttr_delete, 1, NULL },

#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "wxTextAttr", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTextAttr_constructor, 1, NULL },
#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { 0, 0, 0, 0 },
};

int wxTextAttr_methodCount = sizeof(wxTextAttr_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL


#if wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL
// ---------------------------------------------------------------------------
// Bind class wxTextUrlEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextUrlEvent'
int wxluatype_wxTextUrlEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextUrlEvent_GetMouseEvent[] = { &wxluatype_wxTextUrlEvent, NULL };
static int LUACALL wxLua_wxTextUrlEvent_GetMouseEvent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextUrlEvent_GetMouseEvent[1] = {{ wxLua_wxTextUrlEvent_GetMouseEvent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextUrlEvent_GetMouseEvent }};
//     const wxMouseEvent& GetMouseEvent() const
static int LUACALL wxLua_wxTextUrlEvent_GetMouseEvent(lua_State *L)
{
    // get this
    wxTextUrlEvent * self = (wxTextUrlEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextUrlEvent);
    // call GetMouseEvent
    const wxMouseEvent* returns = &self->GetMouseEvent();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMouseEvent);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextUrlEvent_GetURLEnd[] = { &wxluatype_wxTextUrlEvent, NULL };
static int LUACALL wxLua_wxTextUrlEvent_GetURLEnd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextUrlEvent_GetURLEnd[1] = {{ wxLua_wxTextUrlEvent_GetURLEnd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextUrlEvent_GetURLEnd }};
//     long GetURLEnd() const
static int LUACALL wxLua_wxTextUrlEvent_GetURLEnd(lua_State *L)
{
    // get this
    wxTextUrlEvent * self = (wxTextUrlEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextUrlEvent);
    // call GetURLEnd
    long  returns = (self->GetURLEnd());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextUrlEvent_GetURLStart[] = { &wxluatype_wxTextUrlEvent, NULL };
static int LUACALL wxLua_wxTextUrlEvent_GetURLStart(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextUrlEvent_GetURLStart[1] = {{ wxLua_wxTextUrlEvent_GetURLStart, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextUrlEvent_GetURLStart }};
//     long GetURLStart() const
static int LUACALL wxLua_wxTextUrlEvent_GetURLStart(lua_State *L)
{
    // get this
    wxTextUrlEvent * self = (wxTextUrlEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextUrlEvent);
    // call GetURLStart
    long  returns = (self->GetURLStart());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextUrlEvent_delete[] = { &wxluatype_wxTextUrlEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextUrlEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTextUrlEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextUrlEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_wxMouseEvent, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextUrlEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextUrlEvent_constructor[1] = {{ wxLua_wxTextUrlEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 4, 4, s_wxluatypeArray_wxLua_wxTextUrlEvent_constructor }};
//     wxTextUrlEvent(int winid, const wxMouseEvent& evtMouse, long start, long end)
static int LUACALL wxLua_wxTextUrlEvent_constructor(lua_State *L)
{
    // long end
    long end = (long)wxlua_getnumbertype(L, 4);
    // long start
    long start = (long)wxlua_getnumbertype(L, 3);
    // const wxMouseEvent evtMouse
    const wxMouseEvent * evtMouse = (const wxMouseEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMouseEvent);
    // int winid
    int winid = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxTextUrlEvent* returns = new wxTextUrlEvent(winid, *evtMouse, start, end);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextUrlEvent);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextUrlEvent_methods[] = {
    { "GetMouseEvent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextUrlEvent_GetMouseEvent, 1, NULL },
    { "GetURLEnd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextUrlEvent_GetURLEnd, 1, NULL },
    { "GetURLStart", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextUrlEvent_GetURLStart, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTextUrlEvent_delete, 1, NULL },
    { "wxTextUrlEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTextUrlEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTextUrlEvent_methodCount = sizeof(wxTextUrlEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL


#if wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL
// ---------------------------------------------------------------------------
// Bind class wxTreeCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTreeCtrl'
int wxluatype_wxTreeCtrl = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_AddRoot[] = { &wxluatype_wxTreeCtrl, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxTreeItemData, NULL };
static int LUACALL wxLua_wxTreeCtrl_AddRoot(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_AddRoot[1] = {{ wxLua_wxTreeCtrl_AddRoot, WXLUAMETHOD_METHOD, 2, 5, s_wxluatypeArray_wxLua_wxTreeCtrl_AddRoot }};
//     wxTreeItemId AddRoot(const wxString& text, int image = -1, int selImage = -1, wxTreeItemData* data = NULL)
static int LUACALL wxLua_wxTreeCtrl_AddRoot(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxTreeItemData data = NULL
    wxTreeItemData * data = (argCount >= 5 ? (wxTreeItemData *)wxluaT_getuserdatatype(L, 5, wxluatype_wxTreeItemData) : NULL);
    // int selImage = -1
    int selImage = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // int image = -1
    int image = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : -1);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call AddRoot
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->AddRoot(text, image, selImage, data));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_AppendItem[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxTreeItemData, NULL };
static int LUACALL wxLua_wxTreeCtrl_AppendItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_AppendItem[1] = {{ wxLua_wxTreeCtrl_AppendItem, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxTreeCtrl_AppendItem }};
//     wxTreeItemId AppendItem(const wxTreeItemId& parent, const wxString& text, int image = -1, int selImage = -1, wxTreeItemData* data = NULL)
static int LUACALL wxLua_wxTreeCtrl_AppendItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxTreeItemData data = NULL
    wxTreeItemData * data = (argCount >= 6 ? (wxTreeItemData *)wxluaT_getuserdatatype(L, 6, wxluatype_wxTreeItemData) : NULL);
    // int selImage = -1
    int selImage = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // int image = -1
    int image = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // const wxTreeItemId parent
    const wxTreeItemId * parent = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call AppendItem
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->AppendItem(*parent, text, image, selImage, data));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}


#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_AssignImageList[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxImageList, NULL };
static int LUACALL wxLua_wxTreeCtrl_AssignImageList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_AssignImageList[1] = {{ wxLua_wxTreeCtrl_AssignImageList, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_AssignImageList }};
//     void AssignImageList(%ungc wxImageList* imageList)
static int LUACALL wxLua_wxTreeCtrl_AssignImageList(lua_State *L)
{
    // wxImageList imageList
    wxImageList * imageList = (wxImageList *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImageList);
    if (wxluaO_isgcobject(L, imageList)) wxluaO_undeletegcobject(L, imageList);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call AssignImageList
    self->AssignImageList(imageList);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_AssignStateImageList[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxImageList, NULL };
static int LUACALL wxLua_wxTreeCtrl_AssignStateImageList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_AssignStateImageList[1] = {{ wxLua_wxTreeCtrl_AssignStateImageList, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_AssignStateImageList }};
//     void AssignStateImageList(%ungc wxImageList* imageList)
static int LUACALL wxLua_wxTreeCtrl_AssignStateImageList(lua_State *L)
{
    // wxImageList imageList
    wxImageList * imageList = (wxImageList *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImageList);
    if (wxluaO_isgcobject(L, imageList)) wxluaO_undeletegcobject(L, imageList);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call AssignStateImageList
    self->AssignStateImageList(imageList);

    return 0;
}

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_Collapse[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_Collapse(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_Collapse[1] = {{ wxLua_wxTreeCtrl_Collapse, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_Collapse }};
//     void Collapse(const wxTreeItemId& item)
static int LUACALL wxLua_wxTreeCtrl_Collapse(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call Collapse
    self->Collapse(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_CollapseAndReset[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_CollapseAndReset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_CollapseAndReset[1] = {{ wxLua_wxTreeCtrl_CollapseAndReset, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_CollapseAndReset }};
//     void CollapseAndReset(const wxTreeItemId& item)
static int LUACALL wxLua_wxTreeCtrl_CollapseAndReset(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call CollapseAndReset
    self->CollapseAndReset(*item);

    return 0;
}


#if ((wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_Create[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTreeCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_Create[1] = {{ wxLua_wxTreeCtrl_Create, WXLUAMETHOD_METHOD, 3, 8, s_wxluatypeArray_wxLua_wxTreeCtrl_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxTR_HAS_BUTTONS, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxTreeCtrl")
static int LUACALL wxLua_wxTreeCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxTreeCtrl"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxTreeCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxTR_HAS_BUTTONS
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxTR_HAS_BUTTONS);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_Delete[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_Delete(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_Delete[1] = {{ wxLua_wxTreeCtrl_Delete, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_Delete }};
//     void Delete(const wxTreeItemId& item)
static int LUACALL wxLua_wxTreeCtrl_Delete(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call Delete
    self->Delete(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_DeleteAllItems[] = { &wxluatype_wxTreeCtrl, NULL };
static int LUACALL wxLua_wxTreeCtrl_DeleteAllItems(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_DeleteAllItems[1] = {{ wxLua_wxTreeCtrl_DeleteAllItems, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeCtrl_DeleteAllItems }};
//     void DeleteAllItems()
static int LUACALL wxLua_wxTreeCtrl_DeleteAllItems(lua_State *L)
{
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call DeleteAllItems
    self->DeleteAllItems();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_DeleteChildren[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_DeleteChildren(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_DeleteChildren[1] = {{ wxLua_wxTreeCtrl_DeleteChildren, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_DeleteChildren }};
//     void DeleteChildren(const wxTreeItemId& item)
static int LUACALL wxLua_wxTreeCtrl_DeleteChildren(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call DeleteChildren
    self->DeleteChildren(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_EditLabel[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_EditLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_EditLabel[1] = {{ wxLua_wxTreeCtrl_EditLabel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_EditLabel }};
//     void EditLabel(const wxTreeItemId& item)
static int LUACALL wxLua_wxTreeCtrl_EditLabel(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call EditLabel
    self->EditLabel(*item);

    return 0;
}


#if ((defined(__WXMSW__)) && (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)) && (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_EndEditLabel[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTreeCtrl_EndEditLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_EndEditLabel[1] = {{ wxLua_wxTreeCtrl_EndEditLabel, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTreeCtrl_EndEditLabel }};
//     %win void EndEditLabel(const wxTreeItemId& item, bool discardChanges = false)
static int LUACALL wxLua_wxTreeCtrl_EndEditLabel(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool discardChanges = false
    bool discardChanges = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call EndEditLabel
    self->EndEditLabel(*item, discardChanges);

    return 0;
}

#endif // ((defined(__WXMSW__)) && (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)) && (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_EnsureVisible[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_EnsureVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_EnsureVisible[1] = {{ wxLua_wxTreeCtrl_EnsureVisible, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_EnsureVisible }};
//     void EnsureVisible(const wxTreeItemId& item)
static int LUACALL wxLua_wxTreeCtrl_EnsureVisible(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call EnsureVisible
    self->EnsureVisible(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_Expand[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_Expand(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_Expand[1] = {{ wxLua_wxTreeCtrl_Expand, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_Expand }};
//     void Expand(const wxTreeItemId& item)
static int LUACALL wxLua_wxTreeCtrl_Expand(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call Expand
    self->Expand(*item);

    return 0;
}


#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetBoundingRect[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_wxRect, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetBoundingRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetBoundingRect[1] = {{ wxLua_wxTreeCtrl_GetBoundingRect, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxTreeCtrl_GetBoundingRect }};
//     bool GetBoundingRect(const wxTreeItemId& item, wxRect& rect, bool textOnly = false) const
static int LUACALL wxLua_wxTreeCtrl_GetBoundingRect(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool textOnly = false
    bool textOnly = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : false);
    // wxRect rect
    wxRect * rect = (wxRect *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRect);
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetBoundingRect
    bool returns = (self->GetBoundingRect(*item, *rect, textOnly));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetChildrenCount[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetChildrenCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetChildrenCount[1] = {{ wxLua_wxTreeCtrl_GetChildrenCount, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTreeCtrl_GetChildrenCount }};
//     size_t GetChildrenCount(const wxTreeItemId& item, bool recursively = true) const
static int LUACALL wxLua_wxTreeCtrl_GetChildrenCount(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool recursively = true
    bool recursively = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetChildrenCount
    size_t returns = (self->GetChildrenCount(*item, recursively));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetCount[] = { &wxluatype_wxTreeCtrl, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetCount[1] = {{ wxLua_wxTreeCtrl_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeCtrl_GetCount }};
//     int GetCount() const
static int LUACALL wxLua_wxTreeCtrl_GetCount(lua_State *L)
{
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetFirstChild[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetFirstChild(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetFirstChild[1] = {{ wxLua_wxTreeCtrl_GetFirstChild, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_GetFirstChild }};
// %override wxLua_wxTreeCtrl_GetFirstChild
// wxTreeItemId GetFirstChild(const wxTreeItemId& item, long& cookie) const
static int LUACALL wxLua_wxTreeCtrl_GetFirstChild(lua_State *L)
{
#if wxCHECK_VERSION(2, 5, 0)
    wxTreeItemIdValue cookie = 0;
#else
    // long& cookie
    long cookie = 0;
#endif
    // const wxTreeItemId& item
    const wxTreeItemId *item = (wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl *self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetFirstChild
    // allocate a new object using the copy constructor
    wxTreeItemId *returns = new wxTreeItemId(self->GetFirstChild(*item, cookie));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId(returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);
#if wxCHECK_VERSION(2, 5, 0)
    lua_pushnumber(L, (long)cookie); // wxTreeItemIdValue is void*
#else
    // push the cookie
    lua_pushnumber(L, cookie);
#endif
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetFirstVisibleItem[] = { &wxluatype_wxTreeCtrl, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetFirstVisibleItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetFirstVisibleItem[1] = {{ wxLua_wxTreeCtrl_GetFirstVisibleItem, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeCtrl_GetFirstVisibleItem }};
//     wxTreeItemId GetFirstVisibleItem() const
static int LUACALL wxLua_wxTreeCtrl_GetFirstVisibleItem(lua_State *L)
{
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetFirstVisibleItem
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->GetFirstVisibleItem());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}


#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetImageList[] = { &wxluatype_wxTreeCtrl, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetImageList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetImageList[1] = {{ wxLua_wxTreeCtrl_GetImageList, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeCtrl_GetImageList }};
//     wxImageList* GetImageList() const
static int LUACALL wxLua_wxTreeCtrl_GetImageList(lua_State *L)
{
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetImageList
    wxImageList* returns = (wxImageList*)self->GetImageList();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImageList);

    return 1;
}

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetIndent[] = { &wxluatype_wxTreeCtrl, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetIndent[1] = {{ wxLua_wxTreeCtrl_GetIndent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeCtrl_GetIndent }};
//     int GetIndent() const
static int LUACALL wxLua_wxTreeCtrl_GetIndent(lua_State *L)
{
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetIndent
    int returns = (self->GetIndent());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetItemBackgroundColour[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetItemBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetItemBackgroundColour[1] = {{ wxLua_wxTreeCtrl_GetItemBackgroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_GetItemBackgroundColour }};
//     wxColour GetItemBackgroundColour(const wxTreeItemId& item) const
static int LUACALL wxLua_wxTreeCtrl_GetItemBackgroundColour(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetItemBackgroundColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetItemBackgroundColour(*item));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetItemData[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetItemData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetItemData[1] = {{ wxLua_wxTreeCtrl_GetItemData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_GetItemData }};
//     wxTreeItemData* GetItemData(const wxTreeItemId& item) const
static int LUACALL wxLua_wxTreeCtrl_GetItemData(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetItemData
    wxTreeItemData* returns = (wxTreeItemData*)self->GetItemData(*item);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemData);

    return 1;
}


#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetItemFont[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetItemFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetItemFont[1] = {{ wxLua_wxTreeCtrl_GetItemFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_GetItemFont }};
//     wxFont GetItemFont(const wxTreeItemId& item) const
static int LUACALL wxLua_wxTreeCtrl_GetItemFont(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetItemFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetItemFont(*item));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxFont*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetItemImage[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetItemImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetItemImage[1] = {{ wxLua_wxTreeCtrl_GetItemImage, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTreeCtrl_GetItemImage }};
//     int GetItemImage(const wxTreeItemId& item, wxTreeItemIcon which = wxTreeItemIcon_Normal) const
static int LUACALL wxLua_wxTreeCtrl_GetItemImage(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxTreeItemIcon which = wxTreeItemIcon_Normal
    wxTreeItemIcon which = (argCount >= 3 ? (wxTreeItemIcon)wxlua_getenumtype(L, 3) : wxTreeItemIcon_Normal);
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetItemImage
    int returns = (self->GetItemImage(*item, which));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if ((wxCHECK_VERSION(2,4,0)) && (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)) && (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetItemParent[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetItemParent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetItemParent[1] = {{ wxLua_wxTreeCtrl_GetItemParent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_GetItemParent }};
//     %wxchkver_2_4 wxTreeItemId GetItemParent(const wxTreeItemId& item) const
static int LUACALL wxLua_wxTreeCtrl_GetItemParent(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetItemParent
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->GetItemParent(*item));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,4,0)) && (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)) && (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetItemText[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetItemText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetItemText[1] = {{ wxLua_wxTreeCtrl_GetItemText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_GetItemText }};
//     wxString GetItemText(const wxTreeItemId& item) const
static int LUACALL wxLua_wxTreeCtrl_GetItemText(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetItemText
    wxString returns = (self->GetItemText(*item));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetItemTextColour[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetItemTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetItemTextColour[1] = {{ wxLua_wxTreeCtrl_GetItemTextColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_GetItemTextColour }};
//     wxColour GetItemTextColour(const wxTreeItemId& item) const
static int LUACALL wxLua_wxTreeCtrl_GetItemTextColour(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetItemTextColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetItemTextColour(*item));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetLastChild[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetLastChild(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetLastChild[1] = {{ wxLua_wxTreeCtrl_GetLastChild, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_GetLastChild }};
//     wxTreeItemId GetLastChild(const wxTreeItemId& item) const
static int LUACALL wxLua_wxTreeCtrl_GetLastChild(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetLastChild
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->GetLastChild(*item));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetNextChild[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetNextChild(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetNextChild[1] = {{ wxLua_wxTreeCtrl_GetNextChild, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTreeCtrl_GetNextChild }};
// %override wxLua_wxTreeCtrl_GetNextChild
// wxTreeItemId GetNextChild(const wxTreeItemId& item, long& cookie) const
static int LUACALL wxLua_wxTreeCtrl_GetNextChild(lua_State *L)
{
#if wxCHECK_VERSION(2, 5, 0)
    wxTreeItemIdValue cookie = (wxTreeItemIdValue)(long)wxlua_getintegertype(L, 3);
#else
    // long& cookie
    long cookie = (long)lua_tonumber(L, 3);
#endif
    // const wxTreeItemId& item
    const wxTreeItemId *item = (wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl *self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetNextChild
    // allocate a new object using the copy constructor
    wxTreeItemId *returns = new wxTreeItemId(self->GetNextChild(*item, cookie));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId(returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);
#if wxCHECK_VERSION(2, 5, 0)
    lua_pushnumber(L, (long)cookie);
#else
    // push the cookie
    lua_pushnumber(L, cookie);
#endif
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetNextSibling[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetNextSibling(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetNextSibling[1] = {{ wxLua_wxTreeCtrl_GetNextSibling, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_GetNextSibling }};
//     wxTreeItemId GetNextSibling(const wxTreeItemId& item) const
static int LUACALL wxLua_wxTreeCtrl_GetNextSibling(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetNextSibling
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->GetNextSibling(*item));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetNextVisible[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetNextVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetNextVisible[1] = {{ wxLua_wxTreeCtrl_GetNextVisible, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_GetNextVisible }};
//     wxTreeItemId GetNextVisible(const wxTreeItemId& item) const
static int LUACALL wxLua_wxTreeCtrl_GetNextVisible(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetNextVisible
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->GetNextVisible(*item));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetPrevSibling[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetPrevSibling(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetPrevSibling[1] = {{ wxLua_wxTreeCtrl_GetPrevSibling, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_GetPrevSibling }};
//     wxTreeItemId GetPrevSibling(const wxTreeItemId& item) const
static int LUACALL wxLua_wxTreeCtrl_GetPrevSibling(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetPrevSibling
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->GetPrevSibling(*item));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetPrevVisible[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetPrevVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetPrevVisible[1] = {{ wxLua_wxTreeCtrl_GetPrevVisible, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_GetPrevVisible }};
//     wxTreeItemId GetPrevVisible(const wxTreeItemId& item) const
static int LUACALL wxLua_wxTreeCtrl_GetPrevVisible(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetPrevVisible
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->GetPrevVisible(*item));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetRootItem[] = { &wxluatype_wxTreeCtrl, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetRootItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetRootItem[1] = {{ wxLua_wxTreeCtrl_GetRootItem, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeCtrl_GetRootItem }};
//     wxTreeItemId GetRootItem() const
static int LUACALL wxLua_wxTreeCtrl_GetRootItem(lua_State *L)
{
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetRootItem
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->GetRootItem());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetSelection[] = { &wxluatype_wxTreeCtrl, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetSelection[1] = {{ wxLua_wxTreeCtrl_GetSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeCtrl_GetSelection }};
//     wxTreeItemId GetSelection() const
static int LUACALL wxLua_wxTreeCtrl_GetSelection(lua_State *L)
{
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetSelection
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->GetSelection());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetSelections[] = { &wxluatype_wxTreeCtrl, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetSelections(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetSelections[1] = {{ wxLua_wxTreeCtrl_GetSelections, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeCtrl_GetSelections }};
// %override wxLua_wxTreeCtrl_GetSelections
// size_t GetSelections(wxArrayTreeItemIds& selection) const
static int LUACALL wxLua_wxTreeCtrl_GetSelections(lua_State *L)
{
    // get this
    wxTreeCtrl *self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetSelections
    wxArrayTreeItemIds selection;
    size_t count = self->GetSelections(selection);

    lua_newtable(L);

    size_t idx;
    for (idx = 0; idx < count; ++idx)
    {
        wxTreeItemId* treeId = new wxTreeItemId(selection[idx]);
        wxluaO_addgcobject(L, (void*)treeId, new wxLua_wxObject_wxTreeItemId(treeId));
        wxluaT_pushuserdatatype(L, treeId, wxluatype_wxTreeItemId);
        lua_rawseti(L, -2, idx + 1);
    }
    // return the number of parameters
    return 1;
}



#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_GetStateImageList[] = { &wxluatype_wxTreeCtrl, NULL };
static int LUACALL wxLua_wxTreeCtrl_GetStateImageList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_GetStateImageList[1] = {{ wxLua_wxTreeCtrl_GetStateImageList, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeCtrl_GetStateImageList }};
//     wxImageList* GetStateImageList() const
static int LUACALL wxLua_wxTreeCtrl_GetStateImageList(lua_State *L)
{
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call GetStateImageList
    wxImageList* returns = (wxImageList*)self->GetStateImageList();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImageList);

    return 1;
}

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_HitTest[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxTreeCtrl_HitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_HitTest[1] = {{ wxLua_wxTreeCtrl_HitTest, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_HitTest }};
// %override wxLua_wxTreeCtrl_HitTest
// wxTreeItemId HitTest(const wxPoint& point, int& flags)
static int LUACALL wxLua_wxTreeCtrl_HitTest(lua_State *L)
{
    // int& flags
    int flags = 0;
    // const wxPoint& point
    const wxPoint *point = (wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxTreeCtrl *self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call HitTest
    // allocate a new object using the copy constructor
    wxTreeItemId *returns = new wxTreeItemId(self->HitTest(*point, flags));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId(returns));

    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);
    lua_pushnumber(L, flags);
    // return the number of parameters
    return 2;
}


#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_InsertItem1[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_TINTEGER, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxTreeItemData, NULL };
static int LUACALL wxLua_wxTreeCtrl_InsertItem1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_InsertItem1[1] = {{ wxLua_wxTreeCtrl_InsertItem1, WXLUAMETHOD_METHOD, 4, 7, s_wxluatypeArray_wxLua_wxTreeCtrl_InsertItem1 }};
//     wxTreeItemId InsertItem(const wxTreeItemId& parent, size_t before, const wxString& text, int image = -1, int selImage = -1, wxTreeItemData* data = NULL)
static int LUACALL wxLua_wxTreeCtrl_InsertItem1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxTreeItemData data = NULL
    wxTreeItemData * data = (argCount >= 7 ? (wxTreeItemData *)wxluaT_getuserdatatype(L, 7, wxluatype_wxTreeItemData) : NULL);
    // int selImage = -1
    int selImage = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int image = -1
    int image = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 4);
    // size_t before
    size_t before = (size_t)wxlua_getuintegertype(L, 3);
    // const wxTreeItemId parent
    const wxTreeItemId * parent = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call InsertItem
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->InsertItem(*parent, before, text, image, selImage, data));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_InsertItem[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_wxTreeItemId, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxTreeItemData, NULL };
static int LUACALL wxLua_wxTreeCtrl_InsertItem(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_InsertItem[1] = {{ wxLua_wxTreeCtrl_InsertItem, WXLUAMETHOD_METHOD, 4, 7, s_wxluatypeArray_wxLua_wxTreeCtrl_InsertItem }};
//     wxTreeItemId InsertItem(const wxTreeItemId& parent, const wxTreeItemId& previous, const wxString& text, int image = -1, int selImage = -1, wxTreeItemData* data = NULL)
static int LUACALL wxLua_wxTreeCtrl_InsertItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxTreeItemData data = NULL
    wxTreeItemData * data = (argCount >= 7 ? (wxTreeItemData *)wxluaT_getuserdatatype(L, 7, wxluatype_wxTreeItemData) : NULL);
    // int selImage = -1
    int selImage = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int image = -1
    int image = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 4);
    // const wxTreeItemId previous
    const wxTreeItemId * previous = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTreeItemId);
    // const wxTreeItemId parent
    const wxTreeItemId * parent = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call InsertItem
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->InsertItem(*parent, *previous, text, image, selImage, data));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_IsBold[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_IsBold(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_IsBold[1] = {{ wxLua_wxTreeCtrl_IsBold, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_IsBold }};
//     bool IsBold(const wxTreeItemId& item) const
static int LUACALL wxLua_wxTreeCtrl_IsBold(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call IsBold
    bool returns = (self->IsBold(*item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_IsExpanded[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_IsExpanded(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_IsExpanded[1] = {{ wxLua_wxTreeCtrl_IsExpanded, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_IsExpanded }};
//     bool IsExpanded(const wxTreeItemId& item) const
static int LUACALL wxLua_wxTreeCtrl_IsExpanded(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call IsExpanded
    bool returns = (self->IsExpanded(*item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_IsSelected[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_IsSelected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_IsSelected[1] = {{ wxLua_wxTreeCtrl_IsSelected, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_IsSelected }};
//     bool IsSelected(const wxTreeItemId& item) const
static int LUACALL wxLua_wxTreeCtrl_IsSelected(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call IsSelected
    bool returns = (self->IsSelected(*item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_IsVisible[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_IsVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_IsVisible[1] = {{ wxLua_wxTreeCtrl_IsVisible, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_IsVisible }};
//     bool IsVisible(const wxTreeItemId& item) const
static int LUACALL wxLua_wxTreeCtrl_IsVisible(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call IsVisible
    bool returns = (self->IsVisible(*item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_ItemHasChildren[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_ItemHasChildren(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_ItemHasChildren[1] = {{ wxLua_wxTreeCtrl_ItemHasChildren, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_ItemHasChildren }};
//     bool ItemHasChildren(const wxTreeItemId& item) const
static int LUACALL wxLua_wxTreeCtrl_ItemHasChildren(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call ItemHasChildren
    bool returns = (self->ItemHasChildren(*item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_PrependItem[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxTreeItemData, NULL };
static int LUACALL wxLua_wxTreeCtrl_PrependItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_PrependItem[1] = {{ wxLua_wxTreeCtrl_PrependItem, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxTreeCtrl_PrependItem }};
//     wxTreeItemId PrependItem(const wxTreeItemId& parent, const wxString& text, int image = -1, int selImage = -1, wxTreeItemData* data = NULL)
static int LUACALL wxLua_wxTreeCtrl_PrependItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxTreeItemData data = NULL
    wxTreeItemData * data = (argCount >= 6 ? (wxTreeItemData *)wxluaT_getuserdatatype(L, 6, wxluatype_wxTreeItemData) : NULL);
    // int selImage = -1
    int selImage = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // int image = -1
    int image = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // const wxTreeItemId parent
    const wxTreeItemId * parent = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call PrependItem
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->PrependItem(*parent, text, image, selImage, data));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_ScrollTo[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_ScrollTo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_ScrollTo[1] = {{ wxLua_wxTreeCtrl_ScrollTo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_ScrollTo }};
//     void ScrollTo(const wxTreeItemId& item)
static int LUACALL wxLua_wxTreeCtrl_ScrollTo(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call ScrollTo
    self->ScrollTo(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_SelectItem[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTreeCtrl_SelectItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_SelectItem[1] = {{ wxLua_wxTreeCtrl_SelectItem, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTreeCtrl_SelectItem }};
//     void SelectItem(const wxTreeItemId& item, bool select = true)
static int LUACALL wxLua_wxTreeCtrl_SelectItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool select = true
    bool select = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call SelectItem
    self->SelectItem(*item, select);

    return 0;
}


#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_SetImageList[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxImageList, NULL };
static int LUACALL wxLua_wxTreeCtrl_SetImageList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_SetImageList[1] = {{ wxLua_wxTreeCtrl_SetImageList, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_SetImageList }};
//     void SetImageList(wxImageList* imageList)
static int LUACALL wxLua_wxTreeCtrl_SetImageList(lua_State *L)
{
    // wxImageList imageList
    wxImageList * imageList = (wxImageList *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImageList);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call SetImageList
    self->SetImageList(imageList);

    return 0;
}

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_SetIndent[] = { &wxluatype_wxTreeCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTreeCtrl_SetIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_SetIndent[1] = {{ wxLua_wxTreeCtrl_SetIndent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_SetIndent }};
//     void SetIndent(int indent)
static int LUACALL wxLua_wxTreeCtrl_SetIndent(lua_State *L)
{
    // int indent
    int indent = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call SetIndent
    self->SetIndent(indent);

    return 0;
}


#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemBackgroundColour[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxTreeCtrl_SetItemBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_SetItemBackgroundColour[1] = {{ wxLua_wxTreeCtrl_SetItemBackgroundColour, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemBackgroundColour }};
//     void SetItemBackgroundColour(const wxTreeItemId& item, const wxColour& col)
static int LUACALL wxLua_wxTreeCtrl_SetItemBackgroundColour(lua_State *L)
{
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call SetItemBackgroundColour
    self->SetItemBackgroundColour(*item, *col);

    return 0;
}

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemBold[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTreeCtrl_SetItemBold(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_SetItemBold[1] = {{ wxLua_wxTreeCtrl_SetItemBold, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemBold }};
//     void SetItemBold(const wxTreeItemId& item, bool bold = true)
static int LUACALL wxLua_wxTreeCtrl_SetItemBold(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool bold = true
    bool bold = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call SetItemBold
    self->SetItemBold(*item, bold);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemData[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_wxTreeItemData, NULL };
static int LUACALL wxLua_wxTreeCtrl_SetItemData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_SetItemData[1] = {{ wxLua_wxTreeCtrl_SetItemData, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemData }};
//     void SetItemData(const wxTreeItemId& item, wxTreeItemData* data)
static int LUACALL wxLua_wxTreeCtrl_SetItemData(lua_State *L)
{
    // wxTreeItemData data
    wxTreeItemData * data = (wxTreeItemData *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTreeItemData);
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call SetItemData
    self->SetItemData(*item, data);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemDropHighlight[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_SetItemDropHighlight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_SetItemDropHighlight[1] = {{ wxLua_wxTreeCtrl_SetItemDropHighlight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemDropHighlight }};
//     void SetItemDropHighlight(const wxTreeItemId& item, boolhighlight = true)
static int LUACALL wxLua_wxTreeCtrl_SetItemDropHighlight(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call SetItemDropHighlight
    self->SetItemDropHighlight(*item);

    return 0;
}


#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemFont[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxTreeCtrl_SetItemFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_SetItemFont[1] = {{ wxLua_wxTreeCtrl_SetItemFont, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemFont }};
//     void SetItemFont(const wxTreeItemId& item, const wxFont& font)
static int LUACALL wxLua_wxTreeCtrl_SetItemFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 3, wxluatype_wxFont);
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call SetItemFont
    self->SetItemFont(*item, *font);

    return 0;
}

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemHasChildren[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTreeCtrl_SetItemHasChildren(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_SetItemHasChildren[1] = {{ wxLua_wxTreeCtrl_SetItemHasChildren, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemHasChildren }};
//     void SetItemHasChildren(const wxTreeItemId& item, bool hasChildren = true)
static int LUACALL wxLua_wxTreeCtrl_SetItemHasChildren(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool hasChildren = true
    bool hasChildren = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call SetItemHasChildren
    self->SetItemHasChildren(*item, hasChildren);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemImage[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTreeCtrl_SetItemImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_SetItemImage[1] = {{ wxLua_wxTreeCtrl_SetItemImage, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemImage }};
//     void SetItemImage(const wxTreeItemId& item, int image, wxTreeItemIcon which = wxTreeItemIcon_Normal)
static int LUACALL wxLua_wxTreeCtrl_SetItemImage(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxTreeItemIcon which = wxTreeItemIcon_Normal
    wxTreeItemIcon which = (argCount >= 4 ? (wxTreeItemIcon)wxlua_getenumtype(L, 4) : wxTreeItemIcon_Normal);
    // int image
    int image = (int)wxlua_getnumbertype(L, 3);
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call SetItemImage
    self->SetItemImage(*item, image, which);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemText[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTreeCtrl_SetItemText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_SetItemText[1] = {{ wxLua_wxTreeCtrl_SetItemText, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemText }};
//     void SetItemText(const wxTreeItemId& item, const wxString& text)
static int LUACALL wxLua_wxTreeCtrl_SetItemText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call SetItemText
    self->SetItemText(*item, text);

    return 0;
}


#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemTextColour[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxTreeCtrl_SetItemTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_SetItemTextColour[1] = {{ wxLua_wxTreeCtrl_SetItemTextColour, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTreeCtrl_SetItemTextColour }};
//     void SetItemTextColour(const wxTreeItemId& item, const wxColour& col)
static int LUACALL wxLua_wxTreeCtrl_SetItemTextColour(lua_State *L)
{
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call SetItemTextColour
    self->SetItemTextColour(*item, *col);

    return 0;
}

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_SetStateImageList[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxImageList, NULL };
static int LUACALL wxLua_wxTreeCtrl_SetStateImageList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_SetStateImageList[1] = {{ wxLua_wxTreeCtrl_SetStateImageList, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_SetStateImageList }};
//     void SetStateImageList(wxImageList* imageList)
static int LUACALL wxLua_wxTreeCtrl_SetStateImageList(lua_State *L)
{
    // wxImageList imageList
    wxImageList * imageList = (wxImageList *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImageList);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call SetStateImageList
    self->SetStateImageList(imageList);

    return 0;
}

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_SortChildren[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_SortChildren(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_SortChildren[1] = {{ wxLua_wxTreeCtrl_SortChildren, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_SortChildren }};
//     void SortChildren(const wxTreeItemId& item)
static int LUACALL wxLua_wxTreeCtrl_SortChildren(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call SortChildren
    self->SortChildren(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_Toggle[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_Toggle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_Toggle[1] = {{ wxLua_wxTreeCtrl_Toggle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_Toggle }};
//     void Toggle(const wxTreeItemId& item)
static int LUACALL wxLua_wxTreeCtrl_Toggle(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call Toggle
    self->Toggle(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_ToggleItemSelection[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_ToggleItemSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_ToggleItemSelection[1] = {{ wxLua_wxTreeCtrl_ToggleItemSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_ToggleItemSelection }};
//     void ToggleItemSelection(const wxTreeItemId& item)
static int LUACALL wxLua_wxTreeCtrl_ToggleItemSelection(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call ToggleItemSelection
    self->ToggleItemSelection(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_Unselect[] = { &wxluatype_wxTreeCtrl, NULL };
static int LUACALL wxLua_wxTreeCtrl_Unselect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_Unselect[1] = {{ wxLua_wxTreeCtrl_Unselect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeCtrl_Unselect }};
//     void Unselect()
static int LUACALL wxLua_wxTreeCtrl_Unselect(lua_State *L)
{
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call Unselect
    self->Unselect();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_UnselectAll[] = { &wxluatype_wxTreeCtrl, NULL };
static int LUACALL wxLua_wxTreeCtrl_UnselectAll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_UnselectAll[1] = {{ wxLua_wxTreeCtrl_UnselectAll, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeCtrl_UnselectAll }};
//     void UnselectAll()
static int LUACALL wxLua_wxTreeCtrl_UnselectAll(lua_State *L)
{
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call UnselectAll
    self->UnselectAll();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_UnselectItem[] = { &wxluatype_wxTreeCtrl, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeCtrl_UnselectItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_UnselectItem[1] = {{ wxLua_wxTreeCtrl_UnselectItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeCtrl_UnselectItem }};
//     void UnselectItem(const wxTreeItemId& item)
static int LUACALL wxLua_wxTreeCtrl_UnselectItem(lua_State *L)
{
    // const wxTreeItemId item
    const wxTreeItemId * item = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeCtrl * self = (wxTreeCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeCtrl);
    // call UnselectItem
    self->UnselectItem(*item);

    return 0;
}


#if ((wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTreeCtrl_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_constructor1[1] = {{ wxLua_wxTreeCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 7, s_wxluatypeArray_wxLua_wxTreeCtrl_constructor1 }};
//     wxTreeCtrl(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxTR_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxTreeCtrl")
static int LUACALL wxLua_wxTreeCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxTreeCtrl"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxTreeCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 6 ? (const wxValidator *)wxluaT_getuserdatatype(L, 6, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxTR_DEFAULT_STYLE
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxTR_DEFAULT_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxTreeCtrl* returns = new wxTreeCtrl(parent, id, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeCtrl);

    return 1;
}

#endif // ((wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxTreeCtrl_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_constructor[1] = {{ wxLua_wxTreeCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTreeCtrl()
static int LUACALL wxLua_wxTreeCtrl_constructor(lua_State *L)
{
    // call constructor
    wxTreeCtrl* returns = new wxTreeCtrl();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeCtrl);

    return 1;
}




#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_InsertItem_overload[] =
{
    { wxLua_wxTreeCtrl_InsertItem1, WXLUAMETHOD_METHOD, 4, 7, s_wxluatypeArray_wxLua_wxTreeCtrl_InsertItem1 },
    { wxLua_wxTreeCtrl_InsertItem, WXLUAMETHOD_METHOD, 4, 7, s_wxluatypeArray_wxLua_wxTreeCtrl_InsertItem },
};
static int s_wxluafunc_wxLua_wxTreeCtrl_InsertItem_overload_count = sizeof(s_wxluafunc_wxLua_wxTreeCtrl_InsertItem_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)

#if (((wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeCtrl_constructor_overload[] =
{

#if ((wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxTreeCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 7, s_wxluatypeArray_wxLua_wxTreeCtrl_constructor1 },
#endif // ((wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxTreeCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxTreeCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxTreeCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTreeCtrl_methods[] = {
    { "AddRoot", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_AddRoot, 1, NULL },
    { "AppendItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_AppendItem, 1, NULL },

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)
    { "AssignImageList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_AssignImageList, 1, NULL },
    { "AssignStateImageList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_AssignStateImageList, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)

    { "Collapse", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_Collapse, 1, NULL },
    { "CollapseAndReset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_CollapseAndReset, 1, NULL },

#if ((wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_Create, 1, NULL },
#endif // ((wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

    { "Delete", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_Delete, 1, NULL },
    { "DeleteAllItems", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_DeleteAllItems, 1, NULL },
    { "DeleteChildren", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_DeleteChildren, 1, NULL },
    { "EditLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_EditLabel, 1, NULL },

#if ((defined(__WXMSW__)) && (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)) && (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)
    { "EndEditLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_EndEditLabel, 1, NULL },
#endif // ((defined(__WXMSW__)) && (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)) && (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)

    { "EnsureVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_EnsureVisible, 1, NULL },
    { "Expand", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_Expand, 1, NULL },

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxPointSizeRect)
    { "GetBoundingRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetBoundingRect, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxPointSizeRect)

    { "GetChildrenCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetChildrenCount, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetCount, 1, NULL },
    { "GetFirstChild", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetFirstChild, 1, NULL },
    { "GetFirstVisibleItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetFirstVisibleItem, 1, NULL },

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)
    { "GetImageList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetImageList, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)

    { "GetIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetIndent, 1, NULL },

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxColourPenBrush)
    { "GetItemBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetItemBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxColourPenBrush)

    { "GetItemData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetItemData, 1, NULL },

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxFont)
    { "GetItemFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetItemFont, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxFont)

    { "GetItemImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetItemImage, 1, NULL },

#if ((wxCHECK_VERSION(2,4,0)) && (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)) && (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)
    { "GetItemParent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetItemParent, 1, NULL },
#endif // ((wxCHECK_VERSION(2,4,0)) && (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)) && (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)

    { "GetItemText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetItemText, 1, NULL },

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxColourPenBrush)
    { "GetItemTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetItemTextColour, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxColourPenBrush)

    { "GetLastChild", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetLastChild, 1, NULL },
    { "GetNextChild", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetNextChild, 1, NULL },
    { "GetNextSibling", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetNextSibling, 1, NULL },
    { "GetNextVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetNextVisible, 1, NULL },
    { "GetPrevSibling", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetPrevSibling, 1, NULL },
    { "GetPrevVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetPrevVisible, 1, NULL },
    { "GetRootItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetRootItem, 1, NULL },
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetSelection, 1, NULL },
    { "GetSelections", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetSelections, 1, NULL },

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)
    { "GetStateImageList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_GetStateImageList, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxPointSizeRect)
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_HitTest, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)
    { "InsertItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_InsertItem_overload, s_wxluafunc_wxLua_wxTreeCtrl_InsertItem_overload_count, 0 },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)

    { "IsBold", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_IsBold, 1, NULL },
    { "IsExpanded", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_IsExpanded, 1, NULL },
    { "IsSelected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_IsSelected, 1, NULL },
    { "IsVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_IsVisible, 1, NULL },
    { "ItemHasChildren", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_ItemHasChildren, 1, NULL },
    { "PrependItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_PrependItem, 1, NULL },
    { "ScrollTo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_ScrollTo, 1, NULL },
    { "SelectItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_SelectItem, 1, NULL },

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)
    { "SetImageList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_SetImageList, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)

    { "SetIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_SetIndent, 1, NULL },

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxColourPenBrush)
    { "SetItemBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_SetItemBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxColourPenBrush)

    { "SetItemBold", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_SetItemBold, 1, NULL },
    { "SetItemData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_SetItemData, 1, NULL },
    { "SetItemDropHighlight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_SetItemDropHighlight, 1, NULL },

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxFont)
    { "SetItemFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_SetItemFont, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxFont)

    { "SetItemHasChildren", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_SetItemHasChildren, 1, NULL },
    { "SetItemImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_SetItemImage, 1, NULL },
    { "SetItemText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_SetItemText, 1, NULL },

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxColourPenBrush)
    { "SetItemTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_SetItemTextColour, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)
    { "SetStateImageList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_SetStateImageList, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxImageList)

    { "SortChildren", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_SortChildren, 1, NULL },
    { "Toggle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_Toggle, 1, NULL },
    { "ToggleItemSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_ToggleItemSelection, 1, NULL },
    { "Unselect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_Unselect, 1, NULL },
    { "UnselectAll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_UnselectAll, 1, NULL },
    { "UnselectItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeCtrl_UnselectItem, 1, NULL },

#if (((wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)
    { "wxTreeCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTreeCtrl_constructor_overload, s_wxluafunc_wxLua_wxTreeCtrl_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)

    { 0, 0, 0, 0 },
};

int wxTreeCtrl_methodCount = sizeof(wxTreeCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL


#if wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL
// ---------------------------------------------------------------------------
// Bind class wxTreeItemId
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTreeItemId'
int wxluatype_wxTreeItemId = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeItemId_GetValue[] = { &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeItemId_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeItemId_GetValue[1] = {{ wxLua_wxTreeItemId_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeItemId_GetValue }};
// %override wxLua_wxTreeItemId_GetValue
// long  GetValue() const;
static int LUACALL wxLua_wxTreeItemId_GetValue(lua_State *L)
{
    // get this
    wxTreeItemId *self = (wxTreeItemId *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeItemId);
    // call GetValue
    long returns = (long)self->m_pItem;
    // push the result number
    lua_pushnumber(L, returns);
    // return the number of parameters
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeItemId_IsOk[] = { &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeItemId_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeItemId_IsOk[1] = {{ wxLua_wxTreeItemId_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeItemId_IsOk }};
//     bool IsOk()
static int LUACALL wxLua_wxTreeItemId_IsOk(lua_State *L)
{
    // get this
    wxTreeItemId * self = (wxTreeItemId *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeItemId);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeItemId_delete[] = { &wxluatype_wxTreeItemId, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeItemId_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTreeItemId_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeItemId_op_eq[] = { &wxluatype_wxTreeItemId, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeItemId_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeItemId_op_eq[1] = {{ wxLua_wxTreeItemId_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeItemId_op_eq }};
//     %operator bool operator==(const wxTreeItemId& otherId) const
static int LUACALL wxLua_wxTreeItemId_op_eq(lua_State *L)
{
    // const wxTreeItemId otherId
    const wxTreeItemId * otherId = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeItemId * self = (wxTreeItemId *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeItemId);
    // call op_eq
    bool returns = ((*self)==(*otherId));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeItemId_op_set[] = { &wxluatype_wxTreeItemId, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeItemId_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeItemId_op_set[1] = {{ wxLua_wxTreeItemId_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeItemId_op_set }};
//     %operator wxTreeItemId& operator=(const wxTreeItemId& otherId)
static int LUACALL wxLua_wxTreeItemId_op_set(lua_State *L)
{
    // const wxTreeItemId otherId
    const wxTreeItemId * otherId = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeItemId * self = (wxTreeItemId *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeItemId);
    // call op_set
    (*self)=(*otherId);
    wxTreeItemId* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeItemId_constructor1[] = { &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeItemId_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeItemId_constructor1[1] = {{ wxLua_wxTreeItemId_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxTreeItemId_constructor1 }};
//     wxTreeItemId(const wxTreeItemId& id)
static int LUACALL wxLua_wxTreeItemId_constructor1(lua_State *L)
{
    // const wxTreeItemId id
    const wxTreeItemId * id = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeItemId);
    // call constructor
    wxTreeItemId* returns = new wxTreeItemId(*id);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

static int LUACALL wxLua_wxTreeItemId_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeItemId_constructor[1] = {{ wxLua_wxTreeItemId_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTreeItemId()
static int LUACALL wxLua_wxTreeItemId_constructor(lua_State *L)
{
    // call constructor
    wxTreeItemId* returns = new wxTreeItemId();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}




#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeItemId_constructor_overload[] =
{
    { wxLua_wxTreeItemId_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxTreeItemId_constructor1 },
    { wxLua_wxTreeItemId_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxTreeItemId_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxTreeItemId_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTreeItemId_methods[] = {
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeItemId_GetValue, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeItemId_IsOk, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTreeItemId_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeItemId_op_eq, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeItemId_op_set, 1, NULL },

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)
    { "wxTreeItemId", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTreeItemId_constructor_overload, s_wxluafunc_wxLua_wxTreeItemId_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL)

    { 0, 0, 0, 0 },
};

int wxTreeItemId_methodCount = sizeof(wxTreeItemId_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL


#if wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL
// ---------------------------------------------------------------------------
// Bind class wxTreeItemData
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTreeItemData'
int wxluatype_wxTreeItemData = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeItemData_GetId[] = { &wxluatype_wxTreeItemData, NULL };
static int LUACALL wxLua_wxTreeItemData_GetId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeItemData_GetId[1] = {{ wxLua_wxTreeItemData_GetId, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeItemData_GetId }};
//     wxTreeItemId GetId()
static int LUACALL wxLua_wxTreeItemData_GetId(lua_State *L)
{
    // get this
    wxTreeItemData * self = (wxTreeItemData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeItemData);
    // call GetId
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->GetId());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeItemData_SetId[] = { &wxluatype_wxTreeItemData, &wxluatype_wxTreeItemId, NULL };
static int LUACALL wxLua_wxTreeItemData_SetId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeItemData_SetId[1] = {{ wxLua_wxTreeItemData_SetId, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeItemData_SetId }};
//     void         SetId(const wxTreeItemId& id)
static int LUACALL wxLua_wxTreeItemData_SetId(lua_State *L)
{
    // const wxTreeItemId id
    const wxTreeItemId * id = (const wxTreeItemId *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTreeItemId);
    // get this
    wxTreeItemData * self = (wxTreeItemData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeItemData);
    // call SetId
    self->SetId(*id);

    return 0;
}

static int LUACALL wxLua_wxTreeItemData_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeItemData_constructor[1] = {{ wxLua_wxTreeItemData_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTreeItemData()
static int LUACALL wxLua_wxTreeItemData_constructor(lua_State *L)
{
    // call constructor
    wxTreeItemData* returns = new wxTreeItemData();
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemData);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTreeItemData_methods[] = {
    { "GetId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeItemData_GetId, 1, NULL },
    { "SetId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeItemData_SetId, 1, NULL },
    { "wxTreeItemData", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTreeItemData_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTreeItemData_methodCount = sizeof(wxTreeItemData_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL


#if wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL
// ---------------------------------------------------------------------------
// Bind class wxLuaTreeItemData
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLuaTreeItemData'
int wxluatype_wxLuaTreeItemData = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxLuaTreeItemData_GetValue[] = { &wxluatype_wxLuaTreeItemData, NULL };
static int LUACALL wxLua_wxLuaTreeItemData_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLuaTreeItemData_GetValue[1] = {{ wxLua_wxLuaTreeItemData_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLuaTreeItemData_GetValue }};
//     double GetValue() const;
static int LUACALL wxLua_wxLuaTreeItemData_GetValue(lua_State *L)
{
    // get this
    wxLuaTreeItemData * self = (wxLuaTreeItemData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLuaTreeItemData);
    // call GetValue
    double returns = (self->GetValue());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLuaTreeItemData_SetValue[] = { &wxluatype_wxLuaTreeItemData, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxLuaTreeItemData_SetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLuaTreeItemData_SetValue[1] = {{ wxLua_wxLuaTreeItemData_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxLuaTreeItemData_SetValue }};
//     void   SetValue(double value);
static int LUACALL wxLua_wxLuaTreeItemData_SetValue(lua_State *L)
{
    // double value
    double value = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxLuaTreeItemData * self = (wxLuaTreeItemData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLuaTreeItemData);
    // call SetValue
    self->SetValue(value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLuaTreeItemData_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxLuaTreeItemData_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLuaTreeItemData_constructor[1] = {{ wxLua_wxLuaTreeItemData_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxLuaTreeItemData_constructor }};
//     wxLuaTreeItemData(double value = 0)
static int LUACALL wxLua_wxLuaTreeItemData_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // double value = 0
    double value = (argCount >= 1 ? (double)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxLuaTreeItemData* returns = new wxLuaTreeItemData(value);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLuaTreeItemData);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLuaTreeItemData_methods[] = {
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLuaTreeItemData_GetValue, 1, NULL },
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLuaTreeItemData_SetValue, 1, NULL },
    { "wxLuaTreeItemData", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLuaTreeItemData_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxLuaTreeItemData_methodCount = sizeof(wxLuaTreeItemData_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL


#if wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL
// ---------------------------------------------------------------------------
// Bind class wxTreeEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTreeEvent'
int wxluatype_wxTreeEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeEvent_GetItem[] = { &wxluatype_wxTreeEvent, NULL };
static int LUACALL wxLua_wxTreeEvent_GetItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeEvent_GetItem[1] = {{ wxLua_wxTreeEvent_GetItem, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeEvent_GetItem }};
//     wxTreeItemId GetItem() const
static int LUACALL wxLua_wxTreeEvent_GetItem(lua_State *L)
{
    // get this
    wxTreeEvent * self = (wxTreeEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeEvent);
    // call GetItem
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->GetItem());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeEvent_GetKeyCode[] = { &wxluatype_wxTreeEvent, NULL };
static int LUACALL wxLua_wxTreeEvent_GetKeyCode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeEvent_GetKeyCode[1] = {{ wxLua_wxTreeEvent_GetKeyCode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeEvent_GetKeyCode }};
//     int GetKeyCode() const
static int LUACALL wxLua_wxTreeEvent_GetKeyCode(lua_State *L)
{
    // get this
    wxTreeEvent * self = (wxTreeEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeEvent);
    // call GetKeyCode
    int returns = (self->GetKeyCode());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeEvent_GetKeyEvent[] = { &wxluatype_wxTreeEvent, NULL };
static int LUACALL wxLua_wxTreeEvent_GetKeyEvent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeEvent_GetKeyEvent[1] = {{ wxLua_wxTreeEvent_GetKeyEvent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeEvent_GetKeyEvent }};
//     wxKeyEvent GetKeyEvent() const
static int LUACALL wxLua_wxTreeEvent_GetKeyEvent(lua_State *L)
{
    // get this
    wxTreeEvent * self = (wxTreeEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeEvent);
    // call GetKeyEvent
    // allocate a new object using the copy constructor
    wxKeyEvent* returns = new wxKeyEvent(self->GetKeyEvent());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxKeyEvent*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxKeyEvent);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeEvent_GetLabel[] = { &wxluatype_wxTreeEvent, NULL };
static int LUACALL wxLua_wxTreeEvent_GetLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeEvent_GetLabel[1] = {{ wxLua_wxTreeEvent_GetLabel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeEvent_GetLabel }};
//     const wxString& GetLabel() const
static int LUACALL wxLua_wxTreeEvent_GetLabel(lua_State *L)
{
    // get this
    wxTreeEvent * self = (wxTreeEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeEvent);
    // call GetLabel
    wxString returns = (self->GetLabel());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeEvent_GetOldItem[] = { &wxluatype_wxTreeEvent, NULL };
static int LUACALL wxLua_wxTreeEvent_GetOldItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeEvent_GetOldItem[1] = {{ wxLua_wxTreeEvent_GetOldItem, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeEvent_GetOldItem }};
//     wxTreeItemId GetOldItem() const
static int LUACALL wxLua_wxTreeEvent_GetOldItem(lua_State *L)
{
    // get this
    wxTreeEvent * self = (wxTreeEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeEvent);
    // call GetOldItem
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->GetOldItem());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}


#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeEvent_GetPoint[] = { &wxluatype_wxTreeEvent, NULL };
static int LUACALL wxLua_wxTreeEvent_GetPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeEvent_GetPoint[1] = {{ wxLua_wxTreeEvent_GetPoint, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeEvent_GetPoint }};
//     wxPoint GetPoint() const
static int LUACALL wxLua_wxTreeEvent_GetPoint(lua_State *L)
{
    // get this
    wxTreeEvent * self = (wxTreeEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeEvent);
    // call GetPoint
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPoint());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeEvent_IsEditCancelled[] = { &wxluatype_wxTreeEvent, NULL };
static int LUACALL wxLua_wxTreeEvent_IsEditCancelled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeEvent_IsEditCancelled[1] = {{ wxLua_wxTreeEvent_IsEditCancelled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTreeEvent_IsEditCancelled }};
//     bool IsEditCancelled() const
static int LUACALL wxLua_wxTreeEvent_IsEditCancelled(lua_State *L)
{
    // get this
    wxTreeEvent * self = (wxTreeEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeEvent);
    // call IsEditCancelled
    bool returns = (self->IsEditCancelled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeEvent_SetToolTip[] = { &wxluatype_wxTreeEvent, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTreeEvent_SetToolTip(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeEvent_SetToolTip[1] = {{ wxLua_wxTreeEvent_SetToolTip, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTreeEvent_SetToolTip }};
//     void SetToolTip(const wxString& tooltip)
static int LUACALL wxLua_wxTreeEvent_SetToolTip(lua_State *L)
{
    // const wxString tooltip
    const wxString tooltip = wxlua_getwxStringtype(L, 2);
    // get this
    wxTreeEvent * self = (wxTreeEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTreeEvent);
    // call SetToolTip
    self->SetToolTip(tooltip);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeEvent_delete[] = { &wxluatype_wxTreeEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTreeEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTreeEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTreeEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTreeEvent_constructor[1] = {{ wxLua_wxTreeEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxTreeEvent_constructor }};
//     wxTreeEvent(wxEventType commandType = wxEVT_NULL, int id = 0)
static int LUACALL wxLua_wxTreeEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int id = 0
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType commandType = wxEVT_NULL
    wxEventType commandType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxTreeEvent* returns = new wxTreeEvent(commandType, id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeEvent);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTreeEvent_methods[] = {
    { "GetItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeEvent_GetItem, 1, NULL },
    { "GetKeyCode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeEvent_GetKeyCode, 1, NULL },
    { "GetKeyEvent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeEvent_GetKeyEvent, 1, NULL },
    { "GetLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeEvent_GetLabel, 1, NULL },
    { "GetOldItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeEvent_GetOldItem, 1, NULL },

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxPointSizeRect)
    { "GetPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeEvent_GetPoint, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxPointSizeRect)

    { "IsEditCancelled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeEvent_IsEditCancelled, 1, NULL },
    { "SetToolTip", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTreeEvent_SetToolTip, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTreeEvent_delete, 1, NULL },
    { "wxTreeEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTreeEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTreeEvent_methodCount = sizeof(wxTreeEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL


#if wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG
// ---------------------------------------------------------------------------
// Bind class wxGenericDirCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGenericDirCtrl'
int wxluatype_wxGenericDirCtrl = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_CollapseTree[] = { &wxluatype_wxGenericDirCtrl, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_CollapseTree(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_CollapseTree[1] = {{ wxLua_wxGenericDirCtrl_CollapseTree, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGenericDirCtrl_CollapseTree }};
//     void CollapseTree()
static int LUACALL wxLua_wxGenericDirCtrl_CollapseTree(lua_State *L)
{
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call CollapseTree
    self->CollapseTree();

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_Create[] = { &wxluatype_wxGenericDirCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_Create[1] = {{ wxLua_wxGenericDirCtrl_Create, WXLUAMETHOD_METHOD, 2, 10, s_wxluatypeArray_wxLua_wxGenericDirCtrl_Create }};
//     bool Create(wxWindow *parent, const wxWindowID id = wxID_ANY, const wxString &dir = wxDirDialogDefaultFolderStr, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER, const wxString& filter = "", int defaultFilter = 0, const wxString& name = "wxGenericDirCtrl")
static int LUACALL wxLua_wxGenericDirCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxGenericDirCtrl"
    const wxString name = (argCount >= 10 ? wxlua_getwxStringtype(L, 10) : wxString(wxT("wxGenericDirCtrl")));
    // int defaultFilter = 0
    int defaultFilter = (argCount >= 9 ? (int)wxlua_getnumbertype(L, 9) : 0);
    // const wxString filter = ""
    const wxString filter = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxEmptyString));
    // long style = wxDIRCTRL_3D_INTERNAL | wxSUNKEN_BORDER
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxDIRCTRL_3D_INTERNAL | wxSUNKEN_BORDER);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString dir = wxDirDialogDefaultFolderStr
    const wxString dir = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxDirDialogDefaultFolderStr));
    // const wxWindowID id = wxID_ANY
    const wxWindowID id = (argCount >= 3 ? (const wxWindowID)wxlua_getnumbertype(L, 3) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call Create
    bool returns = (self->Create(parent, id, dir, *pos, *size, style, filter, defaultFilter, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_ExpandPath[] = { &wxluatype_wxGenericDirCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_ExpandPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_ExpandPath[1] = {{ wxLua_wxGenericDirCtrl_ExpandPath, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGenericDirCtrl_ExpandPath }};
//     bool ExpandPath(const wxString& path)
static int LUACALL wxLua_wxGenericDirCtrl_ExpandPath(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call ExpandPath
    bool returns = (self->ExpandPath(path));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_GetDefaultPath[] = { &wxluatype_wxGenericDirCtrl, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_GetDefaultPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_GetDefaultPath[1] = {{ wxLua_wxGenericDirCtrl_GetDefaultPath, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGenericDirCtrl_GetDefaultPath }};
//     wxString GetDefaultPath() const
static int LUACALL wxLua_wxGenericDirCtrl_GetDefaultPath(lua_State *L)
{
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call GetDefaultPath
    wxString returns = (self->GetDefaultPath());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_GetFilePath[] = { &wxluatype_wxGenericDirCtrl, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_GetFilePath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_GetFilePath[1] = {{ wxLua_wxGenericDirCtrl_GetFilePath, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGenericDirCtrl_GetFilePath }};
//     wxString GetFilePath() const
static int LUACALL wxLua_wxGenericDirCtrl_GetFilePath(lua_State *L)
{
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call GetFilePath
    wxString returns = (self->GetFilePath());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_GetFilter[] = { &wxluatype_wxGenericDirCtrl, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_GetFilter(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_GetFilter[1] = {{ wxLua_wxGenericDirCtrl_GetFilter, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGenericDirCtrl_GetFilter }};
//     wxString GetFilter() const
static int LUACALL wxLua_wxGenericDirCtrl_GetFilter(lua_State *L)
{
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call GetFilter
    wxString returns = (self->GetFilter());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_GetFilterIndex[] = { &wxluatype_wxGenericDirCtrl, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_GetFilterIndex(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_GetFilterIndex[1] = {{ wxLua_wxGenericDirCtrl_GetFilterIndex, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGenericDirCtrl_GetFilterIndex }};
//     int GetFilterIndex() const
static int LUACALL wxLua_wxGenericDirCtrl_GetFilterIndex(lua_State *L)
{
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call GetFilterIndex
    int returns = (self->GetFilterIndex());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_GetPath[] = { &wxluatype_wxGenericDirCtrl, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_GetPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_GetPath[1] = {{ wxLua_wxGenericDirCtrl_GetPath, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGenericDirCtrl_GetPath }};
//     wxString GetPath() const
static int LUACALL wxLua_wxGenericDirCtrl_GetPath(lua_State *L)
{
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call GetPath
    wxString returns = (self->GetPath());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_GetRootId[] = { &wxluatype_wxGenericDirCtrl, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_GetRootId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_GetRootId[1] = {{ wxLua_wxGenericDirCtrl_GetRootId, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGenericDirCtrl_GetRootId }};
//     wxTreeItemId GetRootId()
static int LUACALL wxLua_wxGenericDirCtrl_GetRootId(lua_State *L)
{
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call GetRootId
    // allocate a new object using the copy constructor
    wxTreeItemId* returns = new wxTreeItemId(self->GetRootId());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTreeItemId((wxTreeItemId*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeItemId);

    return 1;
}

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_GetShowHidden[] = { &wxluatype_wxGenericDirCtrl, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_GetShowHidden(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_GetShowHidden[1] = {{ wxLua_wxGenericDirCtrl_GetShowHidden, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGenericDirCtrl_GetShowHidden }};
//     bool GetShowHidden()
static int LUACALL wxLua_wxGenericDirCtrl_GetShowHidden(lua_State *L)
{
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call GetShowHidden
    bool returns = (self->GetShowHidden());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_GetTreeCtrl[] = { &wxluatype_wxGenericDirCtrl, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_GetTreeCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_GetTreeCtrl[1] = {{ wxLua_wxGenericDirCtrl_GetTreeCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGenericDirCtrl_GetTreeCtrl }};
//     wxTreeCtrl* GetTreeCtrl() const
static int LUACALL wxLua_wxGenericDirCtrl_GetTreeCtrl(lua_State *L)
{
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call GetTreeCtrl
    wxTreeCtrl* returns = (wxTreeCtrl*)self->GetTreeCtrl();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTreeCtrl);

    return 1;
}

#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_ReCreateTree[] = { &wxluatype_wxGenericDirCtrl, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_ReCreateTree(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_ReCreateTree[1] = {{ wxLua_wxGenericDirCtrl_ReCreateTree, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGenericDirCtrl_ReCreateTree }};
//     void ReCreateTree()
static int LUACALL wxLua_wxGenericDirCtrl_ReCreateTree(lua_State *L)
{
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call ReCreateTree
    self->ReCreateTree();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_SetDefaultPath[] = { &wxluatype_wxGenericDirCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_SetDefaultPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_SetDefaultPath[1] = {{ wxLua_wxGenericDirCtrl_SetDefaultPath, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGenericDirCtrl_SetDefaultPath }};
//     void SetDefaultPath(const wxString& path)
static int LUACALL wxLua_wxGenericDirCtrl_SetDefaultPath(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call SetDefaultPath
    self->SetDefaultPath(path);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_SetFilter[] = { &wxluatype_wxGenericDirCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_SetFilter(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_SetFilter[1] = {{ wxLua_wxGenericDirCtrl_SetFilter, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGenericDirCtrl_SetFilter }};
//     void SetFilter(const wxString& filter)
static int LUACALL wxLua_wxGenericDirCtrl_SetFilter(lua_State *L)
{
    // const wxString filter
    const wxString filter = wxlua_getwxStringtype(L, 2);
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call SetFilter
    self->SetFilter(filter);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_SetFilterIndex[] = { &wxluatype_wxGenericDirCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_SetFilterIndex(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_SetFilterIndex[1] = {{ wxLua_wxGenericDirCtrl_SetFilterIndex, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGenericDirCtrl_SetFilterIndex }};
//     void SetFilterIndex(int n)
static int LUACALL wxLua_wxGenericDirCtrl_SetFilterIndex(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call SetFilterIndex
    self->SetFilterIndex(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_SetPath[] = { &wxluatype_wxGenericDirCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_SetPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_SetPath[1] = {{ wxLua_wxGenericDirCtrl_SetPath, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGenericDirCtrl_SetPath }};
//     void SetPath(const wxString& path)
static int LUACALL wxLua_wxGenericDirCtrl_SetPath(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call SetPath
    self->SetPath(path);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_ShowHidden[] = { &wxluatype_wxGenericDirCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_ShowHidden(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_ShowHidden[1] = {{ wxLua_wxGenericDirCtrl_ShowHidden, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGenericDirCtrl_ShowHidden }};
//     void ShowHidden( bool show )
static int LUACALL wxLua_wxGenericDirCtrl_ShowHidden(lua_State *L)
{
    // bool show
    bool show = wxlua_getbooleantype(L, 2);
    // get this
    wxGenericDirCtrl * self = (wxGenericDirCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGenericDirCtrl);
    // call ShowHidden
    self->ShowHidden(show);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGenericDirCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGenericDirCtrl_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_constructor1[1] = {{ wxLua_wxGenericDirCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 9, s_wxluatypeArray_wxLua_wxGenericDirCtrl_constructor1 }};
//     wxGenericDirCtrl(wxWindow *parent, const wxWindowID id = wxID_ANY, const wxString &dir = wxDirDialogDefaultFolderStr, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER, const wxString& filter = "", int defaultFilter = 0, const wxString& name = "wxGenericDirCtrl")
static int LUACALL wxLua_wxGenericDirCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxGenericDirCtrl"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxGenericDirCtrl")));
    // int defaultFilter = 0
    int defaultFilter = (argCount >= 8 ? (int)wxlua_getnumbertype(L, 8) : 0);
    // const wxString filter = ""
    const wxString filter = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxEmptyString));
    // long style = wxDIRCTRL_3D_INTERNAL | wxSUNKEN_BORDER
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxDIRCTRL_3D_INTERNAL | wxSUNKEN_BORDER);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString dir = wxDirDialogDefaultFolderStr
    const wxString dir = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxDirDialogDefaultFolderStr));
    // const wxWindowID id = wxID_ANY
    const wxWindowID id = (argCount >= 2 ? (const wxWindowID)wxlua_getnumbertype(L, 2) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxGenericDirCtrl* returns = new wxGenericDirCtrl(parent, id, dir, *pos, *size, style, filter, defaultFilter, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGenericDirCtrl);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)

static int LUACALL wxLua_wxGenericDirCtrl_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_constructor[1] = {{ wxLua_wxGenericDirCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxGenericDirCtrl()
static int LUACALL wxLua_wxGenericDirCtrl_constructor(lua_State *L)
{
    // call constructor
    wxGenericDirCtrl* returns = new wxGenericDirCtrl();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGenericDirCtrl);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG))||(wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGenericDirCtrl_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)
    { wxLua_wxGenericDirCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 9, s_wxluatypeArray_wxLua_wxGenericDirCtrl_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)
    { wxLua_wxGenericDirCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxGenericDirCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxGenericDirCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG))||(wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGenericDirCtrl_methods[] = {
    { "CollapseTree", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_CollapseTree, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_Create, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)

    { "ExpandPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_ExpandPath, 1, NULL },
    { "GetDefaultPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_GetDefaultPath, 1, NULL },
    { "GetFilePath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_GetFilePath, 1, NULL },
    { "GetFilter", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_GetFilter, 1, NULL },
    { "GetFilterIndex", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_GetFilterIndex, 1, NULL },
    { "GetPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_GetPath, 1, NULL },

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)
    { "GetRootId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_GetRootId, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)

    { "GetShowHidden", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_GetShowHidden, 1, NULL },

#if (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)
    { "GetTreeCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_GetTreeCtrl, 1, NULL },
#endif // (wxLUA_USE_wxTreeCtrl && wxUSE_TREECTRL) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)

    { "ReCreateTree", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_ReCreateTree, 1, NULL },
    { "SetDefaultPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_SetDefaultPath, 1, NULL },
    { "SetFilter", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_SetFilter, 1, NULL },
    { "SetFilterIndex", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_SetFilterIndex, 1, NULL },
    { "SetPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_SetPath, 1, NULL },
    { "ShowHidden", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGenericDirCtrl_ShowHidden, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG))||(wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)
    { "wxGenericDirCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGenericDirCtrl_constructor_overload, s_wxluafunc_wxLua_wxGenericDirCtrl_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG))||(wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG)

    { 0, 0, 0, 0 },
};

int wxGenericDirCtrl_methodCount = sizeof(wxGenericDirCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGenericDirCtrl && wxUSE_DIRDLG

