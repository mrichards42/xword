// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxcore_clipdrag.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxcore_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif



#if wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD
// ---------------------------------------------------------------------------
// Bind class wxClipboard
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxClipboard'
int wxluatype_wxClipboard = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
static wxLuaArgType s_wxluatypeArray_wxLua_wxClipboard_AddData[] = { &wxluatype_wxClipboard, &wxluatype_wxDataObject, NULL };
static int LUACALL wxLua_wxClipboard_AddData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClipboard_AddData[1] = {{ wxLua_wxClipboard_AddData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxClipboard_AddData }};
//     bool AddData( %ungc wxDataObject *data )
static int LUACALL wxLua_wxClipboard_AddData(lua_State *L)
{
    // wxDataObject data
    wxDataObject * data = (wxDataObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataObject);
    if (wxluaO_isgcobject(L, data)) wxluaO_undeletegcobject(L, data);
    // get this
    wxClipboard * self = (wxClipboard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClipboard);
    // call AddData
    bool returns = (self->AddData(data));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

static wxLuaArgType s_wxluatypeArray_wxLua_wxClipboard_Clear[] = { &wxluatype_wxClipboard, NULL };
static int LUACALL wxLua_wxClipboard_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClipboard_Clear[1] = {{ wxLua_wxClipboard_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClipboard_Clear }};
//     void Clear()
static int LUACALL wxLua_wxClipboard_Clear(lua_State *L)
{
    // get this
    wxClipboard * self = (wxClipboard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClipboard);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxClipboard_Close[] = { &wxluatype_wxClipboard, NULL };
static int LUACALL wxLua_wxClipboard_Close(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClipboard_Close[1] = {{ wxLua_wxClipboard_Close, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClipboard_Close }};
//     void Close()
static int LUACALL wxLua_wxClipboard_Close(lua_State *L)
{
    // get this
    wxClipboard * self = (wxClipboard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClipboard);
    // call Close
    self->Close();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxClipboard_Flush[] = { &wxluatype_wxClipboard, NULL };
static int LUACALL wxLua_wxClipboard_Flush(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClipboard_Flush[1] = {{ wxLua_wxClipboard_Flush, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClipboard_Flush }};
//     bool Flush()
static int LUACALL wxLua_wxClipboard_Flush(lua_State *L)
{
    // get this
    wxClipboard * self = (wxClipboard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClipboard);
    // call Flush
    bool returns = (self->Flush());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD)) && (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD)
static int LUACALL wxLua_wxClipboard_Get(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClipboard_Get[1] = {{ wxLua_wxClipboard_Get, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     %wxchkver_2_6 static wxClipboard *Get()
static int LUACALL wxLua_wxClipboard_Get(lua_State *L)
{
    // call Get
    wxClipboard* returns = (wxClipboard*)wxClipboard::Get();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClipboard);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD)) && (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD)

#if (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
static wxLuaArgType s_wxluatypeArray_wxLua_wxClipboard_GetData[] = { &wxluatype_wxClipboard, &wxluatype_wxDataObject, NULL };
static int LUACALL wxLua_wxClipboard_GetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClipboard_GetData[1] = {{ wxLua_wxClipboard_GetData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxClipboard_GetData }};
//     bool GetData( wxDataObject& data )
static int LUACALL wxLua_wxClipboard_GetData(lua_State *L)
{
    // wxDataObject data
    wxDataObject * data = (wxDataObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataObject);
    // get this
    wxClipboard * self = (wxClipboard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClipboard);
    // call GetData
    bool returns = (self->GetData(*data));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

static wxLuaArgType s_wxluatypeArray_wxLua_wxClipboard_IsOpened[] = { &wxluatype_wxClipboard, NULL };
static int LUACALL wxLua_wxClipboard_IsOpened(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClipboard_IsOpened[1] = {{ wxLua_wxClipboard_IsOpened, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClipboard_IsOpened }};
//     bool IsOpened() const
static int LUACALL wxLua_wxClipboard_IsOpened(lua_State *L)
{
    // get this
    wxClipboard * self = (wxClipboard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClipboard);
    // call IsOpened
    bool returns = (self->IsOpened());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
static wxLuaArgType s_wxluatypeArray_wxLua_wxClipboard_IsSupported[] = { &wxluatype_wxClipboard, &wxluatype_wxDataFormat, NULL };
static int LUACALL wxLua_wxClipboard_IsSupported(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClipboard_IsSupported[1] = {{ wxLua_wxClipboard_IsSupported, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxClipboard_IsSupported }};
//     bool IsSupported( const wxDataFormat& format )
static int LUACALL wxLua_wxClipboard_IsSupported(lua_State *L)
{
    // const wxDataFormat format
    const wxDataFormat * format = (const wxDataFormat *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataFormat);
    // get this
    wxClipboard * self = (wxClipboard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClipboard);
    // call IsSupported
    bool returns = (self->IsSupported(*format));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

static wxLuaArgType s_wxluatypeArray_wxLua_wxClipboard_Open[] = { &wxluatype_wxClipboard, NULL };
static int LUACALL wxLua_wxClipboard_Open(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClipboard_Open[1] = {{ wxLua_wxClipboard_Open, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClipboard_Open }};
//     bool Open()
static int LUACALL wxLua_wxClipboard_Open(lua_State *L)
{
    // get this
    wxClipboard * self = (wxClipboard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClipboard);
    // call Open
    bool returns = (self->Open());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
static wxLuaArgType s_wxluatypeArray_wxLua_wxClipboard_SetData[] = { &wxluatype_wxClipboard, &wxluatype_wxDataObject, NULL };
static int LUACALL wxLua_wxClipboard_SetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClipboard_SetData[1] = {{ wxLua_wxClipboard_SetData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxClipboard_SetData }};
//     bool SetData( %ungc wxDataObject *data )
static int LUACALL wxLua_wxClipboard_SetData(lua_State *L)
{
    // wxDataObject data
    wxDataObject * data = (wxDataObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataObject);
    if (wxluaO_isgcobject(L, data)) wxluaO_undeletegcobject(L, data);
    // get this
    wxClipboard * self = (wxClipboard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClipboard);
    // call SetData
    bool returns = (self->SetData(data));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

static wxLuaArgType s_wxluatypeArray_wxLua_wxClipboard_UsePrimarySelection[] = { &wxluatype_wxClipboard, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxClipboard_UsePrimarySelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClipboard_UsePrimarySelection[1] = {{ wxLua_wxClipboard_UsePrimarySelection, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxClipboard_UsePrimarySelection }};
//     void UsePrimarySelection( bool primary = true )
static int LUACALL wxLua_wxClipboard_UsePrimarySelection(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool primary = true
    bool primary = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxClipboard * self = (wxClipboard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClipboard);
    // call UsePrimarySelection
    self->UsePrimarySelection(primary);

    return 0;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxClipboard_methods[] = {
#if (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
    { "AddData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClipboard_AddData, 1, NULL },
#endif // (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClipboard_Clear, 1, NULL },
    { "Close", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClipboard_Close, 1, NULL },
    { "Flush", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClipboard_Flush, 1, NULL },

#if ((wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD)) && (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD)
    { "Get", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxClipboard_Get, 1, NULL },
#endif // ((wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD)) && (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD)

#if (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
    { "GetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClipboard_GetData, 1, NULL },
#endif // (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

    { "IsOpened", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClipboard_IsOpened, 1, NULL },

#if (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
    { "IsSupported", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClipboard_IsSupported, 1, NULL },
#endif // (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

    { "Open", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClipboard_Open, 1, NULL },

#if (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
    { "SetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClipboard_SetData, 1, NULL },
#endif // (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

    { "UsePrimarySelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClipboard_UsePrimarySelection, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxClipboard_methodCount = sizeof(wxClipboard_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD


#if wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD
// ---------------------------------------------------------------------------
// Bind class wxClipboardLocker
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxClipboardLocker'
int wxluatype_wxClipboardLocker = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxClipboardLocker_delete[] = { &wxluatype_wxClipboardLocker, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClipboardLocker_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxClipboardLocker_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxClipboardLocker_op_not[] = { &wxluatype_wxClipboardLocker, NULL };
static int LUACALL wxLua_wxClipboardLocker_op_not(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClipboardLocker_op_not[1] = {{ wxLua_wxClipboardLocker_op_not, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxClipboardLocker_op_not }};
//     %operator bool operator!() const
static int LUACALL wxLua_wxClipboardLocker_op_not(lua_State *L)
{
    // get this
    wxClipboardLocker * self = (wxClipboardLocker *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClipboardLocker);
    // call op_not
    bool returns = (!(*self));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxClipboardLocker_constructor[] = { &wxluatype_wxClipboard, NULL };
static int LUACALL wxLua_wxClipboardLocker_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClipboardLocker_constructor[1] = {{ wxLua_wxClipboardLocker_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxClipboardLocker_constructor }};
//     wxClipboardLocker(wxClipboard *clipboard = NULL)
static int LUACALL wxLua_wxClipboardLocker_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxClipboard clipboard = NULL
    wxClipboard * clipboard = (argCount >= 1 ? (wxClipboard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxClipboard) : NULL);
    // call constructor
    wxClipboardLocker* returns = new wxClipboardLocker(clipboard);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxClipboardLocker((wxClipboardLocker*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClipboardLocker);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxClipboardLocker_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxClipboardLocker_delete, 1, NULL },
    { "op_not", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxClipboardLocker_op_not, 1, NULL },
    { "wxClipboardLocker", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxClipboardLocker_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxClipboardLocker_methodCount = sizeof(wxClipboardLocker_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD


#if (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxClipboardTextEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxClipboardTextEvent'
int wxluatype_wxClipboardTextEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxClipboardTextEvent_delete[] = { &wxluatype_wxClipboardTextEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClipboardTextEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxClipboardTextEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxClipboardTextEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxClipboardTextEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxClipboardTextEvent_constructor[1] = {{ wxLua_wxClipboardTextEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxClipboardTextEvent_constructor }};
//     wxClipboardTextEvent(wxEventType type = wxEVT_NULL, wxWindowID winid = 0)
static int LUACALL wxLua_wxClipboardTextEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindowID winid = 0
    wxWindowID winid = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType type = wxEVT_NULL
    wxEventType type = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxClipboardTextEvent* returns = new wxClipboardTextEvent(type, winid);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClipboardTextEvent);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxClipboardTextEvent_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxClipboardTextEvent_delete, 1, NULL },
    { "wxClipboardTextEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxClipboardTextEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxClipboardTextEvent_methodCount = sizeof(wxClipboardTextEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxClipboard && wxUSE_CLIPBOARD) && (wxCHECK_VERSION(2,8,0))


#if wxLUA_USE_wxDataObject && wxUSE_DATAOBJ
// ---------------------------------------------------------------------------
// Bind class wxDataFormat
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataFormat'
int wxluatype_wxDataFormat = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataFormat_GetId[] = { &wxluatype_wxDataFormat, NULL };
static int LUACALL wxLua_wxDataFormat_GetId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataFormat_GetId[1] = {{ wxLua_wxDataFormat_GetId, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataFormat_GetId }};
//     wxString GetId() const
static int LUACALL wxLua_wxDataFormat_GetId(lua_State *L)
{
    // get this
    wxDataFormat * self = (wxDataFormat *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataFormat);
    // call GetId
    wxString returns = (self->GetId());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataFormat_GetType[] = { &wxluatype_wxDataFormat, NULL };
static int LUACALL wxLua_wxDataFormat_GetType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataFormat_GetType[1] = {{ wxLua_wxDataFormat_GetType, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataFormat_GetType }};
//     int GetType() const // returns wxDataFormatId, but it's just an int and msw differs
static int LUACALL wxLua_wxDataFormat_GetType(lua_State *L)
{
    // get this
    wxDataFormat * self = (wxDataFormat *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataFormat);
    // call GetType
    int returns = (self->GetType());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataFormat_SetId[] = { &wxluatype_wxDataFormat, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDataFormat_SetId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataFormat_SetId[1] = {{ wxLua_wxDataFormat_SetId, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataFormat_SetId }};
//     void SetId(const wxString &format)
static int LUACALL wxLua_wxDataFormat_SetId(lua_State *L)
{
    // const wxString format
    const wxString format = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataFormat * self = (wxDataFormat *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataFormat);
    // call SetId
    self->SetId(format);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataFormat_SetType[] = { &wxluatype_wxDataFormat, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataFormat_SetType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataFormat_SetType[1] = {{ wxLua_wxDataFormat_SetType, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataFormat_SetType }};
//     void SetType(wxDataFormatId format)
static int LUACALL wxLua_wxDataFormat_SetType(lua_State *L)
{
    // wxDataFormatId format
    wxDataFormatId format = (wxDataFormatId)wxlua_getenumtype(L, 2);
    // get this
    wxDataFormat * self = (wxDataFormat *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataFormat);
    // call SetType
    self->SetType(format);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataFormat_delete[] = { &wxluatype_wxDataFormat, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataFormat_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataFormat_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataFormat_op_eq[] = { &wxluatype_wxDataFormat, &wxluatype_wxDataFormat, NULL };
static int LUACALL wxLua_wxDataFormat_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataFormat_op_eq[1] = {{ wxLua_wxDataFormat_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataFormat_op_eq }};
//     %operator bool operator==(const wxDataFormat& format) const
static int LUACALL wxLua_wxDataFormat_op_eq(lua_State *L)
{
    // const wxDataFormat format
    const wxDataFormat * format = (const wxDataFormat *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataFormat);
    // get this
    wxDataFormat * self = (wxDataFormat *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataFormat);
    // call op_eq
    bool returns = ((*self)==(*format));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataFormat_constructor1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDataFormat_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataFormat_constructor1[1] = {{ wxLua_wxDataFormat_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDataFormat_constructor1 }};
//     wxDataFormat(const wxString &format)
static int LUACALL wxLua_wxDataFormat_constructor1(lua_State *L)
{
    // const wxString format
    const wxString format = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxDataFormat* returns = new wxDataFormat(format);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDataFormat((wxDataFormat*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataFormat);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataFormat_constructor[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataFormat_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataFormat_constructor[1] = {{ wxLua_wxDataFormat_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxDataFormat_constructor }};
//     wxDataFormat(wxDataFormatId format = wxDF_INVALID)
static int LUACALL wxLua_wxDataFormat_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxDataFormatId format = wxDF_INVALID
    wxDataFormatId format = (argCount >= 1 ? (wxDataFormatId)wxlua_getenumtype(L, 1) : wxDF_INVALID);
    // call constructor
    wxDataFormat* returns = new wxDataFormat(format);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDataFormat((wxDataFormat*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataFormat);

    return 1;
}




#if (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataFormat_constructor_overload[] =
{
    { wxLua_wxDataFormat_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDataFormat_constructor1 },
    { wxLua_wxDataFormat_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxDataFormat_constructor },
};
static int s_wxluafunc_wxLua_wxDataFormat_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxDataFormat_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataFormat_methods[] = {
    { "GetId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataFormat_GetId, 1, NULL },
    { "GetType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataFormat_GetType, 1, NULL },
    { "SetId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataFormat_SetId, 1, NULL },
    { "SetType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataFormat_SetType, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataFormat_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataFormat_op_eq, 1, NULL },

#if (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
    { "wxDataFormat", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataFormat_constructor_overload, s_wxluafunc_wxLua_wxDataFormat_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

    { 0, 0, 0, 0 },
};

int wxDataFormat_methodCount = sizeof(wxDataFormat_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDataObject && wxUSE_DATAOBJ


#if wxLUA_USE_wxDataObject && wxUSE_DATAOBJ
// ---------------------------------------------------------------------------
// Bind class wxDataObject
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataObject'
int wxluatype_wxDataObject = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataObject_GetAllFormats[] = { &wxluatype_wxDataObject, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataObject_GetAllFormats(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObject_GetAllFormats[1] = {{ wxLua_wxDataObject_GetAllFormats, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxDataObject_GetAllFormats }};
// %override wxLua_wxDataObject_GetAllFormats
// virtual void GetAllFormats(wxDataFormat *formats, wxDataObject::Direction dir = wxDataObject::Get) const
static int LUACALL wxLua_wxDataObject_GetAllFormats(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxDataObject::Direction dir = wxDataObject::Get
    wxDataObject::Direction dir = (argCount >= 2 ? (wxDataObject::Direction)(int)wxlua_getenumtype(L, 2) : wxDataObject::Get);
    // get this
    wxDataObject *self = (wxDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataObject);
    // wxDataFormat *formats
    int idx, formatCount = self->GetFormatCount(dir);

    if (formatCount > 0)
    {
        wxDataFormat *formats = new wxDataFormat[formatCount];
        if (formats != NULL)
        {
            // call GetAllFormats
            self->GetAllFormats(formats, dir);
            // return the number of parameters

            lua_newtable(L);
            for (idx = 0; idx < formatCount; ++idx)
            {
                wxDataFormat *pFormat = new wxDataFormat(formats[idx]);
                wxluaT_pushuserdatatype(L, pFormat, wxluatype_wxDataFormat);
                lua_rawseti(L, -2, idx + 1);
            }
            delete[] formats;
            return 1;
        }
    }
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxDataObject_GetDataHere[] = { &wxluatype_wxDataObject, &wxluatype_wxDataFormat, NULL };
static int LUACALL wxLua_wxDataObject_GetDataHere(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObject_GetDataHere[1] = {{ wxLua_wxDataObject_GetDataHere, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataObject_GetDataHere }};
// %override wxLua_wxDataObject_GetDataHere
// virtual bool GetDataHere(const wxDataFormat& format, void *buf ) const
static int LUACALL wxLua_wxDataObject_GetDataHere(lua_State *L)
{
    // const wxDataFormat& format
    const wxDataFormat *format = (wxDataFormat *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataFormat);
    // get this
    wxDataObject *self = (wxDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataObject);

    size_t size = self->GetDataSize(*format);

    void *buf = malloc(size);

    if (buf != NULL)
    {
        // call GetDataHere
        bool returns = self->GetDataHere(*format, buf);

        // push the result number
        lua_pushboolean(L, returns);
        // push the result string
        lua_pushlstring(L, (const char *) buf, size);

        free(buf);

        // return the number of parameters
        return 2;
    }
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxDataObject_GetDataSize[] = { &wxluatype_wxDataObject, &wxluatype_wxDataFormat, NULL };
static int LUACALL wxLua_wxDataObject_GetDataSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObject_GetDataSize[1] = {{ wxLua_wxDataObject_GetDataSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataObject_GetDataSize }};
//     virtual int GetDataSize(const wxDataFormat& format) const
static int LUACALL wxLua_wxDataObject_GetDataSize(lua_State *L)
{
    // const wxDataFormat format
    const wxDataFormat * format = (const wxDataFormat *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataFormat);
    // get this
    wxDataObject * self = (wxDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataObject);
    // call GetDataSize
    int returns = (self->GetDataSize(*format));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataObject_GetFormatCount[] = { &wxluatype_wxDataObject, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataObject_GetFormatCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObject_GetFormatCount[1] = {{ wxLua_wxDataObject_GetFormatCount, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxDataObject_GetFormatCount }};
//     virtual int GetFormatCount(wxDataObject::Direction dir = wxDataObject::Get) const
static int LUACALL wxLua_wxDataObject_GetFormatCount(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxDataObject::Direction dir = wxDataObject::Get
    wxDataObject::Direction dir = (argCount >= 2 ? (wxDataObject::Direction)wxlua_getenumtype(L, 2) : wxDataObject::Get);
    // get this
    wxDataObject * self = (wxDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataObject);
    // call GetFormatCount
    int returns = (self->GetFormatCount(dir));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataObject_GetPreferredFormat[] = { &wxluatype_wxDataObject, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataObject_GetPreferredFormat(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObject_GetPreferredFormat[1] = {{ wxLua_wxDataObject_GetPreferredFormat, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxDataObject_GetPreferredFormat }};
//     virtual wxDataFormat GetPreferredFormat(wxDataObject::Direction dir = wxDataObject::Get) const
static int LUACALL wxLua_wxDataObject_GetPreferredFormat(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxDataObject::Direction dir = wxDataObject::Get
    wxDataObject::Direction dir = (argCount >= 2 ? (wxDataObject::Direction)wxlua_getenumtype(L, 2) : wxDataObject::Get);
    // get this
    wxDataObject * self = (wxDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataObject);
    // call GetPreferredFormat
    // allocate a new object using the copy constructor
    wxDataFormat* returns = new wxDataFormat(self->GetPreferredFormat(dir));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDataFormat((wxDataFormat*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataFormat);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataObject_SetData[] = { &wxluatype_wxDataObject, &wxluatype_wxDataFormat, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDataObject_SetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObject_SetData[1] = {{ wxLua_wxDataObject_SetData, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataObject_SetData }};
// %override wxLua_wxDataObject_SetData
// virtual bool SetData( const wxDataFormat& format, int len, const void *buf )
static int LUACALL wxLua_wxDataObject_SetData(lua_State *L)
{
    // const void *buf
    const void *buf = lua_tostring(L, 3);
    // int len
    int len = lua_strlen(L, 3);
    // const wxDataFormat& format
    const wxDataFormat *format = (wxDataFormat *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataFormat);
    // get this
    wxDataObject *self = (wxDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataObject);
    // call SetData
    bool returns = self->SetData(*format, len, buf);
    // push the result number
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 1;
}





// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataObject_methods[] = {
    { "GetAllFormats", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataObject_GetAllFormats, 1, NULL },
    { "GetDataHere", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataObject_GetDataHere, 1, NULL },
    { "GetDataSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataObject_GetDataSize, 1, NULL },
    { "GetFormatCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataObject_GetFormatCount, 1, NULL },
    { "GetPreferredFormat", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataObject_GetPreferredFormat, 1, NULL },
    { "SetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataObject_SetData, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataObject_methodCount = sizeof(wxDataObject_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxDataObject_enums[] = {
#if wxLUA_USE_wxDataObject && wxUSE_DATAOBJ
        { "Get", wxDataObject::Get },
        { "Set", wxDataObject::Set },
#endif // wxLUA_USE_wxDataObject && wxUSE_DATAOBJ

    { NULL, 0, },
};
int wxDataObject_enumCount = sizeof(wxDataObject_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // wxLUA_USE_wxDataObject && wxUSE_DATAOBJ


#if wxLUA_USE_wxDataObject && wxUSE_DATAOBJ
// ---------------------------------------------------------------------------
// Bind class wxDataObjectSimple
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataObjectSimple'
int wxluatype_wxDataObjectSimple = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataObjectSimple_GetDataHere[] = { &wxluatype_wxDataObjectSimple, NULL };
static int LUACALL wxLua_wxDataObjectSimple_GetDataHere(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObjectSimple_GetDataHere[1] = {{ wxLua_wxDataObjectSimple_GetDataHere, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataObjectSimple_GetDataHere }};
// %override wxLua_wxDataObjectSimple_GetDataHere
// virtual bool GetDataHere(void *buf) const
static int LUACALL wxLua_wxDataObjectSimple_GetDataHere(lua_State *L)
{
    // get this
    wxDataObjectSimple *self = (wxDataObjectSimple *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataObjectSimple);

    size_t size = self->GetDataSize();

    void *buf = malloc(size);
    if (buf != NULL)
    {
        // call GetDataHere
        bool returns = self->GetDataHere(buf);

        // push the result number
        lua_pushboolean(L, returns);
        // push the result string
        lua_pushlstring(L, (const char *) buf, size);

        free(buf);

        // return the number of parameters
        return 2;
    }
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxDataObjectSimple_GetDataSize[] = { &wxluatype_wxDataObjectSimple, NULL };
static int LUACALL wxLua_wxDataObjectSimple_GetDataSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObjectSimple_GetDataSize[1] = {{ wxLua_wxDataObjectSimple_GetDataSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataObjectSimple_GetDataSize }};
//     virtual size_t GetDataSize() const
static int LUACALL wxLua_wxDataObjectSimple_GetDataSize(lua_State *L)
{
    // get this
    wxDataObjectSimple * self = (wxDataObjectSimple *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataObjectSimple);
    // call GetDataSize
    size_t returns = (self->GetDataSize());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataObjectSimple_GetFormat[] = { &wxluatype_wxDataObjectSimple, NULL };
static int LUACALL wxLua_wxDataObjectSimple_GetFormat(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObjectSimple_GetFormat[1] = {{ wxLua_wxDataObjectSimple_GetFormat, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataObjectSimple_GetFormat }};
//     const wxDataFormat& GetFormat() const
static int LUACALL wxLua_wxDataObjectSimple_GetFormat(lua_State *L)
{
    // get this
    wxDataObjectSimple * self = (wxDataObjectSimple *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataObjectSimple);
    // call GetFormat
    const wxDataFormat* returns = &self->GetFormat();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataFormat);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataObjectSimple_SetData[] = { &wxluatype_wxDataObjectSimple, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDataObjectSimple_SetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObjectSimple_SetData[1] = {{ wxLua_wxDataObjectSimple_SetData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataObjectSimple_SetData }};
// %override wxLua_wxDataObjectSimple_SetData
// virtual bool SetData(size_t len, const void *buf)
static int LUACALL wxLua_wxDataObjectSimple_SetData(lua_State *L)
{
    // const void *buf
    const void *buf = lua_tostring(L, 2);
    // size_t len
    size_t len = (size_t)lua_strlen(L, 2);
    // get this
    wxDataObjectSimple *self = (wxDataObjectSimple *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataObjectSimple);
    // call SetData
    bool returns = self->SetData(len, buf);
    // push the result number
    lua_pushboolean(L, returns);
    // return the number of parameters
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxDataObjectSimple_SetFormat[] = { &wxluatype_wxDataObjectSimple, &wxluatype_wxDataFormat, NULL };
static int LUACALL wxLua_wxDataObjectSimple_SetFormat(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObjectSimple_SetFormat[1] = {{ wxLua_wxDataObjectSimple_SetFormat, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataObjectSimple_SetFormat }};
//     void SetFormat(const wxDataFormat& format)
static int LUACALL wxLua_wxDataObjectSimple_SetFormat(lua_State *L)
{
    // const wxDataFormat format
    const wxDataFormat * format = (const wxDataFormat *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataFormat);
    // get this
    wxDataObjectSimple * self = (wxDataObjectSimple *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataObjectSimple);
    // call SetFormat
    self->SetFormat(*format);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataObjectSimple_delete[] = { &wxluatype_wxDataObjectSimple, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObjectSimple_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataObjectSimple_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataObjectSimple_constructor[] = { &wxluatype_wxDataFormat, NULL };
static int LUACALL wxLua_wxDataObjectSimple_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObjectSimple_constructor[1] = {{ wxLua_wxDataObjectSimple_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxDataObjectSimple_constructor }};
//     wxDataObjectSimple(const wxDataFormat& format = wxFormatInvalid)
static int LUACALL wxLua_wxDataObjectSimple_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxDataFormat format = wxFormatInvalid
    const wxDataFormat * format = (argCount >= 1 ? (const wxDataFormat *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataFormat) : &wxFormatInvalid);
    // call constructor
    wxDataObjectSimple* returns = new wxDataObjectSimple(*format);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDataObjectSimple((wxDataObjectSimple*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataObjectSimple);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataObjectSimple_methods[] = {
    { "GetDataHere", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataObjectSimple_GetDataHere, 1, NULL },
    { "GetDataSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataObjectSimple_GetDataSize, 1, NULL },
    { "GetFormat", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataObjectSimple_GetFormat, 1, NULL },
    { "SetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataObjectSimple_SetData, 1, NULL },
    { "SetFormat", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataObjectSimple_SetFormat, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataObjectSimple_delete, 1, NULL },
    { "wxDataObjectSimple", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataObjectSimple_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataObjectSimple_methodCount = sizeof(wxDataObjectSimple_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDataObject && wxUSE_DATAOBJ


#if wxLUA_USE_wxDataObject && wxUSE_DATAOBJ
// ---------------------------------------------------------------------------
// Bind class wxDataObjectComposite
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataObjectComposite'
int wxluatype_wxDataObjectComposite = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataObjectComposite_Add[] = { &wxluatype_wxDataObjectComposite, &wxluatype_wxDataObjectSimple, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDataObjectComposite_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObjectComposite_Add[1] = {{ wxLua_wxDataObjectComposite_Add, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxDataObjectComposite_Add }};
//     void Add(%ungc wxDataObjectSimple *dataObject, bool preferred = false)
static int LUACALL wxLua_wxDataObjectComposite_Add(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool preferred = false
    bool preferred = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // wxDataObjectSimple dataObject
    wxDataObjectSimple * dataObject = (wxDataObjectSimple *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataObjectSimple);
    if (wxluaO_isgcobject(L, dataObject)) wxluaO_undeletegcobject(L, dataObject);
    // get this
    wxDataObjectComposite * self = (wxDataObjectComposite *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataObjectComposite);
    // call Add
    self->Add(dataObject, preferred);

    return 0;
}


#if (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataObjectComposite_GetReceivedFormat[] = { &wxluatype_wxDataObjectComposite, NULL };
static int LUACALL wxLua_wxDataObjectComposite_GetReceivedFormat(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObjectComposite_GetReceivedFormat[1] = {{ wxLua_wxDataObjectComposite_GetReceivedFormat, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataObjectComposite_GetReceivedFormat }};
//     %wxchkver_2_8 wxDataFormat GetReceivedFormat() const
static int LUACALL wxLua_wxDataObjectComposite_GetReceivedFormat(lua_State *L)
{
    // get this
    wxDataObjectComposite * self = (wxDataObjectComposite *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataObjectComposite);
    // call GetReceivedFormat
    // allocate a new object using the copy constructor
    wxDataFormat* returns = new wxDataFormat(self->GetReceivedFormat());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDataFormat((wxDataFormat*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataFormat);

    return 1;
}

#endif // (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ))

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataObjectComposite_delete[] = { &wxluatype_wxDataObjectComposite, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObjectComposite_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataObjectComposite_delete }};

static int LUACALL wxLua_wxDataObjectComposite_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataObjectComposite_constructor[1] = {{ wxLua_wxDataObjectComposite_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDataObjectComposite()
static int LUACALL wxLua_wxDataObjectComposite_constructor(lua_State *L)
{
    // call constructor
    wxDataObjectComposite* returns = new wxDataObjectComposite();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDataObjectComposite((wxDataObjectComposite*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataObjectComposite);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataObjectComposite_methods[] = {
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataObjectComposite_Add, 1, NULL },

#if (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ))
    { "GetReceivedFormat", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataObjectComposite_GetReceivedFormat, 1, NULL },
#endif // (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataObjectComposite_delete, 1, NULL },
    { "wxDataObjectComposite", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataObjectComposite_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataObjectComposite_methodCount = sizeof(wxDataObjectComposite_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDataObject && wxUSE_DATAOBJ


#if wxLUA_USE_wxDataObject && wxUSE_DATAOBJ
// ---------------------------------------------------------------------------
// Bind class wxFileDataObject
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFileDataObject'
int wxluatype_wxFileDataObject = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDataObject_AddFile[] = { &wxluatype_wxFileDataObject, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileDataObject_AddFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDataObject_AddFile[1] = {{ wxLua_wxFileDataObject_AddFile, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileDataObject_AddFile }};
//     virtual void AddFile(const wxString& file)
static int LUACALL wxLua_wxFileDataObject_AddFile(lua_State *L)
{
    // const wxString file
    const wxString file = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileDataObject * self = (wxFileDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDataObject);
    // call AddFile
    self->AddFile(file);

    return 0;
}


#if (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDataObject_GetFilenames[] = { &wxluatype_wxFileDataObject, NULL };
static int LUACALL wxLua_wxFileDataObject_GetFilenames(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDataObject_GetFilenames[1] = {{ wxLua_wxFileDataObject_GetFilenames, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileDataObject_GetFilenames }};
//     wxArrayString GetFilenames() const
static int LUACALL wxLua_wxFileDataObject_GetFilenames(lua_State *L)
{
    // get this
    wxFileDataObject * self = (wxFileDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDataObject);
    // call GetFilenames
    // allocate a new object using the copy constructor
    wxArrayString* returns = new wxArrayString(self->GetFilenames());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxArrayString((wxArrayString*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

#endif // (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxArrayString)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDataObject_delete[] = { &wxluatype_wxFileDataObject, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDataObject_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFileDataObject_delete }};

static int LUACALL wxLua_wxFileDataObject_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDataObject_constructor[1] = {{ wxLua_wxFileDataObject_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxFileDataObject()
static int LUACALL wxLua_wxFileDataObject_constructor(lua_State *L)
{
    // call constructor
    wxFileDataObject* returns = new wxFileDataObject();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxFileDataObject((wxFileDataObject*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileDataObject);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFileDataObject_methods[] = {
    { "AddFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDataObject_AddFile, 1, NULL },

#if (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxArrayString)
    { "GetFilenames", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDataObject_GetFilenames, 1, NULL },
#endif // (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxArrayString)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFileDataObject_delete, 1, NULL },
    { "wxFileDataObject", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFileDataObject_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxFileDataObject_methodCount = sizeof(wxFileDataObject_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDataObject && wxUSE_DATAOBJ


#if wxLUA_USE_wxDataObject && wxUSE_DATAOBJ
// ---------------------------------------------------------------------------
// Bind class wxTextDataObject
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextDataObject'
int wxluatype_wxTextDataObject = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextDataObject_GetText[] = { &wxluatype_wxTextDataObject, NULL };
static int LUACALL wxLua_wxTextDataObject_GetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextDataObject_GetText[1] = {{ wxLua_wxTextDataObject_GetText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextDataObject_GetText }};
//     virtual wxString GetText() const
static int LUACALL wxLua_wxTextDataObject_GetText(lua_State *L)
{
    // get this
    wxTextDataObject * self = (wxTextDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextDataObject);
    // call GetText
    wxString returns = (self->GetText());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextDataObject_GetTextLength[] = { &wxluatype_wxTextDataObject, NULL };
static int LUACALL wxLua_wxTextDataObject_GetTextLength(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextDataObject_GetTextLength[1] = {{ wxLua_wxTextDataObject_GetTextLength, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextDataObject_GetTextLength }};
//     virtual size_t GetTextLength() const
static int LUACALL wxLua_wxTextDataObject_GetTextLength(lua_State *L)
{
    // get this
    wxTextDataObject * self = (wxTextDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextDataObject);
    // call GetTextLength
    size_t returns = (self->GetTextLength());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextDataObject_SetText[] = { &wxluatype_wxTextDataObject, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextDataObject_SetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextDataObject_SetText[1] = {{ wxLua_wxTextDataObject_SetText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextDataObject_SetText }};
//     virtual void SetText(const wxString& text)
static int LUACALL wxLua_wxTextDataObject_SetText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextDataObject * self = (wxTextDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextDataObject);
    // call SetText
    self->SetText(text);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextDataObject_delete[] = { &wxluatype_wxTextDataObject, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextDataObject_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTextDataObject_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextDataObject_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextDataObject_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextDataObject_constructor[1] = {{ wxLua_wxTextDataObject_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxTextDataObject_constructor }};
//     wxTextDataObject(const wxString& text = "")
static int LUACALL wxLua_wxTextDataObject_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString text = ""
    const wxString text = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxTextDataObject* returns = new wxTextDataObject(text);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxTextDataObject((wxTextDataObject*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextDataObject);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextDataObject_methods[] = {
    { "GetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextDataObject_GetText, 1, NULL },
    { "GetTextLength", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextDataObject_GetTextLength, 1, NULL },
    { "SetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextDataObject_SetText, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTextDataObject_delete, 1, NULL },
    { "wxTextDataObject", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTextDataObject_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTextDataObject_methodCount = sizeof(wxTextDataObject_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDataObject && wxUSE_DATAOBJ


#if wxLUA_USE_wxDataObject && wxUSE_DATAOBJ
// ---------------------------------------------------------------------------
// Bind class wxBitmapDataObject
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxBitmapDataObject'
int wxluatype_wxBitmapDataObject = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapDataObject_GetBitmap[] = { &wxluatype_wxBitmapDataObject, NULL };
static int LUACALL wxLua_wxBitmapDataObject_GetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapDataObject_GetBitmap[1] = {{ wxLua_wxBitmapDataObject_GetBitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmapDataObject_GetBitmap }};
//     virtual wxBitmap GetBitmap() const
static int LUACALL wxLua_wxBitmapDataObject_GetBitmap(lua_State *L)
{
    // get this
    wxBitmapDataObject * self = (wxBitmapDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapDataObject);
    // call GetBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetBitmap());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapDataObject_SetBitmap[] = { &wxluatype_wxBitmapDataObject, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmapDataObject_SetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapDataObject_SetBitmap[1] = {{ wxLua_wxBitmapDataObject_SetBitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmapDataObject_SetBitmap }};
//     virtual void SetBitmap(const wxBitmap& bitmap)
static int LUACALL wxLua_wxBitmapDataObject_SetBitmap(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxBitmapDataObject * self = (wxBitmapDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapDataObject);
    // call SetBitmap
    self->SetBitmap(*bitmap);

    return 0;
}

#endif // (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapDataObject_delete[] = { &wxluatype_wxBitmapDataObject, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapDataObject_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxBitmapDataObject_delete }};


#if (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapDataObject_constructor[] = { &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmapDataObject_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapDataObject_constructor[1] = {{ wxLua_wxBitmapDataObject_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxBitmapDataObject_constructor }};
//     wxBitmapDataObject(const wxBitmap& bitmap = wxNullBitmap)
static int LUACALL wxLua_wxBitmapDataObject_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxBitmap bitmap = wxNullBitmap
    const wxBitmap * bitmap = (argCount >= 1 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap) : &wxNullBitmap);
    // call constructor
    wxBitmapDataObject* returns = new wxBitmapDataObject(*bitmap);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxBitmapDataObject((wxBitmapDataObject*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmapDataObject);

    return 1;
}

#endif // (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxBitmap)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxBitmapDataObject_methods[] = {
#if (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxBitmap)
    { "GetBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapDataObject_GetBitmap, 1, NULL },
    { "SetBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapDataObject_SetBitmap, 1, NULL },
#endif // (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxBitmap)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxBitmapDataObject_delete, 1, NULL },

#if (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxBitmap)
    { "wxBitmapDataObject", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxBitmapDataObject_constructor, 1, NULL },
#endif // (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxBitmap)

    { 0, 0, 0, 0 },
};

int wxBitmapDataObject_methodCount = sizeof(wxBitmapDataObject_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDataObject && wxUSE_DATAOBJ


#if (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxURLDataObject
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxURLDataObject'
int wxluatype_wxURLDataObject = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxURLDataObject_GetURL[] = { &wxluatype_wxURLDataObject, NULL };
static int LUACALL wxLua_wxURLDataObject_GetURL(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURLDataObject_GetURL[1] = {{ wxLua_wxURLDataObject_GetURL, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxURLDataObject_GetURL }};
//     wxString GetURL() const
static int LUACALL wxLua_wxURLDataObject_GetURL(lua_State *L)
{
    // get this
    wxURLDataObject * self = (wxURLDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURLDataObject);
    // call GetURL
    wxString returns = (self->GetURL());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURLDataObject_SetURL[] = { &wxluatype_wxURLDataObject, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxURLDataObject_SetURL(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURLDataObject_SetURL[1] = {{ wxLua_wxURLDataObject_SetURL, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxURLDataObject_SetURL }};
//     void SetURL(const wxString& url)
static int LUACALL wxLua_wxURLDataObject_SetURL(lua_State *L)
{
    // const wxString url
    const wxString url = wxlua_getwxStringtype(L, 2);
    // get this
    wxURLDataObject * self = (wxURLDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxURLDataObject);
    // call SetURL
    self->SetURL(url);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxURLDataObject_delete[] = { &wxluatype_wxURLDataObject, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURLDataObject_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxURLDataObject_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxURLDataObject_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxURLDataObject_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxURLDataObject_constructor[1] = {{ wxLua_wxURLDataObject_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxURLDataObject_constructor }};
//     wxURLDataObject(const wxString& url = "")
static int LUACALL wxLua_wxURLDataObject_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString url = ""
    const wxString url = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxURLDataObject* returns = new wxURLDataObject(url);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxURLDataObject((wxURLDataObject*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxURLDataObject);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxURLDataObject_methods[] = {
    { "GetURL", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURLDataObject_GetURL, 1, NULL },
    { "SetURL", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxURLDataObject_SetURL, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxURLDataObject_delete, 1, NULL },
    { "wxURLDataObject", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxURLDataObject_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxURLDataObject_methodCount = sizeof(wxURLDataObject_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxCHECK_VERSION(2,8,0))


#if wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP
// ---------------------------------------------------------------------------
// Bind class wxDropTarget
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDropTarget'
int wxluatype_wxDropTarget = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDropTarget_GetData[] = { &wxluatype_wxDropTarget, NULL };
static int LUACALL wxLua_wxDropTarget_GetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDropTarget_GetData[1] = {{ wxLua_wxDropTarget_GetData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDropTarget_GetData }};
//     virtual bool GetData()
static int LUACALL wxLua_wxDropTarget_GetData(lua_State *L)
{
    // get this
    wxDropTarget * self = (wxDropTarget *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDropTarget);
    // call GetData
    bool returns = (self->GetData());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDropTarget_methods[] = {
    { "GetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDropTarget_GetData, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDropTarget_methodCount = sizeof(wxDropTarget_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP


#if wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP
// ---------------------------------------------------------------------------
// Bind class wxDropSource
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDropSource'
int wxluatype_wxDropSource = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDropSource_GetDataObject[] = { &wxluatype_wxDropSource, NULL };
static int LUACALL wxLua_wxDropSource_GetDataObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDropSource_GetDataObject[1] = {{ wxLua_wxDropSource_GetDataObject, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDropSource_GetDataObject }};
//     wxDataObject* GetDataObject()
static int LUACALL wxLua_wxDropSource_GetDataObject(lua_State *L)
{
    // get this
    wxDropSource * self = (wxDropSource *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDropSource);
    // call GetDataObject
    wxDataObject* returns = (wxDataObject*)self->GetDataObject();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataObject);

    return 1;
}

#endif // (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDropSource_GiveFeedback[] = { &wxluatype_wxDropSource, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDropSource_GiveFeedback(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDropSource_GiveFeedback[1] = {{ wxLua_wxDropSource_GiveFeedback, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDropSource_GiveFeedback }};
//     virtual bool GiveFeedback(wxDragResult effect)
static int LUACALL wxLua_wxDropSource_GiveFeedback(lua_State *L)
{
    // wxDragResult effect
    wxDragResult effect = (wxDragResult)wxlua_getenumtype(L, 2);
    // get this
    wxDropSource * self = (wxDropSource *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDropSource);
    // call GiveFeedback
    bool returns = (self->GiveFeedback(effect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxCursor) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDropSource_SetCursor[] = { &wxluatype_wxDropSource, &wxluatype_TINTEGER, &wxluatype_wxCursor, NULL };
static int LUACALL wxLua_wxDropSource_SetCursor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDropSource_SetCursor[1] = {{ wxLua_wxDropSource_SetCursor, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDropSource_SetCursor }};
//     void SetCursor(wxDragResult res, const wxCursor& cursor)
static int LUACALL wxLua_wxDropSource_SetCursor(lua_State *L)
{
    // const wxCursor cursor
    const wxCursor * cursor = (const wxCursor *)wxluaT_getuserdatatype(L, 3, wxluatype_wxCursor);
    // wxDragResult res
    wxDragResult res = (wxDragResult)wxlua_getenumtype(L, 2);
    // get this
    wxDropSource * self = (wxDropSource *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDropSource);
    // call SetCursor
    self->SetCursor(res, *cursor);

    return 0;
}

#endif // (wxLUA_USE_wxCursor) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

#if (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDropSource_SetData[] = { &wxluatype_wxDropSource, &wxluatype_wxDataObject, NULL };
static int LUACALL wxLua_wxDropSource_SetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDropSource_SetData[1] = {{ wxLua_wxDropSource_SetData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDropSource_SetData }};
//     void SetData(wxDataObject& data)
static int LUACALL wxLua_wxDropSource_SetData(lua_State *L)
{
    // wxDataObject data
    wxDataObject * data = (wxDataObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataObject);
    // get this
    wxDropSource * self = (wxDropSource *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDropSource);
    // call SetData
    self->SetData(*data);

    return 0;
}

#endif // (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDropSource_delete[] = { &wxluatype_wxDropSource, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDropSource_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDropSource_delete }};


#if (((wxLUA_USE_wxIcon) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && ((defined(__WXGTK__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP))) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDropSource_constructor3[] = { &wxluatype_wxDataObject, &wxluatype_wxWindow, &wxluatype_wxIcon, &wxluatype_wxIcon, &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxDropSource_constructor3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDropSource_constructor3[1] = {{ wxLua_wxDropSource_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxDropSource_constructor3 }};
//     %gtk wxDropSource(wxDataObject& data, wxWindow* win = NULL, const wxIcon& iconCopy = wxNullIcon, const wxIcon& iconMove = wxNullIcon, const wxIcon& iconStop = wxNullIcon)
static int LUACALL wxLua_wxDropSource_constructor3(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxIcon iconStop = wxNullIcon
    const wxIcon * iconStop = (argCount >= 5 ? (const wxIcon *)wxluaT_getuserdatatype(L, 5, wxluatype_wxIcon) : &wxNullIcon);
    // const wxIcon iconMove = wxNullIcon
    const wxIcon * iconMove = (argCount >= 4 ? (const wxIcon *)wxluaT_getuserdatatype(L, 4, wxluatype_wxIcon) : &wxNullIcon);
    // const wxIcon iconCopy = wxNullIcon
    const wxIcon * iconCopy = (argCount >= 3 ? (const wxIcon *)wxluaT_getuserdatatype(L, 3, wxluatype_wxIcon) : &wxNullIcon);
    // wxWindow win = NULL
    wxWindow * win = (argCount >= 2 ? (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow) : NULL);
    // wxDataObject data
    wxDataObject * data = (wxDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataObject);
    // call constructor
    wxDropSource* returns = new wxDropSource(*data, win, *iconCopy, *iconMove, *iconStop);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDropSource((wxDropSource*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDropSource);

    return 1;
}

#endif // (((wxLUA_USE_wxIcon) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && ((defined(__WXGTK__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP))) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

#if ((((defined(__WXMSW__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)) && (wxLUA_USE_wxCursor)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDropSource_constructor2[] = { &wxluatype_wxDataObject, &wxluatype_wxWindow, &wxluatype_wxCursor, &wxluatype_wxCursor, &wxluatype_wxCursor, NULL };
static int LUACALL wxLua_wxDropSource_constructor2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDropSource_constructor2[1] = {{ wxLua_wxDropSource_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxDropSource_constructor2 }};
//     %win wxDropSource(wxDataObject& data, wxWindow* win = NULL, const wxCursor& cursorCopy = wxNullCursor, const wxCursor& cursorMove = wxNullCursor, const wxCursor& cursorStop = wxNullCursor)
static int LUACALL wxLua_wxDropSource_constructor2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxCursor cursorStop = wxNullCursor
    const wxCursor * cursorStop = (argCount >= 5 ? (const wxCursor *)wxluaT_getuserdatatype(L, 5, wxluatype_wxCursor) : &wxNullCursor);
    // const wxCursor cursorMove = wxNullCursor
    const wxCursor * cursorMove = (argCount >= 4 ? (const wxCursor *)wxluaT_getuserdatatype(L, 4, wxluatype_wxCursor) : &wxNullCursor);
    // const wxCursor cursorCopy = wxNullCursor
    const wxCursor * cursorCopy = (argCount >= 3 ? (const wxCursor *)wxluaT_getuserdatatype(L, 3, wxluatype_wxCursor) : &wxNullCursor);
    // wxWindow win = NULL
    wxWindow * win = (argCount >= 2 ? (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow) : NULL);
    // wxDataObject data
    wxDataObject * data = (wxDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataObject);
    // call constructor
    wxDropSource* returns = new wxDropSource(*data, win, *cursorCopy, *cursorMove, *cursorStop);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDropSource((wxDropSource*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDropSource);

    return 1;
}

#endif // ((((defined(__WXMSW__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)) && (wxLUA_USE_wxCursor)

#if ((wxLUA_USE_wxIcon) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && ((defined(__WXGTK__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDropSource_constructor1[] = { &wxluatype_wxWindow, &wxluatype_wxIcon, &wxluatype_wxIcon, &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxDropSource_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDropSource_constructor1[1] = {{ wxLua_wxDropSource_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxDropSource_constructor1 }};
//     %gtk wxDropSource(wxWindow* win = NULL, const wxIcon& iconCopy = wxNullIcon, const wxIcon& iconMove = wxNullIcon, const wxIcon& iconStop = wxNullIcon)
static int LUACALL wxLua_wxDropSource_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxIcon iconStop = wxNullIcon
    const wxIcon * iconStop = (argCount >= 4 ? (const wxIcon *)wxluaT_getuserdatatype(L, 4, wxluatype_wxIcon) : &wxNullIcon);
    // const wxIcon iconMove = wxNullIcon
    const wxIcon * iconMove = (argCount >= 3 ? (const wxIcon *)wxluaT_getuserdatatype(L, 3, wxluatype_wxIcon) : &wxNullIcon);
    // const wxIcon iconCopy = wxNullIcon
    const wxIcon * iconCopy = (argCount >= 2 ? (const wxIcon *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIcon) : &wxNullIcon);
    // wxWindow win = NULL
    wxWindow * win = (argCount >= 1 ? (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow) : NULL);
    // call constructor
    wxDropSource* returns = new wxDropSource(win, *iconCopy, *iconMove, *iconStop);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDropSource((wxDropSource*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDropSource);

    return 1;
}

#endif // ((wxLUA_USE_wxIcon) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && ((defined(__WXGTK__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP))

#if ((wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP) && (wxLUA_USE_wxCursor)) && ((defined(__WXMSW__) || defined(__WXMAC__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDropSource_constructor[] = { &wxluatype_wxWindow, &wxluatype_wxCursor, &wxluatype_wxCursor, &wxluatype_wxCursor, NULL };
static int LUACALL wxLua_wxDropSource_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDropSource_constructor[1] = {{ wxLua_wxDropSource_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxDropSource_constructor }};
//     %win|%mac wxDropSource(wxWindow* win = NULL, const wxCursor& cursorCopy = wxNullCursor, const wxCursor& cursorMove = wxNullCursor, const wxCursor& cursorStop = wxNullCursor)
static int LUACALL wxLua_wxDropSource_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxCursor cursorStop = wxNullCursor
    const wxCursor * cursorStop = (argCount >= 4 ? (const wxCursor *)wxluaT_getuserdatatype(L, 4, wxluatype_wxCursor) : &wxNullCursor);
    // const wxCursor cursorMove = wxNullCursor
    const wxCursor * cursorMove = (argCount >= 3 ? (const wxCursor *)wxluaT_getuserdatatype(L, 3, wxluatype_wxCursor) : &wxNullCursor);
    // const wxCursor cursorCopy = wxNullCursor
    const wxCursor * cursorCopy = (argCount >= 2 ? (const wxCursor *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCursor) : &wxNullCursor);
    // wxWindow win = NULL
    wxWindow * win = (argCount >= 1 ? (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow) : NULL);
    // call constructor
    wxDropSource* returns = new wxDropSource(win, *cursorCopy, *cursorMove, *cursorStop);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDropSource((wxDropSource*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDropSource);

    return 1;
}

#endif // ((wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP) && (wxLUA_USE_wxCursor)) && ((defined(__WXMSW__) || defined(__WXMAC__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP))



#if ((((wxLUA_USE_wxIcon) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && ((defined(__WXGTK__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP))) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ))||(((((defined(__WXMSW__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)) && (wxLUA_USE_wxCursor))||(((wxLUA_USE_wxIcon) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && ((defined(__WXGTK__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)))||(((wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP) && (wxLUA_USE_wxCursor)) && ((defined(__WXMSW__) || defined(__WXMAC__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDropSource_constructor_overload[] =
{

#if (((wxLUA_USE_wxIcon) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && ((defined(__WXGTK__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP))) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
    { wxLua_wxDropSource_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxDropSource_constructor3 },
#endif // (((wxLUA_USE_wxIcon) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && ((defined(__WXGTK__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP))) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

#if ((((defined(__WXMSW__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)) && (wxLUA_USE_wxCursor)
    { wxLua_wxDropSource_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxDropSource_constructor2 },
#endif // ((((defined(__WXMSW__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)) && (wxLUA_USE_wxCursor)

#if ((wxLUA_USE_wxIcon) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && ((defined(__WXGTK__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP))
    { wxLua_wxDropSource_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxDropSource_constructor1 },
#endif // ((wxLUA_USE_wxIcon) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && ((defined(__WXGTK__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP))

#if ((wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP) && (wxLUA_USE_wxCursor)) && ((defined(__WXMSW__) || defined(__WXMAC__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP))
    { wxLua_wxDropSource_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxDropSource_constructor },
#endif // ((wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP) && (wxLUA_USE_wxCursor)) && ((defined(__WXMSW__) || defined(__WXMAC__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP))
};
static int s_wxluafunc_wxLua_wxDropSource_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxDropSource_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxIcon) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && ((defined(__WXGTK__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP))) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ))||(((((defined(__WXMSW__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)) && (wxLUA_USE_wxCursor))||(((wxLUA_USE_wxIcon) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && ((defined(__WXGTK__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)))||(((wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP) && (wxLUA_USE_wxCursor)) && ((defined(__WXMSW__) || defined(__WXMAC__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDropSource_methods[] = {
#if (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
    { "GetDataObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDropSource_GetDataObject, 1, NULL },
#endif // (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

    { "GiveFeedback", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDropSource_GiveFeedback, 1, NULL },

#if (wxLUA_USE_wxCursor) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
    { "SetCursor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDropSource_SetCursor, 1, NULL },
#endif // (wxLUA_USE_wxCursor) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

#if (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
    { "SetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDropSource_SetData, 1, NULL },
#endif // (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDropSource_delete, 1, NULL },

#if ((((wxLUA_USE_wxIcon) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && ((defined(__WXGTK__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP))) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ))||(((((defined(__WXMSW__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)) && (wxLUA_USE_wxCursor))||(((wxLUA_USE_wxIcon) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && ((defined(__WXGTK__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)))||(((wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP) && (wxLUA_USE_wxCursor)) && ((defined(__WXMSW__) || defined(__WXMAC__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)))
    { "wxDropSource", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDropSource_constructor_overload, s_wxluafunc_wxLua_wxDropSource_constructor_overload_count, 0 },
#endif // ((((wxLUA_USE_wxIcon) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && ((defined(__WXGTK__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP))) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ))||(((((defined(__WXMSW__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)) && (wxLUA_USE_wxCursor))||(((wxLUA_USE_wxIcon) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)) && ((defined(__WXGTK__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)))||(((wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP) && (wxLUA_USE_wxCursor)) && ((defined(__WXMSW__) || defined(__WXMAC__)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)))

    { 0, 0, 0, 0 },
};

int wxDropSource_methodCount = sizeof(wxDropSource_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP


#if wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP
// ---------------------------------------------------------------------------
// Bind class wxDropFilesEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDropFilesEvent'
int wxluatype_wxDropFilesEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDropFilesEvent_GetFiles[] = { &wxluatype_wxDropFilesEvent, NULL };
static int LUACALL wxLua_wxDropFilesEvent_GetFiles(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDropFilesEvent_GetFiles[1] = {{ wxLua_wxDropFilesEvent_GetFiles, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDropFilesEvent_GetFiles }};
// %override wxLua_wxDropFilesEvent_GetFiles
// wxString* GetFiles() const
static int LUACALL wxLua_wxDropFilesEvent_GetFiles(lua_State *L)
{
    // get this
    wxDropFilesEvent *self = (wxDropFilesEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDropFilesEvent);
    // call GetFiles
    int       numFiles = self->GetNumberOfFiles();
    wxString *files    = self->GetFiles();

    lua_newtable(L);

    int idx;
    for (idx = 0; idx < numFiles; ++idx)
    {
        wxlua_pushwxString(L, files[idx]);
        lua_rawseti(L, -2, idx + 1);
    }
    // return the number of parameters
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxDropFilesEvent_GetNumberOfFiles[] = { &wxluatype_wxDropFilesEvent, NULL };
static int LUACALL wxLua_wxDropFilesEvent_GetNumberOfFiles(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDropFilesEvent_GetNumberOfFiles[1] = {{ wxLua_wxDropFilesEvent_GetNumberOfFiles, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDropFilesEvent_GetNumberOfFiles }};
//     int GetNumberOfFiles() const
static int LUACALL wxLua_wxDropFilesEvent_GetNumberOfFiles(lua_State *L)
{
    // get this
    wxDropFilesEvent * self = (wxDropFilesEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDropFilesEvent);
    // call GetNumberOfFiles
    int returns = (self->GetNumberOfFiles());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDropFilesEvent_GetPosition[] = { &wxluatype_wxDropFilesEvent, NULL };
static int LUACALL wxLua_wxDropFilesEvent_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDropFilesEvent_GetPosition[1] = {{ wxLua_wxDropFilesEvent_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDropFilesEvent_GetPosition }};
//     wxPoint GetPosition() const
static int LUACALL wxLua_wxDropFilesEvent_GetPosition(lua_State *L)
{
    // get this
    wxDropFilesEvent * self = (wxDropFilesEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDropFilesEvent);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDropFilesEvent_delete[] = { &wxluatype_wxDropFilesEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDropFilesEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDropFilesEvent_delete }};




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDropFilesEvent_methods[] = {
    { "GetFiles", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDropFilesEvent_GetFiles, 1, NULL },
    { "GetNumberOfFiles", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDropFilesEvent_GetNumberOfFiles, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDropFilesEvent_GetPosition, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDropFilesEvent_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDropFilesEvent_methodCount = sizeof(wxDropFilesEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP


#if wxLUA_USE_wxMetafile && wxUSE_METAFILE && (defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXPM__))
// ---------------------------------------------------------------------------
// Bind class wxMetafile
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMetafile'
int wxluatype_wxMetafile = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxMetafile_Ok[] = { &wxluatype_wxMetafile, NULL };
static int LUACALL wxLua_wxMetafile_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMetafile_Ok[1] = {{ wxLua_wxMetafile_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMetafile_Ok }};
//     bool Ok()
static int LUACALL wxLua_wxMetafile_Ok(lua_State *L)
{
    // get this
    wxMetafile * self = (wxMetafile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMetafile);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxMetafile && wxUSE_METAFILE && (defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXPM__)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxMetafile_Play[] = { &wxluatype_wxMetafile, &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxMetafile_Play(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMetafile_Play[1] = {{ wxLua_wxMetafile_Play, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxMetafile_Play }};
//     bool Play(wxDC *dc)
static int LUACALL wxLua_wxMetafile_Play(lua_State *L)
{
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxMetafile * self = (wxMetafile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMetafile);
    // call Play
    bool returns = (self->Play(dc));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxMetafile && wxUSE_METAFILE && (defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXPM__)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxMetafile_SetClipboard[] = { &wxluatype_wxMetafile, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxMetafile_SetClipboard(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMetafile_SetClipboard[1] = {{ wxLua_wxMetafile_SetClipboard, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxMetafile_SetClipboard }};
//     bool SetClipboard(int width = 0, int height = 0)
static int LUACALL wxLua_wxMetafile_SetClipboard(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int height = 0
    int height = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int width = 0
    int width = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // get this
    wxMetafile * self = (wxMetafile *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMetafile);
    // call SetClipboard
    bool returns = (self->SetClipboard(width, height));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxMetafile_delete[] = { &wxluatype_wxMetafile, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMetafile_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxMetafile_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxMetafile_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMetafile_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMetafile_constructor[1] = {{ wxLua_wxMetafile_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxMetafile_constructor }};
//     wxMetafile(const wxString& filename = "")
static int LUACALL wxLua_wxMetafile_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString filename = ""
    const wxString filename = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxMetafile* returns = new wxMetafile(filename);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMetafile);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMetafile_methods[] = {
    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMetafile_Ok, 1, NULL },

#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxMetafile && wxUSE_METAFILE && (defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXPM__)))
    { "Play", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMetafile_Play, 1, NULL },
#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxMetafile && wxUSE_METAFILE && (defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXPM__)))

    { "SetClipboard", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMetafile_SetClipboard, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxMetafile_delete, 1, NULL },
    { "wxMetafile", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMetafile_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxMetafile_methodCount = sizeof(wxMetafile_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxMetafile && wxUSE_METAFILE && (defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXPM__))


#if wxLUA_USE_wxMetafile && wxUSE_METAFILE && (defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXPM__))
// ---------------------------------------------------------------------------
// Bind class wxMetafileDC
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxMetafileDC'
int wxluatype_wxMetafileDC = WXLUA_TUNKNOWN;

#if ((defined(__WXMSW__)) && (wxLUA_USE_wxMetafile && wxUSE_METAFILE && (defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXPM__)))) && (wxLUA_USE_wxMetafile && wxUSE_METAFILE && (defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXPM__)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxMetafileDC_Close[] = { &wxluatype_wxMetafileDC, NULL };
static int LUACALL wxLua_wxMetafileDC_Close(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMetafileDC_Close[1] = {{ wxLua_wxMetafileDC_Close, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxMetafileDC_Close }};
//     %win %gc wxMetafile* Close()
static int LUACALL wxLua_wxMetafileDC_Close(lua_State *L)
{
    // get this
    wxMetafileDC * self = (wxMetafileDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxMetafileDC);
    // call Close
    wxMetafile* returns = (wxMetafile*)self->Close();
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMetafile);

    return 1;
}

#endif // ((defined(__WXMSW__)) && (wxLUA_USE_wxMetafile && wxUSE_METAFILE && (defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXPM__)))) && (wxLUA_USE_wxMetafile && wxUSE_METAFILE && (defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXPM__)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxMetafileDC_delete[] = { &wxluatype_wxMetafileDC, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMetafileDC_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxMetafileDC_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxMetafileDC_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxMetafileDC_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxMetafileDC_constructor[1] = {{ wxLua_wxMetafileDC_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxMetafileDC_constructor }};
//     wxMetafileDC(const wxString& filename = "")
static int LUACALL wxLua_wxMetafileDC_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString filename = ""
    const wxString filename = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxMetafileDC* returns = new wxMetafileDC(filename);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMetafileDC);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxMetafileDC_methods[] = {
#if ((defined(__WXMSW__)) && (wxLUA_USE_wxMetafile && wxUSE_METAFILE && (defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXPM__)))) && (wxLUA_USE_wxMetafile && wxUSE_METAFILE && (defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXPM__)))
    { "Close", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxMetafileDC_Close, 1, NULL },
#endif // ((defined(__WXMSW__)) && (wxLUA_USE_wxMetafile && wxUSE_METAFILE && (defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXPM__)))) && (wxLUA_USE_wxMetafile && wxUSE_METAFILE && (defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXPM__)))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxMetafileDC_delete, 1, NULL },
    { "wxMetafileDC", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxMetafileDC_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxMetafileDC_methodCount = sizeof(wxMetafileDC_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxMetafile && wxUSE_METAFILE && (defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXPM__))

