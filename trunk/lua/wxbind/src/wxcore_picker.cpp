// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxcore_picker.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------


#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif

#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxcore_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif



#if wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker
// ---------------------------------------------------------------------------
// Bind class wxPickerBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPickerBase'
int wxluatype_wxPickerBase = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxPickerBase_GetInternalMargin[] = { &wxluatype_wxPickerBase, NULL };
static int LUACALL wxLua_wxPickerBase_GetInternalMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPickerBase_GetInternalMargin[1] = {{ wxLua_wxPickerBase_GetInternalMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPickerBase_GetInternalMargin }};
//     int GetInternalMargin() const
static int LUACALL wxLua_wxPickerBase_GetInternalMargin(lua_State *L)
{
    // get this
    wxPickerBase * self = (wxPickerBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPickerBase);
    // call GetInternalMargin
    int returns = (self->GetInternalMargin());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPickerBase_GetPickerCtrl[] = { &wxluatype_wxPickerBase, NULL };
static int LUACALL wxLua_wxPickerBase_GetPickerCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPickerBase_GetPickerCtrl[1] = {{ wxLua_wxPickerBase_GetPickerCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPickerBase_GetPickerCtrl }};
//     wxControl *GetPickerCtrl()
static int LUACALL wxLua_wxPickerBase_GetPickerCtrl(lua_State *L)
{
    // get this
    wxPickerBase * self = (wxPickerBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPickerBase);
    // call GetPickerCtrl
    wxControl* returns = (wxControl*)self->GetPickerCtrl();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxControl);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPickerBase_GetPickerCtrlProportion[] = { &wxluatype_wxPickerBase, NULL };
static int LUACALL wxLua_wxPickerBase_GetPickerCtrlProportion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPickerBase_GetPickerCtrlProportion[1] = {{ wxLua_wxPickerBase_GetPickerCtrlProportion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPickerBase_GetPickerCtrlProportion }};
//     int GetPickerCtrlProportion() const
static int LUACALL wxLua_wxPickerBase_GetPickerCtrlProportion(lua_State *L)
{
    // get this
    wxPickerBase * self = (wxPickerBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPickerBase);
    // call GetPickerCtrlProportion
    int returns = (self->GetPickerCtrlProportion());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker)
static wxLuaArgType s_wxluatypeArray_wxLua_wxPickerBase_GetTextCtrl[] = { &wxluatype_wxPickerBase, NULL };
static int LUACALL wxLua_wxPickerBase_GetTextCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPickerBase_GetTextCtrl[1] = {{ wxLua_wxPickerBase_GetTextCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPickerBase_GetTextCtrl }};
//     wxTextCtrl *GetTextCtrl()
static int LUACALL wxLua_wxPickerBase_GetTextCtrl(lua_State *L)
{
    // get this
    wxPickerBase * self = (wxPickerBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPickerBase);
    // call GetTextCtrl
    wxTextCtrl* returns = (wxTextCtrl*)self->GetTextCtrl();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextCtrl);

    return 1;
}

#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker)

static wxLuaArgType s_wxluatypeArray_wxLua_wxPickerBase_GetTextCtrlProportion[] = { &wxluatype_wxPickerBase, NULL };
static int LUACALL wxLua_wxPickerBase_GetTextCtrlProportion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPickerBase_GetTextCtrlProportion[1] = {{ wxLua_wxPickerBase_GetTextCtrlProportion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPickerBase_GetTextCtrlProportion }};
//     int GetTextCtrlProportion() const
static int LUACALL wxLua_wxPickerBase_GetTextCtrlProportion(lua_State *L)
{
    // get this
    wxPickerBase * self = (wxPickerBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPickerBase);
    // call GetTextCtrlProportion
    int returns = (self->GetTextCtrlProportion());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPickerBase_HasTextCtrl[] = { &wxluatype_wxPickerBase, NULL };
static int LUACALL wxLua_wxPickerBase_HasTextCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPickerBase_HasTextCtrl[1] = {{ wxLua_wxPickerBase_HasTextCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPickerBase_HasTextCtrl }};
//    bool HasTextCtrl() const
static int LUACALL wxLua_wxPickerBase_HasTextCtrl(lua_State *L)
{
    // get this
    wxPickerBase * self = (wxPickerBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPickerBase);
    // call HasTextCtrl
    bool returns = (self->HasTextCtrl());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPickerBase_IsPickerCtrlGrowable[] = { &wxluatype_wxPickerBase, NULL };
static int LUACALL wxLua_wxPickerBase_IsPickerCtrlGrowable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPickerBase_IsPickerCtrlGrowable[1] = {{ wxLua_wxPickerBase_IsPickerCtrlGrowable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPickerBase_IsPickerCtrlGrowable }};
//     bool IsPickerCtrlGrowable() const
static int LUACALL wxLua_wxPickerBase_IsPickerCtrlGrowable(lua_State *L)
{
    // get this
    wxPickerBase * self = (wxPickerBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPickerBase);
    // call IsPickerCtrlGrowable
    bool returns = (self->IsPickerCtrlGrowable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPickerBase_IsTextCtrlGrowable[] = { &wxluatype_wxPickerBase, NULL };
static int LUACALL wxLua_wxPickerBase_IsTextCtrlGrowable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPickerBase_IsTextCtrlGrowable[1] = {{ wxLua_wxPickerBase_IsTextCtrlGrowable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPickerBase_IsTextCtrlGrowable }};
//     bool IsTextCtrlGrowable() const
static int LUACALL wxLua_wxPickerBase_IsTextCtrlGrowable(lua_State *L)
{
    // get this
    wxPickerBase * self = (wxPickerBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPickerBase);
    // call IsTextCtrlGrowable
    bool returns = (self->IsTextCtrlGrowable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPickerBase_SetInternalMargin[] = { &wxluatype_wxPickerBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPickerBase_SetInternalMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPickerBase_SetInternalMargin[1] = {{ wxLua_wxPickerBase_SetInternalMargin, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPickerBase_SetInternalMargin }};
//     void SetInternalMargin(int newmargin)
static int LUACALL wxLua_wxPickerBase_SetInternalMargin(lua_State *L)
{
    // int newmargin
    int newmargin = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxPickerBase * self = (wxPickerBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPickerBase);
    // call SetInternalMargin
    self->SetInternalMargin(newmargin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPickerBase_SetPickerCtrlGrowable[] = { &wxluatype_wxPickerBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxPickerBase_SetPickerCtrlGrowable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPickerBase_SetPickerCtrlGrowable[1] = {{ wxLua_wxPickerBase_SetPickerCtrlGrowable, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxPickerBase_SetPickerCtrlGrowable }};
//     void SetPickerCtrlGrowable(bool grow = true)
static int LUACALL wxLua_wxPickerBase_SetPickerCtrlGrowable(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool grow = true
    bool grow = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxPickerBase * self = (wxPickerBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPickerBase);
    // call SetPickerCtrlGrowable
    self->SetPickerCtrlGrowable(grow);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPickerBase_SetPickerCtrlProportion[] = { &wxluatype_wxPickerBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPickerBase_SetPickerCtrlProportion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPickerBase_SetPickerCtrlProportion[1] = {{ wxLua_wxPickerBase_SetPickerCtrlProportion, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPickerBase_SetPickerCtrlProportion }};
//     void SetPickerCtrlProportion(int prop)
static int LUACALL wxLua_wxPickerBase_SetPickerCtrlProportion(lua_State *L)
{
    // int prop
    int prop = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxPickerBase * self = (wxPickerBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPickerBase);
    // call SetPickerCtrlProportion
    self->SetPickerCtrlProportion(prop);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPickerBase_SetTextCtrlGrowable[] = { &wxluatype_wxPickerBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxPickerBase_SetTextCtrlGrowable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPickerBase_SetTextCtrlGrowable[1] = {{ wxLua_wxPickerBase_SetTextCtrlGrowable, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxPickerBase_SetTextCtrlGrowable }};
//     void SetTextCtrlGrowable(bool grow = true)
static int LUACALL wxLua_wxPickerBase_SetTextCtrlGrowable(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool grow = true
    bool grow = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxPickerBase * self = (wxPickerBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPickerBase);
    // call SetTextCtrlGrowable
    self->SetTextCtrlGrowable(grow);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPickerBase_SetTextCtrlProportion[] = { &wxluatype_wxPickerBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPickerBase_SetTextCtrlProportion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPickerBase_SetTextCtrlProportion[1] = {{ wxLua_wxPickerBase_SetTextCtrlProportion, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPickerBase_SetTextCtrlProportion }};
//     void SetTextCtrlProportion(int prop)
static int LUACALL wxLua_wxPickerBase_SetTextCtrlProportion(lua_State *L)
{
    // int prop
    int prop = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxPickerBase * self = (wxPickerBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPickerBase);
    // call SetTextCtrlProportion
    self->SetTextCtrlProportion(prop);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPickerBase_UpdatePickerFromTextCtrl[] = { &wxluatype_wxPickerBase, NULL };
static int LUACALL wxLua_wxPickerBase_UpdatePickerFromTextCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPickerBase_UpdatePickerFromTextCtrl[1] = {{ wxLua_wxPickerBase_UpdatePickerFromTextCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPickerBase_UpdatePickerFromTextCtrl }};
//     virtual void UpdatePickerFromTextCtrl()
static int LUACALL wxLua_wxPickerBase_UpdatePickerFromTextCtrl(lua_State *L)
{
    // get this
    wxPickerBase * self = (wxPickerBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPickerBase);
    // call UpdatePickerFromTextCtrl
    self->UpdatePickerFromTextCtrl();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPickerBase_UpdateTextCtrlFromPicker[] = { &wxluatype_wxPickerBase, NULL };
static int LUACALL wxLua_wxPickerBase_UpdateTextCtrlFromPicker(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPickerBase_UpdateTextCtrlFromPicker[1] = {{ wxLua_wxPickerBase_UpdateTextCtrlFromPicker, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPickerBase_UpdateTextCtrlFromPicker }};
//     virtual void UpdateTextCtrlFromPicker()
static int LUACALL wxLua_wxPickerBase_UpdateTextCtrlFromPicker(lua_State *L)
{
    // get this
    wxPickerBase * self = (wxPickerBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPickerBase);
    // call UpdateTextCtrlFromPicker
    self->UpdateTextCtrlFromPicker();

    return 0;
}




void wxLua_wxPickerBase_delete_function(void** p)
{
    wxPickerBase* o = (wxPickerBase*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPickerBase_methods[] = {
    { "GetInternalMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPickerBase_GetInternalMargin, 1, NULL },
    { "GetPickerCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPickerBase_GetPickerCtrl, 1, NULL },
    { "GetPickerCtrlProportion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPickerBase_GetPickerCtrlProportion, 1, NULL },

#if (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker)
    { "GetTextCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPickerBase_GetTextCtrl, 1, NULL },
#endif // (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL) && (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker)

    { "GetTextCtrlProportion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPickerBase_GetTextCtrlProportion, 1, NULL },
    { "HasTextCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPickerBase_HasTextCtrl, 1, NULL },
    { "IsPickerCtrlGrowable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPickerBase_IsPickerCtrlGrowable, 1, NULL },
    { "IsTextCtrlGrowable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPickerBase_IsTextCtrlGrowable, 1, NULL },
    { "SetInternalMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPickerBase_SetInternalMargin, 1, NULL },
    { "SetPickerCtrlGrowable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPickerBase_SetPickerCtrlGrowable, 1, NULL },
    { "SetPickerCtrlProportion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPickerBase_SetPickerCtrlProportion, 1, NULL },
    { "SetTextCtrlGrowable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPickerBase_SetTextCtrlGrowable, 1, NULL },
    { "SetTextCtrlProportion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPickerBase_SetTextCtrlProportion, 1, NULL },
    { "UpdatePickerFromTextCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPickerBase_UpdatePickerFromTextCtrl, 1, NULL },
    { "UpdateTextCtrlFromPicker", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPickerBase_UpdateTextCtrlFromPicker, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxPickerBase_methodCount = sizeof(wxPickerBase_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker


#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)
// ---------------------------------------------------------------------------
// Bind class wxColourPickerCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxColourPickerCtrl'
int wxluatype_wxColourPickerCtrl = WXLUA_TUNKNOWN;

#if (((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxColourPickerCtrl_Create[] = { &wxluatype_wxColourPickerCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxColour, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxColourPickerCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourPickerCtrl_Create[1] = {{ wxLua_wxColourPickerCtrl_Create, WXLUAMETHOD_METHOD, 4, 9, s_wxluatypeArray_wxLua_wxColourPickerCtrl_Create }};
//     bool Create(wxWindow *parent, wxWindowID id, const wxColour& col, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxCLRP_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxColourPickerCtrl")
static int LUACALL wxLua_wxColourPickerCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxColourPickerCtrl"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxColourPickerCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxCLRP_DEFAULT_STYLE
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxCLRP_DEFAULT_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 4, wxluatype_wxColour);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxColourPickerCtrl * self = (wxColourPickerCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourPickerCtrl);
    // call Create
    bool returns = (self->Create(parent, id, *col, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))) && (wxLUA_USE_wxPointSizeRect)

#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxColourPickerCtrl_GetColour[] = { &wxluatype_wxColourPickerCtrl, NULL };
static int LUACALL wxLua_wxColourPickerCtrl_GetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourPickerCtrl_GetColour[1] = {{ wxLua_wxColourPickerCtrl_GetColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxColourPickerCtrl_GetColour }};
//     wxColour GetColour() const
static int LUACALL wxLua_wxColourPickerCtrl_GetColour(lua_State *L)
{
    // get this
    wxColourPickerCtrl * self = (wxColourPickerCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourPickerCtrl);
    // call GetColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxColourPickerCtrl_SetColour1[] = { &wxluatype_wxColourPickerCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxColourPickerCtrl_SetColour1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourPickerCtrl_SetColour1[1] = {{ wxLua_wxColourPickerCtrl_SetColour1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxColourPickerCtrl_SetColour1 }};
//     bool SetColour(const wxString& text)
static int LUACALL wxLua_wxColourPickerCtrl_SetColour1(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxColourPickerCtrl * self = (wxColourPickerCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourPickerCtrl);
    // call SetColour
    bool returns = (self->SetColour(text));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxColourPickerCtrl_SetColour[] = { &wxluatype_wxColourPickerCtrl, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxColourPickerCtrl_SetColour(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourPickerCtrl_SetColour[1] = {{ wxLua_wxColourPickerCtrl_SetColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxColourPickerCtrl_SetColour }};
//     void SetColour(const wxColour& col)
static int LUACALL wxLua_wxColourPickerCtrl_SetColour(lua_State *L)
{
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxColourPickerCtrl * self = (wxColourPickerCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourPickerCtrl);
    // call SetColour
    self->SetColour(*col);

    return 0;
}

#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)) && (wxLUA_USE_wxColourPenBrush)

#if (((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxColourPickerCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxColour, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxColourPickerCtrl_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourPickerCtrl_constructor1[1] = {{ wxLua_wxColourPickerCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 8, s_wxluatypeArray_wxLua_wxColourPickerCtrl_constructor1 }};
//     wxColourPickerCtrl(wxWindow *parent, wxWindowID id, const wxColour& col, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxCLRP_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxColourPickerCtrl")
static int LUACALL wxLua_wxColourPickerCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxColourPickerCtrl"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxColourPickerCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxCLRP_DEFAULT_STYLE
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxCLRP_DEFAULT_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxColourPickerCtrl* returns = new wxColourPickerCtrl(parent, id, *col, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColourPickerCtrl);

    return 1;
}

#endif // (((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxColourPickerCtrl_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourPickerCtrl_constructor[1] = {{ wxLua_wxColourPickerCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxColourPickerCtrl()
static int LUACALL wxLua_wxColourPickerCtrl_constructor(lua_State *L)
{
    // call constructor
    wxColourPickerCtrl* returns = new wxColourPickerCtrl();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColourPickerCtrl);

    return 1;
}




#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))||(((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)) && (wxLUA_USE_wxColourPenBrush))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourPickerCtrl_SetColour_overload[] =
{
    { wxLua_wxColourPickerCtrl_SetColour1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxColourPickerCtrl_SetColour1 },

#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)) && (wxLUA_USE_wxColourPenBrush)
    { wxLua_wxColourPickerCtrl_SetColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxColourPickerCtrl_SetColour },
#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)) && (wxLUA_USE_wxColourPenBrush)
};
static int s_wxluafunc_wxLua_wxColourPickerCtrl_SetColour_overload_count = sizeof(s_wxluafunc_wxLua_wxColourPickerCtrl_SetColour_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))||(((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)) && (wxLUA_USE_wxColourPenBrush))

#if ((((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourPickerCtrl_constructor_overload[] =
{

#if (((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxColourPickerCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 8, s_wxluatypeArray_wxLua_wxColourPickerCtrl_constructor1 },
#endif // (((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxColourPickerCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxColourPickerCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxColourPickerCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))

void wxLua_wxColourPickerCtrl_delete_function(void** p)
{
    wxColourPickerCtrl* o = (wxColourPickerCtrl*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxColourPickerCtrl_methods[] = {
#if (((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColourPickerCtrl_Create, 1, NULL },
#endif // (((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))) && (wxLUA_USE_wxPointSizeRect)

#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)) && (wxLUA_USE_wxColourPenBrush)
    { "GetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColourPickerCtrl_GetColour, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)) && (wxLUA_USE_wxColourPenBrush)

#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))||(((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)) && (wxLUA_USE_wxColourPenBrush))
    { "SetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColourPickerCtrl_SetColour_overload, s_wxluafunc_wxLua_wxColourPickerCtrl_SetColour_overload_count, 0 },
#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))||(((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)) && (wxLUA_USE_wxColourPenBrush))

#if ((((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))
    { "wxColourPickerCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxColourPickerCtrl_constructor_overload, s_wxluafunc_wxLua_wxColourPickerCtrl_constructor_overload_count, 0 },
#endif // ((((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))

    { 0, 0, 0, 0 },
};

int wxColourPickerCtrl_methodCount = sizeof(wxColourPickerCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)


#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)
// ---------------------------------------------------------------------------
// Bind class wxColourPickerEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxColourPickerEvent'
int wxluatype_wxColourPickerEvent = WXLUA_TUNKNOWN;

#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxColourPickerEvent_GetColour[] = { &wxluatype_wxColourPickerEvent, NULL };
static int LUACALL wxLua_wxColourPickerEvent_GetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourPickerEvent_GetColour[1] = {{ wxLua_wxColourPickerEvent_GetColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxColourPickerEvent_GetColour }};
//     wxColour GetColour() const
static int LUACALL wxLua_wxColourPickerEvent_GetColour(lua_State *L)
{
    // get this
    wxColourPickerEvent * self = (wxColourPickerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourPickerEvent);
    // call GetColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxColourPickerEvent_SetColour[] = { &wxluatype_wxColourPickerEvent, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxColourPickerEvent_SetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourPickerEvent_SetColour[1] = {{ wxLua_wxColourPickerEvent_SetColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxColourPickerEvent_SetColour }};
//     void SetColour(const wxColour &c)
static int LUACALL wxLua_wxColourPickerEvent_SetColour(lua_State *L)
{
    // const wxColour c
    const wxColour * c = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxColourPickerEvent * self = (wxColourPickerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColourPickerEvent);
    // call SetColour
    self->SetColour(*c);

    return 0;
}

#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxColourPickerEvent_delete[] = { &wxluatype_wxColourPickerEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourPickerEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxColourPickerEvent_delete }};


#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxObject)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))
static wxLuaArgType s_wxluatypeArray_wxLua_wxColourPickerEvent_constructor1[] = { &wxluatype_wxObject, &wxluatype_TNUMBER, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxColourPickerEvent_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourPickerEvent_constructor1[1] = {{ wxLua_wxColourPickerEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxColourPickerEvent_constructor1 }};
//     wxColourPickerEvent(wxObject *generator, int id, const wxColour &col)
static int LUACALL wxLua_wxColourPickerEvent_constructor1(lua_State *L)
{
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // wxObject generator
    wxObject * generator = (wxObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxObject);
    // call constructor
    wxColourPickerEvent* returns = new wxColourPickerEvent(generator, id, *col);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColourPickerEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColourPickerEvent);

    return 1;
}

#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxObject)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))

static int LUACALL wxLua_wxColourPickerEvent_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourPickerEvent_constructor[1] = {{ wxLua_wxColourPickerEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxColourPickerEvent()
static int LUACALL wxLua_wxColourPickerEvent_constructor(lua_State *L)
{
    // call constructor
    wxColourPickerEvent* returns = new wxColourPickerEvent();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColourPickerEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColourPickerEvent);

    return 1;
}




#if (((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxObject)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxColourPickerEvent_constructor_overload[] =
{

#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxObject)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))
    { wxLua_wxColourPickerEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxColourPickerEvent_constructor1 },
#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxObject)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))
    { wxLua_wxColourPickerEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxColourPickerEvent_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxColourPickerEvent_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxObject)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))

void wxLua_wxColourPickerEvent_delete_function(void** p)
{
    wxColourPickerEvent* o = (wxColourPickerEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxColourPickerEvent_methods[] = {
#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)) && (wxLUA_USE_wxColourPenBrush)
    { "GetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColourPickerEvent_GetColour, 1, NULL },
    { "SetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxColourPickerEvent_SetColour, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)) && (wxLUA_USE_wxColourPenBrush)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxColourPickerEvent_delete, 1, NULL },

#if (((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxObject)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))
    { "wxColourPickerEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxColourPickerEvent_constructor_overload, s_wxluafunc_wxLua_wxColourPickerEvent_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxObject)) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL))

    { 0, 0, 0, 0 },
};

int wxColourPickerEvent_methodCount = sizeof(wxColourPickerEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxColourPickerCtrl && wxUSE_COLOURPICKERCTRL)


#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL)
// ---------------------------------------------------------------------------
// Bind class wxDatePickerCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDatePickerCtrl'
int wxluatype_wxDatePickerCtrl = WXLUA_TUNKNOWN;

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL))) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDatePickerCtrl_Create[] = { &wxluatype_wxDatePickerCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxDateTime, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDatePickerCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDatePickerCtrl_Create[1] = {{ wxLua_wxDatePickerCtrl_Create, WXLUAMETHOD_METHOD, 3, 9, s_wxluatypeArray_wxLua_wxDatePickerCtrl_Create }};
//     bool Create(wxWindow *parent, wxWindowID id, const wxDateTime& dt = wxDefaultDateTime, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDP_DEFAULT | wxDP_SHOWCENTURY, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxDatePickerCtrl")
static int LUACALL wxLua_wxDatePickerCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxDatePickerCtrl"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxDatePickerCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxDP_DEFAULT | wxDP_SHOWCENTURY
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxDP_DEFAULT | wxDP_SHOWCENTURY);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxDateTime dt = wxDefaultDateTime
    const wxDateTime * dt = (argCount >= 4 ? (const wxDateTime *)wxluaT_getuserdatatype(L, 4, wxluatype_wxDateTime) : &wxDefaultDateTime);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxDatePickerCtrl * self = (wxDatePickerCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDatePickerCtrl);
    // call Create
    bool returns = (self->Create(parent, id, *dt, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL))) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDatePickerCtrl_GetRange[] = { &wxluatype_wxDatePickerCtrl, NULL };
static int LUACALL wxLua_wxDatePickerCtrl_GetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDatePickerCtrl_GetRange[1] = {{ wxLua_wxDatePickerCtrl_GetRange, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDatePickerCtrl_GetRange }};
// %override wxLua_wxDatePickerCtrl_GetRange
//        bool GetRange(wxDateTime *dt1, wxDateTime *dt2) const
static int LUACALL wxLua_wxDatePickerCtrl_GetRange(lua_State *L)
{
    wxDateTime *dt1 = new wxDateTime();
    wxDateTime *dt2 = new wxDateTime();
    // get this
    wxDatePickerCtrl * self = (wxDatePickerCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDatePickerCtrl);
    // call GetRange
    bool returns = self->GetRange(dt1, dt2);
    // push the result flag
    lua_pushboolean(L, returns);
    wxluaT_pushuserdatatype(L, dt1, wxluatype_wxDateTime);
    wxluaT_pushuserdatatype(L, dt2, wxluatype_wxDateTime);

    return 3;
}



#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDatePickerCtrl_GetValue[] = { &wxluatype_wxDatePickerCtrl, NULL };
static int LUACALL wxLua_wxDatePickerCtrl_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDatePickerCtrl_GetValue[1] = {{ wxLua_wxDatePickerCtrl_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDatePickerCtrl_GetValue }};
//     wxDateTime GetValue() const
static int LUACALL wxLua_wxDatePickerCtrl_GetValue(lua_State *L)
{
    // get this
    wxDatePickerCtrl * self = (wxDatePickerCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDatePickerCtrl);
    // call GetValue
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->GetValue());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDateTime);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDatePickerCtrl_SetRange[] = { &wxluatype_wxDatePickerCtrl, &wxluatype_wxDateTime, &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDatePickerCtrl_SetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDatePickerCtrl_SetRange[1] = {{ wxLua_wxDatePickerCtrl_SetRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDatePickerCtrl_SetRange }};
//     void SetRange(const wxDateTime& dt1, const wxDateTime& dt2)
static int LUACALL wxLua_wxDatePickerCtrl_SetRange(lua_State *L)
{
    // const wxDateTime dt2
    const wxDateTime * dt2 = (const wxDateTime *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDateTime);
    // const wxDateTime dt1
    const wxDateTime * dt1 = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // get this
    wxDatePickerCtrl * self = (wxDatePickerCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDatePickerCtrl);
    // call SetRange
    self->SetRange(*dt1, *dt2);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDatePickerCtrl_SetValue[] = { &wxluatype_wxDatePickerCtrl, &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDatePickerCtrl_SetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDatePickerCtrl_SetValue[1] = {{ wxLua_wxDatePickerCtrl_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDatePickerCtrl_SetValue }};
//     void SetValue(const wxDateTime& dt)
static int LUACALL wxLua_wxDatePickerCtrl_SetValue(lua_State *L)
{
    // const wxDateTime dt
    const wxDateTime * dt = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // get this
    wxDatePickerCtrl * self = (wxDatePickerCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDatePickerCtrl);
    // call SetValue
    self->SetValue(*dt);

    return 0;
}

#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL))) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDatePickerCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxDateTime, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDatePickerCtrl_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDatePickerCtrl_constructor1[1] = {{ wxLua_wxDatePickerCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 8, s_wxluatypeArray_wxLua_wxDatePickerCtrl_constructor1 }};
//     wxDatePickerCtrl(wxWindow *parent, wxWindowID id, const wxDateTime& dt = wxDefaultDateTime, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDP_DEFAULT | wxDP_SHOWCENTURY, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxDatePickerCtrl")
static int LUACALL wxLua_wxDatePickerCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxDatePickerCtrl"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxDatePickerCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxDP_DEFAULT | wxDP_SHOWCENTURY
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxDP_DEFAULT | wxDP_SHOWCENTURY);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxDateTime dt = wxDefaultDateTime
    const wxDateTime * dt = (argCount >= 3 ? (const wxDateTime *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDateTime) : &wxDefaultDateTime);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxDatePickerCtrl* returns = new wxDatePickerCtrl(parent, id, *dt, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDatePickerCtrl);

    return 1;
}

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL))) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxDatePickerCtrl_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDatePickerCtrl_constructor[1] = {{ wxLua_wxDatePickerCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDatePickerCtrl()
static int LUACALL wxLua_wxDatePickerCtrl_constructor(lua_State *L)
{
    // call constructor
    wxDatePickerCtrl* returns = new wxDatePickerCtrl();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDatePickerCtrl);

    return 1;
}




#if ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL))) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDatePickerCtrl_constructor_overload[] =
{

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL))) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxDatePickerCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 8, s_wxluatypeArray_wxLua_wxDatePickerCtrl_constructor1 },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL))) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxDatePickerCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxDatePickerCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxDatePickerCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL))) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL))

void wxLua_wxDatePickerCtrl_delete_function(void** p)
{
    wxDatePickerCtrl* o = (wxDatePickerCtrl*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDatePickerCtrl_methods[] = {
#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL))) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDatePickerCtrl_Create, 1, NULL },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL))) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)) && (wxLUA_USE_wxPointSizeRect)

    { "GetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDatePickerCtrl_GetRange, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDatePickerCtrl_GetValue, 1, NULL },
    { "SetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDatePickerCtrl_SetRange, 1, NULL },
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDatePickerCtrl_SetValue, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

#if ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL))) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL))
    { "wxDatePickerCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDatePickerCtrl_constructor_overload, s_wxluafunc_wxLua_wxDatePickerCtrl_constructor_overload_count, 0 },
#endif // ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL))) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL))

    { 0, 0, 0, 0 },
};

int wxDatePickerCtrl_methodCount = sizeof(wxDatePickerCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDatePickerCtrl && wxUSE_DATEPICKCTRL)


#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && ((wxLUA_USE_wxDirPickerCtrl || wxLUA_USE_wxFilePickerCtrl ) && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL ))
// ---------------------------------------------------------------------------
// Bind class wxFileDirPickerCtrlBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFileDirPickerCtrlBase'
int wxluatype_wxFileDirPickerCtrlBase = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDirPickerCtrlBase_CheckPath[] = { &wxluatype_wxFileDirPickerCtrlBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileDirPickerCtrlBase_CheckPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDirPickerCtrlBase_CheckPath[1] = {{ wxLua_wxFileDirPickerCtrlBase_CheckPath, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileDirPickerCtrlBase_CheckPath }};
//     bool CheckPath(const wxString& path) const
static int LUACALL wxLua_wxFileDirPickerCtrlBase_CheckPath(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileDirPickerCtrlBase * self = (wxFileDirPickerCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDirPickerCtrlBase);
    // call CheckPath
    bool returns = (self->CheckPath(path));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDirPickerCtrlBase_GetPath[] = { &wxluatype_wxFileDirPickerCtrlBase, NULL };
static int LUACALL wxLua_wxFileDirPickerCtrlBase_GetPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDirPickerCtrlBase_GetPath[1] = {{ wxLua_wxFileDirPickerCtrlBase_GetPath, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileDirPickerCtrlBase_GetPath }};
//     wxString GetPath() const
static int LUACALL wxLua_wxFileDirPickerCtrlBase_GetPath(lua_State *L)
{
    // get this
    wxFileDirPickerCtrlBase * self = (wxFileDirPickerCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDirPickerCtrlBase);
    // call GetPath
    wxString returns = (self->GetPath());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDirPickerCtrlBase_GetTextCtrlValue[] = { &wxluatype_wxFileDirPickerCtrlBase, NULL };
static int LUACALL wxLua_wxFileDirPickerCtrlBase_GetTextCtrlValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDirPickerCtrlBase_GetTextCtrlValue[1] = {{ wxLua_wxFileDirPickerCtrlBase_GetTextCtrlValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileDirPickerCtrlBase_GetTextCtrlValue }};
//     wxString GetTextCtrlValue() const
static int LUACALL wxLua_wxFileDirPickerCtrlBase_GetTextCtrlValue(lua_State *L)
{
    // get this
    wxFileDirPickerCtrlBase * self = (wxFileDirPickerCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDirPickerCtrlBase);
    // call GetTextCtrlValue
    wxString returns = (self->GetTextCtrlValue());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDirPickerCtrlBase_SetPath[] = { &wxluatype_wxFileDirPickerCtrlBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileDirPickerCtrlBase_SetPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDirPickerCtrlBase_SetPath[1] = {{ wxLua_wxFileDirPickerCtrlBase_SetPath, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileDirPickerCtrlBase_SetPath }};
//     void SetPath(const wxString &str)
static int LUACALL wxLua_wxFileDirPickerCtrlBase_SetPath(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileDirPickerCtrlBase * self = (wxFileDirPickerCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDirPickerCtrlBase);
    // call SetPath
    self->SetPath(str);

    return 0;
}




void wxLua_wxFileDirPickerCtrlBase_delete_function(void** p)
{
    wxFileDirPickerCtrlBase* o = (wxFileDirPickerCtrlBase*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFileDirPickerCtrlBase_methods[] = {
    { "CheckPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDirPickerCtrlBase_CheckPath, 1, NULL },
    { "GetPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDirPickerCtrlBase_GetPath, 1, NULL },
    { "GetTextCtrlValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDirPickerCtrlBase_GetTextCtrlValue, 1, NULL },
    { "SetPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDirPickerCtrlBase_SetPath, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxFileDirPickerCtrlBase_methodCount = sizeof(wxFileDirPickerCtrlBase_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && ((wxLUA_USE_wxDirPickerCtrl || wxLUA_USE_wxFilePickerCtrl ) && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL ))


#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && ((wxLUA_USE_wxDirPickerCtrl || wxLUA_USE_wxFilePickerCtrl ) && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL ))
// ---------------------------------------------------------------------------
// Bind class wxFileDirPickerEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFileDirPickerEvent'
int wxluatype_wxFileDirPickerEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDirPickerEvent_GetPath[] = { &wxluatype_wxFileDirPickerEvent, NULL };
static int LUACALL wxLua_wxFileDirPickerEvent_GetPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDirPickerEvent_GetPath[1] = {{ wxLua_wxFileDirPickerEvent_GetPath, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFileDirPickerEvent_GetPath }};
//     wxString GetPath() const
static int LUACALL wxLua_wxFileDirPickerEvent_GetPath(lua_State *L)
{
    // get this
    wxFileDirPickerEvent * self = (wxFileDirPickerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDirPickerEvent);
    // call GetPath
    wxString returns = (self->GetPath());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDirPickerEvent_SetPath[] = { &wxluatype_wxFileDirPickerEvent, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileDirPickerEvent_SetPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDirPickerEvent_SetPath[1] = {{ wxLua_wxFileDirPickerEvent_SetPath, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFileDirPickerEvent_SetPath }};
//     void SetPath(const wxString &p)
static int LUACALL wxLua_wxFileDirPickerEvent_SetPath(lua_State *L)
{
    // const wxString p
    const wxString p = wxlua_getwxStringtype(L, 2);
    // get this
    wxFileDirPickerEvent * self = (wxFileDirPickerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFileDirPickerEvent);
    // call SetPath
    self->SetPath(p);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDirPickerEvent_delete[] = { &wxluatype_wxFileDirPickerEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDirPickerEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFileDirPickerEvent_delete }};


#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && ((wxLUA_USE_wxDirPickerCtrl || wxLUA_USE_wxFilePickerCtrl ) && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL ))) && (wxLUA_USE_wxObject)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFileDirPickerEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_wxObject, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFileDirPickerEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFileDirPickerEvent_constructor[1] = {{ wxLua_wxFileDirPickerEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 4, 4, s_wxluatypeArray_wxLua_wxFileDirPickerEvent_constructor }};
//     wxFileDirPickerEvent(wxEventType type, wxObject *generator, int id, const wxString &path)
static int LUACALL wxLua_wxFileDirPickerEvent_constructor(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 4);
    // int id
    int id = (int)wxlua_getnumbertype(L, 3);
    // wxObject generator
    wxObject * generator = (wxObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxObject);
    // wxEventType type
    wxEventType type = (wxEventType)wxlua_getnumbertype(L, 1);
    // call constructor
    wxFileDirPickerEvent* returns = new wxFileDirPickerEvent(type, generator, id, path);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxFileDirPickerEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFileDirPickerEvent);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && ((wxLUA_USE_wxDirPickerCtrl || wxLUA_USE_wxFilePickerCtrl ) && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL ))) && (wxLUA_USE_wxObject)



void wxLua_wxFileDirPickerEvent_delete_function(void** p)
{
    wxFileDirPickerEvent* o = (wxFileDirPickerEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFileDirPickerEvent_methods[] = {
    { "GetPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDirPickerEvent_GetPath, 1, NULL },
    { "SetPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFileDirPickerEvent_SetPath, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFileDirPickerEvent_delete, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && ((wxLUA_USE_wxDirPickerCtrl || wxLUA_USE_wxFilePickerCtrl ) && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL ))) && (wxLUA_USE_wxObject)
    { "wxFileDirPickerEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFileDirPickerEvent_constructor, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && ((wxLUA_USE_wxDirPickerCtrl || wxLUA_USE_wxFilePickerCtrl ) && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL ))) && (wxLUA_USE_wxObject)

    { 0, 0, 0, 0 },
};

int wxFileDirPickerEvent_methodCount = sizeof(wxFileDirPickerEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && ((wxLUA_USE_wxDirPickerCtrl || wxLUA_USE_wxFilePickerCtrl ) && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL ))


#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL ))
// ---------------------------------------------------------------------------
// Bind class wxDirPickerCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDirPickerCtrl'
int wxluatype_wxDirPickerCtrl = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDirPickerCtrl_Create[] = { &wxluatype_wxDirPickerCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDirPickerCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDirPickerCtrl_Create[1] = {{ wxLua_wxDirPickerCtrl_Create, WXLUAMETHOD_METHOD, 3, 10, s_wxluatypeArray_wxLua_wxDirPickerCtrl_Create }};
//     bool Create(wxWindow *parent, wxWindowID id, const wxString& path = "", const wxString& message = wxDirSelectorPromptStr, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDIRP_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxDirPickerCtrl")
static int LUACALL wxLua_wxDirPickerCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxDirPickerCtrl"
    const wxString name = (argCount >= 10 ? wxlua_getwxStringtype(L, 10) : wxString(wxT("wxDirPickerCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 9 ? (const wxValidator *)wxluaT_getuserdatatype(L, 9, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxDIRP_DEFAULT_STYLE
    long style = (argCount >= 8 ? (long)wxlua_getnumbertype(L, 8) : wxDIRP_DEFAULT_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 7 ? (const wxSize *)wxluaT_getuserdatatype(L, 7, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 6 ? (const wxPoint *)wxluaT_getuserdatatype(L, 6, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString message = wxDirSelectorPromptStr
    const wxString message = (argCount >= 5 ? wxlua_getwxStringtype(L, 5) : wxString(wxDirSelectorPromptStr));
    // const wxString path = ""
    const wxString path = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxDirPickerCtrl * self = (wxDirPickerCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDirPickerCtrl);
    // call Create
    bool returns = (self->Create(parent, id, path, message, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDirPickerCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDirPickerCtrl_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDirPickerCtrl_constructor1[1] = {{ wxLua_wxDirPickerCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 9, s_wxluatypeArray_wxLua_wxDirPickerCtrl_constructor1 }};
//     wxDirPickerCtrl(wxWindow *parent, wxWindowID id, const wxString& path = "", const wxString& message = wxDirSelectorPromptStr, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDIRP_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxDirPickerCtrl")
static int LUACALL wxLua_wxDirPickerCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxDirPickerCtrl"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxDirPickerCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxDIRP_DEFAULT_STYLE
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxDIRP_DEFAULT_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString message = wxDirSelectorPromptStr
    const wxString message = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxDirSelectorPromptStr));
    // const wxString path = ""
    const wxString path = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxDirPickerCtrl* returns = new wxDirPickerCtrl(parent, id, path, message, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDirPickerCtrl);

    return 1;
}

#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxDirPickerCtrl_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDirPickerCtrl_constructor[1] = {{ wxLua_wxDirPickerCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDirPickerCtrl()
static int LUACALL wxLua_wxDirPickerCtrl_constructor(lua_State *L)
{
    // call constructor
    wxDirPickerCtrl* returns = new wxDirPickerCtrl();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDirPickerCtrl);

    return 1;
}




#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDirPickerCtrl_constructor_overload[] =
{

#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxDirPickerCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 9, s_wxluatypeArray_wxLua_wxDirPickerCtrl_constructor1 },
#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxDirPickerCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxDirPickerCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxDirPickerCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))

void wxLua_wxDirPickerCtrl_delete_function(void** p)
{
    wxDirPickerCtrl* o = (wxDirPickerCtrl*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDirPickerCtrl_methods[] = {
#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDirPickerCtrl_Create, 1, NULL },
#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect)

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))
    { "wxDirPickerCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDirPickerCtrl_constructor_overload, s_wxluafunc_wxLua_wxDirPickerCtrl_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))

    { 0, 0, 0, 0 },
};

int wxDirPickerCtrl_methodCount = sizeof(wxDirPickerCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL ))


#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL ))
// ---------------------------------------------------------------------------
// Bind class wxFilePickerCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFilePickerCtrl'
int wxluatype_wxFilePickerCtrl = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFilePickerCtrl_Create[] = { &wxluatype_wxFilePickerCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFilePickerCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFilePickerCtrl_Create[1] = {{ wxLua_wxFilePickerCtrl_Create, WXLUAMETHOD_METHOD, 3, 11, s_wxluatypeArray_wxLua_wxFilePickerCtrl_Create }};
//     bool Create(wxWindow *parent, wxWindowID id, const wxString& path = "", const wxString& message = wxFileSelectorPromptStr, const wxString& wildcard = wxFileSelectorDefaultWildcardStr, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxFLP_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxFilePickerCtrl")
static int LUACALL wxLua_wxFilePickerCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxFilePickerCtrl"
    const wxString name = (argCount >= 11 ? wxlua_getwxStringtype(L, 11) : wxString(wxT("wxFilePickerCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 10 ? (const wxValidator *)wxluaT_getuserdatatype(L, 10, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxFLP_DEFAULT_STYLE
    long style = (argCount >= 9 ? (long)wxlua_getnumbertype(L, 9) : wxFLP_DEFAULT_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 8 ? (const wxSize *)wxluaT_getuserdatatype(L, 8, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 7 ? (const wxPoint *)wxluaT_getuserdatatype(L, 7, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString wildcard = wxFileSelectorDefaultWildcardStr
    const wxString wildcard = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxFileSelectorDefaultWildcardStr));
    // const wxString message = wxFileSelectorPromptStr
    const wxString message = (argCount >= 5 ? wxlua_getwxStringtype(L, 5) : wxString(wxFileSelectorPromptStr));
    // const wxString path = ""
    const wxString path = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxFilePickerCtrl * self = (wxFilePickerCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFilePickerCtrl);
    // call Create
    bool returns = (self->Create(parent, id, path, message, wildcard, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFilePickerCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFilePickerCtrl_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFilePickerCtrl_constructor1[1] = {{ wxLua_wxFilePickerCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 10, s_wxluatypeArray_wxLua_wxFilePickerCtrl_constructor1 }};
//     wxFilePickerCtrl(wxWindow *parent, wxWindowID id, const wxString& path = "", const wxString& message = wxFileSelectorPromptStr, const wxString& wildcard = wxFileSelectorDefaultWildcardStr, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxFLP_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxFilePickerCtrl")
static int LUACALL wxLua_wxFilePickerCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxFilePickerCtrl"
    const wxString name = (argCount >= 10 ? wxlua_getwxStringtype(L, 10) : wxString(wxT("wxFilePickerCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 9 ? (const wxValidator *)wxluaT_getuserdatatype(L, 9, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxFLP_DEFAULT_STYLE
    long style = (argCount >= 8 ? (long)wxlua_getnumbertype(L, 8) : wxFLP_DEFAULT_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 7 ? (const wxSize *)wxluaT_getuserdatatype(L, 7, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 6 ? (const wxPoint *)wxluaT_getuserdatatype(L, 6, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString wildcard = wxFileSelectorDefaultWildcardStr
    const wxString wildcard = (argCount >= 5 ? wxlua_getwxStringtype(L, 5) : wxString(wxFileSelectorDefaultWildcardStr));
    // const wxString message = wxFileSelectorPromptStr
    const wxString message = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxFileSelectorPromptStr));
    // const wxString path = ""
    const wxString path = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxFilePickerCtrl* returns = new wxFilePickerCtrl(parent, id, path, message, wildcard, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFilePickerCtrl);

    return 1;
}

#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxFilePickerCtrl_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFilePickerCtrl_constructor[1] = {{ wxLua_wxFilePickerCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxFilePickerCtrl()
static int LUACALL wxLua_wxFilePickerCtrl_constructor(lua_State *L)
{
    // call constructor
    wxFilePickerCtrl* returns = new wxFilePickerCtrl();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFilePickerCtrl);

    return 1;
}




#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFilePickerCtrl_constructor_overload[] =
{

#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxFilePickerCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 10, s_wxluatypeArray_wxLua_wxFilePickerCtrl_constructor1 },
#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxFilePickerCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxFilePickerCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxFilePickerCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))

void wxLua_wxFilePickerCtrl_delete_function(void** p)
{
    wxFilePickerCtrl* o = (wxFilePickerCtrl*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFilePickerCtrl_methods[] = {
#if ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFilePickerCtrl_Create, 1, NULL },
#endif // ((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect)

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))
    { "wxFilePickerCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFilePickerCtrl_constructor_overload, s_wxluafunc_wxLua_wxFilePickerCtrl_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL )))

    { 0, 0, 0, 0 },
};

int wxFilePickerCtrl_methodCount = sizeof(wxFilePickerCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxDirPickerCtrl && (wxUSE_FILEPICKERCTRL || wxUSE_DIRPICKERCTRL ))


#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)
// ---------------------------------------------------------------------------
// Bind class wxFontPickerCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFontPickerCtrl'
int wxluatype_wxFontPickerCtrl = WXLUA_TUNKNOWN;

#if ((((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontPickerCtrl_Create[] = { &wxluatype_wxFontPickerCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxFont, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFontPickerCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontPickerCtrl_Create[1] = {{ wxLua_wxFontPickerCtrl_Create, WXLUAMETHOD_METHOD, 3, 9, s_wxluatypeArray_wxLua_wxFontPickerCtrl_Create }};
//     bool Create(wxWindow *parent, wxWindowID id, const wxFont& initial = wxNullFont, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxFNTP_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxFontPickerCtrl")
static int LUACALL wxLua_wxFontPickerCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxFontPickerCtrl"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxFontPickerCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxFNTP_DEFAULT_STYLE
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxFNTP_DEFAULT_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxFont initial = wxNullFont
    const wxFont * initial = (argCount >= 4 ? (const wxFont *)wxluaT_getuserdatatype(L, 4, wxluatype_wxFont) : &wxNullFont);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxFontPickerCtrl * self = (wxFontPickerCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontPickerCtrl);
    // call Create
    bool returns = (self->Create(parent, id, *initial, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontPickerCtrl_GetMaxPointSize[] = { &wxluatype_wxFontPickerCtrl, NULL };
static int LUACALL wxLua_wxFontPickerCtrl_GetMaxPointSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontPickerCtrl_GetMaxPointSize[1] = {{ wxLua_wxFontPickerCtrl_GetMaxPointSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFontPickerCtrl_GetMaxPointSize }};
//     unsigned int GetMaxPointSize() const
static int LUACALL wxLua_wxFontPickerCtrl_GetMaxPointSize(lua_State *L)
{
    // get this
    wxFontPickerCtrl * self = (wxFontPickerCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontPickerCtrl);
    // call GetMaxPointSize
    unsigned int returns = (self->GetMaxPointSize());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontPickerCtrl_GetSelectedFont[] = { &wxluatype_wxFontPickerCtrl, NULL };
static int LUACALL wxLua_wxFontPickerCtrl_GetSelectedFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontPickerCtrl_GetSelectedFont[1] = {{ wxLua_wxFontPickerCtrl_GetSelectedFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFontPickerCtrl_GetSelectedFont }};
//     wxFont GetSelectedFont() const
static int LUACALL wxLua_wxFontPickerCtrl_GetSelectedFont(lua_State *L)
{
    // get this
    wxFontPickerCtrl * self = (wxFontPickerCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontPickerCtrl);
    // call GetSelectedFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetSelectedFont());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxFont);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontPickerCtrl_SetMaxPointSize[] = { &wxluatype_wxFontPickerCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxFontPickerCtrl_SetMaxPointSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontPickerCtrl_SetMaxPointSize[1] = {{ wxLua_wxFontPickerCtrl_SetMaxPointSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFontPickerCtrl_SetMaxPointSize }};
//     void SetMaxPointSize(unsigned int max)
static int LUACALL wxLua_wxFontPickerCtrl_SetMaxPointSize(lua_State *L)
{
    // unsigned int max
    unsigned int max = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxFontPickerCtrl * self = (wxFontPickerCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontPickerCtrl);
    // call SetMaxPointSize
    self->SetMaxPointSize(max);

    return 0;
}


#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontPickerCtrl_SetSelectedFont[] = { &wxluatype_wxFontPickerCtrl, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFontPickerCtrl_SetSelectedFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontPickerCtrl_SetSelectedFont[1] = {{ wxLua_wxFontPickerCtrl_SetSelectedFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFontPickerCtrl_SetSelectedFont }};
//     virtual void SetSelectedFont(const wxFont &f)
static int LUACALL wxLua_wxFontPickerCtrl_SetSelectedFont(lua_State *L)
{
    // const wxFont f
    const wxFont * f = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxFontPickerCtrl * self = (wxFontPickerCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontPickerCtrl);
    // call SetSelectedFont
    self->SetSelectedFont(*f);

    return 0;
}

#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)

#if ((((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontPickerCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxFont, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxFontPickerCtrl_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontPickerCtrl_constructor1[1] = {{ wxLua_wxFontPickerCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 8, s_wxluatypeArray_wxLua_wxFontPickerCtrl_constructor1 }};
//     wxFontPickerCtrl(wxWindow *parent, wxWindowID id, const wxFont& initial = wxNullFont, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxFNTP_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxFontPickerCtrl")
static int LUACALL wxLua_wxFontPickerCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxFontPickerCtrl"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxFontPickerCtrl")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxFNTP_DEFAULT_STYLE
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxFNTP_DEFAULT_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxFont initial = wxNullFont
    const wxFont * initial = (argCount >= 3 ? (const wxFont *)wxluaT_getuserdatatype(L, 3, wxluatype_wxFont) : &wxNullFont);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxFontPickerCtrl* returns = new wxFontPickerCtrl(parent, id, *initial, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFontPickerCtrl);

    return 1;
}

#endif // ((((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxFontPickerCtrl_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontPickerCtrl_constructor[1] = {{ wxLua_wxFontPickerCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxFontPickerCtrl()
static int LUACALL wxLua_wxFontPickerCtrl_constructor(lua_State *L)
{
    // call constructor
    wxFontPickerCtrl* returns = new wxFontPickerCtrl();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFontPickerCtrl);

    return 1;
}




#if (((((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontPickerCtrl_constructor_overload[] =
{

#if ((((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxFontPickerCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 8, s_wxluatypeArray_wxLua_wxFontPickerCtrl_constructor1 },
#endif // ((((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxFontPickerCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxFontPickerCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxFontPickerCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL))

void wxLua_wxFontPickerCtrl_delete_function(void** p)
{
    wxFontPickerCtrl* o = (wxFontPickerCtrl*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFontPickerCtrl_methods[] = {
#if ((((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontPickerCtrl_Create, 1, NULL },
#endif // ((((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect)

    { "GetMaxPointSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontPickerCtrl_GetMaxPointSize, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)
    { "GetSelectedFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontPickerCtrl_GetSelectedFont, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)

    { "SetMaxPointSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontPickerCtrl_SetMaxPointSize, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)
    { "SetSelectedFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontPickerCtrl_SetSelectedFont, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)

#if (((((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL))
    { "wxFontPickerCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFontPickerCtrl_constructor_overload, s_wxluafunc_wxLua_wxFontPickerCtrl_constructor_overload_count, 0 },
#endif // (((((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)) && (wxLUA_USE_wxPointSizeRect))||((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL))

    { 0, 0, 0, 0 },
};

int wxFontPickerCtrl_methodCount = sizeof(wxFontPickerCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)


#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)
// ---------------------------------------------------------------------------
// Bind class wxFontPickerEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxFontPickerEvent'
int wxluatype_wxFontPickerEvent = WXLUA_TUNKNOWN;

#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontPickerEvent_GetFont[] = { &wxluatype_wxFontPickerEvent, NULL };
static int LUACALL wxLua_wxFontPickerEvent_GetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontPickerEvent_GetFont[1] = {{ wxLua_wxFontPickerEvent_GetFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxFontPickerEvent_GetFont }};
//     wxFont GetFont() const
static int LUACALL wxLua_wxFontPickerEvent_GetFont(lua_State *L)
{
    // get this
    wxFontPickerEvent * self = (wxFontPickerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontPickerEvent);
    // call GetFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetFont());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxFont);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontPickerEvent_SetFont[] = { &wxluatype_wxFontPickerEvent, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFontPickerEvent_SetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontPickerEvent_SetFont[1] = {{ wxLua_wxFontPickerEvent_SetFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxFontPickerEvent_SetFont }};
//     void SetFont(const wxFont &c)
static int LUACALL wxLua_wxFontPickerEvent_SetFont(lua_State *L)
{
    // const wxFont c
    const wxFont * c = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxFontPickerEvent * self = (wxFontPickerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFontPickerEvent);
    // call SetFont
    self->SetFont(*c);

    return 0;
}

#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxFontPickerEvent_delete[] = { &wxluatype_wxFontPickerEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontPickerEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxFontPickerEvent_delete }};


#if (((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxObject)
static wxLuaArgType s_wxluatypeArray_wxLua_wxFontPickerEvent_constructor[] = { &wxluatype_wxObject, &wxluatype_TNUMBER, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxFontPickerEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxFontPickerEvent_constructor[1] = {{ wxLua_wxFontPickerEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxFontPickerEvent_constructor }};
//     wxFontPickerEvent(wxObject *generator, int id, const wxFont &f)
static int LUACALL wxLua_wxFontPickerEvent_constructor(lua_State *L)
{
    // const wxFont f
    const wxFont * f = (const wxFont *)wxluaT_getuserdatatype(L, 3, wxluatype_wxFont);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // wxObject generator
    wxObject * generator = (wxObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxObject);
    // call constructor
    wxFontPickerEvent* returns = new wxFontPickerEvent(generator, id, *f);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxFontPickerEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFontPickerEvent);

    return 1;
}

#endif // (((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxObject)



void wxLua_wxFontPickerEvent_delete_function(void** p)
{
    wxFontPickerEvent* o = (wxFontPickerEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxFontPickerEvent_methods[] = {
#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)
    { "GetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontPickerEvent_GetFont, 1, NULL },
    { "SetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxFontPickerEvent_SetFont, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxFontPickerEvent_delete, 1, NULL },

#if (((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxObject)
    { "wxFontPickerEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxFontPickerEvent_constructor, 1, NULL },
#endif // (((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxObject)

    { 0, 0, 0, 0 },
};

int wxFontPickerEvent_methodCount = sizeof(wxFontPickerEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxPicker) && (wxLUA_USE_wxFontPickerCtrl && wxUSE_FONTPICKERCTRL)

