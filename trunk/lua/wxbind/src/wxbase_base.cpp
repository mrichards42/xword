// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxbase_base.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxbase_bind.h"
#ifdef Above
    #undef Above
#endif
#ifdef Below
    #undef Below
#endif



#if wxLUA_USE_wxSystemOptions
// ---------------------------------------------------------------------------
// Bind class wxSystemOptions
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSystemOptions'
int wxluatype_wxSystemOptions = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSystemOptions_GetOption[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSystemOptions_GetOption(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSystemOptions_GetOption[1] = {{ wxLua_wxSystemOptions_GetOption, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxSystemOptions_GetOption }};
//     static wxString GetOption(const wxString& name) const
static int LUACALL wxLua_wxSystemOptions_GetOption(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call GetOption
    wxString returns = (wxSystemOptions::GetOption(name));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSystemOptions_GetOptionInt[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSystemOptions_GetOptionInt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSystemOptions_GetOptionInt[1] = {{ wxLua_wxSystemOptions_GetOptionInt, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxSystemOptions_GetOptionInt }};
//     static int GetOptionInt(const wxString& name) const
static int LUACALL wxLua_wxSystemOptions_GetOptionInt(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call GetOptionInt
    int returns = (wxSystemOptions::GetOptionInt(name));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSystemOptions_HasOption[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSystemOptions_HasOption(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSystemOptions_HasOption[1] = {{ wxLua_wxSystemOptions_HasOption, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxSystemOptions_HasOption }};
//     static bool HasOption(const wxString& name) const
static int LUACALL wxLua_wxSystemOptions_HasOption(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call HasOption
    bool returns = (wxSystemOptions::HasOption(name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSystemOptions_IsFalse[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSystemOptions_IsFalse(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSystemOptions_IsFalse[1] = {{ wxLua_wxSystemOptions_IsFalse, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxSystemOptions_IsFalse }};
//     static bool IsFalse(const wxString& name) const
static int LUACALL wxLua_wxSystemOptions_IsFalse(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call IsFalse
    bool returns = (wxSystemOptions::IsFalse(name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxSystemOptions) && (wxUSE_SYSTEM_OPTIONS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSystemOptions_SetOption1[] = { &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSystemOptions_SetOption1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSystemOptions_SetOption1[1] = {{ wxLua_wxSystemOptions_SetOption1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxSystemOptions_SetOption1 }};
//         static void SetOption(const wxString& name, int value)
static int LUACALL wxLua_wxSystemOptions_SetOption1(lua_State *L)
{
    // int value
    int value = (int)wxlua_getnumbertype(L, 2);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call SetOption
    wxSystemOptions::SetOption(name, value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSystemOptions_SetOption[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSystemOptions_SetOption(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSystemOptions_SetOption[1] = {{ wxLua_wxSystemOptions_SetOption, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxSystemOptions_SetOption }};
//         static void SetOption(const wxString& name, const wxString& value)
static int LUACALL wxLua_wxSystemOptions_SetOption(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 2);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call SetOption
    wxSystemOptions::SetOption(name, value);

    return 0;
}

#endif // (wxLUA_USE_wxSystemOptions) && (wxUSE_SYSTEM_OPTIONS)



#if ((wxLUA_USE_wxSystemOptions) && (wxUSE_SYSTEM_OPTIONS))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSystemOptions_SetOption_overload[] =
{

#if (wxLUA_USE_wxSystemOptions) && (wxUSE_SYSTEM_OPTIONS)
    { wxLua_wxSystemOptions_SetOption1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxSystemOptions_SetOption1 },
#endif // (wxLUA_USE_wxSystemOptions) && (wxUSE_SYSTEM_OPTIONS)

#if (wxLUA_USE_wxSystemOptions) && (wxUSE_SYSTEM_OPTIONS)
    { wxLua_wxSystemOptions_SetOption, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxSystemOptions_SetOption },
#endif // (wxLUA_USE_wxSystemOptions) && (wxUSE_SYSTEM_OPTIONS)
};
static int s_wxluafunc_wxLua_wxSystemOptions_SetOption_overload_count = sizeof(s_wxluafunc_wxLua_wxSystemOptions_SetOption_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxSystemOptions) && (wxUSE_SYSTEM_OPTIONS))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSystemOptions_methods[] = {
    { "GetOption", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSystemOptions_GetOption, 1, NULL },
    { "GetOptionInt", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSystemOptions_GetOptionInt, 1, NULL },
    { "HasOption", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSystemOptions_HasOption, 1, NULL },
    { "IsFalse", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSystemOptions_IsFalse, 1, NULL },

#if ((wxLUA_USE_wxSystemOptions) && (wxUSE_SYSTEM_OPTIONS))
    { "SetOption", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSystemOptions_SetOption_overload, s_wxluafunc_wxLua_wxSystemOptions_SetOption_overload_count, 0 },
#endif // ((wxLUA_USE_wxSystemOptions) && (wxUSE_SYSTEM_OPTIONS))

    { 0, 0, 0, 0 },
};

int wxSystemOptions_methodCount = sizeof(wxSystemOptions_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSystemOptions

// ---------------------------------------------------------------------------
// Bind class wxPlatformInfo
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxPlatformInfo'
int wxluatype_wxPlatformInfo = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_CheckOSVersion[] = { &wxluatype_wxPlatformInfo, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPlatformInfo_CheckOSVersion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_CheckOSVersion[1] = {{ wxLua_wxPlatformInfo_CheckOSVersion, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxPlatformInfo_CheckOSVersion }};
//     bool CheckOSVersion(int major, int minor) const
static int LUACALL wxLua_wxPlatformInfo_CheckOSVersion(lua_State *L)
{
    // int minor
    int minor = (int)wxlua_getnumbertype(L, 3);
    // int major
    int major = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call CheckOSVersion
    bool returns = (self->CheckOSVersion(major, minor));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_CheckToolkitVersion[] = { &wxluatype_wxPlatformInfo, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPlatformInfo_CheckToolkitVersion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_CheckToolkitVersion[1] = {{ wxLua_wxPlatformInfo_CheckToolkitVersion, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxPlatformInfo_CheckToolkitVersion }};
//     bool CheckToolkitVersion(int major, int minor) const
static int LUACALL wxLua_wxPlatformInfo_CheckToolkitVersion(lua_State *L)
{
    // int minor
    int minor = (int)wxlua_getnumbertype(L, 3);
    // int major
    int major = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call CheckToolkitVersion
    bool returns = (self->CheckToolkitVersion(major, minor));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static int LUACALL wxLua_wxPlatformInfo_Get(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_Get[1] = {{ wxLua_wxPlatformInfo_Get, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static const wxPlatformInfo& Get()
static int LUACALL wxLua_wxPlatformInfo_Get(lua_State *L)
{
    // call Get
    const wxPlatformInfo* returns = &wxPlatformInfo::Get();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPlatformInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetArch[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetArch(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetArch[1] = {{ wxLua_wxPlatformInfo_GetArch, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetArch }};
//     static wxArchitecture GetArch(const wxString &arch);
static int LUACALL wxLua_wxPlatformInfo_GetArch(lua_State *L)
{
    // const wxString arch
    const wxString arch = wxlua_getwxStringtype(L, 1);
    // call GetArch
    wxArchitecture returns = (wxPlatformInfo::GetArch(arch));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetArchName[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetArchName(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetArchName[1] = {{ wxLua_wxPlatformInfo_GetArchName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetArchName }};
//     static wxString GetArchName(wxArchitecture arch);
static int LUACALL wxLua_wxPlatformInfo_GetArchName(lua_State *L)
{
    // wxArchitecture arch
    wxArchitecture arch = (wxArchitecture)wxlua_getenumtype(L, 1);
    // call GetArchName
    wxString returns = (wxPlatformInfo::GetArchName(arch));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetArchName1[] = { &wxluatype_wxPlatformInfo, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetArchName1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetArchName1[1] = {{ wxLua_wxPlatformInfo_GetArchName1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetArchName1 }};
//     wxString GetArchName() const
static int LUACALL wxLua_wxPlatformInfo_GetArchName1(lua_State *L)
{
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call GetArchName
    wxString returns = (self->GetArchName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetArchitecture[] = { &wxluatype_wxPlatformInfo, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetArchitecture(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetArchitecture[1] = {{ wxLua_wxPlatformInfo_GetArchitecture, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetArchitecture }};
//     wxArchitecture GetArchitecture() const
static int LUACALL wxLua_wxPlatformInfo_GetArchitecture(lua_State *L)
{
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call GetArchitecture
    wxArchitecture returns = (self->GetArchitecture());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetEndianness[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetEndianness(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetEndianness[1] = {{ wxLua_wxPlatformInfo_GetEndianness, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetEndianness }};
//     static wxEndianness GetEndianness(const wxString &end);
static int LUACALL wxLua_wxPlatformInfo_GetEndianness(lua_State *L)
{
    // const wxString end
    const wxString end = wxlua_getwxStringtype(L, 1);
    // call GetEndianness
    wxEndianness returns = (wxPlatformInfo::GetEndianness(end));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetEndianness1[] = { &wxluatype_wxPlatformInfo, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetEndianness1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetEndianness1[1] = {{ wxLua_wxPlatformInfo_GetEndianness1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetEndianness1 }};
//     wxEndianness GetEndianness() const
static int LUACALL wxLua_wxPlatformInfo_GetEndianness1(lua_State *L)
{
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call GetEndianness
    wxEndianness returns = (self->GetEndianness());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetEndiannessName[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetEndiannessName(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetEndiannessName[1] = {{ wxLua_wxPlatformInfo_GetEndiannessName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetEndiannessName }};
//     static wxString GetEndiannessName(wxEndianness end);
static int LUACALL wxLua_wxPlatformInfo_GetEndiannessName(lua_State *L)
{
    // wxEndianness end
    wxEndianness end = (wxEndianness)wxlua_getenumtype(L, 1);
    // call GetEndiannessName
    wxString returns = (wxPlatformInfo::GetEndiannessName(end));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetEndiannessName1[] = { &wxluatype_wxPlatformInfo, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetEndiannessName1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetEndiannessName1[1] = {{ wxLua_wxPlatformInfo_GetEndiannessName1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetEndiannessName1 }};
//     wxString GetEndiannessName() const
static int LUACALL wxLua_wxPlatformInfo_GetEndiannessName1(lua_State *L)
{
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call GetEndiannessName
    wxString returns = (self->GetEndiannessName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetOSMajorVersion[] = { &wxluatype_wxPlatformInfo, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetOSMajorVersion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetOSMajorVersion[1] = {{ wxLua_wxPlatformInfo_GetOSMajorVersion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetOSMajorVersion }};
//     int GetOSMajorVersion() const
static int LUACALL wxLua_wxPlatformInfo_GetOSMajorVersion(lua_State *L)
{
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call GetOSMajorVersion
    int returns = (self->GetOSMajorVersion());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetOSMinorVersion[] = { &wxluatype_wxPlatformInfo, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetOSMinorVersion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetOSMinorVersion[1] = {{ wxLua_wxPlatformInfo_GetOSMinorVersion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetOSMinorVersion }};
//     int GetOSMinorVersion() const
static int LUACALL wxLua_wxPlatformInfo_GetOSMinorVersion(lua_State *L)
{
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call GetOSMinorVersion
    int returns = (self->GetOSMinorVersion());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemFamilyName[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetOperatingSystemFamilyName(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemFamilyName[1] = {{ wxLua_wxPlatformInfo_GetOperatingSystemFamilyName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemFamilyName }};
//     static wxString GetOperatingSystemFamilyName(wxOperatingSystemId os);
static int LUACALL wxLua_wxPlatformInfo_GetOperatingSystemFamilyName(lua_State *L)
{
    // wxOperatingSystemId os
    wxOperatingSystemId os = (wxOperatingSystemId)wxlua_getenumtype(L, 1);
    // call GetOperatingSystemFamilyName
    wxString returns = (wxPlatformInfo::GetOperatingSystemFamilyName(os));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemFamilyName1[] = { &wxluatype_wxPlatformInfo, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetOperatingSystemFamilyName1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemFamilyName1[1] = {{ wxLua_wxPlatformInfo_GetOperatingSystemFamilyName1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemFamilyName1 }};
//     wxString GetOperatingSystemFamilyName() const
static int LUACALL wxLua_wxPlatformInfo_GetOperatingSystemFamilyName1(lua_State *L)
{
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call GetOperatingSystemFamilyName
    wxString returns = (self->GetOperatingSystemFamilyName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemId[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetOperatingSystemId(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemId[1] = {{ wxLua_wxPlatformInfo_GetOperatingSystemId, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemId }};
//     static wxOperatingSystemId GetOperatingSystemId(const wxString &name);
static int LUACALL wxLua_wxPlatformInfo_GetOperatingSystemId(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call GetOperatingSystemId
    wxOperatingSystemId returns = (wxPlatformInfo::GetOperatingSystemId(name));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemId1[] = { &wxluatype_wxPlatformInfo, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetOperatingSystemId1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemId1[1] = {{ wxLua_wxPlatformInfo_GetOperatingSystemId1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemId1 }};
//     wxOperatingSystemId GetOperatingSystemId() const
static int LUACALL wxLua_wxPlatformInfo_GetOperatingSystemId1(lua_State *L)
{
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call GetOperatingSystemId
    wxOperatingSystemId returns = (self->GetOperatingSystemId());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemIdName[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetOperatingSystemIdName(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemIdName[1] = {{ wxLua_wxPlatformInfo_GetOperatingSystemIdName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemIdName }};
//     static wxString GetOperatingSystemIdName(wxOperatingSystemId os);
static int LUACALL wxLua_wxPlatformInfo_GetOperatingSystemIdName(lua_State *L)
{
    // wxOperatingSystemId os
    wxOperatingSystemId os = (wxOperatingSystemId)wxlua_getenumtype(L, 1);
    // call GetOperatingSystemIdName
    wxString returns = (wxPlatformInfo::GetOperatingSystemIdName(os));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemIdName1[] = { &wxluatype_wxPlatformInfo, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetOperatingSystemIdName1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemIdName1[1] = {{ wxLua_wxPlatformInfo_GetOperatingSystemIdName1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemIdName1 }};
//     wxString GetOperatingSystemIdName() const
static int LUACALL wxLua_wxPlatformInfo_GetOperatingSystemIdName1(lua_State *L)
{
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call GetOperatingSystemIdName
    wxString returns = (self->GetOperatingSystemIdName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortId[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetPortId(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetPortId[1] = {{ wxLua_wxPlatformInfo_GetPortId, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortId }};
//     static wxPortId GetPortId(const wxString &portname);
static int LUACALL wxLua_wxPlatformInfo_GetPortId(lua_State *L)
{
    // const wxString portname
    const wxString portname = wxlua_getwxStringtype(L, 1);
    // call GetPortId
    wxPortId returns = (wxPlatformInfo::GetPortId(portname));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortId1[] = { &wxluatype_wxPlatformInfo, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetPortId1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetPortId1[1] = {{ wxLua_wxPlatformInfo_GetPortId1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortId1 }};
//     wxPortId GetPortId() const
static int LUACALL wxLua_wxPlatformInfo_GetPortId1(lua_State *L)
{
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call GetPortId
    wxPortId returns = (self->GetPortId());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortIdName[] = { &wxluatype_TINTEGER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetPortIdName(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetPortIdName[1] = {{ wxLua_wxPlatformInfo_GetPortIdName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortIdName }};
//     static wxString GetPortIdName(wxPortId port, bool usingUniversal);
static int LUACALL wxLua_wxPlatformInfo_GetPortIdName(lua_State *L)
{
    // bool usingUniversal
    bool usingUniversal = wxlua_getbooleantype(L, 2);
    // wxPortId port
    wxPortId port = (wxPortId)wxlua_getenumtype(L, 1);
    // call GetPortIdName
    wxString returns = (wxPlatformInfo::GetPortIdName(port, usingUniversal));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortIdName1[] = { &wxluatype_wxPlatformInfo, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetPortIdName1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetPortIdName1[1] = {{ wxLua_wxPlatformInfo_GetPortIdName1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortIdName1 }};
//     wxString GetPortIdName() const
static int LUACALL wxLua_wxPlatformInfo_GetPortIdName1(lua_State *L)
{
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call GetPortIdName
    wxString returns = (self->GetPortIdName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortIdShortName[] = { &wxluatype_TINTEGER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetPortIdShortName(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetPortIdShortName[1] = {{ wxLua_wxPlatformInfo_GetPortIdShortName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortIdShortName }};
//     static wxString GetPortIdShortName(wxPortId port, bool usingUniversal);
static int LUACALL wxLua_wxPlatformInfo_GetPortIdShortName(lua_State *L)
{
    // bool usingUniversal
    bool usingUniversal = wxlua_getbooleantype(L, 2);
    // wxPortId port
    wxPortId port = (wxPortId)wxlua_getenumtype(L, 1);
    // call GetPortIdShortName
    wxString returns = (wxPlatformInfo::GetPortIdShortName(port, usingUniversal));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortIdShortName1[] = { &wxluatype_wxPlatformInfo, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetPortIdShortName1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetPortIdShortName1[1] = {{ wxLua_wxPlatformInfo_GetPortIdShortName1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortIdShortName1 }};
//     wxString GetPortIdShortName() const
static int LUACALL wxLua_wxPlatformInfo_GetPortIdShortName1(lua_State *L)
{
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call GetPortIdShortName
    wxString returns = (self->GetPortIdShortName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetToolkitMajorVersion[] = { &wxluatype_wxPlatformInfo, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetToolkitMajorVersion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetToolkitMajorVersion[1] = {{ wxLua_wxPlatformInfo_GetToolkitMajorVersion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetToolkitMajorVersion }};
//     int GetToolkitMajorVersion() const
static int LUACALL wxLua_wxPlatformInfo_GetToolkitMajorVersion(lua_State *L)
{
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call GetToolkitMajorVersion
    int returns = (self->GetToolkitMajorVersion());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_GetToolkitMinorVersion[] = { &wxluatype_wxPlatformInfo, NULL };
static int LUACALL wxLua_wxPlatformInfo_GetToolkitMinorVersion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetToolkitMinorVersion[1] = {{ wxLua_wxPlatformInfo_GetToolkitMinorVersion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetToolkitMinorVersion }};
//     int GetToolkitMinorVersion() const
static int LUACALL wxLua_wxPlatformInfo_GetToolkitMinorVersion(lua_State *L)
{
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call GetToolkitMinorVersion
    int returns = (self->GetToolkitMinorVersion());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_IsOk[] = { &wxluatype_wxPlatformInfo, NULL };
static int LUACALL wxLua_wxPlatformInfo_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_IsOk[1] = {{ wxLua_wxPlatformInfo_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_IsOk }};
//     bool IsOk() const
static int LUACALL wxLua_wxPlatformInfo_IsOk(lua_State *L)
{
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_IsUsingUniversalWidgets[] = { &wxluatype_wxPlatformInfo, NULL };
static int LUACALL wxLua_wxPlatformInfo_IsUsingUniversalWidgets(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_IsUsingUniversalWidgets[1] = {{ wxLua_wxPlatformInfo_IsUsingUniversalWidgets, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_IsUsingUniversalWidgets }};
//     bool IsUsingUniversalWidgets() const
static int LUACALL wxLua_wxPlatformInfo_IsUsingUniversalWidgets(lua_State *L)
{
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call IsUsingUniversalWidgets
    bool returns = (self->IsUsingUniversalWidgets());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_SetArchitecture[] = { &wxluatype_wxPlatformInfo, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxPlatformInfo_SetArchitecture(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_SetArchitecture[1] = {{ wxLua_wxPlatformInfo_SetArchitecture, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPlatformInfo_SetArchitecture }};
//     void SetArchitecture(wxArchitecture n)
static int LUACALL wxLua_wxPlatformInfo_SetArchitecture(lua_State *L)
{
    // wxArchitecture n
    wxArchitecture n = (wxArchitecture)wxlua_getenumtype(L, 2);
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call SetArchitecture
    self->SetArchitecture(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_SetEndianness[] = { &wxluatype_wxPlatformInfo, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxPlatformInfo_SetEndianness(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_SetEndianness[1] = {{ wxLua_wxPlatformInfo_SetEndianness, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPlatformInfo_SetEndianness }};
//     void SetEndianness(wxEndianness n)
static int LUACALL wxLua_wxPlatformInfo_SetEndianness(lua_State *L)
{
    // wxEndianness n
    wxEndianness n = (wxEndianness)wxlua_getenumtype(L, 2);
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call SetEndianness
    self->SetEndianness(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_SetOSVersion[] = { &wxluatype_wxPlatformInfo, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPlatformInfo_SetOSVersion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_SetOSVersion[1] = {{ wxLua_wxPlatformInfo_SetOSVersion, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxPlatformInfo_SetOSVersion }};
//     void SetOSVersion(int major, int minor)
static int LUACALL wxLua_wxPlatformInfo_SetOSVersion(lua_State *L)
{
    // int minor
    int minor = (int)wxlua_getnumbertype(L, 3);
    // int major
    int major = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call SetOSVersion
    self->SetOSVersion(major, minor);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_SetOperatingSystemId[] = { &wxluatype_wxPlatformInfo, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxPlatformInfo_SetOperatingSystemId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_SetOperatingSystemId[1] = {{ wxLua_wxPlatformInfo_SetOperatingSystemId, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPlatformInfo_SetOperatingSystemId }};
//     void SetOperatingSystemId(wxOperatingSystemId n)
static int LUACALL wxLua_wxPlatformInfo_SetOperatingSystemId(lua_State *L)
{
    // wxOperatingSystemId n
    wxOperatingSystemId n = (wxOperatingSystemId)wxlua_getenumtype(L, 2);
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call SetOperatingSystemId
    self->SetOperatingSystemId(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_SetPortId[] = { &wxluatype_wxPlatformInfo, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxPlatformInfo_SetPortId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_SetPortId[1] = {{ wxLua_wxPlatformInfo_SetPortId, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxPlatformInfo_SetPortId }};
//     void SetPortId(wxPortId n)
static int LUACALL wxLua_wxPlatformInfo_SetPortId(lua_State *L)
{
    // wxPortId n
    wxPortId n = (wxPortId)wxlua_getenumtype(L, 2);
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call SetPortId
    self->SetPortId(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxPlatformInfo_SetToolkitVersion[] = { &wxluatype_wxPlatformInfo, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxPlatformInfo_SetToolkitVersion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_SetToolkitVersion[1] = {{ wxLua_wxPlatformInfo_SetToolkitVersion, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxPlatformInfo_SetToolkitVersion }};
//     void SetToolkitVersion(int major, int minor)
static int LUACALL wxLua_wxPlatformInfo_SetToolkitVersion(lua_State *L)
{
    // int minor
    int minor = (int)wxlua_getnumbertype(L, 3);
    // int major
    int major = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxPlatformInfo * self = (wxPlatformInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxPlatformInfo);
    // call SetToolkitVersion
    self->SetToolkitVersion(major, minor);

    return 0;
}



// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetArchName_overload[] =
{
    { wxLua_wxPlatformInfo_GetArchName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetArchName },
    { wxLua_wxPlatformInfo_GetArchName1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetArchName1 },
};
static int s_wxluafunc_wxLua_wxPlatformInfo_GetArchName_overload_count = sizeof(s_wxluafunc_wxLua_wxPlatformInfo_GetArchName_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetEndianness_overload[] =
{
    { wxLua_wxPlatformInfo_GetEndianness, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetEndianness },
    { wxLua_wxPlatformInfo_GetEndianness1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetEndianness1 },
};
static int s_wxluafunc_wxLua_wxPlatformInfo_GetEndianness_overload_count = sizeof(s_wxluafunc_wxLua_wxPlatformInfo_GetEndianness_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetEndiannessName_overload[] =
{
    { wxLua_wxPlatformInfo_GetEndiannessName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetEndiannessName },
    { wxLua_wxPlatformInfo_GetEndiannessName1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetEndiannessName1 },
};
static int s_wxluafunc_wxLua_wxPlatformInfo_GetEndiannessName_overload_count = sizeof(s_wxluafunc_wxLua_wxPlatformInfo_GetEndiannessName_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemFamilyName_overload[] =
{
    { wxLua_wxPlatformInfo_GetOperatingSystemFamilyName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemFamilyName },
    { wxLua_wxPlatformInfo_GetOperatingSystemFamilyName1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemFamilyName1 },
};
static int s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemFamilyName_overload_count = sizeof(s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemFamilyName_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemId_overload[] =
{
    { wxLua_wxPlatformInfo_GetOperatingSystemId, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemId },
    { wxLua_wxPlatformInfo_GetOperatingSystemId1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemId1 },
};
static int s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemId_overload_count = sizeof(s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemId_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemIdName_overload[] =
{
    { wxLua_wxPlatformInfo_GetOperatingSystemIdName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemIdName },
    { wxLua_wxPlatformInfo_GetOperatingSystemIdName1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetOperatingSystemIdName1 },
};
static int s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemIdName_overload_count = sizeof(s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemIdName_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetPortId_overload[] =
{
    { wxLua_wxPlatformInfo_GetPortId, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortId },
    { wxLua_wxPlatformInfo_GetPortId1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortId1 },
};
static int s_wxluafunc_wxLua_wxPlatformInfo_GetPortId_overload_count = sizeof(s_wxluafunc_wxLua_wxPlatformInfo_GetPortId_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetPortIdName_overload[] =
{
    { wxLua_wxPlatformInfo_GetPortIdName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortIdName },
    { wxLua_wxPlatformInfo_GetPortIdName1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortIdName1 },
};
static int s_wxluafunc_wxLua_wxPlatformInfo_GetPortIdName_overload_count = sizeof(s_wxluafunc_wxLua_wxPlatformInfo_GetPortIdName_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxPlatformInfo_GetPortIdShortName_overload[] =
{
    { wxLua_wxPlatformInfo_GetPortIdShortName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortIdShortName },
    { wxLua_wxPlatformInfo_GetPortIdShortName1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxPlatformInfo_GetPortIdShortName1 },
};
static int s_wxluafunc_wxLua_wxPlatformInfo_GetPortIdShortName_overload_count = sizeof(s_wxluafunc_wxLua_wxPlatformInfo_GetPortIdShortName_overload)/sizeof(wxLuaBindCFunc);


// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxPlatformInfo_methods[] = {
    { "CheckOSVersion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPlatformInfo_CheckOSVersion, 1, NULL },
    { "CheckToolkitVersion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPlatformInfo_CheckToolkitVersion, 1, NULL },
    { "Get", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxPlatformInfo_Get, 1, NULL },
    { "GetArch", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxPlatformInfo_GetArch, 1, NULL },

    { "GetArchName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxPlatformInfo_GetArchName_overload, s_wxluafunc_wxLua_wxPlatformInfo_GetArchName_overload_count, 0 },

    { "GetArchitecture", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPlatformInfo_GetArchitecture, 1, NULL },

    { "GetEndianness", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxPlatformInfo_GetEndianness_overload, s_wxluafunc_wxLua_wxPlatformInfo_GetEndianness_overload_count, 0 },
    { "GetEndiannessName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxPlatformInfo_GetEndiannessName_overload, s_wxluafunc_wxLua_wxPlatformInfo_GetEndiannessName_overload_count, 0 },

    { "GetOSMajorVersion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPlatformInfo_GetOSMajorVersion, 1, NULL },
    { "GetOSMinorVersion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPlatformInfo_GetOSMinorVersion, 1, NULL },

    { "GetOperatingSystemFamilyName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemFamilyName_overload, s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemFamilyName_overload_count, 0 },
    { "GetOperatingSystemId", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemId_overload, s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemId_overload_count, 0 },
    { "GetOperatingSystemIdName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemIdName_overload, s_wxluafunc_wxLua_wxPlatformInfo_GetOperatingSystemIdName_overload_count, 0 },
    { "GetPortId", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxPlatformInfo_GetPortId_overload, s_wxluafunc_wxLua_wxPlatformInfo_GetPortId_overload_count, 0 },
    { "GetPortIdName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxPlatformInfo_GetPortIdName_overload, s_wxluafunc_wxLua_wxPlatformInfo_GetPortIdName_overload_count, 0 },
    { "GetPortIdShortName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxPlatformInfo_GetPortIdShortName_overload, s_wxluafunc_wxLua_wxPlatformInfo_GetPortIdShortName_overload_count, 0 },

    { "GetToolkitMajorVersion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPlatformInfo_GetToolkitMajorVersion, 1, NULL },
    { "GetToolkitMinorVersion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPlatformInfo_GetToolkitMinorVersion, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPlatformInfo_IsOk, 1, NULL },
    { "IsUsingUniversalWidgets", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPlatformInfo_IsUsingUniversalWidgets, 1, NULL },
    { "SetArchitecture", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPlatformInfo_SetArchitecture, 1, NULL },
    { "SetEndianness", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPlatformInfo_SetEndianness, 1, NULL },
    { "SetOSVersion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPlatformInfo_SetOSVersion, 1, NULL },
    { "SetOperatingSystemId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPlatformInfo_SetOperatingSystemId, 1, NULL },
    { "SetPortId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPlatformInfo_SetPortId, 1, NULL },
    { "SetToolkitVersion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxPlatformInfo_SetToolkitVersion, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxPlatformInfo_methodCount = sizeof(wxPlatformInfo_methods)/sizeof(wxLuaBindMethod) - 1;



#if wxUSE_SNGLINST_CHECKER
// ---------------------------------------------------------------------------
// Bind class wxSingleInstanceChecker
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSingleInstanceChecker'
int wxluatype_wxSingleInstanceChecker = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSingleInstanceChecker_Create[] = { &wxluatype_wxSingleInstanceChecker, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSingleInstanceChecker_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSingleInstanceChecker_Create[1] = {{ wxLua_wxSingleInstanceChecker_Create, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxSingleInstanceChecker_Create }};
//     bool Create(const wxString& name, const wxString& path = "")
static int LUACALL wxLua_wxSingleInstanceChecker_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString path = ""
    const wxString path = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxSingleInstanceChecker * self = (wxSingleInstanceChecker *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSingleInstanceChecker);
    // call Create
    bool returns = (self->Create(name, path));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSingleInstanceChecker_IsAnotherRunning[] = { &wxluatype_wxSingleInstanceChecker, NULL };
static int LUACALL wxLua_wxSingleInstanceChecker_IsAnotherRunning(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSingleInstanceChecker_IsAnotherRunning[1] = {{ wxLua_wxSingleInstanceChecker_IsAnotherRunning, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSingleInstanceChecker_IsAnotherRunning }};
//     bool IsAnotherRunning() const // is another copy of this program already running?
static int LUACALL wxLua_wxSingleInstanceChecker_IsAnotherRunning(lua_State *L)
{
    // get this
    wxSingleInstanceChecker * self = (wxSingleInstanceChecker *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSingleInstanceChecker);
    // call IsAnotherRunning
    bool returns = (self->IsAnotherRunning());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSingleInstanceChecker_delete[] = { &wxluatype_wxSingleInstanceChecker, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSingleInstanceChecker_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSingleInstanceChecker_delete }};

static int LUACALL wxLua_wxSingleInstanceChecker_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSingleInstanceChecker_constructor[1] = {{ wxLua_wxSingleInstanceChecker_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxSingleInstanceChecker() // default ctor, use Create() after it
static int LUACALL wxLua_wxSingleInstanceChecker_constructor(lua_State *L)
{
    // call constructor
    wxSingleInstanceChecker* returns = new wxSingleInstanceChecker();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSingleInstanceChecker((wxSingleInstanceChecker*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSingleInstanceChecker);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSingleInstanceChecker_methods[] = {
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSingleInstanceChecker_Create, 1, NULL },
    { "IsAnotherRunning", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSingleInstanceChecker_IsAnotherRunning, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSingleInstanceChecker_delete, 1, NULL },
    { "wxSingleInstanceChecker", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSingleInstanceChecker_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxSingleInstanceChecker_methodCount = sizeof(wxSingleInstanceChecker_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_SNGLINST_CHECKER


#if wxLUA_USE_wxLog && wxUSE_LOG
// ---------------------------------------------------------------------------
// Bind class wxLog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLog'
int wxluatype_wxLog = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxLog_AddTraceMask[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLog_AddTraceMask(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_AddTraceMask[1] = {{ wxLua_wxLog_AddTraceMask, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxLog_AddTraceMask }};
//     static void AddTraceMask(const wxString& str)
static int LUACALL wxLua_wxLog_AddTraceMask(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 1);
    // call AddTraceMask
    wxLog::AddTraceMask(str);

    return 0;
}

static int LUACALL wxLua_wxLog_ClearTraceMasks(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_ClearTraceMasks[1] = {{ wxLua_wxLog_ClearTraceMasks, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void ClearTraceMasks()
static int LUACALL wxLua_wxLog_ClearTraceMasks(lua_State *L)
{
    // call ClearTraceMasks
    wxLog::ClearTraceMasks();

    return 0;
}

static int LUACALL wxLua_wxLog_DontCreateOnDemand(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_DontCreateOnDemand[1] = {{ wxLua_wxLog_DontCreateOnDemand, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void DontCreateOnDemand()
static int LUACALL wxLua_wxLog_DontCreateOnDemand(lua_State *L)
{
    // call DontCreateOnDemand
    wxLog::DontCreateOnDemand();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLog_EnableLogging[] = { &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxLog_EnableLogging(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_EnableLogging[1] = {{ wxLua_wxLog_EnableLogging, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxLog_EnableLogging }};
//     static bool EnableLogging(bool doIt = true)
static int LUACALL wxLua_wxLog_EnableLogging(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool doIt = true
    bool doIt = (argCount >= 1 ? wxlua_getbooleantype(L, 1) : true);
    // call EnableLogging
    bool returns = (wxLog::EnableLogging(doIt));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLog_Flush[] = { &wxluatype_wxLog, NULL };
static int LUACALL wxLua_wxLog_Flush(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_Flush[1] = {{ wxLua_wxLog_Flush, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLog_Flush }};
//     virtual void Flush()
static int LUACALL wxLua_wxLog_Flush(lua_State *L)
{
    // get this
    wxLog * self = (wxLog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLog);
    // call Flush
    self->Flush();

    return 0;
}

static int LUACALL wxLua_wxLog_FlushActive(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_FlushActive[1] = {{ wxLua_wxLog_FlushActive, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void FlushActive()
static int LUACALL wxLua_wxLog_FlushActive(lua_State *L)
{
    // call FlushActive
    wxLog::FlushActive();

    return 0;
}

static int LUACALL wxLua_wxLog_GetActiveTarget(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_GetActiveTarget[1] = {{ wxLua_wxLog_GetActiveTarget, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxLog *GetActiveTarget()
static int LUACALL wxLua_wxLog_GetActiveTarget(lua_State *L)
{
    // call GetActiveTarget
    wxLog* returns = (wxLog*)wxLog::GetActiveTarget();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLog);

    return 1;
}

static int LUACALL wxLua_wxLog_GetLogLevel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_GetLogLevel[1] = {{ wxLua_wxLog_GetLogLevel, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxLogLevel GetLogLevel()
static int LUACALL wxLua_wxLog_GetLogLevel(lua_State *L)
{
    // call GetLogLevel
    wxLogLevel returns = (wxLog::GetLogLevel());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxLog && wxUSE_LOG)
static int LUACALL wxLua_wxLog_GetRepetitionCounting(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_GetRepetitionCounting[1] = {{ wxLua_wxLog_GetRepetitionCounting, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     %wxchkver_2_8 static bool GetRepetitionCounting()
static int LUACALL wxLua_wxLog_GetRepetitionCounting(lua_State *L)
{
    // call GetRepetitionCounting
    bool returns = (wxLog::GetRepetitionCounting());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxLog && wxUSE_LOG)

static int LUACALL wxLua_wxLog_GetTimestamp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_GetTimestamp[1] = {{ wxLua_wxLog_GetTimestamp, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxString GetTimestamp()
static int LUACALL wxLua_wxLog_GetTimestamp(lua_State *L)
{
    // call GetTimestamp
    wxString returns = (wxLog::GetTimestamp());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static int LUACALL wxLua_wxLog_GetTraceMask(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_GetTraceMask[1] = {{ wxLua_wxLog_GetTraceMask, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxTraceMask GetTraceMask()
static int LUACALL wxLua_wxLog_GetTraceMask(lua_State *L)
{
    // call GetTraceMask
    wxTraceMask returns = (wxLog::GetTraceMask());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxLog && wxUSE_LOG) && (wxLUA_USE_wxArrayString)
static int LUACALL wxLua_wxLog_GetTraceMasks(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_GetTraceMasks[1] = {{ wxLua_wxLog_GetTraceMasks, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static const wxArrayString GetTraceMasks()
static int LUACALL wxLua_wxLog_GetTraceMasks(lua_State *L)
{
    // call GetTraceMasks
    // allocate a new object using the copy constructor
    const wxArrayString* returns = new wxArrayString(wxLog::GetTraceMasks());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxArrayString((wxArrayString*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

#endif // (wxLUA_USE_wxLog && wxUSE_LOG) && (wxLUA_USE_wxArrayString)

static int LUACALL wxLua_wxLog_GetVerbose(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_GetVerbose[1] = {{ wxLua_wxLog_GetVerbose, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static bool GetVerbose()
static int LUACALL wxLua_wxLog_GetVerbose(lua_State *L)
{
    // call GetVerbose
    bool returns = (wxLog::GetVerbose());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLog_IsAllowedTraceMask[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLog_IsAllowedTraceMask(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_IsAllowedTraceMask[1] = {{ wxLua_wxLog_IsAllowedTraceMask, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxLog_IsAllowedTraceMask }};
//     static bool IsAllowedTraceMask(const wxString& mask)
static int LUACALL wxLua_wxLog_IsAllowedTraceMask(lua_State *L)
{
    // const wxString mask
    const wxString mask = wxlua_getwxStringtype(L, 1);
    // call IsAllowedTraceMask
    bool returns = (wxLog::IsAllowedTraceMask(mask));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static int LUACALL wxLua_wxLog_IsEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_IsEnabled[1] = {{ wxLua_wxLog_IsEnabled, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static bool IsEnabled()
static int LUACALL wxLua_wxLog_IsEnabled(lua_State *L)
{
    // call IsEnabled
    bool returns = (wxLog::IsEnabled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLog_RemoveTraceMask[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLog_RemoveTraceMask(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_RemoveTraceMask[1] = {{ wxLua_wxLog_RemoveTraceMask, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxLog_RemoveTraceMask }};
//     static void RemoveTraceMask(const wxString& str)
static int LUACALL wxLua_wxLog_RemoveTraceMask(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 1);
    // call RemoveTraceMask
    wxLog::RemoveTraceMask(str);

    return 0;
}

static int LUACALL wxLua_wxLog_Resume(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_Resume[1] = {{ wxLua_wxLog_Resume, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void Resume()
static int LUACALL wxLua_wxLog_Resume(lua_State *L)
{
    // call Resume
    wxLog::Resume();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLog_SetActiveTarget[] = { &wxluatype_wxLog, NULL };
static int LUACALL wxLua_wxLog_SetActiveTarget(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_SetActiveTarget[1] = {{ wxLua_wxLog_SetActiveTarget, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxLog_SetActiveTarget }};
//     static %gc wxLog *SetActiveTarget(%ungc wxLog *pLogger)
static int LUACALL wxLua_wxLog_SetActiveTarget(lua_State *L)
{
    // wxLog pLogger
    wxLog * pLogger = (wxLog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLog);
    if (wxluaO_isgcobject(L, pLogger)) wxluaO_undeletegcobject(L, pLogger);
    // call SetActiveTarget
    wxLog* returns = (wxLog*)wxLog::SetActiveTarget(pLogger);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLog(returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLog);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLog_SetLogLevel[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxLog_SetLogLevel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_SetLogLevel[1] = {{ wxLua_wxLog_SetLogLevel, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxLog_SetLogLevel }};
//     static void SetLogLevel(wxLogLevel logLevel)
static int LUACALL wxLua_wxLog_SetLogLevel(lua_State *L)
{
    // wxLogLevel logLevel
    wxLogLevel logLevel = (wxLogLevel)wxlua_getnumbertype(L, 1);
    // call SetLogLevel
    wxLog::SetLogLevel(logLevel);

    return 0;
}


#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxLog && wxUSE_LOG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxLog_SetRepetitionCounting[] = { &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxLog_SetRepetitionCounting(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_SetRepetitionCounting[1] = {{ wxLua_wxLog_SetRepetitionCounting, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxLog_SetRepetitionCounting }};
//     %wxchkver_2_8 static void SetRepetitionCounting(bool bRepetCounting = true)
static int LUACALL wxLua_wxLog_SetRepetitionCounting(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool bRepetCounting = true
    bool bRepetCounting = (argCount >= 1 ? wxlua_getbooleantype(L, 1) : true);
    // call SetRepetitionCounting
    wxLog::SetRepetitionCounting(bRepetCounting);

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxLog && wxUSE_LOG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxLog_SetTimestamp[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLog_SetTimestamp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_SetTimestamp[1] = {{ wxLua_wxLog_SetTimestamp, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxLog_SetTimestamp }};
// %override wxLua_wxLog_SetTimestamp
//     static void SetTimestamp(const wxString& ts)
static int LUACALL wxLua_wxLog_SetTimestamp(lua_State *L)
{
    // docs say that using NULL will disable time stamping. The actual arg is "const wxChar* ts"
    if (lua_isnoneornil(L, 1))
        wxLog::SetTimestamp(NULL);
    else
    {
        // const wxString ts
        const wxString ts = wxlua_getwxStringtype(L, 1);
        // call SetTimestamp
        wxLog::SetTimestamp(ts);
    }

    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxLog_SetTraceMask[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxLog_SetTraceMask(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_SetTraceMask[1] = {{ wxLua_wxLog_SetTraceMask, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxLog_SetTraceMask }};
//     static void SetTraceMask(wxTraceMask ulMask)
static int LUACALL wxLua_wxLog_SetTraceMask(lua_State *L)
{
    // wxTraceMask ulMask
    wxTraceMask ulMask = (wxTraceMask)wxlua_getnumbertype(L, 1);
    // call SetTraceMask
    wxLog::SetTraceMask(ulMask);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLog_SetVerbose[] = { &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxLog_SetVerbose(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_SetVerbose[1] = {{ wxLua_wxLog_SetVerbose, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxLog_SetVerbose }};
//     static void SetVerbose(bool bVerbose = true)
static int LUACALL wxLua_wxLog_SetVerbose(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool bVerbose = true
    bool bVerbose = (argCount >= 1 ? wxlua_getbooleantype(L, 1) : true);
    // call SetVerbose
    wxLog::SetVerbose(bVerbose);

    return 0;
}

static int LUACALL wxLua_wxLog_Suspend(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_Suspend[1] = {{ wxLua_wxLog_Suspend, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void Suspend()
static int LUACALL wxLua_wxLog_Suspend(lua_State *L)
{
    // call Suspend
    wxLog::Suspend();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLog_delete[] = { &wxluatype_wxLog, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLog_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxLog_delete }};




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLog_methods[] = {
    { "AddTraceMask", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_AddTraceMask, 1, NULL },
    { "ClearTraceMasks", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_ClearTraceMasks, 1, NULL },
    { "DontCreateOnDemand", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_DontCreateOnDemand, 1, NULL },
    { "EnableLogging", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_EnableLogging, 1, NULL },
    { "Flush", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLog_Flush, 1, NULL },
    { "FlushActive", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_FlushActive, 1, NULL },
    { "GetActiveTarget", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_GetActiveTarget, 1, NULL },
    { "GetLogLevel", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_GetLogLevel, 1, NULL },

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxLog && wxUSE_LOG)
    { "GetRepetitionCounting", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_GetRepetitionCounting, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxLog && wxUSE_LOG)

    { "GetTimestamp", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_GetTimestamp, 1, NULL },
    { "GetTraceMask", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_GetTraceMask, 1, NULL },

#if (wxLUA_USE_wxLog && wxUSE_LOG) && (wxLUA_USE_wxArrayString)
    { "GetTraceMasks", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_GetTraceMasks, 1, NULL },
#endif // (wxLUA_USE_wxLog && wxUSE_LOG) && (wxLUA_USE_wxArrayString)

    { "GetVerbose", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_GetVerbose, 1, NULL },
    { "IsAllowedTraceMask", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_IsAllowedTraceMask, 1, NULL },
    { "IsEnabled", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_IsEnabled, 1, NULL },
    { "RemoveTraceMask", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_RemoveTraceMask, 1, NULL },
    { "Resume", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_Resume, 1, NULL },
    { "SetActiveTarget", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_SetActiveTarget, 1, NULL },
    { "SetLogLevel", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_SetLogLevel, 1, NULL },

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxLog && wxUSE_LOG)
    { "SetRepetitionCounting", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_SetRepetitionCounting, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxLog && wxUSE_LOG)

    { "SetTimestamp", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_SetTimestamp, 1, NULL },
    { "SetTraceMask", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_SetTraceMask, 1, NULL },
    { "SetVerbose", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_SetVerbose, 1, NULL },
    { "Suspend", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxLog_Suspend, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxLog_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxLog_methodCount = sizeof(wxLog_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxLog && wxUSE_LOG


#if wxLUA_USE_wxLog && wxUSE_LOG
// ---------------------------------------------------------------------------
// Bind class wxLogBuffer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLogBuffer'
int wxluatype_wxLogBuffer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxLogBuffer_GetBuffer[] = { &wxluatype_wxLogBuffer, NULL };
static int LUACALL wxLua_wxLogBuffer_GetBuffer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogBuffer_GetBuffer[1] = {{ wxLua_wxLogBuffer_GetBuffer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLogBuffer_GetBuffer }};
//     const wxString& GetBuffer() const // get the string contents with all messages logged
static int LUACALL wxLua_wxLogBuffer_GetBuffer(lua_State *L)
{
    // get this
    wxLogBuffer * self = (wxLogBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLogBuffer);
    // call GetBuffer
    wxString returns = (self->GetBuffer());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLogBuffer_delete[] = { &wxluatype_wxLogBuffer, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogBuffer_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxLogBuffer_delete }};

static int LUACALL wxLua_wxLogBuffer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogBuffer_constructor[1] = {{ wxLua_wxLogBuffer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxLogBuffer()
static int LUACALL wxLua_wxLogBuffer_constructor(lua_State *L)
{
    // call constructor
    wxLogBuffer* returns = new wxLogBuffer();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLogBuffer((wxLogBuffer*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLogBuffer);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLogBuffer_methods[] = {
    { "GetBuffer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLogBuffer_GetBuffer, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxLogBuffer_delete, 1, NULL },
    { "wxLogBuffer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLogBuffer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxLogBuffer_methodCount = sizeof(wxLogBuffer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxLog && wxUSE_LOG


#if wxLUA_USE_wxLog && wxUSE_LOG
// ---------------------------------------------------------------------------
// Bind class wxLogChain
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLogChain'
int wxluatype_wxLogChain = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxLogChain_GetOldLog[] = { &wxluatype_wxLogChain, NULL };
static int LUACALL wxLua_wxLogChain_GetOldLog(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogChain_GetOldLog[1] = {{ wxLua_wxLogChain_GetOldLog, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLogChain_GetOldLog }};
//     wxLog *GetOldLog() const
static int LUACALL wxLua_wxLogChain_GetOldLog(lua_State *L)
{
    // get this
    wxLogChain * self = (wxLogChain *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLogChain);
    // call GetOldLog
    wxLog* returns = (wxLog*)self->GetOldLog();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLog);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLogChain_IsPassingMessages[] = { &wxluatype_wxLogChain, NULL };
static int LUACALL wxLua_wxLogChain_IsPassingMessages(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogChain_IsPassingMessages[1] = {{ wxLua_wxLogChain_IsPassingMessages, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLogChain_IsPassingMessages }};
//     bool IsPassingMessages() const
static int LUACALL wxLua_wxLogChain_IsPassingMessages(lua_State *L)
{
    // get this
    wxLogChain * self = (wxLogChain *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLogChain);
    // call IsPassingMessages
    bool returns = (self->IsPassingMessages());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLogChain_PassMessages[] = { &wxluatype_wxLogChain, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxLogChain_PassMessages(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogChain_PassMessages[1] = {{ wxLua_wxLogChain_PassMessages, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxLogChain_PassMessages }};
//     void PassMessages(bool bDoPass)
static int LUACALL wxLua_wxLogChain_PassMessages(lua_State *L)
{
    // bool bDoPass
    bool bDoPass = wxlua_getbooleantype(L, 2);
    // get this
    wxLogChain * self = (wxLogChain *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLogChain);
    // call PassMessages
    self->PassMessages(bDoPass);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLogChain_SetLog[] = { &wxluatype_wxLogChain, &wxluatype_wxLog, NULL };
static int LUACALL wxLua_wxLogChain_SetLog(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogChain_SetLog[1] = {{ wxLua_wxLogChain_SetLog, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxLogChain_SetLog }};
//     void SetLog(wxLog *logger) // change the new log target
static int LUACALL wxLua_wxLogChain_SetLog(lua_State *L)
{
    // wxLog logger
    wxLog * logger = (wxLog *)wxluaT_getuserdatatype(L, 2, wxluatype_wxLog);
    // get this
    wxLogChain * self = (wxLogChain *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLogChain);
    // call SetLog
    self->SetLog(logger);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLogChain_delete[] = { &wxluatype_wxLogChain, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogChain_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxLogChain_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxLogChain_constructor[] = { &wxluatype_wxLog, NULL };
static int LUACALL wxLua_wxLogChain_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogChain_constructor[1] = {{ wxLua_wxLogChain_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxLogChain_constructor }};
//     wxLogChain(wxLog *logger)
static int LUACALL wxLua_wxLogChain_constructor(lua_State *L)
{
    // wxLog logger
    wxLog * logger = (wxLog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLog);
    // call constructor
    wxLogChain* returns = new wxLogChain(logger);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLogChain((wxLogChain*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLogChain);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLogChain_methods[] = {
    { "GetOldLog", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLogChain_GetOldLog, 1, NULL },
    { "IsPassingMessages", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLogChain_IsPassingMessages, 1, NULL },
    { "PassMessages", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLogChain_PassMessages, 1, NULL },
    { "SetLog", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLogChain_SetLog, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxLogChain_delete, 1, NULL },
    { "wxLogChain", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLogChain_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxLogChain_methodCount = sizeof(wxLogChain_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxLog && wxUSE_LOG


#if wxLUA_USE_wxLog && wxUSE_LOG
// ---------------------------------------------------------------------------
// Bind class wxLogNull
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLogNull'
int wxluatype_wxLogNull = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxLogNull_delete[] = { &wxluatype_wxLogNull, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogNull_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxLogNull_delete }};

static int LUACALL wxLua_wxLogNull_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogNull_constructor[1] = {{ wxLua_wxLogNull_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxLogNull()
static int LUACALL wxLua_wxLogNull_constructor(lua_State *L)
{
    // call constructor
    wxLogNull* returns = new wxLogNull();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLogNull((wxLogNull*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLogNull);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLogNull_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxLogNull_delete, 1, NULL },
    { "wxLogNull", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLogNull_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxLogNull_methodCount = sizeof(wxLogNull_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxLog && wxUSE_LOG


#if wxLUA_USE_wxLog && wxUSE_LOG
// ---------------------------------------------------------------------------
// Bind class wxLogPassThrough
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLogPassThrough'
int wxluatype_wxLogPassThrough = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxLogPassThrough_delete[] = { &wxluatype_wxLogPassThrough, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogPassThrough_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxLogPassThrough_delete }};

static int LUACALL wxLua_wxLogPassThrough_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLogPassThrough_constructor[1] = {{ wxLua_wxLogPassThrough_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxLogPassThrough()
static int LUACALL wxLua_wxLogPassThrough_constructor(lua_State *L)
{
    // call constructor
    wxLogPassThrough* returns = new wxLogPassThrough();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxLogPassThrough((wxLogPassThrough*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLogPassThrough);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLogPassThrough_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxLogPassThrough_delete, 1, NULL },
    { "wxLogPassThrough", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLogPassThrough_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxLogPassThrough_methodCount = sizeof(wxLogPassThrough_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxLog && wxUSE_LOG

// ---------------------------------------------------------------------------
// Bind class wxDynamicLibraryDetails
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDynamicLibraryDetails'
int wxluatype_wxDynamicLibraryDetails = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDynamicLibraryDetails_GetName[] = { &wxluatype_wxDynamicLibraryDetails, NULL };
static int LUACALL wxLua_wxDynamicLibraryDetails_GetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibraryDetails_GetName[1] = {{ wxLua_wxDynamicLibraryDetails_GetName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDynamicLibraryDetails_GetName }};
//     wxString GetName() const // get the (base) name
static int LUACALL wxLua_wxDynamicLibraryDetails_GetName(lua_State *L)
{
    // get this
    wxDynamicLibraryDetails * self = (wxDynamicLibraryDetails *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDynamicLibraryDetails);
    // call GetName
    wxString returns = (self->GetName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDynamicLibraryDetails_GetPath[] = { &wxluatype_wxDynamicLibraryDetails, NULL };
static int LUACALL wxLua_wxDynamicLibraryDetails_GetPath(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibraryDetails_GetPath[1] = {{ wxLua_wxDynamicLibraryDetails_GetPath, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDynamicLibraryDetails_GetPath }};
//     wxString GetPath() const // get the full path of this object
static int LUACALL wxLua_wxDynamicLibraryDetails_GetPath(lua_State *L)
{
    // get this
    wxDynamicLibraryDetails * self = (wxDynamicLibraryDetails *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDynamicLibraryDetails);
    // call GetPath
    wxString returns = (self->GetPath());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDynamicLibraryDetails_GetVersion[] = { &wxluatype_wxDynamicLibraryDetails, NULL };
static int LUACALL wxLua_wxDynamicLibraryDetails_GetVersion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibraryDetails_GetVersion[1] = {{ wxLua_wxDynamicLibraryDetails_GetVersion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDynamicLibraryDetails_GetVersion }};
//     wxString GetVersion() const // return the version of the DLL (may be empty if no version info)
static int LUACALL wxLua_wxDynamicLibraryDetails_GetVersion(lua_State *L)
{
    // get this
    wxDynamicLibraryDetails * self = (wxDynamicLibraryDetails *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDynamicLibraryDetails);
    // call GetVersion
    wxString returns = (self->GetVersion());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDynamicLibraryDetails_delete[] = { &wxluatype_wxDynamicLibraryDetails, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibraryDetails_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDynamicLibraryDetails_delete }};



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDynamicLibraryDetails_methods[] = {
    { "GetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDynamicLibraryDetails_GetName, 1, NULL },
    { "GetPath", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDynamicLibraryDetails_GetPath, 1, NULL },
    { "GetVersion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDynamicLibraryDetails_GetVersion, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDynamicLibraryDetails_delete, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxDynamicLibraryDetails_methodCount = sizeof(wxDynamicLibraryDetails_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxDynamicLibraryDetailsArray
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDynamicLibraryDetailsArray'
int wxluatype_wxDynamicLibraryDetailsArray = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDynamicLibraryDetailsArray_GetCount[] = { &wxluatype_wxDynamicLibraryDetailsArray, NULL };
static int LUACALL wxLua_wxDynamicLibraryDetailsArray_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibraryDetailsArray_GetCount[1] = {{ wxLua_wxDynamicLibraryDetailsArray_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDynamicLibraryDetailsArray_GetCount }};
//     int  GetCount() const
static int LUACALL wxLua_wxDynamicLibraryDetailsArray_GetCount(lua_State *L)
{
    // get this
    wxDynamicLibraryDetailsArray * self = (wxDynamicLibraryDetailsArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDynamicLibraryDetailsArray);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDynamicLibraryDetailsArray_Item[] = { &wxluatype_wxDynamicLibraryDetailsArray, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDynamicLibraryDetailsArray_Item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibraryDetailsArray_Item[1] = {{ wxLua_wxDynamicLibraryDetailsArray_Item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDynamicLibraryDetailsArray_Item }};
//     wxDynamicLibraryDetails Item( int n )
static int LUACALL wxLua_wxDynamicLibraryDetailsArray_Item(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDynamicLibraryDetailsArray * self = (wxDynamicLibraryDetailsArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDynamicLibraryDetailsArray);
    // call Item
    // allocate a new object using the copy constructor
    wxDynamicLibraryDetails* returns = new wxDynamicLibraryDetails(self->Item(n));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDynamicLibraryDetails((wxDynamicLibraryDetails*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDynamicLibraryDetails);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDynamicLibraryDetailsArray_delete[] = { &wxluatype_wxDynamicLibraryDetailsArray, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibraryDetailsArray_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDynamicLibraryDetailsArray_delete }};



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDynamicLibraryDetailsArray_methods[] = {
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDynamicLibraryDetailsArray_GetCount, 1, NULL },
    { "Item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDynamicLibraryDetailsArray_Item, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDynamicLibraryDetailsArray_delete, 1, NULL },
    { 0, 0, 0, 0 },
};

int wxDynamicLibraryDetailsArray_methodCount = sizeof(wxDynamicLibraryDetailsArray_methods)/sizeof(wxLuaBindMethod) - 1;


// ---------------------------------------------------------------------------
// Bind class wxDynamicLibrary
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDynamicLibrary'
int wxluatype_wxDynamicLibrary = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDynamicLibrary_CanonicalizeName[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDynamicLibrary_CanonicalizeName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibrary_CanonicalizeName[1] = {{ wxLua_wxDynamicLibrary_CanonicalizeName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxDynamicLibrary_CanonicalizeName }};
//     static wxString CanonicalizeName(const wxString& name, wxDynamicLibraryCategory cat = wxDL_LIBRARY);
static int LUACALL wxLua_wxDynamicLibrary_CanonicalizeName(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxDynamicLibraryCategory cat = wxDL_LIBRARY
    wxDynamicLibraryCategory cat = (argCount >= 2 ? (wxDynamicLibraryCategory)wxlua_getenumtype(L, 2) : wxDL_LIBRARY);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call CanonicalizeName
    wxString returns = (wxDynamicLibrary::CanonicalizeName(name, cat));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDynamicLibrary_CanonicalizePluginName[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDynamicLibrary_CanonicalizePluginName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibrary_CanonicalizePluginName[1] = {{ wxLua_wxDynamicLibrary_CanonicalizePluginName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxDynamicLibrary_CanonicalizePluginName }};
//     static wxString CanonicalizePluginName(const wxString& name, wxPluginCategory cat = wxDL_PLUGIN_GUI);
static int LUACALL wxLua_wxDynamicLibrary_CanonicalizePluginName(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxPluginCategory cat = wxDL_PLUGIN_GUI
    wxPluginCategory cat = (argCount >= 2 ? (wxPluginCategory)wxlua_getenumtype(L, 2) : wxDL_PLUGIN_GUI);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call CanonicalizePluginName
    wxString returns = (wxDynamicLibrary::CanonicalizePluginName(name, cat));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static int LUACALL wxLua_wxDynamicLibrary_GetDllExt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibrary_GetDllExt[1] = {{ wxLua_wxDynamicLibrary_GetDllExt, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxString GetDllExt()
static int LUACALL wxLua_wxDynamicLibrary_GetDllExt(lua_State *L)
{
    // call GetDllExt
    wxString returns = (wxDynamicLibrary::GetDllExt());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static int LUACALL wxLua_wxDynamicLibrary_GetPluginsDirectory(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibrary_GetPluginsDirectory[1] = {{ wxLua_wxDynamicLibrary_GetPluginsDirectory, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxString GetPluginsDirectory()
static int LUACALL wxLua_wxDynamicLibrary_GetPluginsDirectory(lua_State *L)
{
    // call GetPluginsDirectory
    wxString returns = (wxDynamicLibrary::GetPluginsDirectory());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDynamicLibrary_HasSymbol[] = { &wxluatype_wxDynamicLibrary, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDynamicLibrary_HasSymbol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibrary_HasSymbol[1] = {{ wxLua_wxDynamicLibrary_HasSymbol, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDynamicLibrary_HasSymbol }};
//     bool HasSymbol(const wxString& name) const
static int LUACALL wxLua_wxDynamicLibrary_HasSymbol(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxDynamicLibrary * self = (wxDynamicLibrary *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDynamicLibrary);
    // call HasSymbol
    bool returns = (self->HasSymbol(name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDynamicLibrary_IsLoaded[] = { &wxluatype_wxDynamicLibrary, NULL };
static int LUACALL wxLua_wxDynamicLibrary_IsLoaded(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibrary_IsLoaded[1] = {{ wxLua_wxDynamicLibrary_IsLoaded, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDynamicLibrary_IsLoaded }};
//     bool IsLoaded() const
static int LUACALL wxLua_wxDynamicLibrary_IsLoaded(lua_State *L)
{
    // get this
    wxDynamicLibrary * self = (wxDynamicLibrary *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDynamicLibrary);
    // call IsLoaded
    bool returns = (self->IsLoaded());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static int LUACALL wxLua_wxDynamicLibrary_ListLoaded(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibrary_ListLoaded[1] = {{ wxLua_wxDynamicLibrary_ListLoaded, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxDynamicLibraryDetailsArray ListLoaded();
static int LUACALL wxLua_wxDynamicLibrary_ListLoaded(lua_State *L)
{
    // call ListLoaded
    // allocate a new object using the copy constructor
    wxDynamicLibraryDetailsArray* returns = new wxDynamicLibraryDetailsArray(wxDynamicLibrary::ListLoaded());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDynamicLibraryDetailsArray((wxDynamicLibraryDetailsArray*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDynamicLibraryDetailsArray);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDynamicLibrary_Load[] = { &wxluatype_wxDynamicLibrary, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDynamicLibrary_Load(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibrary_Load[1] = {{ wxLua_wxDynamicLibrary_Load, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxDynamicLibrary_Load }};
//     bool Load(const wxString& libname, int flags = wxDL_DEFAULT);
static int LUACALL wxLua_wxDynamicLibrary_Load(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDL_DEFAULT
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxDL_DEFAULT);
    // const wxString libname
    const wxString libname = wxlua_getwxStringtype(L, 2);
    // get this
    wxDynamicLibrary * self = (wxDynamicLibrary *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDynamicLibrary);
    // call Load
    bool returns = (self->Load(libname, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDynamicLibrary_Unload[] = { &wxluatype_wxDynamicLibrary, NULL };
static int LUACALL wxLua_wxDynamicLibrary_Unload(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibrary_Unload[1] = {{ wxLua_wxDynamicLibrary_Unload, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDynamicLibrary_Unload }};
//     void Unload()
static int LUACALL wxLua_wxDynamicLibrary_Unload(lua_State *L)
{
    // get this
    wxDynamicLibrary * self = (wxDynamicLibrary *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDynamicLibrary);
    // call Unload
    self->Unload();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDynamicLibrary_delete[] = { &wxluatype_wxDynamicLibrary, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibrary_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDynamicLibrary_delete }};

static int LUACALL wxLua_wxDynamicLibrary_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibrary_constructor[1] = {{ wxLua_wxDynamicLibrary_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDynamicLibrary()
static int LUACALL wxLua_wxDynamicLibrary_constructor(lua_State *L)
{
    // call constructor
    wxDynamicLibrary* returns = new wxDynamicLibrary();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDynamicLibrary((wxDynamicLibrary*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDynamicLibrary);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDynamicLibrary_constructor1[] = { &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDynamicLibrary_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibrary_constructor1[1] = {{ wxLua_wxDynamicLibrary_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxDynamicLibrary_constructor1 }};
//     wxDynamicLibrary(const wxString& libname, int flags = wxDL_DEFAULT)
static int LUACALL wxLua_wxDynamicLibrary_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDL_DEFAULT
    int flags = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxDL_DEFAULT);
    // const wxString libname
    const wxString libname = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxDynamicLibrary* returns = new wxDynamicLibrary(libname, flags);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxDynamicLibrary((wxDynamicLibrary*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDynamicLibrary);

    return 1;
}



// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDynamicLibrary_constructor_overload[] =
{
    { wxLua_wxDynamicLibrary_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
    { wxLua_wxDynamicLibrary_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxDynamicLibrary_constructor1 },
};
static int s_wxluafunc_wxLua_wxDynamicLibrary_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxDynamicLibrary_constructor_overload)/sizeof(wxLuaBindCFunc);


// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDynamicLibrary_methods[] = {
    { "CanonicalizeName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDynamicLibrary_CanonicalizeName, 1, NULL },
    { "CanonicalizePluginName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDynamicLibrary_CanonicalizePluginName, 1, NULL },
    { "GetDllExt", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDynamicLibrary_GetDllExt, 1, NULL },
    { "GetPluginsDirectory", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDynamicLibrary_GetPluginsDirectory, 1, NULL },
    { "HasSymbol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDynamicLibrary_HasSymbol, 1, NULL },
    { "IsLoaded", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDynamicLibrary_IsLoaded, 1, NULL },
    { "ListLoaded", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDynamicLibrary_ListLoaded, 1, NULL },
    { "Load", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDynamicLibrary_Load, 1, NULL },
    { "Unload", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDynamicLibrary_Unload, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDynamicLibrary_delete, 1, NULL },

    { "wxDynamicLibrary", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDynamicLibrary_constructor_overload, s_wxluafunc_wxLua_wxDynamicLibrary_constructor_overload_count, 0 },

    { 0, 0, 0, 0 },
};

int wxDynamicLibrary_methodCount = sizeof(wxDynamicLibrary_methods)/sizeof(wxLuaBindMethod) - 1;



#if wxLUA_USE_wxCriticalSection && wxUSE_THREADS
// ---------------------------------------------------------------------------
// Bind class wxCriticalSection
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxCriticalSection'
int wxluatype_wxCriticalSection = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxCriticalSection_Enter[] = { &wxluatype_wxCriticalSection, NULL };
static int LUACALL wxLua_wxCriticalSection_Enter(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCriticalSection_Enter[1] = {{ wxLua_wxCriticalSection_Enter, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCriticalSection_Enter }};
//     void Enter()
static int LUACALL wxLua_wxCriticalSection_Enter(lua_State *L)
{
    // get this
    wxCriticalSection * self = (wxCriticalSection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCriticalSection);
    // call Enter
    self->Enter();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCriticalSection_Leave[] = { &wxluatype_wxCriticalSection, NULL };
static int LUACALL wxLua_wxCriticalSection_Leave(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCriticalSection_Leave[1] = {{ wxLua_wxCriticalSection_Leave, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCriticalSection_Leave }};
//     void Leave()
static int LUACALL wxLua_wxCriticalSection_Leave(lua_State *L)
{
    // get this
    wxCriticalSection * self = (wxCriticalSection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCriticalSection);
    // call Leave
    self->Leave();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCriticalSection_delete[] = { &wxluatype_wxCriticalSection, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCriticalSection_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxCriticalSection_delete }};

static int LUACALL wxLua_wxCriticalSection_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCriticalSection_constructor[1] = {{ wxLua_wxCriticalSection_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxCriticalSection()
static int LUACALL wxLua_wxCriticalSection_constructor(lua_State *L)
{
    // call constructor
    wxCriticalSection* returns = new wxCriticalSection();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxCriticalSection((wxCriticalSection*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCriticalSection);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxCriticalSection_methods[] = {
    { "Enter", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCriticalSection_Enter, 1, NULL },
    { "Leave", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCriticalSection_Leave, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxCriticalSection_delete, 1, NULL },
    { "wxCriticalSection", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxCriticalSection_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxCriticalSection_methodCount = sizeof(wxCriticalSection_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxCriticalSection && wxUSE_THREADS


#if wxLUA_USE_wxCriticalSectionLocker
// ---------------------------------------------------------------------------
// Bind class wxCriticalSectionLocker
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxCriticalSectionLocker'
int wxluatype_wxCriticalSectionLocker = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxCriticalSectionLocker_delete[] = { &wxluatype_wxCriticalSectionLocker, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCriticalSectionLocker_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxCriticalSectionLocker_delete }};


#if (wxLUA_USE_wxCriticalSectionLocker) && (wxLUA_USE_wxCriticalSection && wxUSE_THREADS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCriticalSectionLocker_constructor[] = { &wxluatype_wxCriticalSection, NULL };
static int LUACALL wxLua_wxCriticalSectionLocker_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCriticalSectionLocker_constructor[1] = {{ wxLua_wxCriticalSectionLocker_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxCriticalSectionLocker_constructor }};
//     wxCriticalSectionLocker(wxCriticalSection& cs);
static int LUACALL wxLua_wxCriticalSectionLocker_constructor(lua_State *L)
{
    // wxCriticalSection cs
    wxCriticalSection * cs = (wxCriticalSection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCriticalSection);
    // call constructor
    wxCriticalSectionLocker* returns = new wxCriticalSectionLocker(*cs);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxCriticalSectionLocker((wxCriticalSectionLocker*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCriticalSectionLocker);

    return 1;
}

#endif // (wxLUA_USE_wxCriticalSectionLocker) && (wxLUA_USE_wxCriticalSection && wxUSE_THREADS)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxCriticalSectionLocker_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxCriticalSectionLocker_delete, 1, NULL },

#if (wxLUA_USE_wxCriticalSectionLocker) && (wxLUA_USE_wxCriticalSection && wxUSE_THREADS)
    { "wxCriticalSectionLocker", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxCriticalSectionLocker_constructor, 1, NULL },
#endif // (wxLUA_USE_wxCriticalSectionLocker) && (wxLUA_USE_wxCriticalSection && wxUSE_THREADS)

    { 0, 0, 0, 0 },
};

int wxCriticalSectionLocker_methodCount = sizeof(wxCriticalSectionLocker_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxCriticalSectionLocker


#if wxLUA_USE_wxRegEx && wxUSE_REGEX
// ---------------------------------------------------------------------------
// Bind class wxRegEx
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRegEx'
int wxluatype_wxRegEx = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegEx_Compile[] = { &wxluatype_wxRegEx, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRegEx_Compile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegEx_Compile[1] = {{ wxLua_wxRegEx_Compile, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRegEx_Compile }};
//     bool Compile(const wxString& pattern, int flags = wxRE_DEFAULT)
static int LUACALL wxLua_wxRegEx_Compile(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxRE_DEFAULT
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxRE_DEFAULT);
    // const wxString pattern
    const wxString pattern = wxlua_getwxStringtype(L, 2);
    // get this
    wxRegEx * self = (wxRegEx *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegEx);
    // call Compile
    bool returns = (self->Compile(pattern, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#define wxLua_wxRegEx_GetMatch1 wxLua_wxRegEx_GetMatchIndexes
static wxLuaArgType s_wxluatypeArray_wxLua_wxRegEx_GetMatch1[] = { &wxluatype_wxRegEx, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRegEx_GetMatch1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegEx_GetMatch1[1] = {{ wxLua_wxRegEx_GetMatch1, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRegEx_GetMatch1 }};
// %override wxLua_wxRegEx_GetMatchIndexes
// %rename GetMatchPointer bool GetMatch(size_t* start, size_t* len, size_t index = 0) const
static int LUACALL wxLua_wxRegEx_GetMatchIndexes(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t index = 0
    size_t index = (argCount >= 2 ? (size_t)wxlua_getintegertype(L, 2) : 0);
    // size_t* len
    size_t len = 0;
    // size_t* start
    size_t start = 0;
    // get this
    wxRegEx *self = (wxRegEx *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegEx);
    // call GetMatch
    bool returns = self->GetMatch(&start, &len, index);
    // push the result number
    lua_pushboolean(L, returns);
    // push the match start and length indexes
    lua_pushnumber(L, start);
    lua_pushnumber(L, len);
    // return the number of parameters
    return 3;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRegEx_GetMatch[] = { &wxluatype_wxRegEx, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRegEx_GetMatch(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegEx_GetMatch[1] = {{ wxLua_wxRegEx_GetMatch, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRegEx_GetMatch }};
//     wxString GetMatch(const wxString& text, size_t index = 0) const
static int LUACALL wxLua_wxRegEx_GetMatch(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t index = 0
    size_t index = (argCount >= 3 ? (size_t)wxlua_getuintegertype(L, 3) : 0);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRegEx * self = (wxRegEx *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegEx);
    // call GetMatch
    wxString returns = (self->GetMatch(text, index));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegEx_GetMatchCount[] = { &wxluatype_wxRegEx, NULL };
static int LUACALL wxLua_wxRegEx_GetMatchCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegEx_GetMatchCount[1] = {{ wxLua_wxRegEx_GetMatchCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRegEx_GetMatchCount }};
//     size_t GetMatchCount() const
static int LUACALL wxLua_wxRegEx_GetMatchCount(lua_State *L)
{
    // get this
    wxRegEx * self = (wxRegEx *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegEx);
    // call GetMatchCount
    size_t returns = (self->GetMatchCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegEx_IsValid[] = { &wxluatype_wxRegEx, NULL };
static int LUACALL wxLua_wxRegEx_IsValid(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegEx_IsValid[1] = {{ wxLua_wxRegEx_IsValid, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRegEx_IsValid }};
//     bool IsValid() const
static int LUACALL wxLua_wxRegEx_IsValid(lua_State *L)
{
    // get this
    wxRegEx * self = (wxRegEx *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegEx);
    // call IsValid
    bool returns = (self->IsValid());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegEx_Matches[] = { &wxluatype_wxRegEx, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRegEx_Matches(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegEx_Matches[1] = {{ wxLua_wxRegEx_Matches, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRegEx_Matches }};
//     bool Matches(const wxString &text, int flags = 0) const
static int LUACALL wxLua_wxRegEx_Matches(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRegEx * self = (wxRegEx *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegEx);
    // call Matches
    bool returns = (self->Matches(text, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegEx_Replace[] = { &wxluatype_wxRegEx, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRegEx_Replace(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegEx_Replace[1] = {{ wxLua_wxRegEx_Replace, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRegEx_Replace }};
// %override wxLua_wxRegEx_Replace
// int Replace(wxString* text, const wxString& replacement, size_t maxMatches = 0) const
static int LUACALL wxLua_wxRegEx_Replace(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t maxMatches = 0
    size_t maxMatches = (argCount >= 4 ? (size_t)wxlua_getintegertype(L, 4) : 0);
    // const wxString& replacement
    wxString replacement = wxlua_getwxStringtype(L, 3);
    // wxString* text
    wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRegEx *self = (wxRegEx *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegEx);
    // call Replace
    int returns = self->Replace(&text, replacement, maxMatches);
    // push the result number
    lua_pushnumber(L, returns);
    // push the result text
    wxlua_pushwxString(L, text);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRegEx_ReplaceAll[] = { &wxluatype_wxRegEx, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRegEx_ReplaceAll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegEx_ReplaceAll[1] = {{ wxLua_wxRegEx_ReplaceAll, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRegEx_ReplaceAll }};
// %override wxLua_wxRegEx_ReplaceAll
// int ReplaceAll(wxString* text, const wxString& replacement) const
static int LUACALL wxLua_wxRegEx_ReplaceAll(lua_State *L)
{
    // const wxString& replacement
    wxString replacement = wxlua_getwxStringtype(L, 3);
    // wxString* text
    wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRegEx *self = (wxRegEx *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegEx);
    // call ReplaceAll
    int returns = self->ReplaceAll(&text, replacement);
    // push the result number
    lua_pushnumber(L, returns);
    // push the result text
    wxlua_pushwxString(L, text);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRegEx_ReplaceFirst[] = { &wxluatype_wxRegEx, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRegEx_ReplaceFirst(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegEx_ReplaceFirst[1] = {{ wxLua_wxRegEx_ReplaceFirst, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRegEx_ReplaceFirst }};
// %override wxLua_wxRegEx_ReplaceFirst
// int ReplaceFirst(wxString* text, const wxString& replacement) const
static int LUACALL wxLua_wxRegEx_ReplaceFirst(lua_State *L)
{
    // const wxString& replacement
    wxString replacement = wxlua_getwxStringtype(L, 3);
    // wxString* text
    wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRegEx *self = (wxRegEx *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRegEx);
    // call ReplaceFirst
    int returns = self->ReplaceFirst(&text, replacement);
    // push the result number
    lua_pushnumber(L, returns);
    // push the result text
    wxlua_pushwxString(L, text);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRegEx_delete[] = { &wxluatype_wxRegEx, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegEx_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRegEx_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRegEx_constructor1[] = { &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRegEx_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegEx_constructor1[1] = {{ wxLua_wxRegEx_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxRegEx_constructor1 }};
//     wxRegEx(const wxString& expr, int flags = wxRE_DEFAULT)
static int LUACALL wxLua_wxRegEx_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxRE_DEFAULT
    int flags = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxRE_DEFAULT);
    // const wxString expr
    const wxString expr = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxRegEx* returns = new wxRegEx(expr, flags);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRegEx((wxRegEx*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRegEx);

    return 1;
}

static int LUACALL wxLua_wxRegEx_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegEx_constructor[1] = {{ wxLua_wxRegEx_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRegEx()
static int LUACALL wxLua_wxRegEx_constructor(lua_State *L)
{
    // call constructor
    wxRegEx* returns = new wxRegEx();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRegEx((wxRegEx*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRegEx);

    return 1;
}




#if (wxLUA_USE_wxRegEx && wxUSE_REGEX)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegEx_GetMatch_overload[] =
{
    { wxLua_wxRegEx_GetMatch1, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRegEx_GetMatch1 },
    { wxLua_wxRegEx_GetMatch, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRegEx_GetMatch },
};
static int s_wxluafunc_wxLua_wxRegEx_GetMatch_overload_count = sizeof(s_wxluafunc_wxLua_wxRegEx_GetMatch_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRegEx_constructor_overload[] =
{
    { wxLua_wxRegEx_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxRegEx_constructor1 },
    { wxLua_wxRegEx_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRegEx_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRegEx_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRegEx && wxUSE_REGEX)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRegEx_methods[] = {
    { "Compile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegEx_Compile, 1, NULL },

#if (wxLUA_USE_wxRegEx && wxUSE_REGEX)
    { "GetMatch", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegEx_GetMatch_overload, s_wxluafunc_wxLua_wxRegEx_GetMatch_overload_count, 0 },
#endif // (wxLUA_USE_wxRegEx && wxUSE_REGEX)

    { "GetMatchCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegEx_GetMatchCount, 1, NULL },
    { "IsValid", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegEx_IsValid, 1, NULL },
    { "Matches", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegEx_Matches, 1, NULL },
    { "Replace", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegEx_Replace, 1, NULL },
    { "ReplaceAll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegEx_ReplaceAll, 1, NULL },
    { "ReplaceFirst", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRegEx_ReplaceFirst, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRegEx_delete, 1, NULL },

#if (wxLUA_USE_wxRegEx && wxUSE_REGEX)
    { "wxRegEx", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRegEx_constructor_overload, s_wxluafunc_wxLua_wxRegEx_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRegEx && wxUSE_REGEX)

    { 0, 0, 0, 0 },
};

int wxRegEx_methodCount = sizeof(wxRegEx_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRegEx && wxUSE_REGEX

