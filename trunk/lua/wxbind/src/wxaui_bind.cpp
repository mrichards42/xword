// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxaui_aui.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxaui_bind.h"



#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiNotebookEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiNotebookEvent'
int wxluatype_wxAuiNotebookEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookEvent_GetDragSource[] = { &wxluatype_wxAuiNotebookEvent, NULL };
static int LUACALL wxLua_wxAuiNotebookEvent_GetDragSource(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookEvent_GetDragSource[1] = {{ wxLua_wxAuiNotebookEvent_GetDragSource, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookEvent_GetDragSource }};
//     wxAuiNotebook* GetDragSource() const
static int LUACALL wxLua_wxAuiNotebookEvent_GetDragSource(lua_State *L)
{
    // get this
    wxAuiNotebookEvent * self = (wxAuiNotebookEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookEvent);
    // call GetDragSource
    wxAuiNotebook* returns = (wxAuiNotebook*)self->GetDragSource();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiNotebook);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookEvent_GetOldSelection[] = { &wxluatype_wxAuiNotebookEvent, NULL };
static int LUACALL wxLua_wxAuiNotebookEvent_GetOldSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookEvent_GetOldSelection[1] = {{ wxLua_wxAuiNotebookEvent_GetOldSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookEvent_GetOldSelection }};
//     int GetOldSelection() const
static int LUACALL wxLua_wxAuiNotebookEvent_GetOldSelection(lua_State *L)
{
    // get this
    wxAuiNotebookEvent * self = (wxAuiNotebookEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookEvent);
    // call GetOldSelection
    int returns = (self->GetOldSelection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookEvent_GetSelection[] = { &wxluatype_wxAuiNotebookEvent, NULL };
static int LUACALL wxLua_wxAuiNotebookEvent_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookEvent_GetSelection[1] = {{ wxLua_wxAuiNotebookEvent_GetSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookEvent_GetSelection }};
//     int GetSelection() const
static int LUACALL wxLua_wxAuiNotebookEvent_GetSelection(lua_State *L)
{
    // get this
    wxAuiNotebookEvent * self = (wxAuiNotebookEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookEvent);
    // call GetSelection
    int returns = (self->GetSelection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookEvent_SetDragSource[] = { &wxluatype_wxAuiNotebookEvent, &wxluatype_wxAuiNotebook, NULL };
static int LUACALL wxLua_wxAuiNotebookEvent_SetDragSource(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookEvent_SetDragSource[1] = {{ wxLua_wxAuiNotebookEvent_SetDragSource, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebookEvent_SetDragSource }};
//     void SetDragSource(wxAuiNotebook* s)
static int LUACALL wxLua_wxAuiNotebookEvent_SetDragSource(lua_State *L)
{
    // wxAuiNotebook s
    wxAuiNotebook * s = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiNotebook);
    // get this
    wxAuiNotebookEvent * self = (wxAuiNotebookEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookEvent);
    // call SetDragSource
    self->SetDragSource(s);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookEvent_SetOldSelection[] = { &wxluatype_wxAuiNotebookEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiNotebookEvent_SetOldSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookEvent_SetOldSelection[1] = {{ wxLua_wxAuiNotebookEvent_SetOldSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebookEvent_SetOldSelection }};
//     void SetOldSelection(int s)
static int LUACALL wxLua_wxAuiNotebookEvent_SetOldSelection(lua_State *L)
{
    // int s
    int s = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiNotebookEvent * self = (wxAuiNotebookEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookEvent);
    // call SetOldSelection
    self->SetOldSelection(s);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookEvent_SetSelection[] = { &wxluatype_wxAuiNotebookEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiNotebookEvent_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookEvent_SetSelection[1] = {{ wxLua_wxAuiNotebookEvent_SetSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebookEvent_SetSelection }};
//     void SetSelection(int s)
static int LUACALL wxLua_wxAuiNotebookEvent_SetSelection(lua_State *L)
{
    // int s
    int s = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiNotebookEvent * self = (wxAuiNotebookEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookEvent);
    // call SetSelection
    self->SetSelection(s);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookEvent_delete[] = { &wxluatype_wxAuiNotebookEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookEvent_constructor1[] = { &wxluatype_wxAuiNotebookEvent, NULL };
static int LUACALL wxLua_wxAuiNotebookEvent_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookEvent_constructor1[1] = {{ wxLua_wxAuiNotebookEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookEvent_constructor1 }};
//     wxAuiNotebookEvent(const wxAuiNotebookEvent& c)
static int LUACALL wxLua_wxAuiNotebookEvent_constructor1(lua_State *L)
{
    // const wxAuiNotebookEvent c
    const wxAuiNotebookEvent * c = (const wxAuiNotebookEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookEvent);
    // call constructor
    wxAuiNotebookEvent* returns = new wxAuiNotebookEvent(*c);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiNotebookEvent);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiNotebookEvent_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookEvent_constructor[1] = {{ wxLua_wxAuiNotebookEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxAuiNotebookEvent_constructor }};
//     wxAuiNotebookEvent(wxEventType command_type = wxEVT_NULL, int win_id = 0)
static int LUACALL wxLua_wxAuiNotebookEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int win_id = 0
    int win_id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType command_type = wxEVT_NULL
    wxEventType command_type = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxAuiNotebookEvent* returns = new wxAuiNotebookEvent(command_type, win_id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiNotebookEvent);

    return 1;
}




#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookEvent_constructor_overload[] =
{
    { wxLua_wxAuiNotebookEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookEvent_constructor1 },
    { wxLua_wxAuiNotebookEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxAuiNotebookEvent_constructor },
};
static int s_wxluafunc_wxLua_wxAuiNotebookEvent_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiNotebookEvent_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiNotebookEvent_methods[] = {
    { "GetDragSource", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookEvent_GetDragSource, 1, NULL },
    { "GetOldSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookEvent_GetOldSelection, 1, NULL },
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookEvent_GetSelection, 1, NULL },
    { "SetDragSource", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookEvent_SetDragSource, 1, NULL },
    { "SetOldSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookEvent_SetOldSelection, 1, NULL },
    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookEvent_SetSelection, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAuiNotebookEvent_delete, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
    { "wxAuiNotebookEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAuiNotebookEvent_constructor_overload, s_wxluafunc_wxLua_wxAuiNotebookEvent_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

    { 0, 0, 0, 0 },
};

int wxAuiNotebookEvent_methodCount = sizeof(wxAuiNotebookEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiNotebookPage
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiNotebookPage'
int wxluatype_wxAuiNotebookPage = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPage_Get_active[] = { &wxluatype_wxAuiNotebookPage, NULL };
static int LUACALL wxLua_wxAuiNotebookPage_Get_active(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPage_Get_active[1] = {{ wxLua_wxAuiNotebookPage_Get_active, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookPage_Get_active }};
//     %member bool active;          // true if the page is currently active
static int LUACALL wxLua_wxAuiNotebookPage_Get_active(lua_State *L)
{
    // get this
    wxAuiNotebookPage *self = (wxAuiNotebookPage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPage);
    // push the result flag
    lua_pushboolean(L, self->active);
    // return the number of values
    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPage_Get_bitmap[] = { &wxluatype_wxAuiNotebookPage, NULL };
static int LUACALL wxLua_wxAuiNotebookPage_Get_bitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPage_Get_bitmap[1] = {{ wxLua_wxAuiNotebookPage_Get_bitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookPage_Get_bitmap }};
//     %member wxBitmap bitmap;      // tab's bitmap
static int LUACALL wxLua_wxAuiNotebookPage_Get_bitmap(lua_State *L)
{
    // get this
    wxAuiNotebookPage *self = (wxAuiNotebookPage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPage);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->bitmap, wxluatype_wxBitmap);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPage_Get_caption[] = { &wxluatype_wxAuiNotebookPage, NULL };
static int LUACALL wxLua_wxAuiNotebookPage_Get_caption(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPage_Get_caption[1] = {{ wxLua_wxAuiNotebookPage_Get_caption, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookPage_Get_caption }};
//     %member wxString caption;     // caption displayed on the tab
static int LUACALL wxLua_wxAuiNotebookPage_Get_caption(lua_State *L)
{
    // get this
    wxAuiNotebookPage *self = (wxAuiNotebookPage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPage);
    // push the result string
    wxlua_pushwxString(L, self->caption);
    // return the number of values
    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPage_Get_rect[] = { &wxluatype_wxAuiNotebookPage, NULL };
static int LUACALL wxLua_wxAuiNotebookPage_Get_rect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPage_Get_rect[1] = {{ wxLua_wxAuiNotebookPage_Get_rect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookPage_Get_rect }};
//     %member wxRect rect;          // tab's hit rectangle
static int LUACALL wxLua_wxAuiNotebookPage_Get_rect(lua_State *L)
{
    // get this
    wxAuiNotebookPage *self = (wxAuiNotebookPage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPage);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->rect, wxluatype_wxRect);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPage_Get_window[] = { &wxluatype_wxAuiNotebookPage, NULL };
static int LUACALL wxLua_wxAuiNotebookPage_Get_window(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPage_Get_window[1] = {{ wxLua_wxAuiNotebookPage_Get_window, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookPage_Get_window }};
//     %member wxWindow* window;     // page's associated window
static int LUACALL wxLua_wxAuiNotebookPage_Get_window(lua_State *L)
{
    // get this
    wxAuiNotebookPage *self = (wxAuiNotebookPage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPage);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->window, wxluatype_wxWindow);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPage_Set_active[] = { &wxluatype_wxAuiNotebookPage, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiNotebookPage_Set_active(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPage_Set_active[1] = {{ wxLua_wxAuiNotebookPage_Set_active, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebookPage_Set_active }};
//     %member bool active;          // true if the page is currently active
static int LUACALL wxLua_wxAuiNotebookPage_Set_active(lua_State *L)
{
    // get the boolean value
    bool val = wxlua_getbooleantype(L, 2);
    // get this
    wxAuiNotebookPage *self = (wxAuiNotebookPage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPage);
    self->active = val;
    // return the number of values
    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPage_Set_bitmap[] = { &wxluatype_wxAuiNotebookPage, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxAuiNotebookPage_Set_bitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPage_Set_bitmap[1] = {{ wxLua_wxAuiNotebookPage_Set_bitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebookPage_Set_bitmap }};
//     %member wxBitmap bitmap;      // tab's bitmap
static int LUACALL wxLua_wxAuiNotebookPage_Set_bitmap(lua_State *L)
{
    // get the data type value
    wxBitmap* val = (wxBitmap*)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxAuiNotebookPage *self = (wxAuiNotebookPage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPage);
    self->bitmap = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPage_Set_caption[] = { &wxluatype_wxAuiNotebookPage, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAuiNotebookPage_Set_caption(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPage_Set_caption[1] = {{ wxLua_wxAuiNotebookPage_Set_caption, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebookPage_Set_caption }};
//     %member wxString caption;     // caption displayed on the tab
static int LUACALL wxLua_wxAuiNotebookPage_Set_caption(lua_State *L)
{
    // get the string value
    wxString val = wxlua_getwxStringtype(L, 2);
    // get this
    wxAuiNotebookPage *self = (wxAuiNotebookPage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPage);
    self->caption = val;
    // return the number of values
    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPage_Set_rect[] = { &wxluatype_wxAuiNotebookPage, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxAuiNotebookPage_Set_rect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPage_Set_rect[1] = {{ wxLua_wxAuiNotebookPage_Set_rect, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebookPage_Set_rect }};
//     %member wxRect rect;          // tab's hit rectangle
static int LUACALL wxLua_wxAuiNotebookPage_Set_rect(lua_State *L)
{
    // get the data type value
    wxRect* val = (wxRect*)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxAuiNotebookPage *self = (wxAuiNotebookPage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPage);
    self->rect = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPage_Set_window[] = { &wxluatype_wxAuiNotebookPage, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxAuiNotebookPage_Set_window(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPage_Set_window[1] = {{ wxLua_wxAuiNotebookPage_Set_window, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebookPage_Set_window }};
//     %member wxWindow* window;     // page's associated window
static int LUACALL wxLua_wxAuiNotebookPage_Set_window(lua_State *L)
{
    // get the data type value
    wxWindow* val = (wxWindow*)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiNotebookPage *self = (wxAuiNotebookPage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPage);
    self->window = val;
    // return the number of values
    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPage_delete[] = { &wxluatype_wxAuiNotebookPage, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPage_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookPage_delete }};


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiNotebookPage_methods[] = {
    // %member    { "Get_active", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPage_Get_active, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
    // %member    { "Get_bitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPage_Get_bitmap, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

    // %member    { "Get_caption", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPage_Get_caption, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    // %member    { "Get_rect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPage_Get_rect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    // %member    { "Get_window", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPage_Get_window, 1, NULL },
    // %member    { "Set_active", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPage_Set_active, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
    // %member    { "Set_bitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPage_Set_bitmap, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

    // %member    { "Set_caption", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPage_Set_caption, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    // %member    { "Set_rect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPage_Set_rect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    // %member    { "Set_window", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPage_Set_window, 1, NULL },
    { "active", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiNotebookPage_Set_active, 1, NULL },
    { "active", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiNotebookPage_Get_active, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
    { "bitmap", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiNotebookPage_Set_bitmap, 1, NULL },
    { "bitmap", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiNotebookPage_Get_bitmap, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

    { "caption", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiNotebookPage_Set_caption, 1, NULL },
    { "caption", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiNotebookPage_Get_caption, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAuiNotebookPage_delete, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "rect", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiNotebookPage_Set_rect, 1, NULL },
    { "rect", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiNotebookPage_Get_rect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    { "window", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiNotebookPage_Set_window, 1, NULL },
    { "window", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiNotebookPage_Get_window, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxAuiNotebookPage_methodCount = sizeof(wxAuiNotebookPage_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiNotebookPageArray
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiNotebookPageArray'
int wxluatype_wxAuiNotebookPageArray = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_Add[] = { &wxluatype_wxAuiNotebookPageArray, &wxluatype_wxAuiNotebookPage, NULL };
static int LUACALL wxLua_wxAuiNotebookPageArray_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPageArray_Add[1] = {{ wxLua_wxAuiNotebookPageArray_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_Add }};
//     void Add(wxAuiNotebookPage* page)
static int LUACALL wxLua_wxAuiNotebookPageArray_Add(lua_State *L)
{
    // wxAuiNotebookPage page
    wxAuiNotebookPage * page = (wxAuiNotebookPage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiNotebookPage);
    // get this
    wxAuiNotebookPageArray * self = (wxAuiNotebookPageArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPageArray);
    // call Add
    self->Add(page);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_Clear[] = { &wxluatype_wxAuiNotebookPageArray, NULL };
static int LUACALL wxLua_wxAuiNotebookPageArray_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPageArray_Clear[1] = {{ wxLua_wxAuiNotebookPageArray_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_Clear }};
//     void Clear()
static int LUACALL wxLua_wxAuiNotebookPageArray_Clear(lua_State *L)
{
    // get this
    wxAuiNotebookPageArray * self = (wxAuiNotebookPageArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPageArray);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_GetCount[] = { &wxluatype_wxAuiNotebookPageArray, NULL };
static int LUACALL wxLua_wxAuiNotebookPageArray_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPageArray_GetCount[1] = {{ wxLua_wxAuiNotebookPageArray_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_GetCount }};
//     int  GetCount() const
static int LUACALL wxLua_wxAuiNotebookPageArray_GetCount(lua_State *L)
{
    // get this
    wxAuiNotebookPageArray * self = (wxAuiNotebookPageArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPageArray);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_Insert[] = { &wxluatype_wxAuiNotebookPageArray, &wxluatype_wxAuiNotebookPage, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiNotebookPageArray_Insert(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPageArray_Insert[1] = {{ wxLua_wxAuiNotebookPageArray_Insert, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_Insert }};
//     void Insert(wxAuiNotebookPage* page, int nIndex)
static int LUACALL wxLua_wxAuiNotebookPageArray_Insert(lua_State *L)
{
    // int nIndex
    int nIndex = (int)wxlua_getnumbertype(L, 3);
    // wxAuiNotebookPage page
    wxAuiNotebookPage * page = (wxAuiNotebookPage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiNotebookPage);
    // get this
    wxAuiNotebookPageArray * self = (wxAuiNotebookPageArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPageArray);
    // call Insert
    self->Insert(page, nIndex);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_IsEmpty[] = { &wxluatype_wxAuiNotebookPageArray, NULL };
static int LUACALL wxLua_wxAuiNotebookPageArray_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPageArray_IsEmpty[1] = {{ wxLua_wxAuiNotebookPageArray_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_IsEmpty }};
//     bool IsEmpty()
static int LUACALL wxLua_wxAuiNotebookPageArray_IsEmpty(lua_State *L)
{
    // get this
    wxAuiNotebookPageArray * self = (wxAuiNotebookPageArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPageArray);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_Item[] = { &wxluatype_wxAuiNotebookPageArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiNotebookPageArray_Item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPageArray_Item[1] = {{ wxLua_wxAuiNotebookPageArray_Item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_Item }};
//     wxAuiNotebookPage Item(size_t nIndex) const
static int LUACALL wxLua_wxAuiNotebookPageArray_Item(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiNotebookPageArray * self = (wxAuiNotebookPageArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPageArray);
    // call Item
    // allocate a new object using the copy constructor
    wxAuiNotebookPage* returns = new wxAuiNotebookPage(self->Item(nIndex));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAuiNotebookPage((wxAuiNotebookPage*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiNotebookPage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_RemoveAt[] = { &wxluatype_wxAuiNotebookPageArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiNotebookPageArray_RemoveAt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPageArray_RemoveAt[1] = {{ wxLua_wxAuiNotebookPageArray_RemoveAt, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_RemoveAt }};
//     void RemoveAt(size_t nIndex)
static int LUACALL wxLua_wxAuiNotebookPageArray_RemoveAt(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiNotebookPageArray * self = (wxAuiNotebookPageArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPageArray);
    // call RemoveAt
    self->RemoveAt(nIndex);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_delete[] = { &wxluatype_wxAuiNotebookPageArray, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPageArray_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_constructor1[] = { &wxluatype_wxAuiNotebookPageArray, NULL };
static int LUACALL wxLua_wxAuiNotebookPageArray_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPageArray_constructor1[1] = {{ wxLua_wxAuiNotebookPageArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_constructor1 }};
//     wxAuiNotebookPageArray(const wxAuiNotebookPageArray& array)
static int LUACALL wxLua_wxAuiNotebookPageArray_constructor1(lua_State *L)
{
    // const wxAuiNotebookPageArray array
    const wxAuiNotebookPageArray * array = (const wxAuiNotebookPageArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebookPageArray);
    // call constructor
    wxAuiNotebookPageArray* returns = new wxAuiNotebookPageArray(*array);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAuiNotebookPageArray((wxAuiNotebookPageArray*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiNotebookPageArray);

    return 1;
}

static int LUACALL wxLua_wxAuiNotebookPageArray_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPageArray_constructor[1] = {{ wxLua_wxAuiNotebookPageArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxAuiNotebookPageArray()
static int LUACALL wxLua_wxAuiNotebookPageArray_constructor(lua_State *L)
{
    // call constructor
    wxAuiNotebookPageArray* returns = new wxAuiNotebookPageArray();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAuiNotebookPageArray((wxAuiNotebookPageArray*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiNotebookPageArray);

    return 1;
}




#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebookPageArray_constructor_overload[] =
{
    { wxLua_wxAuiNotebookPageArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebookPageArray_constructor1 },
    { wxLua_wxAuiNotebookPageArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxAuiNotebookPageArray_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiNotebookPageArray_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiNotebookPageArray_methods[] = {
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPageArray_Add, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPageArray_Clear, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPageArray_GetCount, 1, NULL },
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPageArray_Insert, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPageArray_IsEmpty, 1, NULL },
    { "Item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPageArray_Item, 1, NULL },
    { "RemoveAt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebookPageArray_RemoveAt, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAuiNotebookPageArray_delete, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
    { "wxAuiNotebookPageArray", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAuiNotebookPageArray_constructor_overload, s_wxluafunc_wxLua_wxAuiNotebookPageArray_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

    { 0, 0, 0, 0 },
};

int wxAuiNotebookPageArray_methodCount = sizeof(wxAuiNotebookPageArray_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiTabContainerButton
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiTabContainerButton'
int wxluatype_wxAuiTabContainerButton = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Get_bitmap[] = { &wxluatype_wxAuiTabContainerButton, NULL };
static int LUACALL wxLua_wxAuiTabContainerButton_Get_bitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_bitmap[1] = {{ wxLua_wxAuiTabContainerButton_Get_bitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Get_bitmap }};
//     %member wxBitmap bitmap;      // button's hover bitmap
static int LUACALL wxLua_wxAuiTabContainerButton_Get_bitmap(lua_State *L)
{
    // get this
    wxAuiTabContainerButton *self = (wxAuiTabContainerButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabContainerButton);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->bitmap, wxluatype_wxBitmap);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Get_cur_state[] = { &wxluatype_wxAuiTabContainerButton, NULL };
static int LUACALL wxLua_wxAuiTabContainerButton_Get_cur_state(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_cur_state[1] = {{ wxLua_wxAuiTabContainerButton_Get_cur_state, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Get_cur_state }};
//     %member int cur_state;        // current state (normal, hover, pressed, etc.)
static int LUACALL wxLua_wxAuiTabContainerButton_Get_cur_state(lua_State *L)
{
    // get this
    wxAuiTabContainerButton *self = (wxAuiTabContainerButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabContainerButton);
    // push the result number
    lua_pushnumber(L, self->cur_state);
    // return the number of values
    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Get_dis_bitmap[] = { &wxluatype_wxAuiTabContainerButton, NULL };
static int LUACALL wxLua_wxAuiTabContainerButton_Get_dis_bitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_dis_bitmap[1] = {{ wxLua_wxAuiTabContainerButton_Get_dis_bitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Get_dis_bitmap }};
//     %member wxBitmap dis_bitmap;  // button's disabled bitmap
static int LUACALL wxLua_wxAuiTabContainerButton_Get_dis_bitmap(lua_State *L)
{
    // get this
    wxAuiTabContainerButton *self = (wxAuiTabContainerButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabContainerButton);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->dis_bitmap, wxluatype_wxBitmap);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Get_id[] = { &wxluatype_wxAuiTabContainerButton, NULL };
static int LUACALL wxLua_wxAuiTabContainerButton_Get_id(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_id[1] = {{ wxLua_wxAuiTabContainerButton_Get_id, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Get_id }};
//     %member int id;               // button's id
static int LUACALL wxLua_wxAuiTabContainerButton_Get_id(lua_State *L)
{
    // get this
    wxAuiTabContainerButton *self = (wxAuiTabContainerButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabContainerButton);
    // push the result number
    lua_pushnumber(L, self->id);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Get_location[] = { &wxluatype_wxAuiTabContainerButton, NULL };
static int LUACALL wxLua_wxAuiTabContainerButton_Get_location(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_location[1] = {{ wxLua_wxAuiTabContainerButton_Get_location, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Get_location }};
//     %member int location;         // buttons location (wxLEFT, wxRIGHT, or wxCENTER)
static int LUACALL wxLua_wxAuiTabContainerButton_Get_location(lua_State *L)
{
    // get this
    wxAuiTabContainerButton *self = (wxAuiTabContainerButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabContainerButton);
    // push the result number
    lua_pushnumber(L, self->location);
    // return the number of values
    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Get_rect[] = { &wxluatype_wxAuiTabContainerButton, NULL };
static int LUACALL wxLua_wxAuiTabContainerButton_Get_rect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_rect[1] = {{ wxLua_wxAuiTabContainerButton_Get_rect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Get_rect }};
//     %member wxRect rect;          // button's hit rectangle
static int LUACALL wxLua_wxAuiTabContainerButton_Get_rect(lua_State *L)
{
    // get this
    wxAuiTabContainerButton *self = (wxAuiTabContainerButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabContainerButton);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->rect, wxluatype_wxRect);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Set_bitmap[] = { &wxluatype_wxAuiTabContainerButton, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxAuiTabContainerButton_Set_bitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_bitmap[1] = {{ wxLua_wxAuiTabContainerButton_Set_bitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Set_bitmap }};
//     %member wxBitmap bitmap;      // button's hover bitmap
static int LUACALL wxLua_wxAuiTabContainerButton_Set_bitmap(lua_State *L)
{
    // get the data type value
    wxBitmap* val = (wxBitmap*)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxAuiTabContainerButton *self = (wxAuiTabContainerButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabContainerButton);
    self->bitmap = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Set_cur_state[] = { &wxluatype_wxAuiTabContainerButton, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiTabContainerButton_Set_cur_state(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_cur_state[1] = {{ wxLua_wxAuiTabContainerButton_Set_cur_state, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Set_cur_state }};
//     %member int cur_state;        // current state (normal, hover, pressed, etc.)
static int LUACALL wxLua_wxAuiTabContainerButton_Set_cur_state(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiTabContainerButton *self = (wxAuiTabContainerButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabContainerButton);
    self->cur_state = val;
    // return the number of values
    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Set_dis_bitmap[] = { &wxluatype_wxAuiTabContainerButton, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxAuiTabContainerButton_Set_dis_bitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_dis_bitmap[1] = {{ wxLua_wxAuiTabContainerButton_Set_dis_bitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Set_dis_bitmap }};
//     %member wxBitmap dis_bitmap;  // button's disabled bitmap
static int LUACALL wxLua_wxAuiTabContainerButton_Set_dis_bitmap(lua_State *L)
{
    // get the data type value
    wxBitmap* val = (wxBitmap*)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxAuiTabContainerButton *self = (wxAuiTabContainerButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabContainerButton);
    self->dis_bitmap = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Set_id[] = { &wxluatype_wxAuiTabContainerButton, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiTabContainerButton_Set_id(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_id[1] = {{ wxLua_wxAuiTabContainerButton_Set_id, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Set_id }};
//     %member int id;               // button's id
static int LUACALL wxLua_wxAuiTabContainerButton_Set_id(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiTabContainerButton *self = (wxAuiTabContainerButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabContainerButton);
    self->id = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Set_location[] = { &wxluatype_wxAuiTabContainerButton, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiTabContainerButton_Set_location(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_location[1] = {{ wxLua_wxAuiTabContainerButton_Set_location, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Set_location }};
//     %member int location;         // buttons location (wxLEFT, wxRIGHT, or wxCENTER)
static int LUACALL wxLua_wxAuiTabContainerButton_Set_location(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiTabContainerButton *self = (wxAuiTabContainerButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabContainerButton);
    self->location = val;
    // return the number of values
    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Set_rect[] = { &wxluatype_wxAuiTabContainerButton, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxAuiTabContainerButton_Set_rect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_rect[1] = {{ wxLua_wxAuiTabContainerButton_Set_rect, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabContainerButton_Set_rect }};
//     %member wxRect rect;          // button's hit rectangle
static int LUACALL wxLua_wxAuiTabContainerButton_Set_rect(lua_State *L)
{
    // get the data type value
    wxRect* val = (wxRect*)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxAuiTabContainerButton *self = (wxAuiTabContainerButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabContainerButton);
    self->rect = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabContainerButton_delete[] = { &wxluatype_wxAuiTabContainerButton, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabContainerButton_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabContainerButton_delete }};


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiTabContainerButton_methods[] = {
#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
    // %member    { "Get_bitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_bitmap, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

    // %member    { "Get_cur_state", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_cur_state, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
    // %member    { "Get_dis_bitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_dis_bitmap, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

    // %member    { "Get_id", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_id, 1, NULL },
    // %member    { "Get_location", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_location, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    // %member    { "Get_rect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_rect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
    // %member    { "Set_bitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_bitmap, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

    // %member    { "Set_cur_state", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_cur_state, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
    // %member    { "Set_dis_bitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_dis_bitmap, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

    // %member    { "Set_id", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_id, 1, NULL },
    // %member    { "Set_location", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_location, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    // %member    { "Set_rect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_rect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
    { "bitmap", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_bitmap, 1, NULL },
    { "bitmap", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_bitmap, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

    { "cur_state", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_cur_state, 1, NULL },
    { "cur_state", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_cur_state, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAuiTabContainerButton_delete, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
    { "dis_bitmap", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_dis_bitmap, 1, NULL },
    { "dis_bitmap", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_dis_bitmap, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

    { "id", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_id, 1, NULL },
    { "id", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_id, 1, NULL },
    { "location", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_location, 1, NULL },
    { "location", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_location, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "rect", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiTabContainerButton_Set_rect, 1, NULL },
    { "rect", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiTabContainerButton_Get_rect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    { 0, 0, 0, 0 },
};

int wxAuiTabContainerButton_methodCount = sizeof(wxAuiTabContainerButton_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiTabArt
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiTabArt'
int wxluatype_wxAuiTabArt = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabArt_Clone[] = { &wxluatype_wxAuiTabArt, NULL };
static int LUACALL wxLua_wxAuiTabArt_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabArt_Clone[1] = {{ wxLua_wxAuiTabArt_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabArt_Clone }};
//     %gc virtual wxAuiTabArt* Clone() //= 0;
static int LUACALL wxLua_wxAuiTabArt_Clone(lua_State *L)
{
    // get this
    wxAuiTabArt * self = (wxAuiTabArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabArt);
    // call Clone
    wxAuiTabArt* returns = (wxAuiTabArt*)self->Clone();
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAuiTabArt(returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiTabArt);

    return 1;
}


#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabArt_DrawBackground[] = { &wxluatype_wxAuiTabArt, &wxluatype_wxDC, &wxluatype_wxWindow, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxAuiTabArt_DrawBackground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabArt_DrawBackground[1] = {{ wxLua_wxAuiTabArt_DrawBackground, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxAuiTabArt_DrawBackground }};
//     virtual void DrawBackground( wxDC& dc, wxWindow* wnd, const wxRect& rect) //= 0;
static int LUACALL wxLua_wxAuiTabArt_DrawBackground(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxWindow wnd
    wxWindow * wnd = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxAuiTabArt * self = (wxAuiTabArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabArt);
    // call DrawBackground
    self->DrawBackground(*dc, wnd, *rect);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabArt_DrawButton[] = { &wxluatype_wxAuiTabArt, &wxluatype_wxDC, &wxluatype_wxWindow, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxAuiTabArt_DrawButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabArt_DrawButton[1] = {{ wxLua_wxAuiTabArt_DrawButton, WXLUAMETHOD_METHOD, 8, 8, s_wxluatypeArray_wxLua_wxAuiTabArt_DrawButton }};
//     virtual void DrawButton( wxDC& dc, wxWindow* wnd, const wxRect& in_rect, int bitmap_id, int button_state, int orientation, wxRect* out_rect) //= 0;
static int LUACALL wxLua_wxAuiTabArt_DrawButton(lua_State *L)
{
    // wxRect out_rect
    wxRect * out_rect = (wxRect *)wxluaT_getuserdatatype(L, 8, wxluatype_wxRect);
    // int orientation
    int orientation = (int)wxlua_getnumbertype(L, 7);
    // int button_state
    int button_state = (int)wxlua_getnumbertype(L, 6);
    // int bitmap_id
    int bitmap_id = (int)wxlua_getnumbertype(L, 5);
    // const wxRect in_rect
    const wxRect * in_rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxWindow wnd
    wxWindow * wnd = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxAuiTabArt * self = (wxAuiTabArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabArt);
    // call DrawButton
    self->DrawButton(*dc, wnd, *in_rect, bitmap_id, button_state, orientation, out_rect);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabArt_DrawTab[] = { &wxluatype_wxAuiTabArt, &wxluatype_wxDC, &wxluatype_wxWindow, &wxluatype_wxAuiNotebookPage, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_wxRect, &wxluatype_wxRect, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxAuiTabArt_DrawTab(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabArt_DrawTab[1] = {{ wxLua_wxAuiTabArt_DrawTab, WXLUAMETHOD_METHOD, 9, 9, s_wxluatypeArray_wxLua_wxAuiTabArt_DrawTab }};
//     virtual void DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiNotebookPage& pane, const wxRect& in_rect, int close_button_state, wxRect* out_tab_rect, wxRect* out_button_rect, int* x_extent) //= 0;
static int LUACALL wxLua_wxAuiTabArt_DrawTab(lua_State *L)
{
    // int x_extent
    int * x_extent = (int *)wxlua_touserdata(L, 9);
    // wxRect out_button_rect
    wxRect * out_button_rect = (wxRect *)wxluaT_getuserdatatype(L, 8, wxluatype_wxRect);
    // wxRect out_tab_rect
    wxRect * out_tab_rect = (wxRect *)wxluaT_getuserdatatype(L, 7, wxluatype_wxRect);
    // int close_button_state
    int close_button_state = (int)wxlua_getnumbertype(L, 6);
    // const wxRect in_rect
    const wxRect * in_rect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxAuiNotebookPage pane
    const wxAuiNotebookPage * pane = (const wxAuiNotebookPage *)wxluaT_getuserdatatype(L, 4, wxluatype_wxAuiNotebookPage);
    // wxWindow wnd
    wxWindow * wnd = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxAuiTabArt * self = (wxAuiTabArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabArt);
    // call DrawTab
    self->DrawTab(*dc, wnd, *pane, *in_rect, close_button_state, out_tab_rect, out_button_rect, x_extent);

    return 0;
}

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabArt_GetBestTabCtrlSize[] = { &wxluatype_wxAuiTabArt, &wxluatype_wxWindow, &wxluatype_wxAuiNotebookPageArray, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxAuiTabArt_GetBestTabCtrlSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabArt_GetBestTabCtrlSize[1] = {{ wxLua_wxAuiTabArt_GetBestTabCtrlSize, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxAuiTabArt_GetBestTabCtrlSize }};
//     virtual int GetBestTabCtrlSize( wxWindow* wnd, const wxAuiNotebookPageArray& pages, const wxSize& required_bmp_size) //= 0;
static int LUACALL wxLua_wxAuiTabArt_GetBestTabCtrlSize(lua_State *L)
{
    // const wxSize required_bmp_size
    const wxSize * required_bmp_size = (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize);
    // const wxAuiNotebookPageArray pages
    const wxAuiNotebookPageArray * pages = (const wxAuiNotebookPageArray *)wxluaT_getuserdatatype(L, 3, wxluatype_wxAuiNotebookPageArray);
    // wxWindow wnd
    wxWindow * wnd = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiTabArt * self = (wxAuiTabArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabArt);
    // call GetBestTabCtrlSize
    int returns = (self->GetBestTabCtrlSize(wnd, *pages, *required_bmp_size));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabArt_GetIndentSize[] = { &wxluatype_wxAuiTabArt, NULL };
static int LUACALL wxLua_wxAuiTabArt_GetIndentSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabArt_GetIndentSize[1] = {{ wxLua_wxAuiTabArt_GetIndentSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabArt_GetIndentSize }};
//     virtual int GetIndentSize() //= 0;
static int LUACALL wxLua_wxAuiTabArt_GetIndentSize(lua_State *L)
{
    // get this
    wxAuiTabArt * self = (wxAuiTabArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabArt);
    // call GetIndentSize
    int returns = (self->GetIndentSize());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (((wxLUA_USE_wxDC) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabArt_GetTabSize[] = { &wxluatype_wxAuiTabArt, &wxluatype_wxDC, &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_wxBitmap, &wxluatype_TBOOLEAN, &wxluatype_TNUMBER, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxAuiTabArt_GetTabSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabArt_GetTabSize[1] = {{ wxLua_wxAuiTabArt_GetTabSize, WXLUAMETHOD_METHOD, 8, 8, s_wxluatypeArray_wxLua_wxAuiTabArt_GetTabSize }};
//     virtual wxSize GetTabSize( wxDC& dc, wxWindow* wnd, const wxString& caption, const wxBitmap& bitmap, bool active, int close_button_state, int* x_extent) //= 0;
static int LUACALL wxLua_wxAuiTabArt_GetTabSize(lua_State *L)
{
    // int x_extent
    int * x_extent = (int *)wxlua_touserdata(L, 8);
    // int close_button_state
    int close_button_state = (int)wxlua_getnumbertype(L, 7);
    // bool active
    bool active = wxlua_getbooleantype(L, 6);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 5, wxluatype_wxBitmap);
    // const wxString caption
    const wxString caption = wxlua_getwxStringtype(L, 4);
    // wxWindow wnd
    wxWindow * wnd = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxAuiTabArt * self = (wxAuiTabArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabArt);
    // call GetTabSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetTabSize(*dc, wnd, caption, *bitmap, active, close_button_state, x_extent));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxSize((wxSize*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (((wxLUA_USE_wxDC) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabArt_SetFlags[] = { &wxluatype_wxAuiTabArt, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiTabArt_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabArt_SetFlags[1] = {{ wxLua_wxAuiTabArt_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabArt_SetFlags }};
//     virtual void SetFlags(unsigned int flags) //= 0;
static int LUACALL wxLua_wxAuiTabArt_SetFlags(lua_State *L)
{
    // unsigned int flags
    unsigned int flags = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiTabArt * self = (wxAuiTabArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabArt);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabArt_SetMeasuringFont[] = { &wxluatype_wxAuiTabArt, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxAuiTabArt_SetMeasuringFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabArt_SetMeasuringFont[1] = {{ wxLua_wxAuiTabArt_SetMeasuringFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabArt_SetMeasuringFont }};
//     virtual void SetMeasuringFont(const wxFont& font) //= 0;
static int LUACALL wxLua_wxAuiTabArt_SetMeasuringFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxAuiTabArt * self = (wxAuiTabArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabArt);
    // call SetMeasuringFont
    self->SetMeasuringFont(*font);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabArt_SetNormalFont[] = { &wxluatype_wxAuiTabArt, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxAuiTabArt_SetNormalFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabArt_SetNormalFont[1] = {{ wxLua_wxAuiTabArt_SetNormalFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabArt_SetNormalFont }};
//     virtual void SetNormalFont(const wxFont& font) //= 0;
static int LUACALL wxLua_wxAuiTabArt_SetNormalFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxAuiTabArt * self = (wxAuiTabArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabArt);
    // call SetNormalFont
    self->SetNormalFont(*font);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabArt_SetSelectedFont[] = { &wxluatype_wxAuiTabArt, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxAuiTabArt_SetSelectedFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabArt_SetSelectedFont[1] = {{ wxLua_wxAuiTabArt_SetSelectedFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabArt_SetSelectedFont }};
//     virtual void SetSelectedFont(const wxFont& font) //= 0;
static int LUACALL wxLua_wxAuiTabArt_SetSelectedFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxAuiTabArt * self = (wxAuiTabArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabArt);
    // call SetSelectedFont
    self->SetSelectedFont(*font);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabArt_SetSizingInfo[] = { &wxluatype_wxAuiTabArt, &wxluatype_wxSize, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiTabArt_SetSizingInfo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabArt_SetSizingInfo[1] = {{ wxLua_wxAuiTabArt_SetSizingInfo, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiTabArt_SetSizingInfo }};
//     virtual void SetSizingInfo(const wxSize& tab_ctrl_size, size_t tab_count) //= 0;
static int LUACALL wxLua_wxAuiTabArt_SetSizingInfo(lua_State *L)
{
    // size_t tab_count
    size_t tab_count = (size_t)wxlua_getuintegertype(L, 3);
    // const wxSize tab_ctrl_size
    const wxSize * tab_ctrl_size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxAuiTabArt * self = (wxAuiTabArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabArt);
    // call SetSizingInfo
    self->SetSizingInfo(*tab_ctrl_size, tab_count);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabArt_ShowDropDown[] = { &wxluatype_wxAuiTabArt, &wxluatype_wxWindow, &wxluatype_wxAuiNotebookPageArray, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiTabArt_ShowDropDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabArt_ShowDropDown[1] = {{ wxLua_wxAuiTabArt_ShowDropDown, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxAuiTabArt_ShowDropDown }};
//     virtual int ShowDropDown( wxWindow* wnd, const wxAuiNotebookPageArray& items, int active_idx) //= 0;
static int LUACALL wxLua_wxAuiTabArt_ShowDropDown(lua_State *L)
{
    // int active_idx
    int active_idx = (int)wxlua_getnumbertype(L, 4);
    // const wxAuiNotebookPageArray items
    const wxAuiNotebookPageArray * items = (const wxAuiNotebookPageArray *)wxluaT_getuserdatatype(L, 3, wxluatype_wxAuiNotebookPageArray);
    // wxWindow wnd
    wxWindow * wnd = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiTabArt * self = (wxAuiTabArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabArt);
    // call ShowDropDown
    int returns = (self->ShowDropDown(wnd, *items, active_idx));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabArt_delete[] = { &wxluatype_wxAuiTabArt, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabArt_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabArt_delete }};




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiTabArt_methods[] = {
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabArt_Clone, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)) && (wxLUA_USE_wxDC)
    { "DrawBackground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabArt_DrawBackground, 1, NULL },
    { "DrawButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabArt_DrawButton, 1, NULL },
    { "DrawTab", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabArt_DrawTab, 1, NULL },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "GetBestTabCtrlSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabArt_GetBestTabCtrlSize, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    { "GetIndentSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabArt_GetIndentSize, 1, NULL },

#if (((wxLUA_USE_wxDC) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)) && (wxLUA_USE_wxPointSizeRect)
    { "GetTabSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabArt_GetTabSize, 1, NULL },
#endif // (((wxLUA_USE_wxDC) && (wxLUA_USE_wxBitmap)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)) && (wxLUA_USE_wxPointSizeRect)

    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabArt_SetFlags, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)
    { "SetMeasuringFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabArt_SetMeasuringFont, 1, NULL },
    { "SetNormalFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabArt_SetNormalFont, 1, NULL },
    { "SetSelectedFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabArt_SetSelectedFont, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "SetSizingInfo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabArt_SetSizingInfo, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    { "ShowDropDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabArt_ShowDropDown, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAuiTabArt_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxAuiTabArt_methodCount = sizeof(wxAuiTabArt_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiDefaultTabArt
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiDefaultTabArt'
int wxluatype_wxAuiDefaultTabArt = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDefaultTabArt_delete[] = { &wxluatype_wxAuiDefaultTabArt, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDefaultTabArt_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAuiDefaultTabArt_delete }};

static int LUACALL wxLua_wxAuiDefaultTabArt_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDefaultTabArt_constructor[1] = {{ wxLua_wxAuiDefaultTabArt_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxAuiDefaultTabArt();
static int LUACALL wxLua_wxAuiDefaultTabArt_constructor(lua_State *L)
{
    // call constructor
    wxAuiDefaultTabArt* returns = new wxAuiDefaultTabArt();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAuiDefaultTabArt((wxAuiDefaultTabArt*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiDefaultTabArt);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiDefaultTabArt_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAuiDefaultTabArt_delete, 1, NULL },
    { "wxAuiDefaultTabArt", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAuiDefaultTabArt_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxAuiDefaultTabArt_methodCount = sizeof(wxAuiDefaultTabArt_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiSimpleTabArt
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiSimpleTabArt'
int wxluatype_wxAuiSimpleTabArt = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiSimpleTabArt_delete[] = { &wxluatype_wxAuiSimpleTabArt, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiSimpleTabArt_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAuiSimpleTabArt_delete }};

static int LUACALL wxLua_wxAuiSimpleTabArt_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiSimpleTabArt_constructor[1] = {{ wxLua_wxAuiSimpleTabArt_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxAuiSimpleTabArt();
static int LUACALL wxLua_wxAuiSimpleTabArt_constructor(lua_State *L)
{
    // call constructor
    wxAuiSimpleTabArt* returns = new wxAuiSimpleTabArt();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAuiSimpleTabArt((wxAuiSimpleTabArt*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiSimpleTabArt);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiSimpleTabArt_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAuiSimpleTabArt_delete, 1, NULL },
    { "wxAuiSimpleTabArt", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAuiSimpleTabArt_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxAuiSimpleTabArt_methodCount = sizeof(wxAuiSimpleTabArt_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiTabCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiTabCtrl'
int wxluatype_wxAuiTabCtrl = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_AddButton[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxBitmap, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_AddButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_AddButton[1] = {{ wxLua_wxAuiTabCtrl_AddButton, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxAuiTabCtrl_AddButton }};
//     void AddButton(int id, int location, const wxBitmap& normal_bitmap = wxNullBitmap, const wxBitmap& disabled_bitmap = wxNullBitmap);
static int LUACALL wxLua_wxAuiTabCtrl_AddButton(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxBitmap disabled_bitmap = wxNullBitmap
    const wxBitmap * disabled_bitmap = (argCount >= 5 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 5, wxluatype_wxBitmap) : &wxNullBitmap);
    // const wxBitmap normal_bitmap = wxNullBitmap
    const wxBitmap * normal_bitmap = (argCount >= 4 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 4, wxluatype_wxBitmap) : &wxNullBitmap);
    // int location
    int location = (int)wxlua_getnumbertype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call AddButton
    self->AddButton(id, location, *normal_bitmap, *disabled_bitmap);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_AddPage[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_wxWindow, &wxluatype_wxAuiNotebookPage, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_AddPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_AddPage[1] = {{ wxLua_wxAuiTabCtrl_AddPage, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiTabCtrl_AddPage }};
//     bool AddPage(wxWindow* page, const wxAuiNotebookPage& info);
static int LUACALL wxLua_wxAuiTabCtrl_AddPage(lua_State *L)
{
    // const wxAuiNotebookPage info
    const wxAuiNotebookPage * info = (const wxAuiNotebookPage *)wxluaT_getuserdatatype(L, 3, wxluatype_wxAuiNotebookPage);
    // wxWindow page
    wxWindow * page = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call AddPage
    bool returns = (self->AddPage(page, *info));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_ButtonHitTest[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxAuiTabContainerButton, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_ButtonHitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_ButtonHitTest[1] = {{ wxLua_wxAuiTabCtrl_ButtonHitTest, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxAuiTabCtrl_ButtonHitTest }};
//     bool ButtonHitTest(int x, int y, wxAuiTabContainerButton** hit) const;
static int LUACALL wxLua_wxAuiTabCtrl_ButtonHitTest(lua_State *L)
{
    // wxAuiTabContainerButton hit
    wxAuiTabContainerButton ** hit = (wxAuiTabContainerButton **)wxluaT_getuserdatatype(L, 4, wxluatype_wxAuiTabContainerButton);
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call ButtonHitTest
    bool returns = (self->ButtonHitTest(x, y, hit));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_DoShowHide[] = { &wxluatype_wxAuiTabCtrl, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_DoShowHide(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_DoShowHide[1] = {{ wxLua_wxAuiTabCtrl_DoShowHide, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabCtrl_DoShowHide }};
//     void DoShowHide();
static int LUACALL wxLua_wxAuiTabCtrl_DoShowHide(lua_State *L)
{
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call DoShowHide
    self->DoShowHide();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetActivePage[] = { &wxluatype_wxAuiTabCtrl, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_GetActivePage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_GetActivePage[1] = {{ wxLua_wxAuiTabCtrl_GetActivePage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetActivePage }};
//     int GetActivePage() const;
static int LUACALL wxLua_wxAuiTabCtrl_GetActivePage(lua_State *L)
{
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call GetActivePage
    int returns = (self->GetActivePage());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetArtProvider[] = { &wxluatype_wxAuiTabCtrl, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_GetArtProvider(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_GetArtProvider[1] = {{ wxLua_wxAuiTabCtrl_GetArtProvider, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetArtProvider }};
//     wxAuiTabArt* GetArtProvider() const;
static int LUACALL wxLua_wxAuiTabCtrl_GetArtProvider(lua_State *L)
{
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call GetArtProvider
    wxAuiTabArt* returns = (wxAuiTabArt*)self->GetArtProvider();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiTabArt);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetFlags[] = { &wxluatype_wxAuiTabCtrl, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_GetFlags[1] = {{ wxLua_wxAuiTabCtrl_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetFlags }};
//     unsigned int GetFlags() const;
static int LUACALL wxLua_wxAuiTabCtrl_GetFlags(lua_State *L)
{
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call GetFlags
    unsigned int returns = (self->GetFlags());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetIdxFromWindow[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_GetIdxFromWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_GetIdxFromWindow[1] = {{ wxLua_wxAuiTabCtrl_GetIdxFromWindow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetIdxFromWindow }};
//     int GetIdxFromWindow(wxWindow* page) const;
static int LUACALL wxLua_wxAuiTabCtrl_GetIdxFromWindow(lua_State *L)
{
    // wxWindow page
    wxWindow * page = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call GetIdxFromWindow
    int returns = (self->GetIdxFromWindow(page));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetPage1[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_GetPage1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_GetPage1[1] = {{ wxLua_wxAuiTabCtrl_GetPage1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetPage1 }};
//     const wxAuiNotebookPage& GetPage(size_t idx) const;
static int LUACALL wxLua_wxAuiTabCtrl_GetPage1(lua_State *L)
{
    // size_t idx
    size_t idx = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call GetPage
    const wxAuiNotebookPage* returns = &self->GetPage(idx);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiNotebookPage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetPage[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_GetPage(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_GetPage[1] = {{ wxLua_wxAuiTabCtrl_GetPage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetPage }};
//     wxAuiNotebookPage& GetPage(size_t idx);
static int LUACALL wxLua_wxAuiTabCtrl_GetPage(lua_State *L)
{
    // size_t idx
    size_t idx = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call GetPage
    wxAuiNotebookPage* returns = &self->GetPage(idx);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiNotebookPage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetPageCount[] = { &wxluatype_wxAuiTabCtrl, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_GetPageCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_GetPageCount[1] = {{ wxLua_wxAuiTabCtrl_GetPageCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetPageCount }};
//     size_t GetPageCount() const;
static int LUACALL wxLua_wxAuiTabCtrl_GetPageCount(lua_State *L)
{
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call GetPageCount
    size_t returns = (self->GetPageCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetPages[] = { &wxluatype_wxAuiTabCtrl, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_GetPages(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_GetPages[1] = {{ wxLua_wxAuiTabCtrl_GetPages, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetPages }};
//     wxAuiNotebookPageArray& GetPages();
static int LUACALL wxLua_wxAuiTabCtrl_GetPages(lua_State *L)
{
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call GetPages
    wxAuiNotebookPageArray* returns = &self->GetPages();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiNotebookPageArray);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetTabOffset[] = { &wxluatype_wxAuiTabCtrl, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_GetTabOffset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_GetTabOffset[1] = {{ wxLua_wxAuiTabCtrl_GetTabOffset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetTabOffset }};
//     size_t GetTabOffset() const;
static int LUACALL wxLua_wxAuiTabCtrl_GetTabOffset(lua_State *L)
{
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call GetTabOffset
    size_t returns = (self->GetTabOffset());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetWindowFromIdx[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_GetWindowFromIdx(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_GetWindowFromIdx[1] = {{ wxLua_wxAuiTabCtrl_GetWindowFromIdx, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetWindowFromIdx }};
//     wxWindow* GetWindowFromIdx(size_t idx) const;
static int LUACALL wxLua_wxAuiTabCtrl_GetWindowFromIdx(lua_State *L)
{
    // size_t idx
    size_t idx = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call GetWindowFromIdx
    wxWindow* returns = (wxWindow*)self->GetWindowFromIdx(idx);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_InsertPage[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_wxWindow, &wxluatype_wxAuiNotebookPage, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_InsertPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_InsertPage[1] = {{ wxLua_wxAuiTabCtrl_InsertPage, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxAuiTabCtrl_InsertPage }};
//     bool InsertPage(wxWindow* page, const wxAuiNotebookPage& info, size_t idx);
static int LUACALL wxLua_wxAuiTabCtrl_InsertPage(lua_State *L)
{
    // size_t idx
    size_t idx = (size_t)wxlua_getuintegertype(L, 4);
    // const wxAuiNotebookPage info
    const wxAuiNotebookPage * info = (const wxAuiNotebookPage *)wxluaT_getuserdatatype(L, 3, wxluatype_wxAuiNotebookPage);
    // wxWindow page
    wxWindow * page = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call InsertPage
    bool returns = (self->InsertPage(page, *info, idx));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,8,5)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_IsDragging[] = { &wxluatype_wxAuiTabCtrl, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_IsDragging(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_IsDragging[1] = {{ wxLua_wxAuiTabCtrl_IsDragging, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabCtrl_IsDragging }};
//     %wxchkver_2_8_5 bool IsDragging() const
static int LUACALL wxLua_wxAuiTabCtrl_IsDragging(lua_State *L)
{
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call IsDragging
    bool returns = (self->IsDragging());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,5)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

#if ((wxCHECK_VERSION(2,8,6)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_IsTabVisible[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxDC, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_IsTabVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_IsTabVisible[1] = {{ wxLua_wxAuiTabCtrl_IsTabVisible, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxAuiTabCtrl_IsTabVisible }};
//     %wxchkver_2_8_6 bool IsTabVisible(int tabPage, int tabOffset, wxDC* dc, wxWindow* wnd);
static int LUACALL wxLua_wxAuiTabCtrl_IsTabVisible(lua_State *L)
{
    // wxWindow wnd
    wxWindow * wnd = (wxWindow *)wxluaT_getuserdatatype(L, 5, wxluatype_wxWindow);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 4, wxluatype_wxDC);
    // int tabOffset
    int tabOffset = (int)wxlua_getnumbertype(L, 3);
    // int tabPage
    int tabPage = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call IsTabVisible
    bool returns = (self->IsTabVisible(tabPage, tabOffset, dc, wnd));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,6)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)) && (wxLUA_USE_wxDC)

#if (wxCHECK_VERSION(2,8,6)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_MakeTabVisible[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_TNUMBER, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_MakeTabVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_MakeTabVisible[1] = {{ wxLua_wxAuiTabCtrl_MakeTabVisible, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiTabCtrl_MakeTabVisible }};
//     %wxchkver_2_8_6 void MakeTabVisible(int tabPage, wxWindow* win);
static int LUACALL wxLua_wxAuiTabCtrl_MakeTabVisible(lua_State *L)
{
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // int tabPage
    int tabPage = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call MakeTabVisible
    self->MakeTabVisible(tabPage, win);

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,6)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_MovePage[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_wxWindow, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_MovePage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_MovePage[1] = {{ wxLua_wxAuiTabCtrl_MovePage, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiTabCtrl_MovePage }};
//     bool MovePage(wxWindow* page, size_t new_idx);
static int LUACALL wxLua_wxAuiTabCtrl_MovePage(lua_State *L)
{
    // size_t new_idx
    size_t new_idx = (size_t)wxlua_getuintegertype(L, 3);
    // wxWindow page
    wxWindow * page = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call MovePage
    bool returns = (self->MovePage(page, new_idx));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_RemoveButton[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_RemoveButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_RemoveButton[1] = {{ wxLua_wxAuiTabCtrl_RemoveButton, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_RemoveButton }};
//     void RemoveButton(int id);
static int LUACALL wxLua_wxAuiTabCtrl_RemoveButton(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call RemoveButton
    self->RemoveButton(id);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_RemovePage[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_RemovePage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_RemovePage[1] = {{ wxLua_wxAuiTabCtrl_RemovePage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_RemovePage }};
//     bool RemovePage(wxWindow* page);
static int LUACALL wxLua_wxAuiTabCtrl_RemovePage(lua_State *L)
{
    // wxWindow page
    wxWindow * page = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call RemovePage
    bool returns = (self->RemovePage(page));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetActivePage1[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_SetActivePage1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_SetActivePage1[1] = {{ wxLua_wxAuiTabCtrl_SetActivePage1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetActivePage1 }};
//     bool SetActivePage(size_t page);
static int LUACALL wxLua_wxAuiTabCtrl_SetActivePage1(lua_State *L)
{
    // size_t page
    size_t page = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call SetActivePage
    bool returns = (self->SetActivePage(page));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetActivePage[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_SetActivePage(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_SetActivePage[1] = {{ wxLua_wxAuiTabCtrl_SetActivePage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetActivePage }};
//     bool SetActivePage(wxWindow* page);
static int LUACALL wxLua_wxAuiTabCtrl_SetActivePage(lua_State *L)
{
    // wxWindow page
    wxWindow * page = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call SetActivePage
    bool returns = (self->SetActivePage(page));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetArtProvider[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_wxAuiTabArt, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_SetArtProvider(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_SetArtProvider[1] = {{ wxLua_wxAuiTabCtrl_SetArtProvider, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetArtProvider }};
//     void SetArtProvider(wxAuiTabArt* art);
static int LUACALL wxLua_wxAuiTabCtrl_SetArtProvider(lua_State *L)
{
    // wxAuiTabArt art
    wxAuiTabArt * art = (wxAuiTabArt *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiTabArt);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call SetArtProvider
    self->SetArtProvider(art);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetFlags[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_SetFlags[1] = {{ wxLua_wxAuiTabCtrl_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetFlags }};
//     void SetFlags(unsigned int flags);
static int LUACALL wxLua_wxAuiTabCtrl_SetFlags(lua_State *L)
{
    // unsigned int flags
    unsigned int flags = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetMeasuringFont[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_SetMeasuringFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_SetMeasuringFont[1] = {{ wxLua_wxAuiTabCtrl_SetMeasuringFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetMeasuringFont }};
//     void SetMeasuringFont(const wxFont& measuring_font);
static int LUACALL wxLua_wxAuiTabCtrl_SetMeasuringFont(lua_State *L)
{
    // const wxFont measuring_font
    const wxFont * measuring_font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call SetMeasuringFont
    self->SetMeasuringFont(*measuring_font);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetNoneActive[] = { &wxluatype_wxAuiTabCtrl, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_SetNoneActive(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_SetNoneActive[1] = {{ wxLua_wxAuiTabCtrl_SetNoneActive, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetNoneActive }};
//     void SetNoneActive();
static int LUACALL wxLua_wxAuiTabCtrl_SetNoneActive(lua_State *L)
{
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call SetNoneActive
    self->SetNoneActive();

    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetNormalFont[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_SetNormalFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_SetNormalFont[1] = {{ wxLua_wxAuiTabCtrl_SetNormalFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetNormalFont }};
//     void SetNormalFont(const wxFont& normal_font);
static int LUACALL wxLua_wxAuiTabCtrl_SetNormalFont(lua_State *L)
{
    // const wxFont normal_font
    const wxFont * normal_font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call SetNormalFont
    self->SetNormalFont(*normal_font);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetRect[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_SetRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_SetRect[1] = {{ wxLua_wxAuiTabCtrl_SetRect, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetRect }};
//     void SetRect(const wxRect& rect);
static int LUACALL wxLua_wxAuiTabCtrl_SetRect(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call SetRect
    self->SetRect(*rect);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetSelectedFont[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_SetSelectedFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_SetSelectedFont[1] = {{ wxLua_wxAuiTabCtrl_SetSelectedFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetSelectedFont }};
//     void SetSelectedFont(const wxFont& selected_font);
static int LUACALL wxLua_wxAuiTabCtrl_SetSelectedFont(lua_State *L)
{
    // const wxFont selected_font
    const wxFont * selected_font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call SetSelectedFont
    self->SetSelectedFont(*selected_font);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetTabOffset[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_SetTabOffset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_SetTabOffset[1] = {{ wxLua_wxAuiTabCtrl_SetTabOffset, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetTabOffset }};
//     void SetTabOffset(size_t offset);
static int LUACALL wxLua_wxAuiTabCtrl_SetTabOffset(lua_State *L)
{
    // size_t offset
    size_t offset = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call SetTabOffset
    self->SetTabOffset(offset);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_TabHitTest[] = { &wxluatype_wxAuiTabCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_TabHitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_TabHitTest[1] = {{ wxLua_wxAuiTabCtrl_TabHitTest, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxAuiTabCtrl_TabHitTest }};
//     bool TabHitTest(int x, int y, wxWindow** hit) const;
static int LUACALL wxLua_wxAuiTabCtrl_TabHitTest(lua_State *L)
{
    // wxWindow hit
    wxWindow ** hit = (wxWindow **)wxluaT_getuserdatatype(L, 4, wxluatype_wxWindow);
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiTabCtrl * self = (wxAuiTabCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiTabCtrl);
    // call TabHitTest
    bool returns = (self->TabHitTest(x, y, hit));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiTabCtrl_constructor[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiTabCtrl_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_constructor[1] = {{ wxLua_wxAuiTabCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxAuiTabCtrl_constructor }};
//     wxAuiTabCtrl(wxWindow* parent,  wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0);
static int LUACALL wxLua_wxAuiTabCtrl_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = 0
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxAuiTabCtrl* returns = new wxAuiTabCtrl(parent, id, *pos, *size, style);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiTabCtrl);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)



#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_GetPage_overload[] =
{
    { wxLua_wxAuiTabCtrl_GetPage1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetPage1 },
    { wxLua_wxAuiTabCtrl_GetPage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_GetPage },
};
static int s_wxluafunc_wxLua_wxAuiTabCtrl_GetPage_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiTabCtrl_GetPage_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiTabCtrl_SetActivePage_overload[] =
{
    { wxLua_wxAuiTabCtrl_SetActivePage1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetActivePage1 },
    { wxLua_wxAuiTabCtrl_SetActivePage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiTabCtrl_SetActivePage },
};
static int s_wxluafunc_wxLua_wxAuiTabCtrl_SetActivePage_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiTabCtrl_SetActivePage_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiTabCtrl_methods[] = {
#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
    { "AddButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_AddButton, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

    { "AddPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_AddPage, 1, NULL },
    { "ButtonHitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_ButtonHitTest, 1, NULL },
    { "DoShowHide", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_DoShowHide, 1, NULL },
    { "GetActivePage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_GetActivePage, 1, NULL },
    { "GetArtProvider", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_GetArtProvider, 1, NULL },
    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_GetFlags, 1, NULL },
    { "GetIdxFromWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_GetIdxFromWindow, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
    { "GetPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_GetPage_overload, s_wxluafunc_wxLua_wxAuiTabCtrl_GetPage_overload_count, 0 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

    { "GetPageCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_GetPageCount, 1, NULL },
    { "GetPages", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_GetPages, 1, NULL },
    { "GetTabOffset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_GetTabOffset, 1, NULL },
    { "GetWindowFromIdx", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_GetWindowFromIdx, 1, NULL },
    { "InsertPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_InsertPage, 1, NULL },

#if (wxCHECK_VERSION(2,8,5)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
    { "IsDragging", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_IsDragging, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,5)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

#if ((wxCHECK_VERSION(2,8,6)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)) && (wxLUA_USE_wxDC)
    { "IsTabVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_IsTabVisible, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,6)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)) && (wxLUA_USE_wxDC)

#if (wxCHECK_VERSION(2,8,6)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
    { "MakeTabVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_MakeTabVisible, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,6)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

    { "MovePage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_MovePage, 1, NULL },
    { "RemoveButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_RemoveButton, 1, NULL },
    { "RemovePage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_RemovePage, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
    { "SetActivePage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_SetActivePage_overload, s_wxluafunc_wxLua_wxAuiTabCtrl_SetActivePage_overload_count, 0 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

    { "SetArtProvider", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_SetArtProvider, 1, NULL },
    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_SetFlags, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)
    { "SetMeasuringFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_SetMeasuringFont, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)

    { "SetNoneActive", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_SetNoneActive, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)
    { "SetNormalFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_SetNormalFont, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "SetRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_SetRect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)
    { "SetSelectedFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_SetSelectedFont, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)

    { "SetTabOffset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_SetTabOffset, 1, NULL },
    { "TabHitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiTabCtrl_TabHitTest, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "wxAuiTabCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAuiTabCtrl_constructor, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    { 0, 0, 0, 0 },
};

int wxAuiTabCtrl_methodCount = sizeof(wxAuiTabCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiNotebook
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiNotebook'
int wxluatype_wxAuiNotebook = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_AddPage[] = { &wxluatype_wxAuiNotebook, &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxAuiNotebook_AddPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_AddPage[1] = {{ wxLua_wxAuiNotebook_AddPage, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxAuiNotebook_AddPage }};
//     bool AddPage(wxWindow* page, const wxString& caption, bool select = false, const wxBitmap& bitmap = wxNullBitmap);
static int LUACALL wxLua_wxAuiNotebook_AddPage(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxBitmap bitmap = wxNullBitmap
    const wxBitmap * bitmap = (argCount >= 5 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 5, wxluatype_wxBitmap) : &wxNullBitmap);
    // bool select = false
    bool select = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : false);
    // const wxString caption
    const wxString caption = wxlua_getwxStringtype(L, 3);
    // wxWindow page
    wxWindow * page = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call AddPage
    bool returns = (self->AddPage(page, caption, select, *bitmap));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_AdvanceSelection[] = { &wxluatype_wxAuiNotebook, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiNotebook_AdvanceSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_AdvanceSelection[1] = {{ wxLua_wxAuiNotebook_AdvanceSelection, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_AdvanceSelection }};
//     void AdvanceSelection(bool forward = true);
static int LUACALL wxLua_wxAuiNotebook_AdvanceSelection(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool forward = true
    bool forward = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call AdvanceSelection
    self->AdvanceSelection(forward);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_Create[] = { &wxluatype_wxAuiNotebook, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiNotebook_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_Create[1] = {{ wxLua_wxAuiNotebook_Create, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxAuiNotebook_Create }};
//     bool Create(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0);
static int LUACALL wxLua_wxAuiNotebook_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 3 ? (wxWindowID)wxlua_getnumbertype(L, 3) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_DeletePage[] = { &wxluatype_wxAuiNotebook, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiNotebook_DeletePage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_DeletePage[1] = {{ wxLua_wxAuiNotebook_DeletePage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_DeletePage }};
//     bool DeletePage(size_t page);
static int LUACALL wxLua_wxAuiNotebook_DeletePage(lua_State *L)
{
    // size_t page
    size_t page = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call DeletePage
    bool returns = (self->DeletePage(page));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_GetArtProvider[] = { &wxluatype_wxAuiNotebook, NULL };
static int LUACALL wxLua_wxAuiNotebook_GetArtProvider(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_GetArtProvider[1] = {{ wxLua_wxAuiNotebook_GetArtProvider, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebook_GetArtProvider }};
//     wxAuiTabArt* GetArtProvider() const;
static int LUACALL wxLua_wxAuiNotebook_GetArtProvider(lua_State *L)
{
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call GetArtProvider
    wxAuiTabArt* returns = (wxAuiTabArt*)self->GetArtProvider();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiTabArt);

    return 1;
}


#if ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,1))) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_GetAuiManager[] = { &wxluatype_wxAuiNotebook, NULL };
static int LUACALL wxLua_wxAuiNotebook_GetAuiManager(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_GetAuiManager[1] = {{ wxLua_wxAuiNotebook_GetAuiManager, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebook_GetAuiManager }};
//     const wxAuiManager& GetAuiManager() const
static int LUACALL wxLua_wxAuiNotebook_GetAuiManager(lua_State *L)
{
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call GetAuiManager
    const wxAuiManager* returns = &self->GetAuiManager();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiManager);

    return 1;
}

#endif // ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,1))) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_GetHeightForPageHeight[] = { &wxluatype_wxAuiNotebook, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiNotebook_GetHeightForPageHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_GetHeightForPageHeight[1] = {{ wxLua_wxAuiNotebook_GetHeightForPageHeight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_GetHeightForPageHeight }};
//     int GetHeightForPageHeight(int pageHeight);
static int LUACALL wxLua_wxAuiNotebook_GetHeightForPageHeight(lua_State *L)
{
    // int pageHeight
    int pageHeight = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call GetHeightForPageHeight
    int returns = (self->GetHeightForPageHeight(pageHeight));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_GetPage[] = { &wxluatype_wxAuiNotebook, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiNotebook_GetPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_GetPage[1] = {{ wxLua_wxAuiNotebook_GetPage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_GetPage }};
//     wxWindow* GetPage(size_t page_idx) const;
static int LUACALL wxLua_wxAuiNotebook_GetPage(lua_State *L)
{
    // size_t page_idx
    size_t page_idx = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call GetPage
    wxWindow* returns = (wxWindow*)self->GetPage(page_idx);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_GetPageBitmap[] = { &wxluatype_wxAuiNotebook, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiNotebook_GetPageBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_GetPageBitmap[1] = {{ wxLua_wxAuiNotebook_GetPageBitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_GetPageBitmap }};
//     wxBitmap GetPageBitmap(size_t page_idx) const;
static int LUACALL wxLua_wxAuiNotebook_GetPageBitmap(lua_State *L)
{
    // size_t page_idx
    size_t page_idx = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call GetPageBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetPageBitmap(page_idx));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxBitmap*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_GetPageCount[] = { &wxluatype_wxAuiNotebook, NULL };
static int LUACALL wxLua_wxAuiNotebook_GetPageCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_GetPageCount[1] = {{ wxLua_wxAuiNotebook_GetPageCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebook_GetPageCount }};
//     size_t GetPageCount() const;
static int LUACALL wxLua_wxAuiNotebook_GetPageCount(lua_State *L)
{
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call GetPageCount
    size_t returns = (self->GetPageCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_GetPageIndex[] = { &wxluatype_wxAuiNotebook, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxAuiNotebook_GetPageIndex(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_GetPageIndex[1] = {{ wxLua_wxAuiNotebook_GetPageIndex, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_GetPageIndex }};
//     int GetPageIndex(wxWindow* page_wnd) const;
static int LUACALL wxLua_wxAuiNotebook_GetPageIndex(lua_State *L)
{
    // wxWindow page_wnd
    wxWindow * page_wnd = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call GetPageIndex
    int returns = (self->GetPageIndex(page_wnd));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_GetPageText[] = { &wxluatype_wxAuiNotebook, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiNotebook_GetPageText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_GetPageText[1] = {{ wxLua_wxAuiNotebook_GetPageText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_GetPageText }};
//     wxString GetPageText(size_t page_idx) const;
static int LUACALL wxLua_wxAuiNotebook_GetPageText(lua_State *L)
{
    // size_t page_idx
    size_t page_idx = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call GetPageText
    wxString returns = (self->GetPageText(page_idx));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_GetSelection[] = { &wxluatype_wxAuiNotebook, NULL };
static int LUACALL wxLua_wxAuiNotebook_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_GetSelection[1] = {{ wxLua_wxAuiNotebook_GetSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebook_GetSelection }};
//     int GetSelection() const;
static int LUACALL wxLua_wxAuiNotebook_GetSelection(lua_State *L)
{
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call GetSelection
    int returns = (self->GetSelection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_GetTabCtrlHeight[] = { &wxluatype_wxAuiNotebook, NULL };
static int LUACALL wxLua_wxAuiNotebook_GetTabCtrlHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_GetTabCtrlHeight[1] = {{ wxLua_wxAuiNotebook_GetTabCtrlHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebook_GetTabCtrlHeight }};
//     int GetTabCtrlHeight() const;
static int LUACALL wxLua_wxAuiNotebook_GetTabCtrlHeight(lua_State *L)
{
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call GetTabCtrlHeight
    int returns = (self->GetTabCtrlHeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_InsertPage[] = { &wxluatype_wxAuiNotebook, &wxluatype_TINTEGER, &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxAuiNotebook_InsertPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_InsertPage[1] = {{ wxLua_wxAuiNotebook_InsertPage, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxAuiNotebook_InsertPage }};
//     bool InsertPage(size_t page_idx, wxWindow* page, const wxString& caption, bool select = false, const wxBitmap& bitmap = wxNullBitmap);
static int LUACALL wxLua_wxAuiNotebook_InsertPage(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxBitmap bitmap = wxNullBitmap
    const wxBitmap * bitmap = (argCount >= 6 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 6, wxluatype_wxBitmap) : &wxNullBitmap);
    // bool select = false
    bool select = (argCount >= 5 ? wxlua_getbooleantype(L, 5) : false);
    // const wxString caption
    const wxString caption = wxlua_getwxStringtype(L, 4);
    // wxWindow page
    wxWindow * page = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // size_t page_idx
    size_t page_idx = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call InsertPage
    bool returns = (self->InsertPage(page_idx, page, caption, select, *bitmap));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_RemovePage[] = { &wxluatype_wxAuiNotebook, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiNotebook_RemovePage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_RemovePage[1] = {{ wxLua_wxAuiNotebook_RemovePage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_RemovePage }};
//     bool RemovePage(size_t page);
static int LUACALL wxLua_wxAuiNotebook_RemovePage(lua_State *L)
{
    // size_t page
    size_t page = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call RemovePage
    bool returns = (self->RemovePage(page));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_SetArtProvider[] = { &wxluatype_wxAuiNotebook, &wxluatype_wxAuiTabArt, NULL };
static int LUACALL wxLua_wxAuiNotebook_SetArtProvider(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_SetArtProvider[1] = {{ wxLua_wxAuiNotebook_SetArtProvider, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_SetArtProvider }};
//     void SetArtProvider(wxAuiTabArt* art);
static int LUACALL wxLua_wxAuiNotebook_SetArtProvider(lua_State *L)
{
    // wxAuiTabArt art
    wxAuiTabArt * art = (wxAuiTabArt *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiTabArt);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call SetArtProvider
    self->SetArtProvider(art);

    return 0;
}


#if ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_SetFont[] = { &wxluatype_wxAuiNotebook, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxAuiNotebook_SetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_SetFont[1] = {{ wxLua_wxAuiNotebook_SetFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_SetFont }};
//     virtual bool SetFont(const wxFont& font);
static int LUACALL wxLua_wxAuiNotebook_SetFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call SetFont
    bool returns = (self->SetFont(*font));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_SetMeasuringFont[] = { &wxluatype_wxAuiNotebook, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxAuiNotebook_SetMeasuringFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_SetMeasuringFont[1] = {{ wxLua_wxAuiNotebook_SetMeasuringFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_SetMeasuringFont }};
// 	void SetMeasuringFont(const wxFont& font);
static int LUACALL wxLua_wxAuiNotebook_SetMeasuringFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call SetMeasuringFont
    self->SetMeasuringFont(*font);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_SetNormalFont[] = { &wxluatype_wxAuiNotebook, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxAuiNotebook_SetNormalFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_SetNormalFont[1] = {{ wxLua_wxAuiNotebook_SetNormalFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_SetNormalFont }};
// 	void SetNormalFont(const wxFont& font);
static int LUACALL wxLua_wxAuiNotebook_SetNormalFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call SetNormalFont
    self->SetNormalFont(*font);

    return 0;
}

#endif // ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))) && (wxLUA_USE_wxFont)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_SetPageBitmap[] = { &wxluatype_wxAuiNotebook, &wxluatype_TINTEGER, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxAuiNotebook_SetPageBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_SetPageBitmap[1] = {{ wxLua_wxAuiNotebook_SetPageBitmap, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiNotebook_SetPageBitmap }};
//     bool SetPageBitmap(size_t page, const wxBitmap& bitmap);
static int LUACALL wxLua_wxAuiNotebook_SetPageBitmap(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 3, wxluatype_wxBitmap);
    // size_t page
    size_t page = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call SetPageBitmap
    bool returns = (self->SetPageBitmap(page, *bitmap));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_SetPageText[] = { &wxluatype_wxAuiNotebook, &wxluatype_TINTEGER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAuiNotebook_SetPageText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_SetPageText[1] = {{ wxLua_wxAuiNotebook_SetPageText, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiNotebook_SetPageText }};
//     bool SetPageText(size_t page, const wxString& text);
static int LUACALL wxLua_wxAuiNotebook_SetPageText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // size_t page
    size_t page = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call SetPageText
    bool returns = (self->SetPageText(page, text));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_SetSelectedFont[] = { &wxluatype_wxAuiNotebook, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxAuiNotebook_SetSelectedFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_SetSelectedFont[1] = {{ wxLua_wxAuiNotebook_SetSelectedFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_SetSelectedFont }};
// 	void SetSelectedFont(const wxFont& font);
static int LUACALL wxLua_wxAuiNotebook_SetSelectedFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call SetSelectedFont
    self->SetSelectedFont(*font);

    return 0;
}

#endif // ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_SetSelection[] = { &wxluatype_wxAuiNotebook, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiNotebook_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_SetSelection[1] = {{ wxLua_wxAuiNotebook_SetSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_SetSelection }};
//     size_t SetSelection(size_t new_page);
static int LUACALL wxLua_wxAuiNotebook_SetSelection(lua_State *L)
{
    // size_t new_page
    size_t new_page = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call SetSelection
    size_t returns = (self->SetSelection(new_page));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_SetTabCtrlHeight[] = { &wxluatype_wxAuiNotebook, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiNotebook_SetTabCtrlHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_SetTabCtrlHeight[1] = {{ wxLua_wxAuiNotebook_SetTabCtrlHeight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_SetTabCtrlHeight }};
//     virtual void SetTabCtrlHeight(int height);
static int LUACALL wxLua_wxAuiNotebook_SetTabCtrlHeight(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call SetTabCtrlHeight
    self->SetTabCtrlHeight(height);

    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_SetUniformBitmapSize[] = { &wxluatype_wxAuiNotebook, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxAuiNotebook_SetUniformBitmapSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_SetUniformBitmapSize[1] = {{ wxLua_wxAuiNotebook_SetUniformBitmapSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_SetUniformBitmapSize }};
//     virtual void SetUniformBitmapSize(const wxSize& size);
static int LUACALL wxLua_wxAuiNotebook_SetUniformBitmapSize(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call SetUniformBitmapSize
    self->SetUniformBitmapSize(*size);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_SetWindowStyleFlag[] = { &wxluatype_wxAuiNotebook, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiNotebook_SetWindowStyleFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_SetWindowStyleFlag[1] = {{ wxLua_wxAuiNotebook_SetWindowStyleFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiNotebook_SetWindowStyleFlag }};
//     void SetWindowStyleFlag(long style);
static int LUACALL wxLua_wxAuiNotebook_SetWindowStyleFlag(lua_State *L)
{
    // long style
    long style = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call SetWindowStyleFlag
    self->SetWindowStyleFlag(style);

    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_ShowWindowMenu[] = { &wxluatype_wxAuiNotebook, NULL };
static int LUACALL wxLua_wxAuiNotebook_ShowWindowMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_ShowWindowMenu[1] = {{ wxLua_wxAuiNotebook_ShowWindowMenu, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiNotebook_ShowWindowMenu }};
//     bool ShowWindowMenu();
static int LUACALL wxLua_wxAuiNotebook_ShowWindowMenu(lua_State *L)
{
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call ShowWindowMenu
    bool returns = (self->ShowWindowMenu());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_Split[] = { &wxluatype_wxAuiNotebook, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiNotebook_Split(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_Split[1] = {{ wxLua_wxAuiNotebook_Split, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiNotebook_Split }};
//     virtual void Split(size_t page, int direction);
static int LUACALL wxLua_wxAuiNotebook_Split(lua_State *L)
{
    // int direction
    int direction = (int)wxlua_getnumbertype(L, 3);
    // size_t page
    size_t page = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiNotebook * self = (wxAuiNotebook *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiNotebook);
    // call Split
    self->Split(page, direction);

    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiNotebook_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiNotebook_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_constructor1[1] = {{ wxLua_wxAuiNotebook_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxAuiNotebook_constructor1 }};
//     wxAuiNotebook(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxAUI_NB_DEFAULT_STYLE);
static int LUACALL wxLua_wxAuiNotebook_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = wxAUI_NB_DEFAULT_STYLE
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxAUI_NB_DEFAULT_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxAuiNotebook* returns = new wxAuiNotebook(parent, id, *pos, *size, style);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiNotebook);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxAuiNotebook_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_constructor[1] = {{ wxLua_wxAuiNotebook_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxAuiNotebook();
static int LUACALL wxLua_wxAuiNotebook_constructor(lua_State *L)
{
    // call constructor
    wxAuiNotebook* returns = new wxAuiNotebook();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiNotebook);

    return 1;
}




#if ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiNotebook_constructor_overload[] =
{

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxAuiNotebook_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxAuiNotebook_constructor1 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxAuiNotebook_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxAuiNotebook_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiNotebook_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiNotebook_methods[] = {
#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
    { "AddPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_AddPage, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))
    { "AdvanceSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_AdvanceSelection, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_Create, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    { "DeletePage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_DeletePage, 1, NULL },
    { "GetArtProvider", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_GetArtProvider, 1, NULL },

#if ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,1))) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
    { "GetAuiManager", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_GetAuiManager, 1, NULL },
#endif // ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,1))) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))
    { "GetHeightForPageHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_GetHeightForPageHeight, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))

    { "GetPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_GetPage, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
    { "GetPageBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_GetPageBitmap, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

    { "GetPageCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_GetPageCount, 1, NULL },
    { "GetPageIndex", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_GetPageIndex, 1, NULL },
    { "GetPageText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_GetPageText, 1, NULL },
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_GetSelection, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))
    { "GetTabCtrlHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_GetTabCtrlHeight, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
    { "InsertPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_InsertPage, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

    { "RemovePage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_RemovePage, 1, NULL },
    { "SetArtProvider", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_SetArtProvider, 1, NULL },

#if ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))) && (wxLUA_USE_wxFont)
    { "SetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_SetFont, 1, NULL },
    { "SetMeasuringFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_SetMeasuringFont, 1, NULL },
    { "SetNormalFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_SetNormalFont, 1, NULL },
#endif // ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))) && (wxLUA_USE_wxFont)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)
    { "SetPageBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_SetPageBitmap, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxBitmap)

    { "SetPageText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_SetPageText, 1, NULL },

#if ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))) && (wxLUA_USE_wxFont)
    { "SetSelectedFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_SetSelectedFont, 1, NULL },
#endif // ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))) && (wxLUA_USE_wxFont)

    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_SetSelection, 1, NULL },
    { "SetTabCtrlHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_SetTabCtrlHeight, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "SetUniformBitmapSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_SetUniformBitmapSize, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    { "SetWindowStyleFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_SetWindowStyleFlag, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))
    { "ShowWindowMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_ShowWindowMenu, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))

    { "Split", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiNotebook_Split, 1, NULL },

#if ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
    { "wxAuiNotebook", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAuiNotebook_constructor_overload, s_wxluafunc_wxLua_wxAuiNotebook_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

    { 0, 0, 0, 0 },
};

int wxAuiNotebook_methodCount = sizeof(wxAuiNotebook_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiDockArt
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiDockArt'
int wxluatype_wxAuiDockArt = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockArt_DrawBackground[] = { &wxluatype_wxAuiDockArt, &wxluatype_wxDC, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxAuiDockArt_DrawBackground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockArt_DrawBackground[1] = {{ wxLua_wxAuiDockArt_DrawBackground, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxAuiDockArt_DrawBackground }};
//     virtual void DrawBackground(wxDC& dc, wxWindow* window, int orientation, const wxRect& rect) //= 0;
static int LUACALL wxLua_wxAuiDockArt_DrawBackground(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // int orientation
    int orientation = (int)wxlua_getnumbertype(L, 4);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxAuiDockArt * self = (wxAuiDockArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockArt);
    // call DrawBackground
    self->DrawBackground(*dc, window, orientation, *rect);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockArt_DrawBorder[] = { &wxluatype_wxAuiDockArt, &wxluatype_wxDC, &wxluatype_wxWindow, &wxluatype_wxRect, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiDockArt_DrawBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockArt_DrawBorder[1] = {{ wxLua_wxAuiDockArt_DrawBorder, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxAuiDockArt_DrawBorder }};
//     virtual void DrawBorder(wxDC& dc, wxWindow* window, const wxRect& rect, wxAuiPaneInfo& pane) //= 0;
static int LUACALL wxLua_wxAuiDockArt_DrawBorder(lua_State *L)
{
    // wxAuiPaneInfo pane
    wxAuiPaneInfo * pane = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 5, wxluatype_wxAuiPaneInfo);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxAuiDockArt * self = (wxAuiDockArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockArt);
    // call DrawBorder
    self->DrawBorder(*dc, window, *rect, *pane);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockArt_DrawCaption[] = { &wxluatype_wxAuiDockArt, &wxluatype_wxDC, &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_wxRect, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiDockArt_DrawCaption(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockArt_DrawCaption[1] = {{ wxLua_wxAuiDockArt_DrawCaption, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxAuiDockArt_DrawCaption }};
//     virtual void DrawCaption(wxDC& dc, wxWindow* window, const wxString& text, const wxRect& rect, wxAuiPaneInfo& pane) //= 0;
static int LUACALL wxLua_wxAuiDockArt_DrawCaption(lua_State *L)
{
    // wxAuiPaneInfo pane
    wxAuiPaneInfo * pane = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 6, wxluatype_wxAuiPaneInfo);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 4);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxAuiDockArt * self = (wxAuiDockArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockArt);
    // call DrawCaption
    self->DrawCaption(*dc, window, text, *rect, *pane);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockArt_DrawGripper[] = { &wxluatype_wxAuiDockArt, &wxluatype_wxDC, &wxluatype_wxWindow, &wxluatype_wxRect, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiDockArt_DrawGripper(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockArt_DrawGripper[1] = {{ wxLua_wxAuiDockArt_DrawGripper, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxAuiDockArt_DrawGripper }};
//     virtual void DrawGripper(wxDC& dc, wxWindow* window, const wxRect& rect, wxAuiPaneInfo& pane) //= 0;
static int LUACALL wxLua_wxAuiDockArt_DrawGripper(lua_State *L)
{
    // wxAuiPaneInfo pane
    wxAuiPaneInfo * pane = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 5, wxluatype_wxAuiPaneInfo);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxAuiDockArt * self = (wxAuiDockArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockArt);
    // call DrawGripper
    self->DrawGripper(*dc, window, *rect, *pane);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockArt_DrawPaneButton[] = { &wxluatype_wxAuiDockArt, &wxluatype_wxDC, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxRect, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiDockArt_DrawPaneButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockArt_DrawPaneButton[1] = {{ wxLua_wxAuiDockArt_DrawPaneButton, WXLUAMETHOD_METHOD, 7, 7, s_wxluatypeArray_wxLua_wxAuiDockArt_DrawPaneButton }};
//     virtual void DrawPaneButton(wxDC& dc, wxWindow* window, int button, int button_state, const wxRect& rect, wxAuiPaneInfo& pane) //= 0;
static int LUACALL wxLua_wxAuiDockArt_DrawPaneButton(lua_State *L)
{
    // wxAuiPaneInfo pane
    wxAuiPaneInfo * pane = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 7, wxluatype_wxAuiPaneInfo);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRect);
    // int button_state
    int button_state = (int)wxlua_getnumbertype(L, 5);
    // int button
    int button = (int)wxlua_getnumbertype(L, 4);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxAuiDockArt * self = (wxAuiDockArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockArt);
    // call DrawPaneButton
    self->DrawPaneButton(*dc, window, button, button_state, *rect, *pane);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockArt_DrawSash[] = { &wxluatype_wxAuiDockArt, &wxluatype_wxDC, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxAuiDockArt_DrawSash(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockArt_DrawSash[1] = {{ wxLua_wxAuiDockArt_DrawSash, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxAuiDockArt_DrawSash }};
//     virtual void DrawSash(wxDC& dc, wxWindow* window, int orientation, const wxRect& rect) //= 0;
static int LUACALL wxLua_wxAuiDockArt_DrawSash(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // int orientation
    int orientation = (int)wxlua_getnumbertype(L, 4);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxAuiDockArt * self = (wxAuiDockArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockArt);
    // call DrawSash
    self->DrawSash(*dc, window, orientation, *rect);

    return 0;
}

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockArt_GetColor[] = { &wxluatype_wxAuiDockArt, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiDockArt_GetColor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockArt_GetColor[1] = {{ wxLua_wxAuiDockArt_GetColor, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockArt_GetColor }};
//     wxColour GetColor(int id)
static int LUACALL wxLua_wxAuiDockArt_GetColor(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiDockArt * self = (wxAuiDockArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockArt);
    // call GetColor
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetColor(id));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockArt_GetColour[] = { &wxluatype_wxAuiDockArt, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiDockArt_GetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockArt_GetColour[1] = {{ wxLua_wxAuiDockArt_GetColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockArt_GetColour }};
//     virtual wxColour GetColour(int id) //= 0;
static int LUACALL wxLua_wxAuiDockArt_GetColour(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiDockArt * self = (wxAuiDockArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockArt);
    // call GetColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetColour(id));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockArt_GetFont[] = { &wxluatype_wxAuiDockArt, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiDockArt_GetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockArt_GetFont[1] = {{ wxLua_wxAuiDockArt_GetFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockArt_GetFont }};
//     virtual wxFont GetFont(int id) //= 0;
static int LUACALL wxLua_wxAuiDockArt_GetFont(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiDockArt * self = (wxAuiDockArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockArt);
    // call GetFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetFont(id));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxFont*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockArt_GetMetric[] = { &wxluatype_wxAuiDockArt, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiDockArt_GetMetric(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockArt_GetMetric[1] = {{ wxLua_wxAuiDockArt_GetMetric, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockArt_GetMetric }};
//     virtual int GetMetric(int id) //= 0;
static int LUACALL wxLua_wxAuiDockArt_GetMetric(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiDockArt * self = (wxAuiDockArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockArt);
    // call GetMetric
    int returns = (self->GetMetric(id));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockArt_SetColor[] = { &wxluatype_wxAuiDockArt, &wxluatype_TNUMBER, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxAuiDockArt_SetColor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockArt_SetColor[1] = {{ wxLua_wxAuiDockArt_SetColor, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiDockArt_SetColor }};
//     void SetColor(int id, const wxColour& color)
static int LUACALL wxLua_wxAuiDockArt_SetColor(lua_State *L)
{
    // const wxColour color
    const wxColour * color = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiDockArt * self = (wxAuiDockArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockArt);
    // call SetColor
    self->SetColor(id, *color);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockArt_SetColour[] = { &wxluatype_wxAuiDockArt, &wxluatype_TNUMBER, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxAuiDockArt_SetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockArt_SetColour[1] = {{ wxLua_wxAuiDockArt_SetColour, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiDockArt_SetColour }};
//     virtual void SetColour(int id, const wxColour& colour) //= 0;
static int LUACALL wxLua_wxAuiDockArt_SetColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiDockArt * self = (wxAuiDockArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockArt);
    // call SetColour
    self->SetColour(id, *colour);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockArt_SetFont[] = { &wxluatype_wxAuiDockArt, &wxluatype_TNUMBER, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxAuiDockArt_SetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockArt_SetFont[1] = {{ wxLua_wxAuiDockArt_SetFont, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiDockArt_SetFont }};
//     virtual void SetFont(int id, const wxFont& font) //= 0;
static int LUACALL wxLua_wxAuiDockArt_SetFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 3, wxluatype_wxFont);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiDockArt * self = (wxAuiDockArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockArt);
    // call SetFont
    self->SetFont(id, *font);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockArt_SetMetric[] = { &wxluatype_wxAuiDockArt, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiDockArt_SetMetric(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockArt_SetMetric[1] = {{ wxLua_wxAuiDockArt_SetMetric, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiDockArt_SetMetric }};
//     virtual void SetMetric(int id, int new_val) //= 0;
static int LUACALL wxLua_wxAuiDockArt_SetMetric(lua_State *L)
{
    // int new_val
    int new_val = (int)wxlua_getnumbertype(L, 3);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiDockArt * self = (wxAuiDockArt *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockArt);
    // call SetMetric
    self->SetMetric(id, new_val);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockArt_delete[] = { &wxluatype_wxAuiDockArt, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockArt_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockArt_delete }};




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiDockArt_methods[] = {
#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)) && (wxLUA_USE_wxDC)
    { "DrawBackground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockArt_DrawBackground, 1, NULL },
    { "DrawBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockArt_DrawBorder, 1, NULL },
    { "DrawCaption", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockArt_DrawCaption, 1, NULL },
    { "DrawGripper", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockArt_DrawGripper, 1, NULL },
    { "DrawPaneButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockArt_DrawPaneButton, 1, NULL },
    { "DrawSash", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockArt_DrawSash, 1, NULL },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)) && (wxLUA_USE_wxDC)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxColourPenBrush)
    { "GetColor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockArt_GetColor, 1, NULL },
    { "GetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockArt_GetColour, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)
    { "GetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockArt_GetFont, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)

    { "GetMetric", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockArt_GetMetric, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxColourPenBrush)
    { "SetColor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockArt_SetColor, 1, NULL },
    { "SetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockArt_SetColour, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)
    { "SetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockArt_SetFont, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFont)

    { "SetMetric", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockArt_SetMetric, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAuiDockArt_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxAuiDockArt_methodCount = sizeof(wxAuiDockArt_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiDefaultDockArt
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiDefaultDockArt'
int wxluatype_wxAuiDefaultDockArt = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDefaultDockArt_delete[] = { &wxluatype_wxAuiDefaultDockArt, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDefaultDockArt_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAuiDefaultDockArt_delete }};

static int LUACALL wxLua_wxAuiDefaultDockArt_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDefaultDockArt_constructor[1] = {{ wxLua_wxAuiDefaultDockArt_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxAuiDefaultDockArt();
static int LUACALL wxLua_wxAuiDefaultDockArt_constructor(lua_State *L)
{
    // call constructor
    wxAuiDefaultDockArt* returns = new wxAuiDefaultDockArt();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAuiDefaultDockArt((wxAuiDefaultDockArt*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiDefaultDockArt);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiDefaultDockArt_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAuiDefaultDockArt_delete, 1, NULL },
    { "wxAuiDefaultDockArt", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAuiDefaultDockArt_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxAuiDefaultDockArt_methodCount = sizeof(wxAuiDefaultDockArt_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiFloatingFrame
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiFloatingFrame'
int wxluatype_wxAuiFloatingFrame = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiFloatingFrame_GetOwnerManager[] = { &wxluatype_wxAuiFloatingFrame, NULL };
static int LUACALL wxLua_wxAuiFloatingFrame_GetOwnerManager(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiFloatingFrame_GetOwnerManager[1] = {{ wxLua_wxAuiFloatingFrame_GetOwnerManager, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiFloatingFrame_GetOwnerManager }};
//     wxAuiManager* GetOwnerManager() const;
static int LUACALL wxLua_wxAuiFloatingFrame_GetOwnerManager(lua_State *L)
{
    // get this
    wxAuiFloatingFrame * self = (wxAuiFloatingFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiFloatingFrame);
    // call GetOwnerManager
    wxAuiManager* returns = (wxAuiManager*)self->GetOwnerManager();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiManager);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiFloatingFrame_SetPaneWindow[] = { &wxluatype_wxAuiFloatingFrame, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiFloatingFrame_SetPaneWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiFloatingFrame_SetPaneWindow[1] = {{ wxLua_wxAuiFloatingFrame_SetPaneWindow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiFloatingFrame_SetPaneWindow }};
//     void SetPaneWindow(const wxAuiPaneInfo& pane);
static int LUACALL wxLua_wxAuiFloatingFrame_SetPaneWindow(lua_State *L)
{
    // const wxAuiPaneInfo pane
    const wxAuiPaneInfo * pane = (const wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiPaneInfo);
    // get this
    wxAuiFloatingFrame * self = (wxAuiFloatingFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiFloatingFrame);
    // call SetPaneWindow
    self->SetPaneWindow(*pane);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiFloatingFrame_constructor[] = { &wxluatype_wxWindow, &wxluatype_wxAuiManager, &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiFloatingFrame_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiFloatingFrame_constructor[1] = {{ wxLua_wxAuiFloatingFrame_constructor, WXLUAMETHOD_CONSTRUCTOR, 3, 5, s_wxluatypeArray_wxLua_wxAuiFloatingFrame_constructor }};
//     wxAuiFloatingFrame(wxWindow* parent, wxAuiManager* owner_mgr, const wxAuiPaneInfo& pane, wxWindowID id = wxID_ANY, long style = wxRESIZE_BORDER|wxSYSTEM_MENU|wxCAPTION|wxFRAME_NO_TASKBAR | wxFRAME_FLOAT_ON_PARENT|wxCLIP_CHILDREN);
static int LUACALL wxLua_wxAuiFloatingFrame_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = wxRESIZE_BORDER | wxSYSTEM_MENU | wxCAPTION | wxFRAME_NO_TASKBAR | wxFRAME_FLOAT_ON_PARENT | wxCLIP_CHILDREN
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxRESIZE_BORDER | wxSYSTEM_MENU | wxCAPTION | wxFRAME_NO_TASKBAR | wxFRAME_FLOAT_ON_PARENT | wxCLIP_CHILDREN);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 4 ? (wxWindowID)wxlua_getnumbertype(L, 4) : wxID_ANY);
    // const wxAuiPaneInfo pane
    const wxAuiPaneInfo * pane = (const wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 3, wxluatype_wxAuiPaneInfo);
    // wxAuiManager owner_mgr
    wxAuiManager * owner_mgr = (wxAuiManager *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiManager);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxAuiFloatingFrame* returns = new wxAuiFloatingFrame(parent, owner_mgr, *pane, id, style);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiFloatingFrame);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiFloatingFrame_methods[] = {
    { "GetOwnerManager", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiFloatingFrame_GetOwnerManager, 1, NULL },
    { "SetPaneWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiFloatingFrame_SetPaneWindow, 1, NULL },
    { "wxAuiFloatingFrame", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAuiFloatingFrame_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxAuiFloatingFrame_methodCount = sizeof(wxAuiFloatingFrame_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiPaneInfo
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiPaneInfo'
int wxluatype_wxAuiPaneInfo = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_BestSize1[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_BestSize1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_BestSize1[1] = {{ wxLua_wxAuiPaneInfo_BestSize1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiPaneInfo_BestSize1 }};
//     wxAuiPaneInfo& BestSize(int x, int y)
static int LUACALL wxLua_wxAuiPaneInfo_BestSize1(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call BestSize
    wxAuiPaneInfo* returns = &self->BestSize(x, y);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_BestSize[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_BestSize(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_BestSize[1] = {{ wxLua_wxAuiPaneInfo_BestSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_BestSize }};
//     wxAuiPaneInfo& BestSize(const wxSize& size)
static int LUACALL wxLua_wxAuiPaneInfo_BestSize(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call BestSize
    wxAuiPaneInfo* returns = &self->BestSize(*size);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Bottom[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Bottom(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Bottom[1] = {{ wxLua_wxAuiPaneInfo_Bottom, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Bottom }};
//     wxAuiPaneInfo& Bottom()
static int LUACALL wxLua_wxAuiPaneInfo_Bottom(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Bottom
    wxAuiPaneInfo* returns = &self->Bottom();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_BottomDockable[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_BottomDockable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_BottomDockable[1] = {{ wxLua_wxAuiPaneInfo_BottomDockable, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_BottomDockable }};
//     wxAuiPaneInfo& BottomDockable(bool b = true)
static int LUACALL wxLua_wxAuiPaneInfo_BottomDockable(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool b = true
    bool b = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call BottomDockable
    wxAuiPaneInfo* returns = &self->BottomDockable(b);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Caption[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Caption(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Caption[1] = {{ wxLua_wxAuiPaneInfo_Caption, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Caption }};
//     wxAuiPaneInfo& Caption(const wxString& c)
static int LUACALL wxLua_wxAuiPaneInfo_Caption(lua_State *L)
{
    // const wxString c
    const wxString c = wxlua_getwxStringtype(L, 2);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Caption
    wxAuiPaneInfo* returns = &self->Caption(c);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_CaptionVisible[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_CaptionVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_CaptionVisible[1] = {{ wxLua_wxAuiPaneInfo_CaptionVisible, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_CaptionVisible }};
//     wxAuiPaneInfo& CaptionVisible(bool visible = true)
static int LUACALL wxLua_wxAuiPaneInfo_CaptionVisible(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool visible = true
    bool visible = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call CaptionVisible
    wxAuiPaneInfo* returns = &self->CaptionVisible(visible);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Center[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Center(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Center[1] = {{ wxLua_wxAuiPaneInfo_Center, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Center }};
//     wxAuiPaneInfo& Center()
static int LUACALL wxLua_wxAuiPaneInfo_Center(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Center
    wxAuiPaneInfo* returns = &self->Center();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_CenterPane[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_CenterPane(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_CenterPane[1] = {{ wxLua_wxAuiPaneInfo_CenterPane, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_CenterPane }};
//     wxAuiPaneInfo& CenterPane()
static int LUACALL wxLua_wxAuiPaneInfo_CenterPane(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call CenterPane
    wxAuiPaneInfo* returns = &self->CenterPane();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Centre[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Centre(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Centre[1] = {{ wxLua_wxAuiPaneInfo_Centre, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Centre }};
//     wxAuiPaneInfo& Centre()
static int LUACALL wxLua_wxAuiPaneInfo_Centre(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Centre
    wxAuiPaneInfo* returns = &self->Centre();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_CentrePane[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_CentrePane(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_CentrePane[1] = {{ wxLua_wxAuiPaneInfo_CentrePane, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_CentrePane }};
//     wxAuiPaneInfo& CentrePane()
static int LUACALL wxLua_wxAuiPaneInfo_CentrePane(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call CentrePane
    wxAuiPaneInfo* returns = &self->CentrePane();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_CloseButton[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_CloseButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_CloseButton[1] = {{ wxLua_wxAuiPaneInfo_CloseButton, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_CloseButton }};
//     wxAuiPaneInfo& CloseButton(bool visible = true)
static int LUACALL wxLua_wxAuiPaneInfo_CloseButton(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool visible = true
    bool visible = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call CloseButton
    wxAuiPaneInfo* returns = &self->CloseButton(visible);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_DefaultPane[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_DefaultPane(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_DefaultPane[1] = {{ wxLua_wxAuiPaneInfo_DefaultPane, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_DefaultPane }};
//     wxAuiPaneInfo& DefaultPane()
static int LUACALL wxLua_wxAuiPaneInfo_DefaultPane(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call DefaultPane
    wxAuiPaneInfo* returns = &self->DefaultPane();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_DestroyOnClose[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_DestroyOnClose(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_DestroyOnClose[1] = {{ wxLua_wxAuiPaneInfo_DestroyOnClose, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_DestroyOnClose }};
//     wxAuiPaneInfo& DestroyOnClose(bool b = true)
static int LUACALL wxLua_wxAuiPaneInfo_DestroyOnClose(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool b = true
    bool b = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call DestroyOnClose
    wxAuiPaneInfo* returns = &self->DestroyOnClose(b);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Direction[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Direction(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Direction[1] = {{ wxLua_wxAuiPaneInfo_Direction, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Direction }};
//     wxAuiPaneInfo& Direction(int direction)
static int LUACALL wxLua_wxAuiPaneInfo_Direction(lua_State *L)
{
    // int direction
    int direction = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Direction
    wxAuiPaneInfo* returns = &self->Direction(direction);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Dock[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Dock(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Dock[1] = {{ wxLua_wxAuiPaneInfo_Dock, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Dock }};
//     wxAuiPaneInfo& Dock()
static int LUACALL wxLua_wxAuiPaneInfo_Dock(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Dock
    wxAuiPaneInfo* returns = &self->Dock();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Dockable[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Dockable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Dockable[1] = {{ wxLua_wxAuiPaneInfo_Dockable, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Dockable }};
//     wxAuiPaneInfo& Dockable(bool b = true)
static int LUACALL wxLua_wxAuiPaneInfo_Dockable(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool b = true
    bool b = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Dockable
    wxAuiPaneInfo* returns = &self->Dockable(b);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Fixed[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Fixed(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Fixed[1] = {{ wxLua_wxAuiPaneInfo_Fixed, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Fixed }};
//     wxAuiPaneInfo& Fixed()
static int LUACALL wxLua_wxAuiPaneInfo_Fixed(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Fixed
    wxAuiPaneInfo* returns = &self->Fixed();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Float[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Float(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Float[1] = {{ wxLua_wxAuiPaneInfo_Float, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Float }};
//     wxAuiPaneInfo& Float()
static int LUACALL wxLua_wxAuiPaneInfo_Float(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Float
    wxAuiPaneInfo* returns = &self->Float();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Floatable[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Floatable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Floatable[1] = {{ wxLua_wxAuiPaneInfo_Floatable, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Floatable }};
//     wxAuiPaneInfo& Floatable(bool b = true)
static int LUACALL wxLua_wxAuiPaneInfo_Floatable(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool b = true
    bool b = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Floatable
    wxAuiPaneInfo* returns = &self->Floatable(b);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_FloatingPosition1[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_FloatingPosition1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_FloatingPosition1[1] = {{ wxLua_wxAuiPaneInfo_FloatingPosition1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiPaneInfo_FloatingPosition1 }};
//     wxAuiPaneInfo& FloatingPosition(int x, int y)
static int LUACALL wxLua_wxAuiPaneInfo_FloatingPosition1(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call FloatingPosition
    wxAuiPaneInfo* returns = &self->FloatingPosition(x, y);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_FloatingPosition[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_FloatingPosition(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_FloatingPosition[1] = {{ wxLua_wxAuiPaneInfo_FloatingPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_FloatingPosition }};
//     wxAuiPaneInfo& FloatingPosition(const wxPoint& pos)
static int LUACALL wxLua_wxAuiPaneInfo_FloatingPosition(lua_State *L)
{
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call FloatingPosition
    wxAuiPaneInfo* returns = &self->FloatingPosition(*pos);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_FloatingSize1[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_FloatingSize1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_FloatingSize1[1] = {{ wxLua_wxAuiPaneInfo_FloatingSize1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiPaneInfo_FloatingSize1 }};
//     wxAuiPaneInfo& FloatingSize(int x, int y)
static int LUACALL wxLua_wxAuiPaneInfo_FloatingSize1(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call FloatingSize
    wxAuiPaneInfo* returns = &self->FloatingSize(x, y);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_FloatingSize[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_FloatingSize(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_FloatingSize[1] = {{ wxLua_wxAuiPaneInfo_FloatingSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_FloatingSize }};
//     wxAuiPaneInfo& FloatingSize(const wxSize& size)
static int LUACALL wxLua_wxAuiPaneInfo_FloatingSize(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call FloatingSize
    wxAuiPaneInfo* returns = &self->FloatingSize(*size);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_best_size[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Get_best_size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Get_best_size[1] = {{ wxLua_wxAuiPaneInfo_Get_best_size, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_best_size }};
//     %member wxSize best_size;     // size that the layout engine will prefer
static int LUACALL wxLua_wxAuiPaneInfo_Get_best_size(lua_State *L)
{
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->best_size, wxluatype_wxSize);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_caption[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Get_caption(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Get_caption[1] = {{ wxLua_wxAuiPaneInfo_Get_caption, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_caption }};
//     %member wxString caption;     // caption displayed on the window
static int LUACALL wxLua_wxAuiPaneInfo_Get_caption(lua_State *L)
{
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // push the result string
    wxlua_pushwxString(L, self->caption);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_dock_direction[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Get_dock_direction(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Get_dock_direction[1] = {{ wxLua_wxAuiPaneInfo_Get_dock_direction, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_dock_direction }};
//     %member int dock_direction;   // dock direction (top, bottom, left, right, center)
static int LUACALL wxLua_wxAuiPaneInfo_Get_dock_direction(lua_State *L)
{
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // push the result number
    lua_pushnumber(L, self->dock_direction);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_dock_layer[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Get_dock_layer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Get_dock_layer[1] = {{ wxLua_wxAuiPaneInfo_Get_dock_layer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_dock_layer }};
//     %member int dock_layer;       // layer number (0 = innermost layer)
static int LUACALL wxLua_wxAuiPaneInfo_Get_dock_layer(lua_State *L)
{
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // push the result number
    lua_pushnumber(L, self->dock_layer);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_dock_pos[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Get_dock_pos(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Get_dock_pos[1] = {{ wxLua_wxAuiPaneInfo_Get_dock_pos, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_dock_pos }};
//     %member int dock_pos;         // position inside the row (0 = first position)
static int LUACALL wxLua_wxAuiPaneInfo_Get_dock_pos(lua_State *L)
{
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // push the result number
    lua_pushnumber(L, self->dock_pos);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_dock_proportion[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Get_dock_proportion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Get_dock_proportion[1] = {{ wxLua_wxAuiPaneInfo_Get_dock_proportion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_dock_proportion }};
//     %member int dock_proportion;  // proportion while docked
static int LUACALL wxLua_wxAuiPaneInfo_Get_dock_proportion(lua_State *L)
{
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // push the result number
    lua_pushnumber(L, self->dock_proportion);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_dock_row[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Get_dock_row(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Get_dock_row[1] = {{ wxLua_wxAuiPaneInfo_Get_dock_row, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_dock_row }};
//     %member int dock_row;         // row number on the docking bar (0 = first row)
static int LUACALL wxLua_wxAuiPaneInfo_Get_dock_row(lua_State *L)
{
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // push the result number
    lua_pushnumber(L, self->dock_row);
    // return the number of values
    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_floating_pos[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Get_floating_pos(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Get_floating_pos[1] = {{ wxLua_wxAuiPaneInfo_Get_floating_pos, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_floating_pos }};
//     %member wxPoint floating_pos; // position while floating
static int LUACALL wxLua_wxAuiPaneInfo_Get_floating_pos(lua_State *L)
{
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->floating_pos, wxluatype_wxPoint);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_floating_size[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Get_floating_size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Get_floating_size[1] = {{ wxLua_wxAuiPaneInfo_Get_floating_size, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_floating_size }};
//     %member wxSize floating_size; // size while floating
static int LUACALL wxLua_wxAuiPaneInfo_Get_floating_size(lua_State *L)
{
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->floating_size, wxluatype_wxSize);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFrame)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_frame[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Get_frame(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Get_frame[1] = {{ wxLua_wxAuiPaneInfo_Get_frame, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_frame }};
//     %member wxFrame* frame;       // floating frame window that holds the pane
static int LUACALL wxLua_wxAuiPaneInfo_Get_frame(lua_State *L)
{
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->frame, wxluatype_wxFrame);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFrame)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_max_size[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Get_max_size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Get_max_size[1] = {{ wxLua_wxAuiPaneInfo_Get_max_size, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_max_size }};
//     %member wxSize max_size;      // maximum size the pane window can tolerate
static int LUACALL wxLua_wxAuiPaneInfo_Get_max_size(lua_State *L)
{
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->max_size, wxluatype_wxSize);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_min_size[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Get_min_size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Get_min_size[1] = {{ wxLua_wxAuiPaneInfo_Get_min_size, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_min_size }};
//     %member wxSize min_size;      // minimum size the pane window can tolerate
static int LUACALL wxLua_wxAuiPaneInfo_Get_min_size(lua_State *L)
{
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->min_size, wxluatype_wxSize);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_name[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Get_name(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Get_name[1] = {{ wxLua_wxAuiPaneInfo_Get_name, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_name }};
//     %member wxString name;        // name of the pane
static int LUACALL wxLua_wxAuiPaneInfo_Get_name(lua_State *L)
{
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // push the result string
    wxlua_pushwxString(L, self->name);
    // return the number of values
    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_rect[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Get_rect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Get_rect[1] = {{ wxLua_wxAuiPaneInfo_Get_rect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_rect }};
//     %member wxRect rect;              // current rectangle (populated by wxAUI)
static int LUACALL wxLua_wxAuiPaneInfo_Get_rect(lua_State *L)
{
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->rect, wxluatype_wxRect);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_state[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Get_state(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Get_state[1] = {{ wxLua_wxAuiPaneInfo_Get_state, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_state }};
//     %member unsigned int state;   // a combination of wxPaneState values
static int LUACALL wxLua_wxAuiPaneInfo_Get_state(lua_State *L)
{
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // push the result number
    lua_pushnumber(L, self->state);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_window[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Get_window(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Get_window[1] = {{ wxLua_wxAuiPaneInfo_Get_window, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Get_window }};
//     %member wxWindow* window;     // window that is in this pane
static int LUACALL wxLua_wxAuiPaneInfo_Get_window(lua_State *L)
{
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->window, wxluatype_wxWindow);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Gripper[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Gripper(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Gripper[1] = {{ wxLua_wxAuiPaneInfo_Gripper, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Gripper }};
//     wxAuiPaneInfo& Gripper(bool visible = true)
static int LUACALL wxLua_wxAuiPaneInfo_Gripper(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool visible = true
    bool visible = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Gripper
    wxAuiPaneInfo* returns = &self->Gripper(visible);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_GripperTop[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_GripperTop(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_GripperTop[1] = {{ wxLua_wxAuiPaneInfo_GripperTop, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_GripperTop }};
//     wxAuiPaneInfo& GripperTop(bool attop = true)
static int LUACALL wxLua_wxAuiPaneInfo_GripperTop(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool attop = true
    bool attop = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call GripperTop
    wxAuiPaneInfo* returns = &self->GripperTop(attop);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasBorder[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_HasBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_HasBorder[1] = {{ wxLua_wxAuiPaneInfo_HasBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasBorder }};
//     bool HasBorder() const
static int LUACALL wxLua_wxAuiPaneInfo_HasBorder(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call HasBorder
    bool returns = (self->HasBorder());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasCaption[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_HasCaption(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_HasCaption[1] = {{ wxLua_wxAuiPaneInfo_HasCaption, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasCaption }};
//     bool HasCaption() const
static int LUACALL wxLua_wxAuiPaneInfo_HasCaption(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call HasCaption
    bool returns = (self->HasCaption());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasCloseButton[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_HasCloseButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_HasCloseButton[1] = {{ wxLua_wxAuiPaneInfo_HasCloseButton, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasCloseButton }};
//     bool HasCloseButton() const
static int LUACALL wxLua_wxAuiPaneInfo_HasCloseButton(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call HasCloseButton
    bool returns = (self->HasCloseButton());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasFlag[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_HasFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_HasFlag[1] = {{ wxLua_wxAuiPaneInfo_HasFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasFlag }};
//     bool HasFlag(unsigned int flag) const
static int LUACALL wxLua_wxAuiPaneInfo_HasFlag(lua_State *L)
{
    // unsigned int flag
    unsigned int flag = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call HasFlag
    bool returns = (self->HasFlag(flag));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasGripper[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_HasGripper(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_HasGripper[1] = {{ wxLua_wxAuiPaneInfo_HasGripper, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasGripper }};
//     bool HasGripper() const
static int LUACALL wxLua_wxAuiPaneInfo_HasGripper(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call HasGripper
    bool returns = (self->HasGripper());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasGripperTop[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_HasGripperTop(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_HasGripperTop[1] = {{ wxLua_wxAuiPaneInfo_HasGripperTop, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasGripperTop }};
//     bool HasGripperTop() const
static int LUACALL wxLua_wxAuiPaneInfo_HasGripperTop(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call HasGripperTop
    bool returns = (self->HasGripperTop());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasMaximizeButton[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_HasMaximizeButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_HasMaximizeButton[1] = {{ wxLua_wxAuiPaneInfo_HasMaximizeButton, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasMaximizeButton }};
//     bool HasMaximizeButton() const
static int LUACALL wxLua_wxAuiPaneInfo_HasMaximizeButton(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call HasMaximizeButton
    bool returns = (self->HasMaximizeButton());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasMinimizeButton[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_HasMinimizeButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_HasMinimizeButton[1] = {{ wxLua_wxAuiPaneInfo_HasMinimizeButton, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasMinimizeButton }};
//     bool HasMinimizeButton() const
static int LUACALL wxLua_wxAuiPaneInfo_HasMinimizeButton(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call HasMinimizeButton
    bool returns = (self->HasMinimizeButton());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasPinButton[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_HasPinButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_HasPinButton[1] = {{ wxLua_wxAuiPaneInfo_HasPinButton, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_HasPinButton }};
//     bool HasPinButton() const
static int LUACALL wxLua_wxAuiPaneInfo_HasPinButton(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call HasPinButton
    bool returns = (self->HasPinButton());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Hide[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Hide(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Hide[1] = {{ wxLua_wxAuiPaneInfo_Hide, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Hide }};
//     wxAuiPaneInfo& Hide()
static int LUACALL wxLua_wxAuiPaneInfo_Hide(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Hide
    wxAuiPaneInfo* returns = &self->Hide();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsBottomDockable[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_IsBottomDockable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_IsBottomDockable[1] = {{ wxLua_wxAuiPaneInfo_IsBottomDockable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsBottomDockable }};
//     bool IsBottomDockable() const
static int LUACALL wxLua_wxAuiPaneInfo_IsBottomDockable(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call IsBottomDockable
    bool returns = (self->IsBottomDockable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsDestroyOnClose[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_IsDestroyOnClose(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_IsDestroyOnClose[1] = {{ wxLua_wxAuiPaneInfo_IsDestroyOnClose, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsDestroyOnClose }};
//     bool IsDestroyOnClose() const
static int LUACALL wxLua_wxAuiPaneInfo_IsDestroyOnClose(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call IsDestroyOnClose
    bool returns = (self->IsDestroyOnClose());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsDocked[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_IsDocked(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_IsDocked[1] = {{ wxLua_wxAuiPaneInfo_IsDocked, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsDocked }};
//     bool IsDocked() const
static int LUACALL wxLua_wxAuiPaneInfo_IsDocked(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call IsDocked
    bool returns = (self->IsDocked());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsFixed[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_IsFixed(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_IsFixed[1] = {{ wxLua_wxAuiPaneInfo_IsFixed, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsFixed }};
//     bool IsFixed() const
static int LUACALL wxLua_wxAuiPaneInfo_IsFixed(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call IsFixed
    bool returns = (self->IsFixed());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsFloatable[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_IsFloatable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_IsFloatable[1] = {{ wxLua_wxAuiPaneInfo_IsFloatable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsFloatable }};
//     bool IsFloatable() const
static int LUACALL wxLua_wxAuiPaneInfo_IsFloatable(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call IsFloatable
    bool returns = (self->IsFloatable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsFloating[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_IsFloating(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_IsFloating[1] = {{ wxLua_wxAuiPaneInfo_IsFloating, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsFloating }};
//     bool IsFloating() const
static int LUACALL wxLua_wxAuiPaneInfo_IsFloating(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call IsFloating
    bool returns = (self->IsFloating());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsLeftDockable[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_IsLeftDockable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_IsLeftDockable[1] = {{ wxLua_wxAuiPaneInfo_IsLeftDockable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsLeftDockable }};
//     bool IsLeftDockable() const
static int LUACALL wxLua_wxAuiPaneInfo_IsLeftDockable(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call IsLeftDockable
    bool returns = (self->IsLeftDockable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsMaximized[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_IsMaximized(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_IsMaximized[1] = {{ wxLua_wxAuiPaneInfo_IsMaximized, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsMaximized }};
//     bool IsMaximized() const
static int LUACALL wxLua_wxAuiPaneInfo_IsMaximized(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call IsMaximized
    bool returns = (self->IsMaximized());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsMovable[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_IsMovable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_IsMovable[1] = {{ wxLua_wxAuiPaneInfo_IsMovable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsMovable }};
//     bool IsMovable() const
static int LUACALL wxLua_wxAuiPaneInfo_IsMovable(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call IsMovable
    bool returns = (self->IsMovable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsOk[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_IsOk[1] = {{ wxLua_wxAuiPaneInfo_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsOk }};
//     bool IsOk() const
static int LUACALL wxLua_wxAuiPaneInfo_IsOk(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsResizable[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_IsResizable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_IsResizable[1] = {{ wxLua_wxAuiPaneInfo_IsResizable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsResizable }};
//     bool IsResizable() const
static int LUACALL wxLua_wxAuiPaneInfo_IsResizable(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call IsResizable
    bool returns = (self->IsResizable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsRightDockable[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_IsRightDockable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_IsRightDockable[1] = {{ wxLua_wxAuiPaneInfo_IsRightDockable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsRightDockable }};
//     bool IsRightDockable() const
static int LUACALL wxLua_wxAuiPaneInfo_IsRightDockable(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call IsRightDockable
    bool returns = (self->IsRightDockable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsShown[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_IsShown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_IsShown[1] = {{ wxLua_wxAuiPaneInfo_IsShown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsShown }};
//     bool IsShown() const
static int LUACALL wxLua_wxAuiPaneInfo_IsShown(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call IsShown
    bool returns = (self->IsShown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsToolbar[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_IsToolbar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_IsToolbar[1] = {{ wxLua_wxAuiPaneInfo_IsToolbar, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsToolbar }};
//     bool IsToolbar() const
static int LUACALL wxLua_wxAuiPaneInfo_IsToolbar(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call IsToolbar
    bool returns = (self->IsToolbar());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsTopDockable[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_IsTopDockable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_IsTopDockable[1] = {{ wxLua_wxAuiPaneInfo_IsTopDockable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_IsTopDockable }};
//     bool IsTopDockable() const
static int LUACALL wxLua_wxAuiPaneInfo_IsTopDockable(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call IsTopDockable
    bool returns = (self->IsTopDockable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Layer[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Layer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Layer[1] = {{ wxLua_wxAuiPaneInfo_Layer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Layer }};
//     wxAuiPaneInfo& Layer(int layer)
static int LUACALL wxLua_wxAuiPaneInfo_Layer(lua_State *L)
{
    // int layer
    int layer = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Layer
    wxAuiPaneInfo* returns = &self->Layer(layer);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Left[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Left(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Left[1] = {{ wxLua_wxAuiPaneInfo_Left, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Left }};
//     wxAuiPaneInfo& Left()
static int LUACALL wxLua_wxAuiPaneInfo_Left(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Left
    wxAuiPaneInfo* returns = &self->Left();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_LeftDockable[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_LeftDockable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_LeftDockable[1] = {{ wxLua_wxAuiPaneInfo_LeftDockable, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_LeftDockable }};
//     wxAuiPaneInfo& LeftDockable(bool b = true)
static int LUACALL wxLua_wxAuiPaneInfo_LeftDockable(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool b = true
    bool b = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call LeftDockable
    wxAuiPaneInfo* returns = &self->LeftDockable(b);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_MaxSize1[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_MaxSize1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_MaxSize1[1] = {{ wxLua_wxAuiPaneInfo_MaxSize1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiPaneInfo_MaxSize1 }};
//     wxAuiPaneInfo& MaxSize(int x, int y)
static int LUACALL wxLua_wxAuiPaneInfo_MaxSize1(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call MaxSize
    wxAuiPaneInfo* returns = &self->MaxSize(x, y);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_MaxSize[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_MaxSize(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_MaxSize[1] = {{ wxLua_wxAuiPaneInfo_MaxSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_MaxSize }};
//     wxAuiPaneInfo& MaxSize(const wxSize& size)
static int LUACALL wxLua_wxAuiPaneInfo_MaxSize(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call MaxSize
    wxAuiPaneInfo* returns = &self->MaxSize(*size);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Maximize[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Maximize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Maximize[1] = {{ wxLua_wxAuiPaneInfo_Maximize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Maximize }};
//     wxAuiPaneInfo& Maximize()
static int LUACALL wxLua_wxAuiPaneInfo_Maximize(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Maximize
    wxAuiPaneInfo* returns = &self->Maximize();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_MaximizeButton[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_MaximizeButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_MaximizeButton[1] = {{ wxLua_wxAuiPaneInfo_MaximizeButton, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_MaximizeButton }};
//     wxAuiPaneInfo& MaximizeButton(bool visible = true)
static int LUACALL wxLua_wxAuiPaneInfo_MaximizeButton(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool visible = true
    bool visible = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call MaximizeButton
    wxAuiPaneInfo* returns = &self->MaximizeButton(visible);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_MinSize1[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_MinSize1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_MinSize1[1] = {{ wxLua_wxAuiPaneInfo_MinSize1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiPaneInfo_MinSize1 }};
//     wxAuiPaneInfo& MinSize(int x, int y)
static int LUACALL wxLua_wxAuiPaneInfo_MinSize1(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call MinSize
    wxAuiPaneInfo* returns = &self->MinSize(x, y);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_MinSize[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_MinSize(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_MinSize[1] = {{ wxLua_wxAuiPaneInfo_MinSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_MinSize }};
//     wxAuiPaneInfo& MinSize(const wxSize& size)
static int LUACALL wxLua_wxAuiPaneInfo_MinSize(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call MinSize
    wxAuiPaneInfo* returns = &self->MinSize(*size);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_MinimizeButton[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_MinimizeButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_MinimizeButton[1] = {{ wxLua_wxAuiPaneInfo_MinimizeButton, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_MinimizeButton }};
//     wxAuiPaneInfo& MinimizeButton(bool visible = true)
static int LUACALL wxLua_wxAuiPaneInfo_MinimizeButton(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool visible = true
    bool visible = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call MinimizeButton
    wxAuiPaneInfo* returns = &self->MinimizeButton(visible);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Movable[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Movable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Movable[1] = {{ wxLua_wxAuiPaneInfo_Movable, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Movable }};
//     wxAuiPaneInfo& Movable(bool b = true)
static int LUACALL wxLua_wxAuiPaneInfo_Movable(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool b = true
    bool b = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Movable
    wxAuiPaneInfo* returns = &self->Movable(b);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Name[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Name(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Name[1] = {{ wxLua_wxAuiPaneInfo_Name, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Name }};
//     wxAuiPaneInfo& Name(const wxString& n)
static int LUACALL wxLua_wxAuiPaneInfo_Name(lua_State *L)
{
    // const wxString n
    const wxString n = wxlua_getwxStringtype(L, 2);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Name
    wxAuiPaneInfo* returns = &self->Name(n);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_PaneBorder[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_PaneBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_PaneBorder[1] = {{ wxLua_wxAuiPaneInfo_PaneBorder, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_PaneBorder }};
//     wxAuiPaneInfo& PaneBorder(bool visible = true)
static int LUACALL wxLua_wxAuiPaneInfo_PaneBorder(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool visible = true
    bool visible = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call PaneBorder
    wxAuiPaneInfo* returns = &self->PaneBorder(visible);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_PinButton[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_PinButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_PinButton[1] = {{ wxLua_wxAuiPaneInfo_PinButton, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_PinButton }};
//     wxAuiPaneInfo& PinButton(bool visible = true)
static int LUACALL wxLua_wxAuiPaneInfo_PinButton(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool visible = true
    bool visible = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call PinButton
    wxAuiPaneInfo* returns = &self->PinButton(visible);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Position[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Position(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Position[1] = {{ wxLua_wxAuiPaneInfo_Position, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Position }};
//     wxAuiPaneInfo& Position(int pos)
static int LUACALL wxLua_wxAuiPaneInfo_Position(lua_State *L)
{
    // int pos
    int pos = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Position
    wxAuiPaneInfo* returns = &self->Position(pos);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Resizable[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Resizable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Resizable[1] = {{ wxLua_wxAuiPaneInfo_Resizable, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Resizable }};
//     wxAuiPaneInfo& Resizable(bool resizable = true)
static int LUACALL wxLua_wxAuiPaneInfo_Resizable(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool resizable = true
    bool resizable = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Resizable
    wxAuiPaneInfo* returns = &self->Resizable(resizable);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Restore[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Restore(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Restore[1] = {{ wxLua_wxAuiPaneInfo_Restore, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Restore }};
//     wxAuiPaneInfo& Restore()
static int LUACALL wxLua_wxAuiPaneInfo_Restore(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Restore
    wxAuiPaneInfo* returns = &self->Restore();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Right[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Right(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Right[1] = {{ wxLua_wxAuiPaneInfo_Right, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Right }};
//     wxAuiPaneInfo& Right()
static int LUACALL wxLua_wxAuiPaneInfo_Right(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Right
    wxAuiPaneInfo* returns = &self->Right();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_RightDockable[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_RightDockable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_RightDockable[1] = {{ wxLua_wxAuiPaneInfo_RightDockable, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_RightDockable }};
//     wxAuiPaneInfo& RightDockable(bool b = true)
static int LUACALL wxLua_wxAuiPaneInfo_RightDockable(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool b = true
    bool b = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call RightDockable
    wxAuiPaneInfo* returns = &self->RightDockable(b);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Row[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Row(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Row[1] = {{ wxLua_wxAuiPaneInfo_Row, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Row }};
//     wxAuiPaneInfo& Row(int row)
static int LUACALL wxLua_wxAuiPaneInfo_Row(lua_State *L)
{
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Row
    wxAuiPaneInfo* returns = &self->Row(row);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_SafeSet[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_SafeSet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_SafeSet[1] = {{ wxLua_wxAuiPaneInfo_SafeSet, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_SafeSet }};
//     void SafeSet(wxAuiPaneInfo source)
static int LUACALL wxLua_wxAuiPaneInfo_SafeSet(lua_State *L)
{
    // wxAuiPaneInfo source
    wxAuiPaneInfo source = *(wxAuiPaneInfo*)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiPaneInfo);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call SafeSet
    self->SafeSet(source);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_SetFlag[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TINTEGER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_SetFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_SetFlag[1] = {{ wxLua_wxAuiPaneInfo_SetFlag, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiPaneInfo_SetFlag }};
//     wxAuiPaneInfo& SetFlag(unsigned int flag, bool option_state)
static int LUACALL wxLua_wxAuiPaneInfo_SetFlag(lua_State *L)
{
    // bool option_state
    bool option_state = wxlua_getbooleantype(L, 3);
    // unsigned int flag
    unsigned int flag = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call SetFlag
    wxAuiPaneInfo* returns = &self->SetFlag(flag, option_state);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_best_size[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Set_best_size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Set_best_size[1] = {{ wxLua_wxAuiPaneInfo_Set_best_size, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_best_size }};
//     %member wxSize best_size;     // size that the layout engine will prefer
static int LUACALL wxLua_wxAuiPaneInfo_Set_best_size(lua_State *L)
{
    // get the data type value
    wxSize* val = (wxSize*)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    self->best_size = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_caption[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Set_caption(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Set_caption[1] = {{ wxLua_wxAuiPaneInfo_Set_caption, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_caption }};
//     %member wxString caption;     // caption displayed on the window
static int LUACALL wxLua_wxAuiPaneInfo_Set_caption(lua_State *L)
{
    // get the string value
    wxString val = wxlua_getwxStringtype(L, 2);
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    self->caption = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_dock_direction[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Set_dock_direction(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Set_dock_direction[1] = {{ wxLua_wxAuiPaneInfo_Set_dock_direction, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_dock_direction }};
//     %member int dock_direction;   // dock direction (top, bottom, left, right, center)
static int LUACALL wxLua_wxAuiPaneInfo_Set_dock_direction(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    self->dock_direction = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_dock_layer[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Set_dock_layer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Set_dock_layer[1] = {{ wxLua_wxAuiPaneInfo_Set_dock_layer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_dock_layer }};
//     %member int dock_layer;       // layer number (0 = innermost layer)
static int LUACALL wxLua_wxAuiPaneInfo_Set_dock_layer(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    self->dock_layer = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_dock_pos[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Set_dock_pos(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Set_dock_pos[1] = {{ wxLua_wxAuiPaneInfo_Set_dock_pos, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_dock_pos }};
//     %member int dock_pos;         // position inside the row (0 = first position)
static int LUACALL wxLua_wxAuiPaneInfo_Set_dock_pos(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    self->dock_pos = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_dock_proportion[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Set_dock_proportion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Set_dock_proportion[1] = {{ wxLua_wxAuiPaneInfo_Set_dock_proportion, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_dock_proportion }};
//     %member int dock_proportion;  // proportion while docked
static int LUACALL wxLua_wxAuiPaneInfo_Set_dock_proportion(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    self->dock_proportion = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_dock_row[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Set_dock_row(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Set_dock_row[1] = {{ wxLua_wxAuiPaneInfo_Set_dock_row, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_dock_row }};
//     %member int dock_row;         // row number on the docking bar (0 = first row)
static int LUACALL wxLua_wxAuiPaneInfo_Set_dock_row(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    self->dock_row = val;
    // return the number of values
    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_floating_pos[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Set_floating_pos(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Set_floating_pos[1] = {{ wxLua_wxAuiPaneInfo_Set_floating_pos, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_floating_pos }};
//     %member wxPoint floating_pos; // position while floating
static int LUACALL wxLua_wxAuiPaneInfo_Set_floating_pos(lua_State *L)
{
    // get the data type value
    wxPoint* val = (wxPoint*)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    self->floating_pos = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_floating_size[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Set_floating_size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Set_floating_size[1] = {{ wxLua_wxAuiPaneInfo_Set_floating_size, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_floating_size }};
//     %member wxSize floating_size; // size while floating
static int LUACALL wxLua_wxAuiPaneInfo_Set_floating_size(lua_State *L)
{
    // get the data type value
    wxSize* val = (wxSize*)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    self->floating_size = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFrame)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_frame[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_wxFrame, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Set_frame(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Set_frame[1] = {{ wxLua_wxAuiPaneInfo_Set_frame, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_frame }};
//     %member wxFrame* frame;       // floating frame window that holds the pane
static int LUACALL wxLua_wxAuiPaneInfo_Set_frame(lua_State *L)
{
    // get the data type value
    wxFrame* val = (wxFrame*)wxluaT_getuserdatatype(L, 2, wxluatype_wxFrame);
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    self->frame = val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFrame)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_max_size[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Set_max_size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Set_max_size[1] = {{ wxLua_wxAuiPaneInfo_Set_max_size, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_max_size }};
//     %member wxSize max_size;      // maximum size the pane window can tolerate
static int LUACALL wxLua_wxAuiPaneInfo_Set_max_size(lua_State *L)
{
    // get the data type value
    wxSize* val = (wxSize*)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    self->max_size = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_min_size[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Set_min_size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Set_min_size[1] = {{ wxLua_wxAuiPaneInfo_Set_min_size, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_min_size }};
//     %member wxSize min_size;      // minimum size the pane window can tolerate
static int LUACALL wxLua_wxAuiPaneInfo_Set_min_size(lua_State *L)
{
    // get the data type value
    wxSize* val = (wxSize*)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    self->min_size = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_name[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Set_name(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Set_name[1] = {{ wxLua_wxAuiPaneInfo_Set_name, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_name }};
//     %member wxString name;        // name of the pane
static int LUACALL wxLua_wxAuiPaneInfo_Set_name(lua_State *L)
{
    // get the string value
    wxString val = wxlua_getwxStringtype(L, 2);
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    self->name = val;
    // return the number of values
    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_rect[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Set_rect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Set_rect[1] = {{ wxLua_wxAuiPaneInfo_Set_rect, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_rect }};
//     %member wxRect rect;              // current rectangle (populated by wxAUI)
static int LUACALL wxLua_wxAuiPaneInfo_Set_rect(lua_State *L)
{
    // get the data type value
    wxRect* val = (wxRect*)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    self->rect = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_state[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Set_state(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Set_state[1] = {{ wxLua_wxAuiPaneInfo_Set_state, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_state }};
//     %member unsigned int state;   // a combination of wxPaneState values
static int LUACALL wxLua_wxAuiPaneInfo_Set_state(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    self->state = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_window[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Set_window(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Set_window[1] = {{ wxLua_wxAuiPaneInfo_Set_window, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Set_window }};
//     %member wxWindow* window;     // window that is in this pane
static int LUACALL wxLua_wxAuiPaneInfo_Set_window(lua_State *L)
{
    // get the data type value
    wxWindow* val = (wxWindow*)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiPaneInfo *self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    self->window = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Show[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Show(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Show[1] = {{ wxLua_wxAuiPaneInfo_Show, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Show }};
//     wxAuiPaneInfo& Show(bool show = true)
static int LUACALL wxLua_wxAuiPaneInfo_Show(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool show = true
    bool show = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Show
    wxAuiPaneInfo* returns = &self->Show(show);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_ToolbarPane[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_ToolbarPane(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_ToolbarPane[1] = {{ wxLua_wxAuiPaneInfo_ToolbarPane, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_ToolbarPane }};
//     wxAuiPaneInfo& ToolbarPane()
static int LUACALL wxLua_wxAuiPaneInfo_ToolbarPane(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call ToolbarPane
    wxAuiPaneInfo* returns = &self->ToolbarPane();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Top[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Top(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Top[1] = {{ wxLua_wxAuiPaneInfo_Top, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Top }};
//     wxAuiPaneInfo& Top()
static int LUACALL wxLua_wxAuiPaneInfo_Top(lua_State *L)
{
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Top
    wxAuiPaneInfo* returns = &self->Top();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_TopDockable[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_TopDockable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_TopDockable[1] = {{ wxLua_wxAuiPaneInfo_TopDockable, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_TopDockable }};
//     wxAuiPaneInfo& TopDockable(bool b = true)
static int LUACALL wxLua_wxAuiPaneInfo_TopDockable(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool b = true
    bool b = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call TopDockable
    wxAuiPaneInfo* returns = &self->TopDockable(b);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_Window[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_Window(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_Window[1] = {{ wxLua_wxAuiPaneInfo_Window, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_Window }};
//     wxAuiPaneInfo& Window(wxWindow* w)
static int LUACALL wxLua_wxAuiPaneInfo_Window(lua_State *L)
{
    // wxWindow w
    wxWindow * w = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call Window
    wxAuiPaneInfo* returns = &self->Window(w);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_delete[] = { &wxluatype_wxAuiPaneInfo, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_delete }};


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFrame)
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFrame)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_op_set[] = { &wxluatype_wxAuiPaneInfo, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_op_set[1] = {{ wxLua_wxAuiPaneInfo_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_op_set }};
//     %operator wxAuiPaneInfo& operator=(const wxAuiPaneInfo& c)
static int LUACALL wxLua_wxAuiPaneInfo_op_set(lua_State *L)
{
    // const wxAuiPaneInfo c
    const wxAuiPaneInfo * c = (const wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiPaneInfo);
    // get this
    wxAuiPaneInfo * self = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call op_set
    (*self)=(*c);
    wxAuiPaneInfo* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfo_constructor1[] = { &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfo_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_constructor1[1] = {{ wxLua_wxAuiPaneInfo_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_constructor1 }};
//     wxAuiPaneInfo(const wxAuiPaneInfo& c)
static int LUACALL wxLua_wxAuiPaneInfo_constructor1(lua_State *L)
{
    // const wxAuiPaneInfo c
    const wxAuiPaneInfo * c = (const wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfo);
    // call constructor
    wxAuiPaneInfo* returns = new wxAuiPaneInfo(*c);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAuiPaneInfo((wxAuiPaneInfo*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static int LUACALL wxLua_wxAuiPaneInfo_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_constructor[1] = {{ wxLua_wxAuiPaneInfo_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxAuiPaneInfo()
static int LUACALL wxLua_wxAuiPaneInfo_constructor(lua_State *L)
{
    // call constructor
    wxAuiPaneInfo* returns = new wxAuiPaneInfo();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAuiPaneInfo((wxAuiPaneInfo*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}




#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)||((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_BestSize_overload[] =
{
    { wxLua_wxAuiPaneInfo_BestSize1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiPaneInfo_BestSize1 },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxAuiPaneInfo_BestSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_BestSize },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
};
static int s_wxluafunc_wxLua_wxAuiPaneInfo_BestSize_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiPaneInfo_BestSize_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_FloatingPosition_overload[] =
{
    { wxLua_wxAuiPaneInfo_FloatingPosition1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiPaneInfo_FloatingPosition1 },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxAuiPaneInfo_FloatingPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_FloatingPosition },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
};
static int s_wxluafunc_wxLua_wxAuiPaneInfo_FloatingPosition_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiPaneInfo_FloatingPosition_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_FloatingSize_overload[] =
{
    { wxLua_wxAuiPaneInfo_FloatingSize1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiPaneInfo_FloatingSize1 },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxAuiPaneInfo_FloatingSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_FloatingSize },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
};
static int s_wxluafunc_wxLua_wxAuiPaneInfo_FloatingSize_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiPaneInfo_FloatingSize_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_MaxSize_overload[] =
{
    { wxLua_wxAuiPaneInfo_MaxSize1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiPaneInfo_MaxSize1 },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxAuiPaneInfo_MaxSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_MaxSize },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
};
static int s_wxluafunc_wxLua_wxAuiPaneInfo_MaxSize_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiPaneInfo_MaxSize_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_MinSize_overload[] =
{
    { wxLua_wxAuiPaneInfo_MinSize1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiPaneInfo_MinSize1 },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxAuiPaneInfo_MinSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfo_MinSize },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
};
static int s_wxluafunc_wxLua_wxAuiPaneInfo_MinSize_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiPaneInfo_MinSize_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)||((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfo_constructor_overload[] =
{
    { wxLua_wxAuiPaneInfo_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfo_constructor1 },
    { wxLua_wxAuiPaneInfo_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxAuiPaneInfo_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiPaneInfo_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiPaneInfo_methods[] = {
#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)||((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))
    { "BestSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_BestSize_overload, s_wxluafunc_wxLua_wxAuiPaneInfo_BestSize_overload_count, 0 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)||((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))

    { "Bottom", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Bottom, 1, NULL },
    { "BottomDockable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_BottomDockable, 1, NULL },
    { "Caption", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Caption, 1, NULL },
    { "CaptionVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_CaptionVisible, 1, NULL },
    { "Center", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Center, 1, NULL },
    { "CenterPane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_CenterPane, 1, NULL },
    { "Centre", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Centre, 1, NULL },
    { "CentrePane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_CentrePane, 1, NULL },
    { "CloseButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_CloseButton, 1, NULL },
    { "DefaultPane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_DefaultPane, 1, NULL },
    { "DestroyOnClose", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_DestroyOnClose, 1, NULL },
    { "Direction", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Direction, 1, NULL },
    { "Dock", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Dock, 1, NULL },
    { "Dockable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Dockable, 1, NULL },
    { "Fixed", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Fixed, 1, NULL },
    { "Float", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Float, 1, NULL },
    { "Floatable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Floatable, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)||((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))
    { "FloatingPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_FloatingPosition_overload, s_wxluafunc_wxLua_wxAuiPaneInfo_FloatingPosition_overload_count, 0 },
    { "FloatingSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_FloatingSize_overload, s_wxluafunc_wxLua_wxAuiPaneInfo_FloatingSize_overload_count, 0 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)||((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    // %member    { "Get_best_size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_best_size, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    // %member    { "Get_caption", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_caption, 1, NULL },
    // %member    { "Get_dock_direction", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_dock_direction, 1, NULL },
    // %member    { "Get_dock_layer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_dock_layer, 1, NULL },
    // %member    { "Get_dock_pos", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_dock_pos, 1, NULL },
    // %member    { "Get_dock_proportion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_dock_proportion, 1, NULL },
    // %member    { "Get_dock_row", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_dock_row, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    // %member    { "Get_floating_pos", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_floating_pos, 1, NULL },
    // %member    { "Get_floating_size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_floating_size, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFrame)
    // %member    { "Get_frame", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_frame, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFrame)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    // %member    { "Get_max_size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_max_size, 1, NULL },
    // %member    { "Get_min_size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_min_size, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    // %member    { "Get_name", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_name, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    // %member    { "Get_rect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_rect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    // %member    { "Get_state", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_state, 1, NULL },
    // %member    { "Get_window", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_window, 1, NULL },
    { "Gripper", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Gripper, 1, NULL },
    { "GripperTop", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_GripperTop, 1, NULL },
    { "HasBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_HasBorder, 1, NULL },
    { "HasCaption", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_HasCaption, 1, NULL },
    { "HasCloseButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_HasCloseButton, 1, NULL },
    { "HasFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_HasFlag, 1, NULL },
    { "HasGripper", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_HasGripper, 1, NULL },
    { "HasGripperTop", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_HasGripperTop, 1, NULL },
    { "HasMaximizeButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_HasMaximizeButton, 1, NULL },
    { "HasMinimizeButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_HasMinimizeButton, 1, NULL },
    { "HasPinButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_HasPinButton, 1, NULL },
    { "Hide", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Hide, 1, NULL },
    { "IsBottomDockable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_IsBottomDockable, 1, NULL },
    { "IsDestroyOnClose", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_IsDestroyOnClose, 1, NULL },
    { "IsDocked", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_IsDocked, 1, NULL },
    { "IsFixed", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_IsFixed, 1, NULL },
    { "IsFloatable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_IsFloatable, 1, NULL },
    { "IsFloating", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_IsFloating, 1, NULL },
    { "IsLeftDockable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_IsLeftDockable, 1, NULL },
    { "IsMaximized", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_IsMaximized, 1, NULL },
    { "IsMovable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_IsMovable, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_IsOk, 1, NULL },
    { "IsResizable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_IsResizable, 1, NULL },
    { "IsRightDockable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_IsRightDockable, 1, NULL },
    { "IsShown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_IsShown, 1, NULL },
    { "IsToolbar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_IsToolbar, 1, NULL },
    { "IsTopDockable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_IsTopDockable, 1, NULL },
    { "Layer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Layer, 1, NULL },
    { "Left", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Left, 1, NULL },
    { "LeftDockable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_LeftDockable, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)||((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))
    { "MaxSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_MaxSize_overload, s_wxluafunc_wxLua_wxAuiPaneInfo_MaxSize_overload_count, 0 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)||((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))

    { "Maximize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Maximize, 1, NULL },
    { "MaximizeButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_MaximizeButton, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)||((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))
    { "MinSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_MinSize_overload, s_wxluafunc_wxLua_wxAuiPaneInfo_MinSize_overload_count, 0 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)||((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))

    { "MinimizeButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_MinimizeButton, 1, NULL },
    { "Movable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Movable, 1, NULL },
    { "Name", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Name, 1, NULL },
    { "PaneBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_PaneBorder, 1, NULL },
    { "PinButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_PinButton, 1, NULL },
    { "Position", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Position, 1, NULL },
    { "Resizable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Resizable, 1, NULL },
    { "Restore", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Restore, 1, NULL },
    { "Right", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Right, 1, NULL },
    { "RightDockable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_RightDockable, 1, NULL },
    { "Row", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Row, 1, NULL },
    { "SafeSet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_SafeSet, 1, NULL },
    { "SetFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_SetFlag, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    // %member    { "Set_best_size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_best_size, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    // %member    { "Set_caption", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_caption, 1, NULL },
    // %member    { "Set_dock_direction", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_dock_direction, 1, NULL },
    // %member    { "Set_dock_layer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_dock_layer, 1, NULL },
    // %member    { "Set_dock_pos", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_dock_pos, 1, NULL },
    // %member    { "Set_dock_proportion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_dock_proportion, 1, NULL },
    // %member    { "Set_dock_row", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_dock_row, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    // %member    { "Set_floating_pos", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_floating_pos, 1, NULL },
    // %member    { "Set_floating_size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_floating_size, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFrame)
    // %member    { "Set_frame", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_frame, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFrame)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    // %member    { "Set_max_size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_max_size, 1, NULL },
    // %member    { "Set_min_size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_min_size, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    // %member    { "Set_name", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_name, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    // %member    { "Set_rect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_rect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    // %member    { "Set_state", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_state, 1, NULL },
    // %member    { "Set_window", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_window, 1, NULL },
    { "Show", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Show, 1, NULL },
    { "ToolbarPane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_ToolbarPane, 1, NULL },
    { "Top", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Top, 1, NULL },
    { "TopDockable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_TopDockable, 1, NULL },
    { "Window", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_Window, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "best_size", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_best_size, 1, NULL },
    { "best_size", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_best_size, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    { "caption", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_caption, 1, NULL },
    { "caption", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_caption, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAuiPaneInfo_delete, 1, NULL },
    { "dock_direction", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_dock_direction, 1, NULL },
    { "dock_direction", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_dock_direction, 1, NULL },
    { "dock_layer", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_dock_layer, 1, NULL },
    { "dock_layer", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_dock_layer, 1, NULL },
    { "dock_pos", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_dock_pos, 1, NULL },
    { "dock_pos", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_dock_pos, 1, NULL },
    { "dock_proportion", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_dock_proportion, 1, NULL },
    { "dock_proportion", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_dock_proportion, 1, NULL },
    { "dock_row", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_dock_row, 1, NULL },
    { "dock_row", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_dock_row, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "floating_pos", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_floating_pos, 1, NULL },
    { "floating_pos", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_floating_pos, 1, NULL },
    { "floating_size", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_floating_size, 1, NULL },
    { "floating_size", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_floating_size, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFrame)
    { "frame", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_frame, 1, NULL },
    { "frame", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_frame, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxFrame)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "max_size", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_max_size, 1, NULL },
    { "max_size", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_max_size, 1, NULL },
    { "min_size", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_min_size, 1, NULL },
    { "min_size", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_min_size, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    { "name", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_name, 1, NULL },
    { "name", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_name, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfo_op_set, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "rect", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_rect, 1, NULL },
    { "rect", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_rect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    { "state", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_state, 1, NULL },
    { "state", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_state, 1, NULL },
    { "window", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Set_window, 1, NULL },
    { "window", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneInfo_Get_window, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
    { "wxAuiPaneInfo", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAuiPaneInfo_constructor_overload, s_wxluafunc_wxLua_wxAuiPaneInfo_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

    { 0, 0, 0, 0 },
};

int wxAuiPaneInfo_methodCount = sizeof(wxAuiPaneInfo_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxAuiPaneInfo_enums[] = {
#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
        { "actionPane", wxAuiPaneInfo::actionPane },
        { "buttonClose", wxAuiPaneInfo::buttonClose },
        { "buttonCustom1", wxAuiPaneInfo::buttonCustom1 },
        { "buttonCustom2", wxAuiPaneInfo::buttonCustom2 },
        { "buttonCustom3", wxAuiPaneInfo::buttonCustom3 },
        { "buttonMaximize", wxAuiPaneInfo::buttonMaximize },
        { "buttonMinimize", wxAuiPaneInfo::buttonMinimize },
        { "buttonPin", wxAuiPaneInfo::buttonPin },
        { "optionActive", wxAuiPaneInfo::optionActive },
        { "optionBottomDockable", wxAuiPaneInfo::optionBottomDockable },
        { "optionCaption", wxAuiPaneInfo::optionCaption },
        { "optionDestroyOnClose", wxAuiPaneInfo::optionDestroyOnClose },
        { "optionFloatable", wxAuiPaneInfo::optionFloatable },
        { "optionFloating", wxAuiPaneInfo::optionFloating },
        { "optionGripper", wxAuiPaneInfo::optionGripper },
        { "optionGripperTop", wxAuiPaneInfo::optionGripperTop },
        { "optionHidden", wxAuiPaneInfo::optionHidden },
        { "optionLeftDockable", wxAuiPaneInfo::optionLeftDockable },
        { "optionMaximized", wxAuiPaneInfo::optionMaximized },
        { "optionMovable", wxAuiPaneInfo::optionMovable },
        { "optionPaneBorder", wxAuiPaneInfo::optionPaneBorder },
        { "optionResizable", wxAuiPaneInfo::optionResizable },
        { "optionRightDockable", wxAuiPaneInfo::optionRightDockable },
        { "optionToolbar", wxAuiPaneInfo::optionToolbar },
        { "optionTopDockable", wxAuiPaneInfo::optionTopDockable },
        { "savedHiddenState", wxAuiPaneInfo::savedHiddenState },
#endif // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI

    { NULL, 0, },
};
int wxAuiPaneInfo_enumCount = sizeof(wxAuiPaneInfo_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiPaneInfoArray
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiPaneInfoArray'
int wxluatype_wxAuiPaneInfoArray = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_Add[] = { &wxluatype_wxAuiPaneInfoArray, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiPaneInfoArray_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfoArray_Add[1] = {{ wxLua_wxAuiPaneInfoArray_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_Add }};
//     void Add(wxAuiPaneInfo pi)
static int LUACALL wxLua_wxAuiPaneInfoArray_Add(lua_State *L)
{
    // wxAuiPaneInfo pi
    wxAuiPaneInfo pi = *(wxAuiPaneInfo*)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiPaneInfo);
    // get this
    wxAuiPaneInfoArray * self = (wxAuiPaneInfoArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfoArray);
    // call Add
    self->Add(pi);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_Clear[] = { &wxluatype_wxAuiPaneInfoArray, NULL };
static int LUACALL wxLua_wxAuiPaneInfoArray_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfoArray_Clear[1] = {{ wxLua_wxAuiPaneInfoArray_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_Clear }};
//     void Clear()
static int LUACALL wxLua_wxAuiPaneInfoArray_Clear(lua_State *L)
{
    // get this
    wxAuiPaneInfoArray * self = (wxAuiPaneInfoArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfoArray);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_GetCount[] = { &wxluatype_wxAuiPaneInfoArray, NULL };
static int LUACALL wxLua_wxAuiPaneInfoArray_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfoArray_GetCount[1] = {{ wxLua_wxAuiPaneInfoArray_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_GetCount }};
//     int  GetCount() const
static int LUACALL wxLua_wxAuiPaneInfoArray_GetCount(lua_State *L)
{
    // get this
    wxAuiPaneInfoArray * self = (wxAuiPaneInfoArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfoArray);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_Insert[] = { &wxluatype_wxAuiPaneInfoArray, &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneInfoArray_Insert(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfoArray_Insert[1] = {{ wxLua_wxAuiPaneInfoArray_Insert, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_Insert }};
//     void Insert(wxAuiPaneInfo pi, int nIndex)
static int LUACALL wxLua_wxAuiPaneInfoArray_Insert(lua_State *L)
{
    // int nIndex
    int nIndex = (int)wxlua_getnumbertype(L, 3);
    // wxAuiPaneInfo pi
    wxAuiPaneInfo pi = *(wxAuiPaneInfo*)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiPaneInfo);
    // get this
    wxAuiPaneInfoArray * self = (wxAuiPaneInfoArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfoArray);
    // call Insert
    self->Insert(pi, nIndex);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_IsEmpty[] = { &wxluatype_wxAuiPaneInfoArray, NULL };
static int LUACALL wxLua_wxAuiPaneInfoArray_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfoArray_IsEmpty[1] = {{ wxLua_wxAuiPaneInfoArray_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_IsEmpty }};
//     bool IsEmpty()
static int LUACALL wxLua_wxAuiPaneInfoArray_IsEmpty(lua_State *L)
{
    // get this
    wxAuiPaneInfoArray * self = (wxAuiPaneInfoArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfoArray);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_Item[] = { &wxluatype_wxAuiPaneInfoArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiPaneInfoArray_Item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfoArray_Item[1] = {{ wxLua_wxAuiPaneInfoArray_Item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_Item }};
//     wxAuiPaneInfo Item(size_t nIndex) const
static int LUACALL wxLua_wxAuiPaneInfoArray_Item(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiPaneInfoArray * self = (wxAuiPaneInfoArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfoArray);
    // call Item
    // allocate a new object using the copy constructor
    wxAuiPaneInfo* returns = new wxAuiPaneInfo(self->Item(nIndex));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAuiPaneInfo((wxAuiPaneInfo*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_RemoveAt[] = { &wxluatype_wxAuiPaneInfoArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiPaneInfoArray_RemoveAt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfoArray_RemoveAt[1] = {{ wxLua_wxAuiPaneInfoArray_RemoveAt, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_RemoveAt }};
//     void RemoveAt(size_t nIndex)
static int LUACALL wxLua_wxAuiPaneInfoArray_RemoveAt(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiPaneInfoArray * self = (wxAuiPaneInfoArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfoArray);
    // call RemoveAt
    self->RemoveAt(nIndex);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_delete[] = { &wxluatype_wxAuiPaneInfoArray, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfoArray_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_constructor1[] = { &wxluatype_wxAuiPaneInfoArray, NULL };
static int LUACALL wxLua_wxAuiPaneInfoArray_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfoArray_constructor1[1] = {{ wxLua_wxAuiPaneInfoArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_constructor1 }};
//     wxAuiPaneInfoArray(const wxAuiPaneInfoArray& array)
static int LUACALL wxLua_wxAuiPaneInfoArray_constructor1(lua_State *L)
{
    // const wxAuiPaneInfoArray array
    const wxAuiPaneInfoArray * array = (const wxAuiPaneInfoArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneInfoArray);
    // call constructor
    wxAuiPaneInfoArray* returns = new wxAuiPaneInfoArray(*array);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAuiPaneInfoArray((wxAuiPaneInfoArray*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfoArray);

    return 1;
}

static int LUACALL wxLua_wxAuiPaneInfoArray_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfoArray_constructor[1] = {{ wxLua_wxAuiPaneInfoArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxAuiPaneInfoArray()
static int LUACALL wxLua_wxAuiPaneInfoArray_constructor(lua_State *L)
{
    // call constructor
    wxAuiPaneInfoArray* returns = new wxAuiPaneInfoArray();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAuiPaneInfoArray((wxAuiPaneInfoArray*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfoArray);

    return 1;
}




#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneInfoArray_constructor_overload[] =
{
    { wxLua_wxAuiPaneInfoArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneInfoArray_constructor1 },
    { wxLua_wxAuiPaneInfoArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxAuiPaneInfoArray_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiPaneInfoArray_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiPaneInfoArray_methods[] = {
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfoArray_Add, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfoArray_Clear, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfoArray_GetCount, 1, NULL },
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfoArray_Insert, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfoArray_IsEmpty, 1, NULL },
    { "Item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfoArray_Item, 1, NULL },
    { "RemoveAt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneInfoArray_RemoveAt, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAuiPaneInfoArray_delete, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
    { "wxAuiPaneInfoArray", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAuiPaneInfoArray_constructor_overload, s_wxluafunc_wxLua_wxAuiPaneInfoArray_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

    { 0, 0, 0, 0 },
};

int wxAuiPaneInfoArray_methodCount = sizeof(wxAuiPaneInfoArray_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiManager
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiManager'
int wxluatype_wxAuiManager = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_AddPane2[] = { &wxluatype_wxAuiManager, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAuiManager_AddPane2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_AddPane2[1] = {{ wxLua_wxAuiManager_AddPane2, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxAuiManager_AddPane2 }};
//     bool AddPane(wxWindow* window, int direction = wxLEFT, const wxString& caption = wxEmptyString);
static int LUACALL wxLua_wxAuiManager_AddPane2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString caption = wxEmptyString
    const wxString caption = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // int direction = wxLEFT
    int direction = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxLEFT);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call AddPane
    bool returns = (self->AddPane(window, direction, caption));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_AddPane1[] = { &wxluatype_wxAuiManager, &wxluatype_wxWindow, &wxluatype_wxAuiPaneInfo, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxAuiManager_AddPane1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_AddPane1[1] = {{ wxLua_wxAuiManager_AddPane1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxAuiManager_AddPane1 }};
//     bool AddPane(wxWindow* window, const wxAuiPaneInfo& pane_info, const wxPoint& drop_pos);
static int LUACALL wxLua_wxAuiManager_AddPane1(lua_State *L)
{
    // const wxPoint drop_pos
    const wxPoint * drop_pos = (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint);
    // const wxAuiPaneInfo pane_info
    const wxAuiPaneInfo * pane_info = (const wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 3, wxluatype_wxAuiPaneInfo);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call AddPane
    bool returns = (self->AddPane(window, *pane_info, *drop_pos));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_AddPane[] = { &wxluatype_wxAuiManager, &wxluatype_wxWindow, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiManager_AddPane(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_AddPane[1] = {{ wxLua_wxAuiManager_AddPane, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiManager_AddPane }};
//     bool AddPane(wxWindow* window, const wxAuiPaneInfo& pane_info);
static int LUACALL wxLua_wxAuiManager_AddPane(lua_State *L)
{
    // const wxAuiPaneInfo pane_info
    const wxAuiPaneInfo * pane_info = (const wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 3, wxluatype_wxAuiPaneInfo);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call AddPane
    bool returns = (self->AddPane(window, *pane_info));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_CalculateHintRect[] = { &wxluatype_wxAuiManager, &wxluatype_wxWindow, &wxluatype_wxPoint, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxAuiManager_CalculateHintRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_CalculateHintRect[1] = {{ wxLua_wxAuiManager_CalculateHintRect, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxAuiManager_CalculateHintRect }};
//     wxRect CalculateHintRect( wxWindow* pane_window, const wxPoint& pt, const wxPoint& offset);
static int LUACALL wxLua_wxAuiManager_CalculateHintRect(lua_State *L)
{
    // const wxPoint offset
    const wxPoint * offset = (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint);
    // wxWindow pane_window
    wxWindow * pane_window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call CalculateHintRect
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->CalculateHintRect(pane_window, *pt, *offset));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxRect((wxRect*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_ClosePane[] = { &wxluatype_wxAuiManager, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiManager_ClosePane(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_ClosePane[1] = {{ wxLua_wxAuiManager_ClosePane, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManager_ClosePane }};
//     void ClosePane(wxAuiPaneInfo& pane_info);
static int LUACALL wxLua_wxAuiManager_ClosePane(lua_State *L)
{
    // wxAuiPaneInfo pane_info
    wxAuiPaneInfo * pane_info = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiPaneInfo);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call ClosePane
    self->ClosePane(*pane_info);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_CreateFloatingFrame[] = { &wxluatype_wxAuiManager, &wxluatype_wxWindow, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiManager_CreateFloatingFrame(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_CreateFloatingFrame[1] = {{ wxLua_wxAuiManager_CreateFloatingFrame, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiManager_CreateFloatingFrame }};
//     virtual wxAuiFloatingFrame* CreateFloatingFrame(wxWindow* parent, const wxAuiPaneInfo& p);
static int LUACALL wxLua_wxAuiManager_CreateFloatingFrame(lua_State *L)
{
    // const wxAuiPaneInfo p
    const wxAuiPaneInfo * p = (const wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 3, wxluatype_wxAuiPaneInfo);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call CreateFloatingFrame
    wxAuiFloatingFrame* returns = (wxAuiFloatingFrame*)self->CreateFloatingFrame(parent, *p);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiFloatingFrame);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_DetachPane[] = { &wxluatype_wxAuiManager, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxAuiManager_DetachPane(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_DetachPane[1] = {{ wxLua_wxAuiManager_DetachPane, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManager_DetachPane }};
//     bool DetachPane(wxWindow* window);
static int LUACALL wxLua_wxAuiManager_DetachPane(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call DetachPane
    bool returns = (self->DetachPane(window));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_DrawHintRect[] = { &wxluatype_wxAuiManager, &wxluatype_wxWindow, &wxluatype_wxPoint, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxAuiManager_DrawHintRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_DrawHintRect[1] = {{ wxLua_wxAuiManager_DrawHintRect, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxAuiManager_DrawHintRect }};
//     void DrawHintRect( wxWindow* pane_window, const wxPoint& pt, const wxPoint& offset);
static int LUACALL wxLua_wxAuiManager_DrawHintRect(lua_State *L)
{
    // const wxPoint offset
    const wxPoint * offset = (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint);
    // wxWindow pane_window
    wxWindow * pane_window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call DrawHintRect
    self->DrawHintRect(pane_window, *pt, *offset);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_GetAllPanes[] = { &wxluatype_wxAuiManager, NULL };
static int LUACALL wxLua_wxAuiManager_GetAllPanes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_GetAllPanes[1] = {{ wxLua_wxAuiManager_GetAllPanes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiManager_GetAllPanes }};
//     wxAuiPaneInfoArray& GetAllPanes();
static int LUACALL wxLua_wxAuiManager_GetAllPanes(lua_State *L)
{
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call GetAllPanes
    wxAuiPaneInfoArray* returns = &self->GetAllPanes();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfoArray);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_GetArtProvider[] = { &wxluatype_wxAuiManager, NULL };
static int LUACALL wxLua_wxAuiManager_GetArtProvider(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_GetArtProvider[1] = {{ wxLua_wxAuiManager_GetArtProvider, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiManager_GetArtProvider }};
//     wxAuiDockArt* GetArtProvider() const;
static int LUACALL wxLua_wxAuiManager_GetArtProvider(lua_State *L)
{
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call GetArtProvider
    wxAuiDockArt* returns = (wxAuiDockArt*)self->GetArtProvider();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiDockArt);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_GetDockSizeConstraint[] = { &wxluatype_wxAuiManager, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxAuiManager_GetDockSizeConstraint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_GetDockSizeConstraint[1] = {{ wxLua_wxAuiManager_GetDockSizeConstraint, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiManager_GetDockSizeConstraint }};
//     void GetDockSizeConstraint(double* width_pct, double* height_pct) const;
static int LUACALL wxLua_wxAuiManager_GetDockSizeConstraint(lua_State *L)
{
    // double height_pct
    double * height_pct = (double *)wxlua_touserdata(L, 3);
    // double width_pct
    double * width_pct = (double *)wxlua_touserdata(L, 2);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call GetDockSizeConstraint
    self->GetDockSizeConstraint(width_pct, height_pct);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_GetFlags[] = { &wxluatype_wxAuiManager, NULL };
static int LUACALL wxLua_wxAuiManager_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_GetFlags[1] = {{ wxLua_wxAuiManager_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiManager_GetFlags }};
//     unsigned int GetFlags() const;
static int LUACALL wxLua_wxAuiManager_GetFlags(lua_State *L)
{
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call GetFlags
    unsigned int returns = (self->GetFlags());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_GetManagedWindow[] = { &wxluatype_wxAuiManager, NULL };
static int LUACALL wxLua_wxAuiManager_GetManagedWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_GetManagedWindow[1] = {{ wxLua_wxAuiManager_GetManagedWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiManager_GetManagedWindow }};
//     wxWindow* GetManagedWindow() const;
static int LUACALL wxLua_wxAuiManager_GetManagedWindow(lua_State *L)
{
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call GetManagedWindow
    wxWindow* returns = (wxWindow*)self->GetManagedWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_GetManager[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxAuiManager_GetManager(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_GetManager[1] = {{ wxLua_wxAuiManager_GetManager, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxAuiManager_GetManager }};
//     static wxAuiManager* GetManager(wxWindow* window);
static int LUACALL wxLua_wxAuiManager_GetManager(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetManager
    wxAuiManager* returns = (wxAuiManager*)wxAuiManager::GetManager(window);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiManager);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_GetPane1[] = { &wxluatype_wxAuiManager, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAuiManager_GetPane1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_GetPane1[1] = {{ wxLua_wxAuiManager_GetPane1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManager_GetPane1 }};
//     wxAuiPaneInfo& GetPane(const wxString& name);
static int LUACALL wxLua_wxAuiManager_GetPane1(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call GetPane
    wxAuiPaneInfo* returns = &self->GetPane(name);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_GetPane[] = { &wxluatype_wxAuiManager, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxAuiManager_GetPane(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_GetPane[1] = {{ wxLua_wxAuiManager_GetPane, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManager_GetPane }};
//     wxAuiPaneInfo& GetPane(wxWindow* window);
static int LUACALL wxLua_wxAuiManager_GetPane(lua_State *L)
{
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call GetPane
    wxAuiPaneInfo* returns = &self->GetPane(window);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_HideHint[] = { &wxluatype_wxAuiManager, NULL };
static int LUACALL wxLua_wxAuiManager_HideHint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_HideHint[1] = {{ wxLua_wxAuiManager_HideHint, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiManager_HideHint }};
//     virtual void HideHint();
static int LUACALL wxLua_wxAuiManager_HideHint(lua_State *L)
{
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call HideHint
    self->HideHint();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_InsertPane[] = { &wxluatype_wxAuiManager, &wxluatype_wxWindow, &wxluatype_wxAuiPaneInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiManager_InsertPane(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_InsertPane[1] = {{ wxLua_wxAuiManager_InsertPane, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxAuiManager_InsertPane }};
//     bool InsertPane(wxWindow* window, const wxAuiPaneInfo& insert_location, int insert_level = wxAUI_INSERT_PANE);
static int LUACALL wxLua_wxAuiManager_InsertPane(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int insert_level = wxAUI_INSERT_PANE
    int insert_level = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxAUI_INSERT_PANE);
    // const wxAuiPaneInfo insert_location
    const wxAuiPaneInfo * insert_location = (const wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 3, wxluatype_wxAuiPaneInfo);
    // wxWindow window
    wxWindow * window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call InsertPane
    bool returns = (self->InsertPane(window, *insert_location, insert_level));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_LoadPaneInfo[] = { &wxluatype_wxAuiManager, &wxluatype_TSTRING, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiManager_LoadPaneInfo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_LoadPaneInfo[1] = {{ wxLua_wxAuiManager_LoadPaneInfo, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiManager_LoadPaneInfo }};
//     void LoadPaneInfo(wxString pane_part, wxAuiPaneInfo &pane);
static int LUACALL wxLua_wxAuiManager_LoadPaneInfo(lua_State *L)
{
    // wxAuiPaneInfo pane
    wxAuiPaneInfo * pane = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 3, wxluatype_wxAuiPaneInfo);
    // wxString pane_part
    wxString pane_part = wxlua_getwxStringtype(L, 2);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call LoadPaneInfo
    self->LoadPaneInfo(pane_part, *pane);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_LoadPerspective[] = { &wxluatype_wxAuiManager, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiManager_LoadPerspective(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_LoadPerspective[1] = {{ wxLua_wxAuiManager_LoadPerspective, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxAuiManager_LoadPerspective }};
//     bool LoadPerspective(const wxString& perspective, bool update = true);
static int LUACALL wxLua_wxAuiManager_LoadPerspective(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool update = true
    bool update = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxString perspective
    const wxString perspective = wxlua_getwxStringtype(L, 2);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call LoadPerspective
    bool returns = (self->LoadPerspective(perspective, update));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_MaximizePane[] = { &wxluatype_wxAuiManager, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiManager_MaximizePane(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_MaximizePane[1] = {{ wxLua_wxAuiManager_MaximizePane, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManager_MaximizePane }};
//     void MaximizePane(wxAuiPaneInfo& pane_info);
static int LUACALL wxLua_wxAuiManager_MaximizePane(lua_State *L)
{
    // wxAuiPaneInfo pane_info
    wxAuiPaneInfo * pane_info = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiPaneInfo);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call MaximizePane
    self->MaximizePane(*pane_info);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_OnPaneButton[] = { &wxluatype_wxAuiManager, &wxluatype_wxAuiManagerEvent, NULL };
static int LUACALL wxLua_wxAuiManager_OnPaneButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_OnPaneButton[1] = {{ wxLua_wxAuiManager_OnPaneButton, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManager_OnPaneButton }};
//     void OnPaneButton(wxAuiManagerEvent& evt);
static int LUACALL wxLua_wxAuiManager_OnPaneButton(lua_State *L)
{
    // wxAuiManagerEvent evt
    wxAuiManagerEvent * evt = (wxAuiManagerEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiManagerEvent);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call OnPaneButton
    self->OnPaneButton(*evt);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_OnRender[] = { &wxluatype_wxAuiManager, &wxluatype_wxAuiManagerEvent, NULL };
static int LUACALL wxLua_wxAuiManager_OnRender(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_OnRender[1] = {{ wxLua_wxAuiManager_OnRender, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManager_OnRender }};
//     void OnRender(wxAuiManagerEvent& evt);
static int LUACALL wxLua_wxAuiManager_OnRender(lua_State *L)
{
    // wxAuiManagerEvent evt
    wxAuiManagerEvent * evt = (wxAuiManagerEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiManagerEvent);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call OnRender
    self->OnRender(*evt);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_RestoreMaximizedPane[] = { &wxluatype_wxAuiManager, NULL };
static int LUACALL wxLua_wxAuiManager_RestoreMaximizedPane(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_RestoreMaximizedPane[1] = {{ wxLua_wxAuiManager_RestoreMaximizedPane, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiManager_RestoreMaximizedPane }};
//     void RestoreMaximizedPane();
static int LUACALL wxLua_wxAuiManager_RestoreMaximizedPane(lua_State *L)
{
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call RestoreMaximizedPane
    self->RestoreMaximizedPane();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_RestorePane[] = { &wxluatype_wxAuiManager, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiManager_RestorePane(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_RestorePane[1] = {{ wxLua_wxAuiManager_RestorePane, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManager_RestorePane }};
//     void RestorePane(wxAuiPaneInfo& pane_info);
static int LUACALL wxLua_wxAuiManager_RestorePane(lua_State *L)
{
    // wxAuiPaneInfo pane_info
    wxAuiPaneInfo * pane_info = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiPaneInfo);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call RestorePane
    self->RestorePane(*pane_info);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_SavePaneInfo[] = { &wxluatype_wxAuiManager, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiManager_SavePaneInfo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_SavePaneInfo[1] = {{ wxLua_wxAuiManager_SavePaneInfo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManager_SavePaneInfo }};
//     wxString SavePaneInfo(wxAuiPaneInfo& pane);
static int LUACALL wxLua_wxAuiManager_SavePaneInfo(lua_State *L)
{
    // wxAuiPaneInfo pane
    wxAuiPaneInfo * pane = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiPaneInfo);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call SavePaneInfo
    wxString returns = (self->SavePaneInfo(*pane));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_SavePerspective[] = { &wxluatype_wxAuiManager, NULL };
static int LUACALL wxLua_wxAuiManager_SavePerspective(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_SavePerspective[1] = {{ wxLua_wxAuiManager_SavePerspective, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiManager_SavePerspective }};
//     wxString SavePerspective();
static int LUACALL wxLua_wxAuiManager_SavePerspective(lua_State *L)
{
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call SavePerspective
    wxString returns = (self->SavePerspective());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_SetArtProvider[] = { &wxluatype_wxAuiManager, &wxluatype_wxAuiDockArt, NULL };
static int LUACALL wxLua_wxAuiManager_SetArtProvider(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_SetArtProvider[1] = {{ wxLua_wxAuiManager_SetArtProvider, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManager_SetArtProvider }};
//     void SetArtProvider(%ungc wxAuiDockArt* art_provider);
static int LUACALL wxLua_wxAuiManager_SetArtProvider(lua_State *L)
{
    // wxAuiDockArt art_provider
    wxAuiDockArt * art_provider = (wxAuiDockArt *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiDockArt);
    if (wxluaO_isgcobject(L, art_provider)) wxluaO_undeletegcobject(L, art_provider);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call SetArtProvider
    self->SetArtProvider(art_provider);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_SetDockSizeConstraint[] = { &wxluatype_wxAuiManager, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiManager_SetDockSizeConstraint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_SetDockSizeConstraint[1] = {{ wxLua_wxAuiManager_SetDockSizeConstraint, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiManager_SetDockSizeConstraint }};
//     void SetDockSizeConstraint(double width_pct, double height_pct);
static int LUACALL wxLua_wxAuiManager_SetDockSizeConstraint(lua_State *L)
{
    // double height_pct
    double height_pct = (double)wxlua_getnumbertype(L, 3);
    // double width_pct
    double width_pct = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call SetDockSizeConstraint
    self->SetDockSizeConstraint(width_pct, height_pct);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_SetFlags[] = { &wxluatype_wxAuiManager, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiManager_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_SetFlags[1] = {{ wxLua_wxAuiManager_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManager_SetFlags }};
//     void SetFlags(unsigned int flags);
static int LUACALL wxLua_wxAuiManager_SetFlags(lua_State *L)
{
    // unsigned int flags
    unsigned int flags = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_SetManagedWindow[] = { &wxluatype_wxAuiManager, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxAuiManager_SetManagedWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_SetManagedWindow[1] = {{ wxLua_wxAuiManager_SetManagedWindow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManager_SetManagedWindow }};
//     void SetManagedWindow(wxWindow* managed_wnd);
static int LUACALL wxLua_wxAuiManager_SetManagedWindow(lua_State *L)
{
    // wxWindow managed_wnd
    wxWindow * managed_wnd = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call SetManagedWindow
    self->SetManagedWindow(managed_wnd);

    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_ShowHint[] = { &wxluatype_wxAuiManager, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxAuiManager_ShowHint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_ShowHint[1] = {{ wxLua_wxAuiManager_ShowHint, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManager_ShowHint }};
//     virtual void ShowHint(const wxRect& rect);
static int LUACALL wxLua_wxAuiManager_ShowHint(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call ShowHint
    self->ShowHint(*rect);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_StartPaneDrag[] = { &wxluatype_wxAuiManager, &wxluatype_wxWindow, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxAuiManager_StartPaneDrag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_StartPaneDrag[1] = {{ wxLua_wxAuiManager_StartPaneDrag, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiManager_StartPaneDrag }};
//     void StartPaneDrag( wxWindow* pane_window, const wxPoint& offset);
static int LUACALL wxLua_wxAuiManager_StartPaneDrag(lua_State *L)
{
    // const wxPoint offset
    const wxPoint * offset = (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint);
    // wxWindow pane_window
    wxWindow * pane_window = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call StartPaneDrag
    self->StartPaneDrag(pane_window, *offset);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_UnInit[] = { &wxluatype_wxAuiManager, NULL };
static int LUACALL wxLua_wxAuiManager_UnInit(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_UnInit[1] = {{ wxLua_wxAuiManager_UnInit, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiManager_UnInit }};
//     void UnInit();
static int LUACALL wxLua_wxAuiManager_UnInit(lua_State *L)
{
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call UnInit
    self->UnInit();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_Update[] = { &wxluatype_wxAuiManager, NULL };
static int LUACALL wxLua_wxAuiManager_Update(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_Update[1] = {{ wxLua_wxAuiManager_Update, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiManager_Update }};
//     void Update();
static int LUACALL wxLua_wxAuiManager_Update(lua_State *L)
{
    // get this
    wxAuiManager * self = (wxAuiManager *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManager);
    // call Update
    self->Update();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManager_constructor[] = { &wxluatype_wxWindow, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiManager_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_constructor[1] = {{ wxLua_wxAuiManager_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxAuiManager_constructor }};
//     wxAuiManager(wxWindow* managed_wnd = NULL, unsigned int flags = wxAUI_MGR_DEFAULT);
static int LUACALL wxLua_wxAuiManager_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // unsigned int flags = wxAUI_MGR_DEFAULT
    unsigned int flags = (argCount >= 2 ? (unsigned int)wxlua_getuintegertype(L, 2) : wxAUI_MGR_DEFAULT);
    // wxWindow managed_wnd = NULL
    wxWindow * managed_wnd = (argCount >= 1 ? (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow) : NULL);
    // call constructor
    wxAuiManager* returns = new wxAuiManager(managed_wnd, flags);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiManager);

    return 1;
}




#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)||((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_AddPane_overload[] =
{
    { wxLua_wxAuiManager_AddPane2, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxAuiManager_AddPane2 },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxAuiManager_AddPane1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxAuiManager_AddPane1 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxAuiManager_AddPane, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxAuiManager_AddPane },
};
static int s_wxluafunc_wxLua_wxAuiManager_AddPane_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiManager_AddPane_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)||((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManager_GetPane_overload[] =
{
    { wxLua_wxAuiManager_GetPane1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManager_GetPane1 },
    { wxLua_wxAuiManager_GetPane, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManager_GetPane },
};
static int s_wxluafunc_wxLua_wxAuiManager_GetPane_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiManager_GetPane_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiManager_methods[] = {
#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)||((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))
    { "AddPane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_AddPane_overload, s_wxluafunc_wxLua_wxAuiManager_AddPane_overload_count, 0 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)||((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "CalculateHintRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_CalculateHintRect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    { "ClosePane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_ClosePane, 1, NULL },
    { "CreateFloatingFrame", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_CreateFloatingFrame, 1, NULL },
    { "DetachPane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_DetachPane, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "DrawHintRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_DrawHintRect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    { "GetAllPanes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_GetAllPanes, 1, NULL },
    { "GetArtProvider", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_GetArtProvider, 1, NULL },
    { "GetDockSizeConstraint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_GetDockSizeConstraint, 1, NULL },
    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_GetFlags, 1, NULL },
    { "GetManagedWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_GetManagedWindow, 1, NULL },
    { "GetManager", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxAuiManager_GetManager, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
    { "GetPane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_GetPane_overload, s_wxluafunc_wxLua_wxAuiManager_GetPane_overload_count, 0 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

    { "HideHint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_HideHint, 1, NULL },
    { "InsertPane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_InsertPane, 1, NULL },
    { "LoadPaneInfo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_LoadPaneInfo, 1, NULL },
    { "LoadPerspective", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_LoadPerspective, 1, NULL },
    { "MaximizePane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_MaximizePane, 1, NULL },
    { "OnPaneButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_OnPaneButton, 1, NULL },
    { "OnRender", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_OnRender, 1, NULL },
    { "RestoreMaximizedPane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_RestoreMaximizedPane, 1, NULL },
    { "RestorePane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_RestorePane, 1, NULL },
    { "SavePaneInfo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_SavePaneInfo, 1, NULL },
    { "SavePerspective", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_SavePerspective, 1, NULL },
    { "SetArtProvider", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_SetArtProvider, 1, NULL },
    { "SetDockSizeConstraint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_SetDockSizeConstraint, 1, NULL },
    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_SetFlags, 1, NULL },
    { "SetManagedWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_SetManagedWindow, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "ShowHint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_ShowHint, 1, NULL },
    { "StartPaneDrag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_StartPaneDrag, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    { "UnInit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_UnInit, 1, NULL },
    { "Update", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManager_Update, 1, NULL },
    { "wxAuiManager", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAuiManager_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxAuiManager_methodCount = sizeof(wxAuiManager_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiManagerEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiManagerEvent'
int wxluatype_wxAuiManagerEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManagerEvent_CanVeto[] = { &wxluatype_wxAuiManagerEvent, NULL };
static int LUACALL wxLua_wxAuiManagerEvent_CanVeto(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManagerEvent_CanVeto[1] = {{ wxLua_wxAuiManagerEvent_CanVeto, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiManagerEvent_CanVeto }};
//     bool CanVeto() const
static int LUACALL wxLua_wxAuiManagerEvent_CanVeto(lua_State *L)
{
    // get this
    wxAuiManagerEvent * self = (wxAuiManagerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManagerEvent);
    // call CanVeto
    bool returns = (self->CanVeto());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManagerEvent_GetButton[] = { &wxluatype_wxAuiManagerEvent, NULL };
static int LUACALL wxLua_wxAuiManagerEvent_GetButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManagerEvent_GetButton[1] = {{ wxLua_wxAuiManagerEvent_GetButton, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiManagerEvent_GetButton }};
//     int GetButton() const
static int LUACALL wxLua_wxAuiManagerEvent_GetButton(lua_State *L)
{
    // get this
    wxAuiManagerEvent * self = (wxAuiManagerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManagerEvent);
    // call GetButton
    int returns = (self->GetButton());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManagerEvent_GetDC[] = { &wxluatype_wxAuiManagerEvent, NULL };
static int LUACALL wxLua_wxAuiManagerEvent_GetDC(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManagerEvent_GetDC[1] = {{ wxLua_wxAuiManagerEvent_GetDC, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiManagerEvent_GetDC }};
//     wxDC* GetDC() const
static int LUACALL wxLua_wxAuiManagerEvent_GetDC(lua_State *L)
{
    // get this
    wxAuiManagerEvent * self = (wxAuiManagerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManagerEvent);
    // call GetDC
    wxDC* returns = (wxDC*)self->GetDC();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDC);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManagerEvent_GetManager[] = { &wxluatype_wxAuiManagerEvent, NULL };
static int LUACALL wxLua_wxAuiManagerEvent_GetManager(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManagerEvent_GetManager[1] = {{ wxLua_wxAuiManagerEvent_GetManager, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiManagerEvent_GetManager }};
//     wxAuiManager* GetManager() const
static int LUACALL wxLua_wxAuiManagerEvent_GetManager(lua_State *L)
{
    // get this
    wxAuiManagerEvent * self = (wxAuiManagerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManagerEvent);
    // call GetManager
    wxAuiManager* returns = (wxAuiManager*)self->GetManager();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiManager);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManagerEvent_GetPane[] = { &wxluatype_wxAuiManagerEvent, NULL };
static int LUACALL wxLua_wxAuiManagerEvent_GetPane(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManagerEvent_GetPane[1] = {{ wxLua_wxAuiManagerEvent_GetPane, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiManagerEvent_GetPane }};
//     wxAuiPaneInfo* GetPane() const
static int LUACALL wxLua_wxAuiManagerEvent_GetPane(lua_State *L)
{
    // get this
    wxAuiManagerEvent * self = (wxAuiManagerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManagerEvent);
    // call GetPane
    wxAuiPaneInfo* returns = (wxAuiPaneInfo*)self->GetPane();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiPaneInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManagerEvent_GetVeto[] = { &wxluatype_wxAuiManagerEvent, NULL };
static int LUACALL wxLua_wxAuiManagerEvent_GetVeto(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManagerEvent_GetVeto[1] = {{ wxLua_wxAuiManagerEvent_GetVeto, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiManagerEvent_GetVeto }};
//     bool GetVeto() const
static int LUACALL wxLua_wxAuiManagerEvent_GetVeto(lua_State *L)
{
    // get this
    wxAuiManagerEvent * self = (wxAuiManagerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManagerEvent);
    // call GetVeto
    bool returns = (self->GetVeto());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManagerEvent_SetButton[] = { &wxluatype_wxAuiManagerEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiManagerEvent_SetButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManagerEvent_SetButton[1] = {{ wxLua_wxAuiManagerEvent_SetButton, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManagerEvent_SetButton }};
//     void SetButton(int b)
static int LUACALL wxLua_wxAuiManagerEvent_SetButton(lua_State *L)
{
    // int b
    int b = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiManagerEvent * self = (wxAuiManagerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManagerEvent);
    // call SetButton
    self->SetButton(b);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManagerEvent_SetCanVeto[] = { &wxluatype_wxAuiManagerEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiManagerEvent_SetCanVeto(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManagerEvent_SetCanVeto[1] = {{ wxLua_wxAuiManagerEvent_SetCanVeto, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManagerEvent_SetCanVeto }};
//     void SetCanVeto(bool can_veto)
static int LUACALL wxLua_wxAuiManagerEvent_SetCanVeto(lua_State *L)
{
    // bool can_veto
    bool can_veto = wxlua_getbooleantype(L, 2);
    // get this
    wxAuiManagerEvent * self = (wxAuiManagerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManagerEvent);
    // call SetCanVeto
    self->SetCanVeto(can_veto);

    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManagerEvent_SetDC[] = { &wxluatype_wxAuiManagerEvent, &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxAuiManagerEvent_SetDC(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManagerEvent_SetDC[1] = {{ wxLua_wxAuiManagerEvent_SetDC, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManagerEvent_SetDC }};
//     void SetDC(wxDC* pdc)
static int LUACALL wxLua_wxAuiManagerEvent_SetDC(lua_State *L)
{
    // wxDC pdc
    wxDC * pdc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxAuiManagerEvent * self = (wxAuiManagerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManagerEvent);
    // call SetDC
    self->SetDC(pdc);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManagerEvent_SetManager[] = { &wxluatype_wxAuiManagerEvent, &wxluatype_wxAuiManager, NULL };
static int LUACALL wxLua_wxAuiManagerEvent_SetManager(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManagerEvent_SetManager[1] = {{ wxLua_wxAuiManagerEvent_SetManager, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManagerEvent_SetManager }};
//     void SetManager(wxAuiManager* mgr)
static int LUACALL wxLua_wxAuiManagerEvent_SetManager(lua_State *L)
{
    // wxAuiManager mgr
    wxAuiManager * mgr = (wxAuiManager *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiManager);
    // get this
    wxAuiManagerEvent * self = (wxAuiManagerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManagerEvent);
    // call SetManager
    self->SetManager(mgr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManagerEvent_SetPane[] = { &wxluatype_wxAuiManagerEvent, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiManagerEvent_SetPane(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManagerEvent_SetPane[1] = {{ wxLua_wxAuiManagerEvent_SetPane, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiManagerEvent_SetPane }};
//     void SetPane(wxAuiPaneInfo* p)
static int LUACALL wxLua_wxAuiManagerEvent_SetPane(lua_State *L)
{
    // wxAuiPaneInfo p
    wxAuiPaneInfo * p = (wxAuiPaneInfo *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiPaneInfo);
    // get this
    wxAuiManagerEvent * self = (wxAuiManagerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManagerEvent);
    // call SetPane
    self->SetPane(p);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManagerEvent_Veto[] = { &wxluatype_wxAuiManagerEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiManagerEvent_Veto(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManagerEvent_Veto[1] = {{ wxLua_wxAuiManagerEvent_Veto, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiManagerEvent_Veto }};
//     void Veto(bool veto = true)
static int LUACALL wxLua_wxAuiManagerEvent_Veto(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool veto = true
    bool veto = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxAuiManagerEvent * self = (wxAuiManagerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManagerEvent);
    // call Veto
    self->Veto(veto);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManagerEvent_delete[] = { &wxluatype_wxAuiManagerEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManagerEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAuiManagerEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManagerEvent_constructor1[] = { &wxluatype_wxAuiManagerEvent, NULL };
static int LUACALL wxLua_wxAuiManagerEvent_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManagerEvent_constructor1[1] = {{ wxLua_wxAuiManagerEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAuiManagerEvent_constructor1 }};
//     wxAuiManagerEvent(const wxAuiManagerEvent& c)
static int LUACALL wxLua_wxAuiManagerEvent_constructor1(lua_State *L)
{
    // const wxAuiManagerEvent c
    const wxAuiManagerEvent * c = (const wxAuiManagerEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiManagerEvent);
    // call constructor
    wxAuiManagerEvent* returns = new wxAuiManagerEvent(*c);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiManagerEvent);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiManagerEvent_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiManagerEvent_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManagerEvent_constructor[1] = {{ wxLua_wxAuiManagerEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxAuiManagerEvent_constructor }};
//     wxAuiManagerEvent(wxEventType type=wxEVT_NULL)
static int LUACALL wxLua_wxAuiManagerEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxEventType type = wxEVT_NULL
    wxEventType type = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxAuiManagerEvent* returns = new wxAuiManagerEvent(type);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiManagerEvent);

    return 1;
}




#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiManagerEvent_constructor_overload[] =
{
    { wxLua_wxAuiManagerEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAuiManagerEvent_constructor1 },
    { wxLua_wxAuiManagerEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxAuiManagerEvent_constructor },
};
static int s_wxluafunc_wxLua_wxAuiManagerEvent_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiManagerEvent_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiManagerEvent_methods[] = {
    { "CanVeto", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManagerEvent_CanVeto, 1, NULL },
    { "GetButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManagerEvent_GetButton, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxDC)
    { "GetDC", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManagerEvent_GetDC, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxDC)

    { "GetManager", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManagerEvent_GetManager, 1, NULL },
    { "GetPane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManagerEvent_GetPane, 1, NULL },
    { "GetVeto", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManagerEvent_GetVeto, 1, NULL },
    { "SetButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManagerEvent_SetButton, 1, NULL },
    { "SetCanVeto", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManagerEvent_SetCanVeto, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxDC)
    { "SetDC", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManagerEvent_SetDC, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxDC)

    { "SetManager", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManagerEvent_SetManager, 1, NULL },
    { "SetPane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManagerEvent_SetPane, 1, NULL },
    { "Veto", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiManagerEvent_Veto, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAuiManagerEvent_delete, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
    { "wxAuiManagerEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAuiManagerEvent_constructor_overload, s_wxluafunc_wxLua_wxAuiManagerEvent_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

    { 0, 0, 0, 0 },
};

int wxAuiManagerEvent_methodCount = sizeof(wxAuiManagerEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiDockInfo
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiDockInfo'
int wxluatype_wxAuiDockInfo = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_dock_direction[] = { &wxluatype_wxAuiDockInfo, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Get_dock_direction(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Get_dock_direction[1] = {{ wxLua_wxAuiDockInfo_Get_dock_direction, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_dock_direction }};
//     %member int dock_direction;       // dock direction (top, bottom, left, right, center)
static int LUACALL wxLua_wxAuiDockInfo_Get_dock_direction(lua_State *L)
{
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    // push the result number
    lua_pushnumber(L, self->dock_direction);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_dock_layer[] = { &wxluatype_wxAuiDockInfo, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Get_dock_layer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Get_dock_layer[1] = {{ wxLua_wxAuiDockInfo_Get_dock_layer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_dock_layer }};
//     %member int dock_layer;           // layer number (0 = innermost layer)
static int LUACALL wxLua_wxAuiDockInfo_Get_dock_layer(lua_State *L)
{
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    // push the result number
    lua_pushnumber(L, self->dock_layer);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_dock_row[] = { &wxluatype_wxAuiDockInfo, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Get_dock_row(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Get_dock_row[1] = {{ wxLua_wxAuiDockInfo_Get_dock_row, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_dock_row }};
//     %member int dock_row;             // row number on the docking bar (0 = first row)
static int LUACALL wxLua_wxAuiDockInfo_Get_dock_row(lua_State *L)
{
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    // push the result number
    lua_pushnumber(L, self->dock_row);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_fixed[] = { &wxluatype_wxAuiDockInfo, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Get_fixed(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Get_fixed[1] = {{ wxLua_wxAuiDockInfo_Get_fixed, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_fixed }};
//     %member bool fixed;               // flag indicating that the dock operates on
static int LUACALL wxLua_wxAuiDockInfo_Get_fixed(lua_State *L)
{
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    // push the result flag
    lua_pushboolean(L, self->fixed);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_min_size[] = { &wxluatype_wxAuiDockInfo, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Get_min_size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Get_min_size[1] = {{ wxLua_wxAuiDockInfo_Get_min_size, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_min_size }};
//     %member int min_size;             // minimum size of a dock (0 if there is no min)
static int LUACALL wxLua_wxAuiDockInfo_Get_min_size(lua_State *L)
{
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    // push the result number
    lua_pushnumber(L, self->min_size);
    // return the number of values
    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_rect[] = { &wxluatype_wxAuiDockInfo, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Get_rect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Get_rect[1] = {{ wxLua_wxAuiDockInfo_Get_rect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_rect }};
//     %member wxRect rect;              // current rectangle
static int LUACALL wxLua_wxAuiDockInfo_Get_rect(lua_State *L)
{
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->rect, wxluatype_wxRect);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_reserved1[] = { &wxluatype_wxAuiDockInfo, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Get_reserved1(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Get_reserved1[1] = {{ wxLua_wxAuiDockInfo_Get_reserved1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_reserved1 }};
//     %member bool reserved1;
static int LUACALL wxLua_wxAuiDockInfo_Get_reserved1(lua_State *L)
{
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    // push the result flag
    lua_pushboolean(L, self->reserved1);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_resizable[] = { &wxluatype_wxAuiDockInfo, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Get_resizable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Get_resizable[1] = {{ wxLua_wxAuiDockInfo_Get_resizable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_resizable }};
//     %member bool resizable;           // flag indicating whether the dock is resizable
static int LUACALL wxLua_wxAuiDockInfo_Get_resizable(lua_State *L)
{
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    // push the result flag
    lua_pushboolean(L, self->resizable);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_size[] = { &wxluatype_wxAuiDockInfo, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Get_size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Get_size[1] = {{ wxLua_wxAuiDockInfo_Get_size, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_size }};
//     %member int size;                 // size of the dock
static int LUACALL wxLua_wxAuiDockInfo_Get_size(lua_State *L)
{
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    // push the result number
    lua_pushnumber(L, self->size);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_toolbar[] = { &wxluatype_wxAuiDockInfo, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Get_toolbar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Get_toolbar[1] = {{ wxLua_wxAuiDockInfo_Get_toolbar, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockInfo_Get_toolbar }};
//     %member bool toolbar;             // flag indicating dock contains only toolbars
static int LUACALL wxLua_wxAuiDockInfo_Get_toolbar(lua_State *L)
{
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    // push the result flag
    lua_pushboolean(L, self->toolbar);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_IsHorizontal[] = { &wxluatype_wxAuiDockInfo, NULL };
static int LUACALL wxLua_wxAuiDockInfo_IsHorizontal(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_IsHorizontal[1] = {{ wxLua_wxAuiDockInfo_IsHorizontal, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockInfo_IsHorizontal }};
//     bool IsHorizontal() const
static int LUACALL wxLua_wxAuiDockInfo_IsHorizontal(lua_State *L)
{
    // get this
    wxAuiDockInfo * self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    // call IsHorizontal
    bool returns = (self->IsHorizontal());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_IsOk[] = { &wxluatype_wxAuiDockInfo, NULL };
static int LUACALL wxLua_wxAuiDockInfo_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_IsOk[1] = {{ wxLua_wxAuiDockInfo_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockInfo_IsOk }};
//     bool IsOk() const
static int LUACALL wxLua_wxAuiDockInfo_IsOk(lua_State *L)
{
    // get this
    wxAuiDockInfo * self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_IsVertical[] = { &wxluatype_wxAuiDockInfo, NULL };
static int LUACALL wxLua_wxAuiDockInfo_IsVertical(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_IsVertical[1] = {{ wxLua_wxAuiDockInfo_IsVertical, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockInfo_IsVertical }};
//     bool IsVertical() const
static int LUACALL wxLua_wxAuiDockInfo_IsVertical(lua_State *L)
{
    // get this
    wxAuiDockInfo * self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    // call IsVertical
    bool returns = (self->IsVertical());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_dock_direction[] = { &wxluatype_wxAuiDockInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Set_dock_direction(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Set_dock_direction[1] = {{ wxLua_wxAuiDockInfo_Set_dock_direction, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_dock_direction }};
//     %member int dock_direction;       // dock direction (top, bottom, left, right, center)
static int LUACALL wxLua_wxAuiDockInfo_Set_dock_direction(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    self->dock_direction = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_dock_layer[] = { &wxluatype_wxAuiDockInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Set_dock_layer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Set_dock_layer[1] = {{ wxLua_wxAuiDockInfo_Set_dock_layer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_dock_layer }};
//     %member int dock_layer;           // layer number (0 = innermost layer)
static int LUACALL wxLua_wxAuiDockInfo_Set_dock_layer(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    self->dock_layer = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_dock_row[] = { &wxluatype_wxAuiDockInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Set_dock_row(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Set_dock_row[1] = {{ wxLua_wxAuiDockInfo_Set_dock_row, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_dock_row }};
//     %member int dock_row;             // row number on the docking bar (0 = first row)
static int LUACALL wxLua_wxAuiDockInfo_Set_dock_row(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    self->dock_row = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_fixed[] = { &wxluatype_wxAuiDockInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Set_fixed(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Set_fixed[1] = {{ wxLua_wxAuiDockInfo_Set_fixed, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_fixed }};
//     %member bool fixed;               // flag indicating that the dock operates on
static int LUACALL wxLua_wxAuiDockInfo_Set_fixed(lua_State *L)
{
    // get the boolean value
    bool val = wxlua_getbooleantype(L, 2);
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    self->fixed = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_min_size[] = { &wxluatype_wxAuiDockInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Set_min_size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Set_min_size[1] = {{ wxLua_wxAuiDockInfo_Set_min_size, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_min_size }};
//     %member int min_size;             // minimum size of a dock (0 if there is no min)
static int LUACALL wxLua_wxAuiDockInfo_Set_min_size(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    self->min_size = val;
    // return the number of values
    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_rect[] = { &wxluatype_wxAuiDockInfo, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Set_rect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Set_rect[1] = {{ wxLua_wxAuiDockInfo_Set_rect, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_rect }};
//     %member wxRect rect;              // current rectangle
static int LUACALL wxLua_wxAuiDockInfo_Set_rect(lua_State *L)
{
    // get the data type value
    wxRect* val = (wxRect*)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    self->rect = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_reserved1[] = { &wxluatype_wxAuiDockInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Set_reserved1(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Set_reserved1[1] = {{ wxLua_wxAuiDockInfo_Set_reserved1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_reserved1 }};
//     %member bool reserved1;
static int LUACALL wxLua_wxAuiDockInfo_Set_reserved1(lua_State *L)
{
    // get the boolean value
    bool val = wxlua_getbooleantype(L, 2);
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    self->reserved1 = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_resizable[] = { &wxluatype_wxAuiDockInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Set_resizable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Set_resizable[1] = {{ wxLua_wxAuiDockInfo_Set_resizable, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_resizable }};
//     %member bool resizable;           // flag indicating whether the dock is resizable
static int LUACALL wxLua_wxAuiDockInfo_Set_resizable(lua_State *L)
{
    // get the boolean value
    bool val = wxlua_getbooleantype(L, 2);
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    self->resizable = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_size[] = { &wxluatype_wxAuiDockInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Set_size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Set_size[1] = {{ wxLua_wxAuiDockInfo_Set_size, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_size }};
//     %member int size;                 // size of the dock
static int LUACALL wxLua_wxAuiDockInfo_Set_size(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    self->size = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_toolbar[] = { &wxluatype_wxAuiDockInfo, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiDockInfo_Set_toolbar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_Set_toolbar[1] = {{ wxLua_wxAuiDockInfo_Set_toolbar, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockInfo_Set_toolbar }};
//     %member bool toolbar;             // flag indicating dock contains only toolbars
static int LUACALL wxLua_wxAuiDockInfo_Set_toolbar(lua_State *L)
{
    // get the boolean value
    bool val = wxlua_getbooleantype(L, 2);
    // get this
    wxAuiDockInfo *self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    self->toolbar = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_delete[] = { &wxluatype_wxAuiDockInfo, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockInfo_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_op_set[] = { &wxluatype_wxAuiDockInfo, &wxluatype_wxAuiDockInfo, NULL };
static int LUACALL wxLua_wxAuiDockInfo_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_op_set[1] = {{ wxLua_wxAuiDockInfo_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockInfo_op_set }};
//     %operator wxAuiDockInfo& operator=(const wxAuiDockInfo& c)
static int LUACALL wxLua_wxAuiDockInfo_op_set(lua_State *L)
{
    // const wxAuiDockInfo c
    const wxAuiDockInfo * c = (const wxAuiDockInfo *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiDockInfo);
    // get this
    wxAuiDockInfo * self = (wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    // call op_set
    (*self)=(*c);
    wxAuiDockInfo* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiDockInfo);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockInfo_constructor1[] = { &wxluatype_wxAuiDockInfo, NULL };
static int LUACALL wxLua_wxAuiDockInfo_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_constructor1[1] = {{ wxLua_wxAuiDockInfo_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockInfo_constructor1 }};
//     wxAuiDockInfo(const wxAuiDockInfo& c)
static int LUACALL wxLua_wxAuiDockInfo_constructor1(lua_State *L)
{
    // const wxAuiDockInfo c
    const wxAuiDockInfo * c = (const wxAuiDockInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockInfo);
    // call constructor
    wxAuiDockInfo* returns = new wxAuiDockInfo(*c);
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAuiDockInfo((wxAuiDockInfo*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiDockInfo);

    return 1;
}

static int LUACALL wxLua_wxAuiDockInfo_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_constructor[1] = {{ wxLua_wxAuiDockInfo_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxAuiDockInfo()
static int LUACALL wxLua_wxAuiDockInfo_constructor(lua_State *L)
{
    // call constructor
    wxAuiDockInfo* returns = new wxAuiDockInfo();
    // add to tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxAuiDockInfo((wxAuiDockInfo*)returns));
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiDockInfo);

    return 1;
}




#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockInfo_constructor_overload[] =
{
    { wxLua_wxAuiDockInfo_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockInfo_constructor1 },
    { wxLua_wxAuiDockInfo_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxAuiDockInfo_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiDockInfo_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiDockInfo_methods[] = {
    // %member    { "Get_dock_direction", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Get_dock_direction, 1, NULL },
    // %member    { "Get_dock_layer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Get_dock_layer, 1, NULL },
    // %member    { "Get_dock_row", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Get_dock_row, 1, NULL },
    // %member    { "Get_fixed", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Get_fixed, 1, NULL },
    // %member    { "Get_min_size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Get_min_size, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    // %member    { "Get_rect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Get_rect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    // %member    { "Get_reserved1", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Get_reserved1, 1, NULL },
    // %member    { "Get_resizable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Get_resizable, 1, NULL },
    // %member    { "Get_size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Get_size, 1, NULL },
    // %member    { "Get_toolbar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Get_toolbar, 1, NULL },
    { "IsHorizontal", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_IsHorizontal, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_IsOk, 1, NULL },
    { "IsVertical", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_IsVertical, 1, NULL },
    // %member    { "Set_dock_direction", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Set_dock_direction, 1, NULL },
    // %member    { "Set_dock_layer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Set_dock_layer, 1, NULL },
    // %member    { "Set_dock_row", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Set_dock_row, 1, NULL },
    // %member    { "Set_fixed", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Set_fixed, 1, NULL },
    // %member    { "Set_min_size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Set_min_size, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    // %member    { "Set_rect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Set_rect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    // %member    { "Set_reserved1", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Set_reserved1, 1, NULL },
    // %member    { "Set_resizable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Set_resizable, 1, NULL },
    // %member    { "Set_size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Set_size, 1, NULL },
    // %member    { "Set_toolbar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_Set_toolbar, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAuiDockInfo_delete, 1, NULL },
    { "dock_direction", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Set_dock_direction, 1, NULL },
    { "dock_direction", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Get_dock_direction, 1, NULL },
    { "dock_layer", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Set_dock_layer, 1, NULL },
    { "dock_layer", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Get_dock_layer, 1, NULL },
    { "dock_row", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Set_dock_row, 1, NULL },
    { "dock_row", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Get_dock_row, 1, NULL },
    { "fixed", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Set_fixed, 1, NULL },
    { "fixed", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Get_fixed, 1, NULL },
    { "min_size", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Set_min_size, 1, NULL },
    { "min_size", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Get_min_size, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockInfo_op_set, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "rect", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Set_rect, 1, NULL },
    { "rect", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Get_rect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    { "reserved1", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Set_reserved1, 1, NULL },
    { "reserved1", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Get_reserved1, 1, NULL },
    { "resizable", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Set_resizable, 1, NULL },
    { "resizable", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Get_resizable, 1, NULL },
    { "size", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Set_size, 1, NULL },
    { "size", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Get_size, 1, NULL },
    { "toolbar", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Set_toolbar, 1, NULL },
    { "toolbar", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockInfo_Get_toolbar, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
    { "wxAuiDockInfo", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAuiDockInfo_constructor_overload, s_wxluafunc_wxLua_wxAuiDockInfo_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

    { 0, 0, 0, 0 },
};

int wxAuiDockInfo_methodCount = sizeof(wxAuiDockInfo_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiDockUIPart
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiDockUIPart'
int wxluatype_wxAuiDockUIPart = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_Get_button[] = { &wxluatype_wxAuiDockUIPart, NULL };
static int LUACALL wxLua_wxAuiDockUIPart_Get_button(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_Get_button[1] = {{ wxLua_wxAuiDockUIPart_Get_button, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockUIPart_Get_button }};
//     %member wxAuiPaneButton* button;    // which pane button the item is associated with
static int LUACALL wxLua_wxAuiDockUIPart_Get_button(lua_State *L)
{
    // get this
    wxAuiDockUIPart *self = (wxAuiDockUIPart *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockUIPart);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->button, wxluatype_wxAuiPaneButton);
    // return the number of values
    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_Get_cont_sizer[] = { &wxluatype_wxAuiDockUIPart, NULL };
static int LUACALL wxLua_wxAuiDockUIPart_Get_cont_sizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_Get_cont_sizer[1] = {{ wxLua_wxAuiDockUIPart_Get_cont_sizer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockUIPart_Get_cont_sizer }};
//     %member wxSizer* cont_sizer;     // the part's containing sizer
static int LUACALL wxLua_wxAuiDockUIPart_Get_cont_sizer(lua_State *L)
{
    // get this
    wxAuiDockUIPart *self = (wxAuiDockUIPart *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockUIPart);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->cont_sizer, wxluatype_wxSizer);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_Get_dock[] = { &wxluatype_wxAuiDockUIPart, NULL };
static int LUACALL wxLua_wxAuiDockUIPart_Get_dock(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_Get_dock[1] = {{ wxLua_wxAuiDockUIPart_Get_dock, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockUIPart_Get_dock }};
//     %member wxAuiDockInfo* dock;        // which dock the item is associated with
static int LUACALL wxLua_wxAuiDockUIPart_Get_dock(lua_State *L)
{
    // get this
    wxAuiDockUIPart *self = (wxAuiDockUIPart *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockUIPart);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->dock, wxluatype_wxAuiDockInfo);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_Get_orientation[] = { &wxluatype_wxAuiDockUIPart, NULL };
static int LUACALL wxLua_wxAuiDockUIPart_Get_orientation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_Get_orientation[1] = {{ wxLua_wxAuiDockUIPart_Get_orientation, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockUIPart_Get_orientation }};
//     %member int orientation;         // orientation (either wxHORIZONTAL or wxVERTICAL)
static int LUACALL wxLua_wxAuiDockUIPart_Get_orientation(lua_State *L)
{
    // get this
    wxAuiDockUIPart *self = (wxAuiDockUIPart *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockUIPart);
    // push the result number
    lua_pushnumber(L, self->orientation);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_Get_pane[] = { &wxluatype_wxAuiDockUIPart, NULL };
static int LUACALL wxLua_wxAuiDockUIPart_Get_pane(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_Get_pane[1] = {{ wxLua_wxAuiDockUIPart_Get_pane, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockUIPart_Get_pane }};
//     %member wxAuiPaneInfo* pane;        // which pane the item is associated with
static int LUACALL wxLua_wxAuiDockUIPart_Get_pane(lua_State *L)
{
    // get this
    wxAuiDockUIPart *self = (wxAuiDockUIPart *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockUIPart);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->pane, wxluatype_wxAuiPaneInfo);
    // return the number of values
    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_Get_rect[] = { &wxluatype_wxAuiDockUIPart, NULL };
static int LUACALL wxLua_wxAuiDockUIPart_Get_rect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_Get_rect[1] = {{ wxLua_wxAuiDockUIPart_Get_rect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockUIPart_Get_rect }};
//     %member wxRect rect;             // client coord rectangle of the part itself
static int LUACALL wxLua_wxAuiDockUIPart_Get_rect(lua_State *L)
{
    // get this
    wxAuiDockUIPart *self = (wxAuiDockUIPart *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockUIPart);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->rect, wxluatype_wxRect);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_Get_sizer_item[] = { &wxluatype_wxAuiDockUIPart, NULL };
static int LUACALL wxLua_wxAuiDockUIPart_Get_sizer_item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_Get_sizer_item[1] = {{ wxLua_wxAuiDockUIPart_Get_sizer_item, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockUIPart_Get_sizer_item }};
//     %member wxSizerItem* sizer_item; // the sizer item of the part
static int LUACALL wxLua_wxAuiDockUIPart_Get_sizer_item(lua_State *L)
{
    // get this
    wxAuiDockUIPart *self = (wxAuiDockUIPart *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockUIPart);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->sizer_item, wxluatype_wxSizerItem);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_Get_type[] = { &wxluatype_wxAuiDockUIPart, NULL };
static int LUACALL wxLua_wxAuiDockUIPart_Get_type(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_Get_type[1] = {{ wxLua_wxAuiDockUIPart_Get_type, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockUIPart_Get_type }};
//     %member int type;                // ui part type (see enum above)
static int LUACALL wxLua_wxAuiDockUIPart_Get_type(lua_State *L)
{
    // get this
    wxAuiDockUIPart *self = (wxAuiDockUIPart *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockUIPart);
    // push the result number
    lua_pushnumber(L, self->type);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_Set_button[] = { &wxluatype_wxAuiDockUIPart, &wxluatype_wxAuiPaneButton, NULL };
static int LUACALL wxLua_wxAuiDockUIPart_Set_button(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_Set_button[1] = {{ wxLua_wxAuiDockUIPart_Set_button, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockUIPart_Set_button }};
//     %member wxAuiPaneButton* button;    // which pane button the item is associated with
static int LUACALL wxLua_wxAuiDockUIPart_Set_button(lua_State *L)
{
    // get the data type value
    wxAuiPaneButton* val = (wxAuiPaneButton*)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiPaneButton);
    // get this
    wxAuiDockUIPart *self = (wxAuiDockUIPart *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockUIPart);
    self->button = val;
    // return the number of values
    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_Set_cont_sizer[] = { &wxluatype_wxAuiDockUIPart, &wxluatype_wxSizer, NULL };
static int LUACALL wxLua_wxAuiDockUIPart_Set_cont_sizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_Set_cont_sizer[1] = {{ wxLua_wxAuiDockUIPart_Set_cont_sizer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockUIPart_Set_cont_sizer }};
//     %member wxSizer* cont_sizer;     // the part's containing sizer
static int LUACALL wxLua_wxAuiDockUIPart_Set_cont_sizer(lua_State *L)
{
    // get the data type value
    wxSizer* val = (wxSizer*)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizer);
    // get this
    wxAuiDockUIPart *self = (wxAuiDockUIPart *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockUIPart);
    self->cont_sizer = val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_Set_dock[] = { &wxluatype_wxAuiDockUIPart, &wxluatype_wxAuiDockInfo, NULL };
static int LUACALL wxLua_wxAuiDockUIPart_Set_dock(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_Set_dock[1] = {{ wxLua_wxAuiDockUIPart_Set_dock, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockUIPart_Set_dock }};
//     %member wxAuiDockInfo* dock;        // which dock the item is associated with
static int LUACALL wxLua_wxAuiDockUIPart_Set_dock(lua_State *L)
{
    // get the data type value
    wxAuiDockInfo* val = (wxAuiDockInfo*)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiDockInfo);
    // get this
    wxAuiDockUIPart *self = (wxAuiDockUIPart *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockUIPart);
    self->dock = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_Set_orientation[] = { &wxluatype_wxAuiDockUIPart, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiDockUIPart_Set_orientation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_Set_orientation[1] = {{ wxLua_wxAuiDockUIPart_Set_orientation, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockUIPart_Set_orientation }};
//     %member int orientation;         // orientation (either wxHORIZONTAL or wxVERTICAL)
static int LUACALL wxLua_wxAuiDockUIPart_Set_orientation(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiDockUIPart *self = (wxAuiDockUIPart *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockUIPart);
    self->orientation = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_Set_pane[] = { &wxluatype_wxAuiDockUIPart, &wxluatype_wxAuiPaneInfo, NULL };
static int LUACALL wxLua_wxAuiDockUIPart_Set_pane(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_Set_pane[1] = {{ wxLua_wxAuiDockUIPart_Set_pane, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockUIPart_Set_pane }};
//     %member wxAuiPaneInfo* pane;        // which pane the item is associated with
static int LUACALL wxLua_wxAuiDockUIPart_Set_pane(lua_State *L)
{
    // get the data type value
    wxAuiPaneInfo* val = (wxAuiPaneInfo*)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiPaneInfo);
    // get this
    wxAuiDockUIPart *self = (wxAuiDockUIPart *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockUIPart);
    self->pane = val;
    // return the number of values
    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_Set_rect[] = { &wxluatype_wxAuiDockUIPart, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxAuiDockUIPart_Set_rect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_Set_rect[1] = {{ wxLua_wxAuiDockUIPart_Set_rect, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockUIPart_Set_rect }};
//     %member wxRect rect;             // client coord rectangle of the part itself
static int LUACALL wxLua_wxAuiDockUIPart_Set_rect(lua_State *L)
{
    // get the data type value
    wxRect* val = (wxRect*)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxAuiDockUIPart *self = (wxAuiDockUIPart *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockUIPart);
    self->rect = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_Set_sizer_item[] = { &wxluatype_wxAuiDockUIPart, &wxluatype_wxSizerItem, NULL };
static int LUACALL wxLua_wxAuiDockUIPart_Set_sizer_item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_Set_sizer_item[1] = {{ wxLua_wxAuiDockUIPart_Set_sizer_item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockUIPart_Set_sizer_item }};
//     %member wxSizerItem* sizer_item; // the sizer item of the part
static int LUACALL wxLua_wxAuiDockUIPart_Set_sizer_item(lua_State *L)
{
    // get the data type value
    wxSizerItem* val = (wxSizerItem*)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizerItem);
    // get this
    wxAuiDockUIPart *self = (wxAuiDockUIPart *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockUIPart);
    self->sizer_item = val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_Set_type[] = { &wxluatype_wxAuiDockUIPart, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiDockUIPart_Set_type(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_Set_type[1] = {{ wxLua_wxAuiDockUIPart_Set_type, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiDockUIPart_Set_type }};
//     %member int type;                // ui part type (see enum above)
static int LUACALL wxLua_wxAuiDockUIPart_Set_type(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiDockUIPart *self = (wxAuiDockUIPart *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiDockUIPart);
    self->type = val;
    // return the number of values
    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiDockUIPart_delete[] = { &wxluatype_wxAuiDockUIPart, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiDockUIPart_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAuiDockUIPart_delete }};


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiDockUIPart_methods[] = {
    // %member    { "Get_button", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockUIPart_Get_button, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    // %member    { "Get_cont_sizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockUIPart_Get_cont_sizer, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    // %member    { "Get_dock", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockUIPart_Get_dock, 1, NULL },
    // %member    { "Get_orientation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockUIPart_Get_orientation, 1, NULL },
    // %member    { "Get_pane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockUIPart_Get_pane, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    // %member    { "Get_rect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockUIPart_Get_rect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    // %member    { "Get_sizer_item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockUIPart_Get_sizer_item, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    // %member    { "Get_type", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockUIPart_Get_type, 1, NULL },
    // %member    { "Set_button", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockUIPart_Set_button, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    // %member    { "Set_cont_sizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockUIPart_Set_cont_sizer, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    // %member    { "Set_dock", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockUIPart_Set_dock, 1, NULL },
    // %member    { "Set_orientation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockUIPart_Set_orientation, 1, NULL },
    // %member    { "Set_pane", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockUIPart_Set_pane, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    // %member    { "Set_rect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockUIPart_Set_rect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    // %member    { "Set_sizer_item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockUIPart_Set_sizer_item, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    // %member    { "Set_type", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiDockUIPart_Set_type, 1, NULL },
    { "button", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockUIPart_Set_button, 1, NULL },
    { "button", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockUIPart_Get_button, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "cont_sizer", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockUIPart_Set_cont_sizer, 1, NULL },
    { "cont_sizer", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockUIPart_Get_cont_sizer, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAuiDockUIPart_delete, 1, NULL },
    { "dock", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockUIPart_Set_dock, 1, NULL },
    { "dock", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockUIPart_Get_dock, 1, NULL },
    { "orientation", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockUIPart_Set_orientation, 1, NULL },
    { "orientation", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockUIPart_Get_orientation, 1, NULL },
    { "pane", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockUIPart_Set_pane, 1, NULL },
    { "pane", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockUIPart_Get_pane, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "rect", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockUIPart_Set_rect, 1, NULL },
    { "rect", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockUIPart_Get_rect, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))
    { "sizer_item", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockUIPart_Set_sizer_item, 1, NULL },
    { "sizer_item", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockUIPart_Get_sizer_item, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && ((wxLUA_USE_wxSizer) && (wxCHECK_VERSION(2,8,0)))

    { "type", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiDockUIPart_Set_type, 1, NULL },
    { "type", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiDockUIPart_Get_type, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxAuiDockUIPart_methodCount = sizeof(wxAuiDockUIPart_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxAuiDockUIPart_enums[] = {
#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
        { "typeBackground", wxAuiDockUIPart::typeBackground },
        { "typeCaption", wxAuiDockUIPart::typeCaption },
        { "typeDock", wxAuiDockUIPart::typeDock },
        { "typeDockSizer", wxAuiDockUIPart::typeDockSizer },
        { "typeGripper", wxAuiDockUIPart::typeGripper },
        { "typePane", wxAuiDockUIPart::typePane },
        { "typePaneBorder", wxAuiDockUIPart::typePaneBorder },
        { "typePaneButton", wxAuiDockUIPart::typePaneButton },
        { "typePaneSizer", wxAuiDockUIPart::typePaneSizer },
#endif // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI

    { NULL, 0, },
};
int wxAuiDockUIPart_enumCount = sizeof(wxAuiDockUIPart_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiPaneButton
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiPaneButton'
int wxluatype_wxAuiPaneButton = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneButton_Get_button_id[] = { &wxluatype_wxAuiPaneButton, NULL };
static int LUACALL wxLua_wxAuiPaneButton_Get_button_id(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneButton_Get_button_id[1] = {{ wxLua_wxAuiPaneButton_Get_button_id, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneButton_Get_button_id }};
//     %member int button_id;        // id of the button (e.g. buttonClose)
static int LUACALL wxLua_wxAuiPaneButton_Get_button_id(lua_State *L)
{
    // get this
    wxAuiPaneButton *self = (wxAuiPaneButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneButton);
    // push the result number
    lua_pushnumber(L, self->button_id);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneButton_Set_button_id[] = { &wxluatype_wxAuiPaneButton, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiPaneButton_Set_button_id(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneButton_Set_button_id[1] = {{ wxLua_wxAuiPaneButton_Set_button_id, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiPaneButton_Set_button_id }};
//     %member int button_id;        // id of the button (e.g. buttonClose)
static int LUACALL wxLua_wxAuiPaneButton_Set_button_id(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxAuiPaneButton *self = (wxAuiPaneButton *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiPaneButton);
    self->button_id = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiPaneButton_delete[] = { &wxluatype_wxAuiPaneButton, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiPaneButton_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAuiPaneButton_delete }};




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiPaneButton_methods[] = {
    // %member    { "Get_button_id", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneButton_Get_button_id, 1, NULL },
    // %member    { "Set_button_id", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiPaneButton_Set_button_id, 1, NULL },
    { "button_id", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxAuiPaneButton_Set_button_id, 1, NULL },
    { "button_id", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxAuiPaneButton_Get_button_id, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAuiPaneButton_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxAuiPaneButton_methodCount = sizeof(wxAuiPaneButton_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiMDIParentFrame
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiMDIParentFrame'
int wxluatype_wxAuiMDIParentFrame = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_ActivateNext[] = { &wxluatype_wxAuiMDIParentFrame, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_ActivateNext(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_ActivateNext[1] = {{ wxLua_wxAuiMDIParentFrame_ActivateNext, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_ActivateNext }};
//     virtual void ActivateNext();
static int LUACALL wxLua_wxAuiMDIParentFrame_ActivateNext(lua_State *L)
{
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call ActivateNext
    self->ActivateNext();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_ActivatePrevious[] = { &wxluatype_wxAuiMDIParentFrame, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_ActivatePrevious(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_ActivatePrevious[1] = {{ wxLua_wxAuiMDIParentFrame_ActivatePrevious, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_ActivatePrevious }};
//     virtual void ActivatePrevious();
static int LUACALL wxLua_wxAuiMDIParentFrame_ActivatePrevious(lua_State *L)
{
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call ActivatePrevious
    self->ActivatePrevious();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_ArrangeIcons[] = { &wxluatype_wxAuiMDIParentFrame, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_ArrangeIcons(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_ArrangeIcons[1] = {{ wxLua_wxAuiMDIParentFrame_ArrangeIcons, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_ArrangeIcons }};
//     virtual void ArrangeIcons() //{ /* Has no effect */ }
static int LUACALL wxLua_wxAuiMDIParentFrame_ArrangeIcons(lua_State *L)
{
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call ArrangeIcons
    self->ArrangeIcons();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_Cascade[] = { &wxluatype_wxAuiMDIParentFrame, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_Cascade(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_Cascade[1] = {{ wxLua_wxAuiMDIParentFrame_Cascade, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_Cascade }};
//     virtual void Cascade()      //{ /* Has no effect */ }
static int LUACALL wxLua_wxAuiMDIParentFrame_Cascade(lua_State *L)
{
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call Cascade
    self->Cascade();

    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_Create[] = { &wxluatype_wxAuiMDIParentFrame, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_Create[1] = {{ wxLua_wxAuiMDIParentFrame_Create, WXLUAMETHOD_METHOD, 4, 8, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_Create }};
//     bool Create(wxWindow *parent, wxWindowID winid, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL,const wxString& name = "wxAuiMDIParentFrame" )
static int LUACALL wxLua_wxAuiMDIParentFrame_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxAuiMDIParentFrame"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxAuiMDIParentFrame")));
    // long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 4);
    // wxWindowID winid
    wxWindowID winid = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call Create
    bool returns = (self->Create(parent, winid, title, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_GetActiveChild[] = { &wxluatype_wxAuiMDIParentFrame, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_GetActiveChild(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_GetActiveChild[1] = {{ wxLua_wxAuiMDIParentFrame_GetActiveChild, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_GetActiveChild }};
//     wxAuiMDIChildFrame *GetActiveChild() const;
static int LUACALL wxLua_wxAuiMDIParentFrame_GetActiveChild(lua_State *L)
{
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call GetActiveChild
    wxAuiMDIChildFrame* returns = (wxAuiMDIChildFrame*)self->GetActiveChild();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiMDIChildFrame);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_GetArtProvider[] = { &wxluatype_wxAuiMDIParentFrame, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_GetArtProvider(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_GetArtProvider[1] = {{ wxLua_wxAuiMDIParentFrame_GetArtProvider, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_GetArtProvider }};
//     wxAuiTabArt* GetArtProvider();
static int LUACALL wxLua_wxAuiMDIParentFrame_GetArtProvider(lua_State *L)
{
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call GetArtProvider
    wxAuiTabArt* returns = (wxAuiTabArt*)self->GetArtProvider();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiTabArt);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_GetClientWindow[] = { &wxluatype_wxAuiMDIParentFrame, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_GetClientWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_GetClientWindow[1] = {{ wxLua_wxAuiMDIParentFrame_GetClientWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_GetClientWindow }};
//     wxAuiMDIClientWindow *GetClientWindow() const;
static int LUACALL wxLua_wxAuiMDIParentFrame_GetClientWindow(lua_State *L)
{
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call GetClientWindow
    wxAuiMDIClientWindow* returns = (wxAuiMDIClientWindow*)self->GetClientWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiMDIClientWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_GetNotebook[] = { &wxluatype_wxAuiMDIParentFrame, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_GetNotebook(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_GetNotebook[1] = {{ wxLua_wxAuiMDIParentFrame_GetNotebook, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_GetNotebook }};
//     wxAuiNotebook* GetNotebook() const;
static int LUACALL wxLua_wxAuiMDIParentFrame_GetNotebook(lua_State *L)
{
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call GetNotebook
    wxAuiNotebook* returns = (wxAuiNotebook*)self->GetNotebook();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiNotebook);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_GetWindowMenu[] = { &wxluatype_wxAuiMDIParentFrame, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_GetWindowMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_GetWindowMenu[1] = {{ wxLua_wxAuiMDIParentFrame_GetWindowMenu, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_GetWindowMenu }};
//     wxMenu* GetWindowMenu() const
static int LUACALL wxLua_wxAuiMDIParentFrame_GetWindowMenu(lua_State *L)
{
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call GetWindowMenu
    wxMenu* returns = (wxMenu*)self->GetWindowMenu();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenu);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_OnCreateClient[] = { &wxluatype_wxAuiMDIParentFrame, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_OnCreateClient(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_OnCreateClient[1] = {{ wxLua_wxAuiMDIParentFrame_OnCreateClient, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_OnCreateClient }};
//     virtual wxAuiMDIClientWindow *OnCreateClient();
static int LUACALL wxLua_wxAuiMDIParentFrame_OnCreateClient(lua_State *L)
{
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call OnCreateClient
    wxAuiMDIClientWindow* returns = (wxAuiMDIClientWindow*)self->OnCreateClient();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiMDIClientWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_ProcessEvent[] = { &wxluatype_wxAuiMDIParentFrame, &wxluatype_wxEvent, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_ProcessEvent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_ProcessEvent[1] = {{ wxLua_wxAuiMDIParentFrame_ProcessEvent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_ProcessEvent }};
//     virtual bool ProcessEvent(wxEvent& event);
static int LUACALL wxLua_wxAuiMDIParentFrame_ProcessEvent(lua_State *L)
{
    // wxEvent event
    wxEvent * event = (wxEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxEvent);
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call ProcessEvent
    bool returns = (self->ProcessEvent(*event));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_SetActiveChild[] = { &wxluatype_wxAuiMDIParentFrame, &wxluatype_wxAuiMDIChildFrame, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_SetActiveChild(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_SetActiveChild[1] = {{ wxLua_wxAuiMDIParentFrame_SetActiveChild, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_SetActiveChild }};
//     void SetActiveChild(wxAuiMDIChildFrame* pChildFrame);
static int LUACALL wxLua_wxAuiMDIParentFrame_SetActiveChild(lua_State *L)
{
    // wxAuiMDIChildFrame pChildFrame
    wxAuiMDIChildFrame * pChildFrame = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiMDIChildFrame);
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call SetActiveChild
    self->SetActiveChild(pChildFrame);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_SetArtProvider[] = { &wxluatype_wxAuiMDIParentFrame, &wxluatype_wxAuiTabArt, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_SetArtProvider(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_SetArtProvider[1] = {{ wxLua_wxAuiMDIParentFrame_SetArtProvider, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_SetArtProvider }};
//     void SetArtProvider(%ungc wxAuiTabArt* provider);
static int LUACALL wxLua_wxAuiMDIParentFrame_SetArtProvider(lua_State *L)
{
    // wxAuiTabArt provider
    wxAuiTabArt * provider = (wxAuiTabArt *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiTabArt);
    if (wxluaO_isgcobject(L, provider)) wxluaO_undeletegcobject(L, provider);
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call SetArtProvider
    self->SetArtProvider(provider);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_SetChildMenuBar[] = { &wxluatype_wxAuiMDIParentFrame, &wxluatype_wxAuiMDIChildFrame, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_SetChildMenuBar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_SetChildMenuBar[1] = {{ wxLua_wxAuiMDIParentFrame_SetChildMenuBar, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_SetChildMenuBar }};
//     void SetChildMenuBar(wxAuiMDIChildFrame *pChild);
static int LUACALL wxLua_wxAuiMDIParentFrame_SetChildMenuBar(lua_State *L)
{
    // wxAuiMDIChildFrame pChild
    wxAuiMDIChildFrame * pChild = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiMDIChildFrame);
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call SetChildMenuBar
    self->SetChildMenuBar(pChild);

    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_SetMenuBar[] = { &wxluatype_wxAuiMDIParentFrame, &wxluatype_wxMenuBar, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_SetMenuBar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_SetMenuBar[1] = {{ wxLua_wxAuiMDIParentFrame_SetMenuBar, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_SetMenuBar }};
//     virtual void SetMenuBar(wxMenuBar *pMenuBar);
static int LUACALL wxLua_wxAuiMDIParentFrame_SetMenuBar(lua_State *L)
{
    // wxMenuBar pMenuBar
    wxMenuBar * pMenuBar = (wxMenuBar *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenuBar);
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call SetMenuBar
    self->SetMenuBar(pMenuBar);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_SetWindowMenu[] = { &wxluatype_wxAuiMDIParentFrame, &wxluatype_wxMenu, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_SetWindowMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_SetWindowMenu[1] = {{ wxLua_wxAuiMDIParentFrame_SetWindowMenu, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_SetWindowMenu }};
//     void SetWindowMenu(wxMenu* pMenu);
static int LUACALL wxLua_wxAuiMDIParentFrame_SetWindowMenu(lua_State *L)
{
    // wxMenu pMenu
    wxMenu * pMenu = (wxMenu *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenu);
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call SetWindowMenu
    self->SetWindowMenu(pMenu);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_Tile[] = { &wxluatype_wxAuiMDIParentFrame, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_Tile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_Tile[1] = {{ wxLua_wxAuiMDIParentFrame_Tile, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_Tile }};
//     virtual void Tile(wxOrientation orient = wxHORIZONTAL);
static int LUACALL wxLua_wxAuiMDIParentFrame_Tile(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxOrientation orient = wxHORIZONTAL
    wxOrientation orient = (argCount >= 2 ? (wxOrientation)wxlua_getenumtype(L, 2) : wxHORIZONTAL);
    // get this
    wxAuiMDIParentFrame * self = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call Tile
    self->Tile(orient);

    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAuiMDIParentFrame_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_constructor1[1] = {{ wxLua_wxAuiMDIParentFrame_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 7, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_constructor1 }};
//     wxAuiMDIParentFrame(wxWindow *parent, wxWindowID winid, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL, const wxString& name = "wxAuiMDIParentFrame")
static int LUACALL wxLua_wxAuiMDIParentFrame_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxAuiMDIParentFrame"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxAuiMDIParentFrame")));
    // long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 3);
    // wxWindowID winid
    wxWindowID winid = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxAuiMDIParentFrame* returns = new wxAuiMDIParentFrame(parent, winid, title, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiMDIParentFrame);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxAuiMDIParentFrame_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_constructor[1] = {{ wxLua_wxAuiMDIParentFrame_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxAuiMDIParentFrame()
static int LUACALL wxLua_wxAuiMDIParentFrame_constructor(lua_State *L)
{
    // call constructor
    wxAuiMDIParentFrame* returns = new wxAuiMDIParentFrame();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiMDIParentFrame);

    return 1;
}




#if ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIParentFrame_constructor_overload[] =
{

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxAuiMDIParentFrame_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 7, s_wxluatypeArray_wxLua_wxAuiMDIParentFrame_constructor1 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxAuiMDIParentFrame_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxAuiMDIParentFrame_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiMDIParentFrame_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiMDIParentFrame_methods[] = {
    { "ActivateNext", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_ActivateNext, 1, NULL },
    { "ActivatePrevious", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_ActivatePrevious, 1, NULL },
    { "ArrangeIcons", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_ArrangeIcons, 1, NULL },
    { "Cascade", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_Cascade, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_Create, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    { "GetActiveChild", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_GetActiveChild, 1, NULL },
    { "GetArtProvider", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_GetArtProvider, 1, NULL },
    { "GetClientWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_GetClientWindow, 1, NULL },
    { "GetNotebook", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_GetNotebook, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { "GetWindowMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_GetWindowMenu, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

    { "OnCreateClient", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_OnCreateClient, 1, NULL },
    { "ProcessEvent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_ProcessEvent, 1, NULL },
    { "SetActiveChild", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_SetActiveChild, 1, NULL },
    { "SetArtProvider", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_SetArtProvider, 1, NULL },
    { "SetChildMenuBar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_SetChildMenuBar, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { "SetMenuBar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_SetMenuBar, 1, NULL },
    { "SetWindowMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_SetWindowMenu, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

    { "Tile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIParentFrame_Tile, 1, NULL },

#if ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
    { "wxAuiMDIParentFrame", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAuiMDIParentFrame_constructor_overload, s_wxluafunc_wxLua_wxAuiMDIParentFrame_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

    { 0, 0, 0, 0 },
};

int wxAuiMDIParentFrame_methodCount = sizeof(wxAuiMDIParentFrame_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiMDIChildFrame
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiMDIChildFrame'
int wxluatype_wxAuiMDIChildFrame = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_Activate[] = { &wxluatype_wxAuiMDIChildFrame, NULL };
static int LUACALL wxLua_wxAuiMDIChildFrame_Activate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_Activate[1] = {{ wxLua_wxAuiMDIChildFrame_Activate, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_Activate }};
//     virtual void Activate();
static int LUACALL wxLua_wxAuiMDIChildFrame_Activate(lua_State *L)
{
    // get this
    wxAuiMDIChildFrame * self = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIChildFrame);
    // call Activate
    self->Activate();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_ApplyMDIChildFrameRect[] = { &wxluatype_wxAuiMDIChildFrame, NULL };
static int LUACALL wxLua_wxAuiMDIChildFrame_ApplyMDIChildFrameRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_ApplyMDIChildFrameRect[1] = {{ wxLua_wxAuiMDIChildFrame_ApplyMDIChildFrameRect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_ApplyMDIChildFrameRect }};
//     void ApplyMDIChildFrameRect();
static int LUACALL wxLua_wxAuiMDIChildFrame_ApplyMDIChildFrameRect(lua_State *L)
{
    // get this
    wxAuiMDIChildFrame * self = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIChildFrame);
    // call ApplyMDIChildFrameRect
    self->ApplyMDIChildFrameRect();

    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_Create[] = { &wxluatype_wxAuiMDIChildFrame, &wxluatype_wxAuiMDIParentFrame, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAuiMDIChildFrame_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_Create[1] = {{ wxLua_wxAuiMDIChildFrame_Create, WXLUAMETHOD_METHOD, 4, 8, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_Create }};
//     bool Create(wxAuiMDIParentFrame *parent, wxWindowID winid, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "wxAuiMDIChildFrame");
static int LUACALL wxLua_wxAuiMDIChildFrame_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxAuiMDIChildFrame"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxAuiMDIChildFrame")));
    // long style = wxDEFAULT_FRAME_STYLE
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxDEFAULT_FRAME_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 4);
    // wxWindowID winid
    wxWindowID winid = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxAuiMDIParentFrame parent
    wxAuiMDIParentFrame * parent = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiMDIParentFrame);
    // get this
    wxAuiMDIChildFrame * self = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIChildFrame);
    // call Create
    bool returns = (self->Create(parent, winid, title, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_Destroy[] = { &wxluatype_wxAuiMDIChildFrame, NULL };
static int LUACALL wxLua_wxAuiMDIChildFrame_Destroy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_Destroy[1] = {{ wxLua_wxAuiMDIChildFrame_Destroy, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_Destroy }};
//     virtual bool Destroy();
static int LUACALL wxLua_wxAuiMDIChildFrame_Destroy(lua_State *L)
{
    // get this
    wxAuiMDIChildFrame * self = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIChildFrame);
    // call Destroy
    bool returns = (self->Destroy());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_DoShow[] = { &wxluatype_wxAuiMDIChildFrame, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxAuiMDIChildFrame_DoShow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_DoShow[1] = {{ wxLua_wxAuiMDIChildFrame_DoShow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_DoShow }};
//     void DoShow(bool show);
static int LUACALL wxLua_wxAuiMDIChildFrame_DoShow(lua_State *L)
{
    // bool show
    bool show = wxlua_getbooleantype(L, 2);
    // get this
    wxAuiMDIChildFrame * self = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIChildFrame);
    // call DoShow
    self->DoShow(show);

    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_GetIcon[] = { &wxluatype_wxAuiMDIChildFrame, NULL };
static int LUACALL wxLua_wxAuiMDIChildFrame_GetIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_GetIcon[1] = {{ wxLua_wxAuiMDIChildFrame_GetIcon, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_GetIcon }};
//     virtual const wxIcon& GetIcon() const;
static int LUACALL wxLua_wxAuiMDIChildFrame_GetIcon(lua_State *L)
{
    // get this
    wxAuiMDIChildFrame * self = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIChildFrame);
    // call GetIcon
    const wxIcon* returns = &self->GetIcon();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_GetIcons[] = { &wxluatype_wxAuiMDIChildFrame, NULL };
static int LUACALL wxLua_wxAuiMDIChildFrame_GetIcons(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_GetIcons[1] = {{ wxLua_wxAuiMDIChildFrame_GetIcons, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_GetIcons }};
//     virtual const wxIconBundle& GetIcons() const;
static int LUACALL wxLua_wxAuiMDIChildFrame_GetIcons(lua_State *L)
{
    // get this
    wxAuiMDIChildFrame * self = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIChildFrame);
    // call GetIcons
    const wxIconBundle* returns = &self->GetIcons();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIconBundle);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxIcon)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_GetMDIParentFrame[] = { &wxluatype_wxAuiMDIChildFrame, NULL };
static int LUACALL wxLua_wxAuiMDIChildFrame_GetMDIParentFrame(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_GetMDIParentFrame[1] = {{ wxLua_wxAuiMDIChildFrame_GetMDIParentFrame, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_GetMDIParentFrame }};
//     wxAuiMDIParentFrame* GetMDIParentFrame() const;
static int LUACALL wxLua_wxAuiMDIChildFrame_GetMDIParentFrame(lua_State *L)
{
    // get this
    wxAuiMDIChildFrame * self = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIChildFrame);
    // call GetMDIParentFrame
    wxAuiMDIParentFrame* returns = (wxAuiMDIParentFrame*)self->GetMDIParentFrame();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiMDIParentFrame);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_GetMenuBar[] = { &wxluatype_wxAuiMDIChildFrame, NULL };
static int LUACALL wxLua_wxAuiMDIChildFrame_GetMenuBar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_GetMenuBar[1] = {{ wxLua_wxAuiMDIChildFrame_GetMenuBar, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_GetMenuBar }};
//     virtual wxMenuBar *GetMenuBar() const;
static int LUACALL wxLua_wxAuiMDIChildFrame_GetMenuBar(lua_State *L)
{
    // get this
    wxAuiMDIChildFrame * self = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIChildFrame);
    // call GetMenuBar
    wxMenuBar* returns = (wxMenuBar*)self->GetMenuBar();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenuBar);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_GetTitle[] = { &wxluatype_wxAuiMDIChildFrame, NULL };
static int LUACALL wxLua_wxAuiMDIChildFrame_GetTitle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_GetTitle[1] = {{ wxLua_wxAuiMDIChildFrame_GetTitle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_GetTitle }};
//     virtual wxString GetTitle() const;
static int LUACALL wxLua_wxAuiMDIChildFrame_GetTitle(lua_State *L)
{
    // get this
    wxAuiMDIChildFrame * self = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIChildFrame);
    // call GetTitle
    wxString returns = (self->GetTitle());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_SetIcon[] = { &wxluatype_wxAuiMDIChildFrame, &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxAuiMDIChildFrame_SetIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_SetIcon[1] = {{ wxLua_wxAuiMDIChildFrame_SetIcon, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_SetIcon }};
//     virtual void SetIcon(const wxIcon& icon);
static int LUACALL wxLua_wxAuiMDIChildFrame_SetIcon(lua_State *L)
{
    // const wxIcon icon
    const wxIcon * icon = (const wxIcon *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIcon);
    // get this
    wxAuiMDIChildFrame * self = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIChildFrame);
    // call SetIcon
    self->SetIcon(*icon);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_SetIcons[] = { &wxluatype_wxAuiMDIChildFrame, &wxluatype_wxIconBundle, NULL };
static int LUACALL wxLua_wxAuiMDIChildFrame_SetIcons(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_SetIcons[1] = {{ wxLua_wxAuiMDIChildFrame_SetIcons, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_SetIcons }};
//     virtual void SetIcons(const wxIconBundle& icons);
static int LUACALL wxLua_wxAuiMDIChildFrame_SetIcons(lua_State *L)
{
    // const wxIconBundle icons
    const wxIconBundle * icons = (const wxIconBundle *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIconBundle);
    // get this
    wxAuiMDIChildFrame * self = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIChildFrame);
    // call SetIcons
    self->SetIcons(*icons);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxIcon)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_SetMDIParentFrame[] = { &wxluatype_wxAuiMDIChildFrame, &wxluatype_wxAuiMDIParentFrame, NULL };
static int LUACALL wxLua_wxAuiMDIChildFrame_SetMDIParentFrame(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_SetMDIParentFrame[1] = {{ wxLua_wxAuiMDIChildFrame_SetMDIParentFrame, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_SetMDIParentFrame }};
//     void SetMDIParentFrame(wxAuiMDIParentFrame* parent);
static int LUACALL wxLua_wxAuiMDIChildFrame_SetMDIParentFrame(lua_State *L)
{
    // wxAuiMDIParentFrame parent
    wxAuiMDIParentFrame * parent = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiMDIParentFrame);
    // get this
    wxAuiMDIChildFrame * self = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIChildFrame);
    // call SetMDIParentFrame
    self->SetMDIParentFrame(parent);

    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_SetMenuBar[] = { &wxluatype_wxAuiMDIChildFrame, &wxluatype_wxMenuBar, NULL };
static int LUACALL wxLua_wxAuiMDIChildFrame_SetMenuBar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_SetMenuBar[1] = {{ wxLua_wxAuiMDIChildFrame_SetMenuBar, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_SetMenuBar }};
//     virtual void SetMenuBar(wxMenuBar *menu_bar);
static int LUACALL wxLua_wxAuiMDIChildFrame_SetMenuBar(lua_State *L)
{
    // wxMenuBar menu_bar
    wxMenuBar * menu_bar = (wxMenuBar *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenuBar);
    // get this
    wxAuiMDIChildFrame * self = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIChildFrame);
    // call SetMenuBar
    self->SetMenuBar(menu_bar);

    return 0;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_SetTitle[] = { &wxluatype_wxAuiMDIChildFrame, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAuiMDIChildFrame_SetTitle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_SetTitle[1] = {{ wxLua_wxAuiMDIChildFrame_SetTitle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_SetTitle }};
//     virtual void SetTitle(const wxString& title);
static int LUACALL wxLua_wxAuiMDIChildFrame_SetTitle(lua_State *L)
{
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 2);
    // get this
    wxAuiMDIChildFrame * self = (wxAuiMDIChildFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIChildFrame);
    // call SetTitle
    self->SetTitle(title);

    return 0;
}


#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_constructor1[] = { &wxluatype_wxAuiMDIParentFrame, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAuiMDIChildFrame_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_constructor1[1] = {{ wxLua_wxAuiMDIChildFrame_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 7, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_constructor1 }};
//     wxAuiMDIChildFrame(wxAuiMDIParentFrame *parent, wxWindowID winid, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE, const wxString& name = "wxAuiMDIChildFrame");
static int LUACALL wxLua_wxAuiMDIChildFrame_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxAuiMDIChildFrame"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxAuiMDIChildFrame")));
    // long style = wxDEFAULT_FRAME_STYLE
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxDEFAULT_FRAME_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 3);
    // wxWindowID winid
    wxWindowID winid = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxAuiMDIParentFrame parent
    wxAuiMDIParentFrame * parent = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call constructor
    wxAuiMDIChildFrame* returns = new wxAuiMDIChildFrame(parent, winid, title, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiMDIChildFrame);

    return 1;
}

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxAuiMDIChildFrame_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_constructor[1] = {{ wxLua_wxAuiMDIChildFrame_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxAuiMDIChildFrame()
static int LUACALL wxLua_wxAuiMDIChildFrame_constructor(lua_State *L)
{
    // call constructor
    wxAuiMDIChildFrame* returns = new wxAuiMDIChildFrame();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiMDIChildFrame);

    return 1;
}




#if ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIChildFrame_constructor_overload[] =
{

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxAuiMDIChildFrame_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 7, s_wxluatypeArray_wxLua_wxAuiMDIChildFrame_constructor1 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxAuiMDIChildFrame_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxAuiMDIChildFrame_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiMDIChildFrame_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiMDIChildFrame_methods[] = {
    { "Activate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIChildFrame_Activate, 1, NULL },
    { "ApplyMDIChildFrameRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIChildFrame_ApplyMDIChildFrameRect, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIChildFrame_Create, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect)

    { "Destroy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIChildFrame_Destroy, 1, NULL },
    { "DoShow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIChildFrame_DoShow, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxIcon)
    { "GetIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIChildFrame_GetIcon, 1, NULL },
    { "GetIcons", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIChildFrame_GetIcons, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxIcon)

    { "GetMDIParentFrame", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIChildFrame_GetMDIParentFrame, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { "GetMenuBar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIChildFrame_GetMenuBar, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

    { "GetTitle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIChildFrame_GetTitle, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxIcon)
    { "SetIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIChildFrame_SetIcon, 1, NULL },
    { "SetIcons", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIChildFrame_SetIcons, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxIcon)

    { "SetMDIParentFrame", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIChildFrame_SetMDIParentFrame, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxMenu && wxUSE_MENUS)
    { "SetMenuBar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIChildFrame_SetMenuBar, 1, NULL },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxMenu && wxUSE_MENUS)

    { "SetTitle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIChildFrame_SetTitle, 1, NULL },

#if ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
    { "wxAuiMDIChildFrame", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAuiMDIChildFrame_constructor_overload, s_wxluafunc_wxLua_wxAuiMDIChildFrame_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxLUA_USE_wxPointSizeRect))||(wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

    { 0, 0, 0, 0 },
};

int wxAuiMDIChildFrame_methodCount = sizeof(wxAuiMDIChildFrame_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
// ---------------------------------------------------------------------------
// Bind class wxAuiMDIClientWindow
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAuiMDIClientWindow'
int wxluatype_wxAuiMDIClientWindow = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIClientWindow_CreateClient[] = { &wxluatype_wxAuiMDIClientWindow, &wxluatype_wxAuiMDIParentFrame, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiMDIClientWindow_CreateClient(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIClientWindow_CreateClient[1] = {{ wxLua_wxAuiMDIClientWindow_CreateClient, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxAuiMDIClientWindow_CreateClient }};
//     virtual bool CreateClient(wxAuiMDIParentFrame *parent, long style = wxVSCROLL | wxHSCROLL);
static int LUACALL wxLua_wxAuiMDIClientWindow_CreateClient(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = wxVSCROLL | wxHSCROLL
    long style = (argCount >= 3 ? (long)wxlua_getnumbertype(L, 3) : wxVSCROLL | wxHSCROLL);
    // wxAuiMDIParentFrame parent
    wxAuiMDIParentFrame * parent = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAuiMDIParentFrame);
    // get this
    wxAuiMDIClientWindow * self = (wxAuiMDIClientWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIClientWindow);
    // call CreateClient
    bool returns = (self->CreateClient(parent, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIClientWindow_SetSelection[] = { &wxluatype_wxAuiMDIClientWindow, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAuiMDIClientWindow_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIClientWindow_SetSelection[1] = {{ wxLua_wxAuiMDIClientWindow_SetSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAuiMDIClientWindow_SetSelection }};
//     virtual int SetSelection(size_t page);
static int LUACALL wxLua_wxAuiMDIClientWindow_SetSelection(lua_State *L)
{
    // size_t page
    size_t page = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxAuiMDIClientWindow * self = (wxAuiMDIClientWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIClientWindow);
    // call SetSelection
    int returns = (self->SetSelection(page));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAuiMDIClientWindow_constructor1[] = { &wxluatype_wxAuiMDIParentFrame, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxAuiMDIClientWindow_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIClientWindow_constructor1[1] = {{ wxLua_wxAuiMDIClientWindow_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxAuiMDIClientWindow_constructor1 }};
//     wxAuiMDIClientWindow(wxAuiMDIParentFrame *parent, long style = 0);
static int LUACALL wxLua_wxAuiMDIClientWindow_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = 0
    long style = (argCount >= 2 ? (long)wxlua_getnumbertype(L, 2) : 0);
    // wxAuiMDIParentFrame parent
    wxAuiMDIParentFrame * parent = (wxAuiMDIParentFrame *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAuiMDIParentFrame);
    // call constructor
    wxAuiMDIClientWindow* returns = new wxAuiMDIClientWindow(parent, style);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiMDIClientWindow);

    return 1;
}

static int LUACALL wxLua_wxAuiMDIClientWindow_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIClientWindow_constructor[1] = {{ wxLua_wxAuiMDIClientWindow_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxAuiMDIClientWindow();
static int LUACALL wxLua_wxAuiMDIClientWindow_constructor(lua_State *L)
{
    // call constructor
    wxAuiMDIClientWindow* returns = new wxAuiMDIClientWindow();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAuiMDIClientWindow);

    return 1;
}




#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAuiMDIClientWindow_constructor_overload[] =
{
    { wxLua_wxAuiMDIClientWindow_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxAuiMDIClientWindow_constructor1 },
    { wxLua_wxAuiMDIClientWindow_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxAuiMDIClientWindow_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxAuiMDIClientWindow_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAuiMDIClientWindow_methods[] = {
    { "CreateClient", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIClientWindow_CreateClient, 1, NULL },
    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAuiMDIClientWindow_SetSelection, 1, NULL },

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
    { "wxAuiMDIClientWindow", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAuiMDIClientWindow_constructor_overload, s_wxluafunc_wxLua_wxAuiMDIClientWindow_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

    { 0, 0, 0, 0 },
};

int wxAuiMDIClientWindow_methodCount = sizeof(wxAuiMDIClientWindow_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI



// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxaui_bind.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------


// ---------------------------------------------------------------------------
// wxLuaGetEventList_wxaui() is called to register events
// ---------------------------------------------------------------------------

wxLuaBindEvent* wxLuaGetEventList_wxaui(size_t &count)
{
    static wxLuaBindEvent eventList[] =
    {
#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
        { "wxEVT_AUI_FIND_MANAGER", &wxEVT_AUI_FIND_MANAGER, &wxluatype_wxAuiManagerEvent },
        { "wxEVT_AUI_PANE_BUTTON", &wxEVT_AUI_PANE_BUTTON, &wxluatype_wxAuiManagerEvent },
        { "wxEVT_AUI_PANE_CLOSE", &wxEVT_AUI_PANE_CLOSE, &wxluatype_wxAuiManagerEvent },
        { "wxEVT_AUI_PANE_MAXIMIZE", &wxEVT_AUI_PANE_MAXIMIZE, &wxluatype_wxAuiManagerEvent },
        { "wxEVT_AUI_PANE_RESTORE", &wxEVT_AUI_PANE_RESTORE, &wxluatype_wxAuiManagerEvent },
        { "wxEVT_AUI_RENDER", &wxEVT_AUI_RENDER, &wxluatype_wxAuiManagerEvent },
        { "wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND", &wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND, &wxluatype_wxAuiNotebookEvent },
        { "wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG", &wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG, &wxluatype_wxAuiNotebookEvent },
#endif // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))
        { "wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK", &wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK, &wxluatype_wxAuiNotebookEvent },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))

#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
        { "wxEVT_COMMAND_AUINOTEBOOK_BUTTON", &wxEVT_COMMAND_AUINOTEBOOK_BUTTON, &wxluatype_wxAuiNotebookEvent },
#endif // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))
        { "wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE", &wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE, &wxluatype_wxAuiNotebookEvent },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))

#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
        { "wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION", &wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION, &wxluatype_wxAuiNotebookEvent },
        { "wxEVT_COMMAND_AUINOTEBOOK_END_DRAG", &wxEVT_COMMAND_AUINOTEBOOK_END_DRAG, &wxluatype_wxAuiNotebookEvent },
        { "wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED", &wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED, &wxluatype_wxAuiNotebookEvent },
        { "wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING", &wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, &wxluatype_wxAuiNotebookEvent },
        { "wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE", &wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE, &wxluatype_wxAuiNotebookEvent },
#endif // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI

#if (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))
        { "wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED", &wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED, &wxluatype_wxAuiNotebookEvent },
        { "wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN", &wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN, &wxluatype_wxAuiNotebookEvent },
        { "wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP", &wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP, &wxluatype_wxAuiNotebookEvent },
        { "wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN", &wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN, &wxluatype_wxAuiNotebookEvent },
        { "wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP", &wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP, &wxluatype_wxAuiNotebookEvent },
#endif // (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI) && (wxCHECK_VERSION(2,8,5))


        { 0, 0, 0 },
    };
    count = sizeof(eventList)/sizeof(wxLuaBindEvent) - 1;
    return eventList;
}

// ---------------------------------------------------------------------------
// wxLuaGetDefineList_wxaui() is called to register %define and %enum
// ---------------------------------------------------------------------------

wxLuaBindNumber* wxLuaGetDefineList_wxaui(size_t &count)
{
    static wxLuaBindNumber numberList[] =
    {
#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
        { "wxAUI_BUTTON_CLOSE", wxAUI_BUTTON_CLOSE },
        { "wxAUI_BUTTON_CUSTOM1", wxAUI_BUTTON_CUSTOM1 },
        { "wxAUI_BUTTON_CUSTOM2", wxAUI_BUTTON_CUSTOM2 },
        { "wxAUI_BUTTON_CUSTOM3", wxAUI_BUTTON_CUSTOM3 },
        { "wxAUI_BUTTON_DOWN", wxAUI_BUTTON_DOWN },
        { "wxAUI_BUTTON_LEFT", wxAUI_BUTTON_LEFT },
        { "wxAUI_BUTTON_MAXIMIZE_RESTORE", wxAUI_BUTTON_MAXIMIZE_RESTORE },
        { "wxAUI_BUTTON_MINIMIZE", wxAUI_BUTTON_MINIMIZE },
        { "wxAUI_BUTTON_OPTIONS", wxAUI_BUTTON_OPTIONS },
        { "wxAUI_BUTTON_PIN", wxAUI_BUTTON_PIN },
        { "wxAUI_BUTTON_RIGHT", wxAUI_BUTTON_RIGHT },
        { "wxAUI_BUTTON_STATE_CHECKED", wxAUI_BUTTON_STATE_CHECKED },
        { "wxAUI_BUTTON_STATE_DISABLED", wxAUI_BUTTON_STATE_DISABLED },
        { "wxAUI_BUTTON_STATE_HIDDEN", wxAUI_BUTTON_STATE_HIDDEN },
        { "wxAUI_BUTTON_STATE_HOVER", wxAUI_BUTTON_STATE_HOVER },
        { "wxAUI_BUTTON_STATE_NORMAL", wxAUI_BUTTON_STATE_NORMAL },
        { "wxAUI_BUTTON_STATE_PRESSED", wxAUI_BUTTON_STATE_PRESSED },
        { "wxAUI_BUTTON_UP", wxAUI_BUTTON_UP },
        { "wxAUI_BUTTON_WINDOWLIST", wxAUI_BUTTON_WINDOWLIST },
        { "wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR", wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR },
        { "wxAUI_DOCKART_ACTIVE_CAPTION_GRADIENT_COLOUR", wxAUI_DOCKART_ACTIVE_CAPTION_GRADIENT_COLOUR },
        { "wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR", wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR },
        { "wxAUI_DOCKART_BACKGROUND_COLOUR", wxAUI_DOCKART_BACKGROUND_COLOUR },
        { "wxAUI_DOCKART_BORDER_COLOUR", wxAUI_DOCKART_BORDER_COLOUR },
        { "wxAUI_DOCKART_CAPTION_FONT", wxAUI_DOCKART_CAPTION_FONT },
        { "wxAUI_DOCKART_CAPTION_SIZE", wxAUI_DOCKART_CAPTION_SIZE },
        { "wxAUI_DOCKART_GRADIENT_TYPE", wxAUI_DOCKART_GRADIENT_TYPE },
        { "wxAUI_DOCKART_GRIPPER_COLOUR", wxAUI_DOCKART_GRIPPER_COLOUR },
        { "wxAUI_DOCKART_GRIPPER_SIZE", wxAUI_DOCKART_GRIPPER_SIZE },
        { "wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR", wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR },
        { "wxAUI_DOCKART_INACTIVE_CAPTION_GRADIENT_COLOUR", wxAUI_DOCKART_INACTIVE_CAPTION_GRADIENT_COLOUR },
        { "wxAUI_DOCKART_INACTIVE_CAPTION_TEXT_COLOUR", wxAUI_DOCKART_INACTIVE_CAPTION_TEXT_COLOUR },
        { "wxAUI_DOCKART_PANE_BORDER_SIZE", wxAUI_DOCKART_PANE_BORDER_SIZE },
        { "wxAUI_DOCKART_PANE_BUTTON_SIZE", wxAUI_DOCKART_PANE_BUTTON_SIZE },
        { "wxAUI_DOCKART_SASH_COLOUR", wxAUI_DOCKART_SASH_COLOUR },
        { "wxAUI_DOCKART_SASH_SIZE", wxAUI_DOCKART_SASH_SIZE },
        { "wxAUI_DOCK_BOTTOM", wxAUI_DOCK_BOTTOM },
        { "wxAUI_DOCK_CENTER", wxAUI_DOCK_CENTER },
        { "wxAUI_DOCK_CENTRE", wxAUI_DOCK_CENTRE },
        { "wxAUI_DOCK_LEFT", wxAUI_DOCK_LEFT },
        { "wxAUI_DOCK_NONE", wxAUI_DOCK_NONE },
        { "wxAUI_DOCK_RIGHT", wxAUI_DOCK_RIGHT },
        { "wxAUI_DOCK_TOP", wxAUI_DOCK_TOP },
        { "wxAUI_GRADIENT_HORIZONTAL", wxAUI_GRADIENT_HORIZONTAL },
        { "wxAUI_GRADIENT_NONE", wxAUI_GRADIENT_NONE },
        { "wxAUI_GRADIENT_VERTICAL", wxAUI_GRADIENT_VERTICAL },
        { "wxAUI_INSERT_DOCK", wxAUI_INSERT_DOCK },
        { "wxAUI_INSERT_PANE", wxAUI_INSERT_PANE },
        { "wxAUI_INSERT_ROW", wxAUI_INSERT_ROW },
        { "wxAUI_MGR_ALLOW_ACTIVE_PANE", wxAUI_MGR_ALLOW_ACTIVE_PANE },
        { "wxAUI_MGR_ALLOW_FLOATING", wxAUI_MGR_ALLOW_FLOATING },
        { "wxAUI_MGR_DEFAULT", wxAUI_MGR_DEFAULT },
        { "wxAUI_MGR_HINT_FADE", wxAUI_MGR_HINT_FADE },
        { "wxAUI_MGR_NO_VENETIAN_BLINDS_FADE", wxAUI_MGR_NO_VENETIAN_BLINDS_FADE },
        { "wxAUI_MGR_RECTANGLE_HINT", wxAUI_MGR_RECTANGLE_HINT },
        { "wxAUI_MGR_TRANSPARENT_DRAG", wxAUI_MGR_TRANSPARENT_DRAG },
        { "wxAUI_MGR_TRANSPARENT_HINT", wxAUI_MGR_TRANSPARENT_HINT },
        { "wxAUI_MGR_VENETIAN_BLINDS_HINT", wxAUI_MGR_VENETIAN_BLINDS_HINT },
        { "wxAUI_NB_BOTTOM", wxAUI_NB_BOTTOM },
        { "wxAUI_NB_CLOSE_BUTTON", wxAUI_NB_CLOSE_BUTTON },
        { "wxAUI_NB_CLOSE_ON_ACTIVE_TAB", wxAUI_NB_CLOSE_ON_ACTIVE_TAB },
        { "wxAUI_NB_CLOSE_ON_ALL_TABS", wxAUI_NB_CLOSE_ON_ALL_TABS },
        { "wxAUI_NB_DEFAULT_STYLE", wxAUI_NB_DEFAULT_STYLE },
        { "wxAUI_NB_LEFT", wxAUI_NB_LEFT },
#endif // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI

#if (wxCHECK_VERSION(2,8,6)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)
        { "wxAUI_NB_MIDDLE_CLICK_CLOSE", wxAUI_NB_MIDDLE_CLICK_CLOSE },
#endif // (wxCHECK_VERSION(2,8,6)) && (wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI)

#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
        { "wxAUI_NB_RIGHT", wxAUI_NB_RIGHT },
        { "wxAUI_NB_SCROLL_BUTTONS", wxAUI_NB_SCROLL_BUTTONS },
        { "wxAUI_NB_TAB_EXTERNAL_MOVE", wxAUI_NB_TAB_EXTERNAL_MOVE },
        { "wxAUI_NB_TAB_FIXED_WIDTH", wxAUI_NB_TAB_FIXED_WIDTH },
        { "wxAUI_NB_TAB_MOVE", wxAUI_NB_TAB_MOVE },
        { "wxAUI_NB_TAB_SPLIT", wxAUI_NB_TAB_SPLIT },
        { "wxAUI_NB_TOP", wxAUI_NB_TOP },
        { "wxAUI_NB_WINDOWLIST_BUTTON", wxAUI_NB_WINDOWLIST_BUTTON },
#endif // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


        { 0, 0 },
    };
    count = sizeof(numberList)/sizeof(wxLuaBindNumber) - 1;
    return numberList;
}

// ---------------------------------------------------------------------------

// wxLuaGetStringList_wxaui() is called to register %define %string
// ---------------------------------------------------------------------------

wxLuaBindString* wxLuaGetStringList_wxaui(size_t &count)
{
    static wxLuaBindString stringList[] =
    {

        { 0, 0 },
    };
    count = sizeof(stringList)/sizeof(wxLuaBindString) - 1;
    return stringList;
}

// ---------------------------------------------------------------------------
// wxLuaGetObjectList_wxaui() is called to register object and pointer bindings
// ---------------------------------------------------------------------------

wxLuaBindObject* wxLuaGetObjectList_wxaui(size_t &count)
{
    static wxLuaBindObject objectList[] =
    {
#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
        { "wxAuiNullDockInfo", &wxluatype_wxAuiDockInfo, &wxAuiNullDockInfo, NULL },
        { "wxAuiNullPaneInfo", &wxluatype_wxAuiPaneInfo, &wxAuiNullPaneInfo, NULL },
#endif // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


        { 0, 0, 0, 0 },
    };
    count = sizeof(objectList)/sizeof(wxLuaBindObject) - 1;
    return objectList;
}

// ---------------------------------------------------------------------------
// wxLuaGetFunctionList_wxaui() is called to register global functions
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
// wxLuaGetFunctionList_wxaui() is called to register global functions
// ---------------------------------------------------------------------------

wxLuaBindMethod* wxLuaGetFunctionList_wxaui(size_t &count)
{
    static wxLuaBindMethod functionList[] =
    {

        { 0, 0, 0, 0 }, 
    };
    count = sizeof(functionList)/sizeof(wxLuaBindMethod) - 1;
    return functionList;
}



// ---------------------------------------------------------------------------
// wxLuaGetClassList_wxaui() is called to register classes
// ---------------------------------------------------------------------------

static const char* wxluaclassname_wxAuiDefaultDockArt = "wxAuiDefaultDockArt";
static const char* wxluaclassname_wxAuiDefaultTabArt = "wxAuiDefaultTabArt";
static const char* wxluaclassname_wxAuiDockArt = "wxAuiDockArt";
static const char* wxluaclassname_wxAuiDockInfo = "wxAuiDockInfo";
static const char* wxluaclassname_wxAuiDockUIPart = "wxAuiDockUIPart";
static const char* wxluaclassname_wxAuiFloatingFrame = "wxAuiFloatingFrame";
static const char* wxluaclassname_wxAuiMDIChildFrame = "wxAuiMDIChildFrame";
static const char* wxluaclassname_wxAuiMDIClientWindow = "wxAuiMDIClientWindow";
static const char* wxluaclassname_wxAuiMDIParentFrame = "wxAuiMDIParentFrame";
static const char* wxluaclassname_wxAuiManager = "wxAuiManager";
static const char* wxluaclassname_wxAuiManagerEvent = "wxAuiManagerEvent";
static const char* wxluaclassname_wxAuiNotebook = "wxAuiNotebook";
static const char* wxluaclassname_wxAuiNotebookEvent = "wxAuiNotebookEvent";
static const char* wxluaclassname_wxAuiNotebookPage = "wxAuiNotebookPage";
static const char* wxluaclassname_wxAuiNotebookPageArray = "wxAuiNotebookPageArray";
static const char* wxluaclassname_wxAuiPaneButton = "wxAuiPaneButton";
static const char* wxluaclassname_wxAuiPaneInfo = "wxAuiPaneInfo";
static const char* wxluaclassname_wxAuiPaneInfoArray = "wxAuiPaneInfoArray";
static const char* wxluaclassname_wxAuiSimpleTabArt = "wxAuiSimpleTabArt";
static const char* wxluaclassname_wxAuiTabArt = "wxAuiTabArt";
static const char* wxluaclassname_wxAuiTabContainerButton = "wxAuiTabContainerButton";
static const char* wxluaclassname_wxAuiTabCtrl = "wxAuiTabCtrl";
static const char* wxluaclassname_wxControl = "wxControl";
static const char* wxluaclassname_wxEvent = "wxEvent";
static const char* wxluaclassname_wxEvtHandler = "wxEvtHandler";
static const char* wxluaclassname_wxFrame = "wxFrame";
static const char* wxluaclassname_wxNotifyEvent = "wxNotifyEvent";
static const char* wxluaclassname_wxPanel = "wxPanel";

static const char* wxluabaseclassnames_wxAuiDefaultDockArt[] = { wxluaclassname_wxAuiDockArt, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxAuiDefaultDockArt[] = { NULL };
static const char* wxluabaseclassnames_wxAuiDefaultTabArt[] = { wxluaclassname_wxAuiTabArt, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxAuiDefaultTabArt[] = { NULL };
static const char* wxluabaseclassnames_wxAuiFloatingFrame[] = { wxluaclassname_wxFrame, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxAuiFloatingFrame[] = { NULL };
static const char* wxluabaseclassnames_wxAuiMDIChildFrame[] = { wxluaclassname_wxPanel, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxAuiMDIChildFrame[] = { NULL };
static const char* wxluabaseclassnames_wxAuiMDIClientWindow[] = { wxluaclassname_wxAuiNotebook, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxAuiMDIClientWindow[] = { NULL };
static const char* wxluabaseclassnames_wxAuiMDIParentFrame[] = { wxluaclassname_wxFrame, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxAuiMDIParentFrame[] = { NULL };
static const char* wxluabaseclassnames_wxAuiManager[] = { wxluaclassname_wxEvtHandler, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxAuiManager[] = { NULL };
static const char* wxluabaseclassnames_wxAuiManagerEvent[] = { wxluaclassname_wxEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxAuiManagerEvent[] = { NULL };
static const char* wxluabaseclassnames_wxAuiNotebook[] = { wxluaclassname_wxControl, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxAuiNotebook[] = { NULL };
static const char* wxluabaseclassnames_wxAuiNotebookEvent[] = { wxluaclassname_wxNotifyEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxAuiNotebookEvent[] = { NULL };
static const char* wxluabaseclassnames_wxAuiSimpleTabArt[] = { wxluaclassname_wxAuiTabArt, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxAuiSimpleTabArt[] = { NULL };
static const char* wxluabaseclassnames_wxAuiTabCtrl[] = { wxluaclassname_wxControl, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxAuiTabCtrl[] = { NULL };
// ---------------------------------------------------------------------------
// Lua Tag Method Values and Tables for each Class
// ---------------------------------------------------------------------------

#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
    extern wxLuaBindMethod wxAuiDefaultDockArt_methods[];
    extern int wxAuiDefaultDockArt_methodCount;
    extern wxLuaBindMethod wxAuiDefaultTabArt_methods[];
    extern int wxAuiDefaultTabArt_methodCount;
    extern wxLuaBindMethod wxAuiDockArt_methods[];
    extern int wxAuiDockArt_methodCount;
    extern wxLuaBindMethod wxAuiDockInfo_methods[];
    extern int wxAuiDockInfo_methodCount;
    extern wxLuaBindMethod wxAuiDockUIPart_methods[];
    extern int wxAuiDockUIPart_methodCount;
    extern wxLuaBindNumber wxAuiDockUIPart_enums[];
    extern int wxAuiDockUIPart_enumCount;
    extern wxLuaBindMethod wxAuiFloatingFrame_methods[];
    extern int wxAuiFloatingFrame_methodCount;
    extern wxLuaBindMethod wxAuiMDIChildFrame_methods[];
    extern int wxAuiMDIChildFrame_methodCount;
    extern wxLuaBindMethod wxAuiMDIClientWindow_methods[];
    extern int wxAuiMDIClientWindow_methodCount;
    extern wxLuaBindMethod wxAuiMDIParentFrame_methods[];
    extern int wxAuiMDIParentFrame_methodCount;
    extern wxLuaBindMethod wxAuiManager_methods[];
    extern int wxAuiManager_methodCount;
    extern wxLuaBindMethod wxAuiManagerEvent_methods[];
    extern int wxAuiManagerEvent_methodCount;
    extern wxLuaBindMethod wxAuiNotebook_methods[];
    extern int wxAuiNotebook_methodCount;
    extern wxLuaBindMethod wxAuiNotebookEvent_methods[];
    extern int wxAuiNotebookEvent_methodCount;
    extern wxLuaBindMethod wxAuiNotebookPage_methods[];
    extern int wxAuiNotebookPage_methodCount;
    extern wxLuaBindMethod wxAuiNotebookPageArray_methods[];
    extern int wxAuiNotebookPageArray_methodCount;
    extern wxLuaBindMethod wxAuiPaneButton_methods[];
    extern int wxAuiPaneButton_methodCount;
    extern wxLuaBindMethod wxAuiPaneInfo_methods[];
    extern int wxAuiPaneInfo_methodCount;
    extern wxLuaBindNumber wxAuiPaneInfo_enums[];
    extern int wxAuiPaneInfo_enumCount;
    extern wxLuaBindMethod wxAuiPaneInfoArray_methods[];
    extern int wxAuiPaneInfoArray_methodCount;
    extern wxLuaBindMethod wxAuiSimpleTabArt_methods[];
    extern int wxAuiSimpleTabArt_methodCount;
    extern wxLuaBindMethod wxAuiTabArt_methods[];
    extern int wxAuiTabArt_methodCount;
    extern wxLuaBindMethod wxAuiTabContainerButton_methods[];
    extern int wxAuiTabContainerButton_methodCount;
    extern wxLuaBindMethod wxAuiTabCtrl_methods[];
    extern int wxAuiTabCtrl_methodCount;
#endif // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI




wxLuaBindClass* wxLuaGetClassList_wxaui(size_t &count)
{
    static wxLuaBindClass classList[] =
    {
#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
        { wxluaclassname_wxAuiDefaultDockArt, wxAuiDefaultDockArt_methods, wxAuiDefaultDockArt_methodCount, NULL, &wxluatype_wxAuiDefaultDockArt, wxluabaseclassnames_wxAuiDefaultDockArt, wxluabaseclassbinds_wxAuiDefaultDockArt, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiDefaultTabArt, wxAuiDefaultTabArt_methods, wxAuiDefaultTabArt_methodCount, NULL, &wxluatype_wxAuiDefaultTabArt, wxluabaseclassnames_wxAuiDefaultTabArt, wxluabaseclassbinds_wxAuiDefaultTabArt, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiDockArt, wxAuiDockArt_methods, wxAuiDockArt_methodCount, NULL, &wxluatype_wxAuiDockArt, NULL, NULL, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiDockInfo, wxAuiDockInfo_methods, wxAuiDockInfo_methodCount, NULL, &wxluatype_wxAuiDockInfo, NULL, NULL, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiDockUIPart, wxAuiDockUIPart_methods, wxAuiDockUIPart_methodCount, NULL, &wxluatype_wxAuiDockUIPart, NULL, NULL, wxAuiDockUIPart_enums, wxAuiDockUIPart_enumCount, }, 
        { wxluaclassname_wxAuiFloatingFrame, wxAuiFloatingFrame_methods, wxAuiFloatingFrame_methodCount, CLASSINFO(wxAuiFloatingFrame), &wxluatype_wxAuiFloatingFrame, wxluabaseclassnames_wxAuiFloatingFrame, wxluabaseclassbinds_wxAuiFloatingFrame, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiMDIChildFrame, wxAuiMDIChildFrame_methods, wxAuiMDIChildFrame_methodCount, CLASSINFO(wxAuiMDIChildFrame), &wxluatype_wxAuiMDIChildFrame, wxluabaseclassnames_wxAuiMDIChildFrame, wxluabaseclassbinds_wxAuiMDIChildFrame, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiMDIClientWindow, wxAuiMDIClientWindow_methods, wxAuiMDIClientWindow_methodCount, CLASSINFO(wxAuiMDIClientWindow), &wxluatype_wxAuiMDIClientWindow, wxluabaseclassnames_wxAuiMDIClientWindow, wxluabaseclassbinds_wxAuiMDIClientWindow, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiMDIParentFrame, wxAuiMDIParentFrame_methods, wxAuiMDIParentFrame_methodCount, CLASSINFO(wxAuiMDIParentFrame), &wxluatype_wxAuiMDIParentFrame, wxluabaseclassnames_wxAuiMDIParentFrame, wxluabaseclassbinds_wxAuiMDIParentFrame, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiManager, wxAuiManager_methods, wxAuiManager_methodCount, CLASSINFO(wxAuiManager), &wxluatype_wxAuiManager, wxluabaseclassnames_wxAuiManager, wxluabaseclassbinds_wxAuiManager, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiManagerEvent, wxAuiManagerEvent_methods, wxAuiManagerEvent_methodCount, CLASSINFO(wxAuiManagerEvent), &wxluatype_wxAuiManagerEvent, wxluabaseclassnames_wxAuiManagerEvent, wxluabaseclassbinds_wxAuiManagerEvent, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiNotebook, wxAuiNotebook_methods, wxAuiNotebook_methodCount, CLASSINFO(wxAuiNotebook), &wxluatype_wxAuiNotebook, wxluabaseclassnames_wxAuiNotebook, wxluabaseclassbinds_wxAuiNotebook, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiNotebookEvent, wxAuiNotebookEvent_methods, wxAuiNotebookEvent_methodCount, CLASSINFO(wxAuiNotebookEvent), &wxluatype_wxAuiNotebookEvent, wxluabaseclassnames_wxAuiNotebookEvent, wxluabaseclassbinds_wxAuiNotebookEvent, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiNotebookPage, wxAuiNotebookPage_methods, wxAuiNotebookPage_methodCount, NULL, &wxluatype_wxAuiNotebookPage, NULL, NULL, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiNotebookPageArray, wxAuiNotebookPageArray_methods, wxAuiNotebookPageArray_methodCount, NULL, &wxluatype_wxAuiNotebookPageArray, NULL, NULL, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiPaneButton, wxAuiPaneButton_methods, wxAuiPaneButton_methodCount, NULL, &wxluatype_wxAuiPaneButton, NULL, NULL, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiPaneInfo, wxAuiPaneInfo_methods, wxAuiPaneInfo_methodCount, NULL, &wxluatype_wxAuiPaneInfo, NULL, NULL, wxAuiPaneInfo_enums, wxAuiPaneInfo_enumCount, }, 
        { wxluaclassname_wxAuiPaneInfoArray, wxAuiPaneInfoArray_methods, wxAuiPaneInfoArray_methodCount, NULL, &wxluatype_wxAuiPaneInfoArray, NULL, NULL, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiSimpleTabArt, wxAuiSimpleTabArt_methods, wxAuiSimpleTabArt_methodCount, NULL, &wxluatype_wxAuiSimpleTabArt, wxluabaseclassnames_wxAuiSimpleTabArt, wxluabaseclassbinds_wxAuiSimpleTabArt, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiTabArt, wxAuiTabArt_methods, wxAuiTabArt_methodCount, NULL, &wxluatype_wxAuiTabArt, NULL, NULL, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiTabContainerButton, wxAuiTabContainerButton_methods, wxAuiTabContainerButton_methodCount, NULL, &wxluatype_wxAuiTabContainerButton, NULL, NULL, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxAuiTabCtrl, wxAuiTabCtrl_methods, wxAuiTabCtrl_methodCount, CLASSINFO(wxAuiTabCtrl), &wxluatype_wxAuiTabCtrl, wxluabaseclassnames_wxAuiTabCtrl, wxluabaseclassbinds_wxAuiTabCtrl, g_wxluanumberArray_None, 0, }, 
#endif // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


        { 0, 0, 0, 0, 0, 0, 0 }, 
    };
    count = sizeof(classList)/sizeof(wxLuaBindClass) - 1;

    return classList;
}

// ---------------------------------------------------------------------------
// wxLuaBinding_wxaui() - the binding class
// ---------------------------------------------------------------------------

IMPLEMENT_DYNAMIC_CLASS(wxLuaBinding_wxaui, wxLuaBinding)

wxLuaBinding_wxaui::wxLuaBinding_wxaui() : wxLuaBinding()
{
    m_bindingName   = wxT("wxaui");
    m_nameSpace     = wxT("wxaui");
    m_classArray    = wxLuaGetClassList_wxaui(m_classCount);
    m_numberArray   = wxLuaGetDefineList_wxaui(m_numberCount);
    m_stringArray   = wxLuaGetStringList_wxaui(m_stringCount);
    m_eventArray    = wxLuaGetEventList_wxaui(m_eventCount);
    m_objectArray   = wxLuaGetObjectList_wxaui(m_objectCount);
    m_functionArray = wxLuaGetFunctionList_wxaui(m_functionCount);
}



// ---------------------------------------------------------------------------

bool wxLuaBinding_wxaui_init()
{
    static wxLuaBinding_wxaui m_binding;
    if (wxLuaBinding::GetBindingList()->Find(&m_binding)) return false;

    wxLuaBinding::GetBindingList()->Append(&m_binding);
    return true;
}


#if wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI
wxLUA_IMPLEMENT_ENCAPSULATION(wxAuiDefaultDockArt, wxAuiDefaultDockArt)
wxLUA_IMPLEMENT_ENCAPSULATION(wxAuiDefaultTabArt, wxAuiDefaultTabArt)
wxLUA_IMPLEMENT_ENCAPSULATION(wxAuiDockArt, wxAuiDockArt)
wxLUA_IMPLEMENT_ENCAPSULATION(wxAuiDockInfo, wxAuiDockInfo)
wxLUA_IMPLEMENT_ENCAPSULATION(wxAuiDockUIPart, wxAuiDockUIPart)
wxLUA_IMPLEMENT_ENCAPSULATION(wxAuiNotebookPage, wxAuiNotebookPage)
wxLUA_IMPLEMENT_ENCAPSULATION(wxAuiNotebookPageArray, wxAuiNotebookPageArray)
wxLUA_IMPLEMENT_ENCAPSULATION(wxAuiPaneButton, wxAuiPaneButton)
wxLUA_IMPLEMENT_ENCAPSULATION(wxAuiPaneInfo, wxAuiPaneInfo)
wxLUA_IMPLEMENT_ENCAPSULATION(wxAuiPaneInfoArray, wxAuiPaneInfoArray)
wxLUA_IMPLEMENT_ENCAPSULATION(wxAuiSimpleTabArt, wxAuiSimpleTabArt)
wxLUA_IMPLEMENT_ENCAPSULATION(wxAuiTabArt, wxAuiTabArt)
wxLUA_IMPLEMENT_ENCAPSULATION(wxAuiTabContainerButton, wxAuiTabContainerButton)
#endif // wxLUA_USE_wxAUI && wxCHECK_VERSION(2,8,0) && wxUSE_AUI


