// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxhtml_html.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "wxbind/include/wxhtml_bind.h"



#if wxLUA_USE_wxHTML && wxUSE_HTML
// ---------------------------------------------------------------------------
// Bind class wxHtmlCell
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlCell'
int wxluatype_wxHtmlCell = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxArrayInt) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML))
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_AdjustPagebreak[] = { &wxluatype_wxHtmlCell, &wxluatype_TNUMBER, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxHtmlCell_AdjustPagebreak(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_AdjustPagebreak[1] = {{ wxLua_wxHtmlCell_AdjustPagebreak, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxHtmlCell_AdjustPagebreak }};
// %override wxLua_wxHtmlCell_AdjustPagebreak
// virtual bool AdjustPagebreak(int * pagebreak)

#if !wxCHECK_VERSION(2, 7, 0)
static int LUACALL wxLua_wxHtmlCell_AdjustPagebreak(lua_State *L)
{
    // int * pagebreak
    int pagebreak  = (int)wxlua_getintegertype(L, 2);
    // get this
    wxHtmlCell *self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call AdjustPagebreak
    bool returns = self->AdjustPagebreak(&pagebreak);
    // push the result number
    lua_pushboolean(L, returns);
    //
    lua_pushnumber(L, pagebreak);
    // return the number of parameters
    return 2;
}
#else
// virtual bool AdjustPagebreak(int * pagebreak, wxArrayInt& known_pagebreaks)
static int LUACALL wxLua_wxHtmlCell_AdjustPagebreak(lua_State *L)
{
    // int * pagebreak
    int pagebreak  = (int)wxlua_getintegertype(L, 3);
    // wxArrayInt& known_pagebreaks
    wxArrayInt* known_pagebreaks  = (wxArrayInt *)wxluaT_getuserdatatype(L, 2, wxluatype_wxArrayInt);
    // get this
    wxHtmlCell *self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call AdjustPagebreak
    bool returns = self->AdjustPagebreak(&pagebreak, *known_pagebreaks);
    // push the result number
    lua_pushboolean(L, returns);
    //
    lua_pushnumber(L, pagebreak);
    // return the number of parameters
    return 2;
}
#endif


#endif // (wxLUA_USE_wxArrayInt) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML))

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_AdjustPagebreak[] = { &wxluatype_wxHtmlCell, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlCell_AdjustPagebreak(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_AdjustPagebreak[1] = {{ wxLua_wxHtmlCell_AdjustPagebreak, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlCell_AdjustPagebreak }};
// %override wxLua_wxHtmlCell_AdjustPagebreak
// virtual bool AdjustPagebreak(int * pagebreak)

#if !wxCHECK_VERSION(2, 7, 0)
static int LUACALL wxLua_wxHtmlCell_AdjustPagebreak(lua_State *L)
{
    // int * pagebreak
    int pagebreak  = (int)wxlua_getintegertype(L, 2);
    // get this
    wxHtmlCell *self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call AdjustPagebreak
    bool returns = self->AdjustPagebreak(&pagebreak);
    // push the result number
    lua_pushboolean(L, returns);
    //
    lua_pushnumber(L, pagebreak);
    // return the number of parameters
    return 2;
}
#else
// virtual bool AdjustPagebreak(int * pagebreak, wxArrayInt& known_pagebreaks)
static int LUACALL wxLua_wxHtmlCell_AdjustPagebreak(lua_State *L)
{
    // int * pagebreak
    int pagebreak  = (int)wxlua_getintegertype(L, 3);
    // wxArrayInt& known_pagebreaks
    wxArrayInt* known_pagebreaks  = (wxArrayInt *)wxluaT_getuserdatatype(L, 2, wxluatype_wxArrayInt);
    // get this
    wxHtmlCell *self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call AdjustPagebreak
    bool returns = self->AdjustPagebreak(&pagebreak, *known_pagebreaks);
    // push the result number
    lua_pushboolean(L, returns);
    //
    lua_pushnumber(L, pagebreak);
    // return the number of parameters
    return 2;
}
#endif


#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_Find[] = { &wxluatype_wxHtmlCell, &wxluatype_TNUMBER, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxHtmlCell_Find(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_Find[1] = {{ wxLua_wxHtmlCell_Find, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlCell_Find }};
// %override wxLua_wxHtmlCell_Find
// virtual const wxHtmlCell* Find(int condition, void *param = 0)
static int LUACALL wxLua_wxHtmlCell_Find(lua_State *L)
{
    const wxHtmlCell *returns = NULL;
    // int condition
    int condition = (int)wxlua_getintegertype(L, 2);
    // get this
    wxHtmlCell *self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call Find
    switch(lua_type(L, 3))
    {
        case LUA_TNIL:
            returns = self->Find(condition, NULL);
            break;

        case LUA_TSTRING:
            {
                wxString param = wxlua_getwxStringtype(L, 3);
                returns = self->Find(condition, &param);
            }
            break;

        case LUA_TNUMBER:
            {
                int param = (int)wxlua_getnumbertype(L, 3);
                returns = self->Find(condition, &param);
            }
            break;

        default:
            wxlua_argerror(L, 3, wxT("a 'nil', 'string', or a 'number'"));
            break;
    }

    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlCell);
    // return the number of parameters
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_GetDescent[] = { &wxluatype_wxHtmlCell, NULL };
static int LUACALL wxLua_wxHtmlCell_GetDescent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_GetDescent[1] = {{ wxLua_wxHtmlCell_GetDescent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlCell_GetDescent }};
//     int GetDescent() const
static int LUACALL wxLua_wxHtmlCell_GetDescent(lua_State *L)
{
    // get this
    wxHtmlCell * self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call GetDescent
    int returns = (self->GetDescent());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_GetFirstChild[] = { &wxluatype_wxHtmlCell, NULL };
static int LUACALL wxLua_wxHtmlCell_GetFirstChild(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_GetFirstChild[1] = {{ wxLua_wxHtmlCell_GetFirstChild, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlCell_GetFirstChild }};
//     wxHtmlCell* GetFirstChild()
static int LUACALL wxLua_wxHtmlCell_GetFirstChild(lua_State *L)
{
    // get this
    wxHtmlCell * self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call GetFirstChild
    wxHtmlCell* returns = (wxHtmlCell*)self->GetFirstChild();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlCell);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_GetHeight[] = { &wxluatype_wxHtmlCell, NULL };
static int LUACALL wxLua_wxHtmlCell_GetHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_GetHeight[1] = {{ wxLua_wxHtmlCell_GetHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlCell_GetHeight }};
//     int GetHeight() const
static int LUACALL wxLua_wxHtmlCell_GetHeight(lua_State *L)
{
    // get this
    wxHtmlCell * self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call GetHeight
    int returns = (self->GetHeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_GetId[] = { &wxluatype_wxHtmlCell, NULL };
static int LUACALL wxLua_wxHtmlCell_GetId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_GetId[1] = {{ wxLua_wxHtmlCell_GetId, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlCell_GetId }};
//     virtual wxString GetId() const
static int LUACALL wxLua_wxHtmlCell_GetId(lua_State *L)
{
    // get this
    wxHtmlCell * self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call GetId
    wxString returns = (self->GetId());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_GetLink[] = { &wxluatype_wxHtmlCell, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlCell_GetLink(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_GetLink[1] = {{ wxLua_wxHtmlCell_GetLink, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxHtmlCell_GetLink }};
//     virtual wxHtmlLinkInfo* GetLink(int x = 0, int y = 0) const
static int LUACALL wxLua_wxHtmlCell_GetLink(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int y = 0
    int y = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int x = 0
    int x = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // get this
    wxHtmlCell * self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call GetLink
    wxHtmlLinkInfo* returns = (wxHtmlLinkInfo*)self->GetLink(x, y);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlLinkInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_GetNext[] = { &wxluatype_wxHtmlCell, NULL };
static int LUACALL wxLua_wxHtmlCell_GetNext(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_GetNext[1] = {{ wxLua_wxHtmlCell_GetNext, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlCell_GetNext }};
//     wxHtmlCell* GetNext() const
static int LUACALL wxLua_wxHtmlCell_GetNext(lua_State *L)
{
    // get this
    wxHtmlCell * self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call GetNext
    wxHtmlCell* returns = (wxHtmlCell*)self->GetNext();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlCell);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_GetParent[] = { &wxluatype_wxHtmlCell, NULL };
static int LUACALL wxLua_wxHtmlCell_GetParent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_GetParent[1] = {{ wxLua_wxHtmlCell_GetParent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlCell_GetParent }};
//     wxHtmlContainerCell* GetParent() const
static int LUACALL wxLua_wxHtmlCell_GetParent(lua_State *L)
{
    // get this
    wxHtmlCell * self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call GetParent
    wxHtmlContainerCell* returns = (wxHtmlContainerCell*)self->GetParent();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlContainerCell);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_GetPosX[] = { &wxluatype_wxHtmlCell, NULL };
static int LUACALL wxLua_wxHtmlCell_GetPosX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_GetPosX[1] = {{ wxLua_wxHtmlCell_GetPosX, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlCell_GetPosX }};
//     int GetPosX() const
static int LUACALL wxLua_wxHtmlCell_GetPosX(lua_State *L)
{
    // get this
    wxHtmlCell * self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call GetPosX
    int returns = (self->GetPosX());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_GetPosY[] = { &wxluatype_wxHtmlCell, NULL };
static int LUACALL wxLua_wxHtmlCell_GetPosY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_GetPosY[1] = {{ wxLua_wxHtmlCell_GetPosY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlCell_GetPosY }};
//     int GetPosY() const
static int LUACALL wxLua_wxHtmlCell_GetPosY(lua_State *L)
{
    // get this
    wxHtmlCell * self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call GetPosY
    int returns = (self->GetPosY());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_GetWidth[] = { &wxluatype_wxHtmlCell, NULL };
static int LUACALL wxLua_wxHtmlCell_GetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_GetWidth[1] = {{ wxLua_wxHtmlCell_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlCell_GetWidth }};
//     int GetWidth() const
static int LUACALL wxLua_wxHtmlCell_GetWidth(lua_State *L)
{
    // get this
    wxHtmlCell * self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call GetWidth
    int returns = (self->GetWidth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_Layout[] = { &wxluatype_wxHtmlCell, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlCell_Layout(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_Layout[1] = {{ wxLua_wxHtmlCell_Layout, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlCell_Layout }};
//     virtual void Layout(int w)
static int LUACALL wxLua_wxHtmlCell_Layout(lua_State *L)
{
    // int w
    int w = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlCell * self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call Layout
    self->Layout(w);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_SetId[] = { &wxluatype_wxHtmlCell, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlCell_SetId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_SetId[1] = {{ wxLua_wxHtmlCell_SetId, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlCell_SetId }};
//     void SetId(const wxString& id)
static int LUACALL wxLua_wxHtmlCell_SetId(lua_State *L)
{
    // const wxString id
    const wxString id = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlCell * self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call SetId
    self->SetId(id);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_SetLink[] = { &wxluatype_wxHtmlCell, &wxluatype_wxHtmlLinkInfo, NULL };
static int LUACALL wxLua_wxHtmlCell_SetLink(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_SetLink[1] = {{ wxLua_wxHtmlCell_SetLink, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlCell_SetLink }};
//     void SetLink(const wxHtmlLinkInfo& link)
static int LUACALL wxLua_wxHtmlCell_SetLink(lua_State *L)
{
    // const wxHtmlLinkInfo link
    const wxHtmlLinkInfo * link = (const wxHtmlLinkInfo *)wxluaT_getuserdatatype(L, 2, wxluatype_wxHtmlLinkInfo);
    // get this
    wxHtmlCell * self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call SetLink
    self->SetLink(*link);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_SetNext[] = { &wxluatype_wxHtmlCell, &wxluatype_wxHtmlCell, NULL };
static int LUACALL wxLua_wxHtmlCell_SetNext(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_SetNext[1] = {{ wxLua_wxHtmlCell_SetNext, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlCell_SetNext }};
//     void SetNext(wxHtmlCell *cell)
static int LUACALL wxLua_wxHtmlCell_SetNext(lua_State *L)
{
    // wxHtmlCell cell
    wxHtmlCell * cell = (wxHtmlCell *)wxluaT_getuserdatatype(L, 2, wxluatype_wxHtmlCell);
    // get this
    wxHtmlCell * self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call SetNext
    self->SetNext(cell);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_SetParent[] = { &wxluatype_wxHtmlCell, &wxluatype_wxHtmlContainerCell, NULL };
static int LUACALL wxLua_wxHtmlCell_SetParent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_SetParent[1] = {{ wxLua_wxHtmlCell_SetParent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlCell_SetParent }};
//     void SetParent(wxHtmlContainerCell *p)
static int LUACALL wxLua_wxHtmlCell_SetParent(lua_State *L)
{
    // wxHtmlContainerCell p
    wxHtmlContainerCell * p = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 2, wxluatype_wxHtmlContainerCell);
    // get this
    wxHtmlCell * self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call SetParent
    self->SetParent(p);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_SetPos[] = { &wxluatype_wxHtmlCell, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlCell_SetPos(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_SetPos[1] = {{ wxLua_wxHtmlCell_SetPos, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxHtmlCell_SetPos }};
//     void SetPos(int x, int y)
static int LUACALL wxLua_wxHtmlCell_SetPos(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlCell * self = (wxHtmlCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCell);
    // call SetPos
    self->SetPos(x, y);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCell_delete[] = { &wxluatype_wxHtmlCell, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxHtmlCell_delete }};

static int LUACALL wxLua_wxHtmlCell_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCell_constructor[1] = {{ wxLua_wxHtmlCell_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxHtmlCell()
static int LUACALL wxLua_wxHtmlCell_constructor(lua_State *L)
{
    // call constructor
    wxHtmlCell* returns = new wxHtmlCell();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlCell);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlCell_methods[] = {
#if (wxLUA_USE_wxArrayInt) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML))
    { "AdjustPagebreak", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_AdjustPagebreak, 1, NULL },
#elif (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "AdjustPagebreak", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_AdjustPagebreak, 1, NULL },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "Find", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_Find, 1, NULL },
    { "GetDescent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_GetDescent, 1, NULL },
    { "GetFirstChild", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_GetFirstChild, 1, NULL },
    { "GetHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_GetHeight, 1, NULL },
    { "GetId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_GetId, 1, NULL },
    { "GetLink", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_GetLink, 1, NULL },
    { "GetNext", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_GetNext, 1, NULL },
    { "GetParent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_GetParent, 1, NULL },
    { "GetPosX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_GetPosX, 1, NULL },
    { "GetPosY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_GetPosY, 1, NULL },
    { "GetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_GetWidth, 1, NULL },
    { "Layout", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_Layout, 1, NULL },
    { "SetId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_SetId, 1, NULL },
    { "SetLink", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_SetLink, 1, NULL },
    { "SetNext", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_SetNext, 1, NULL },
    { "SetParent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_SetParent, 1, NULL },
    { "SetPos", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCell_SetPos, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxHtmlCell_delete, 1, NULL },
    { "wxHtmlCell", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHtmlCell_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxHtmlCell_methodCount = sizeof(wxHtmlCell_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxHTML && wxUSE_HTML


#if wxLUA_USE_wxHTML && wxUSE_HTML
// ---------------------------------------------------------------------------
// Bind class wxHtmlWidgetCell
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlWidgetCell'
int wxluatype_wxHtmlWidgetCell = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWidgetCell_constructor[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlWidgetCell_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWidgetCell_constructor[1] = {{ wxLua_wxHtmlWidgetCell_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxHtmlWidgetCell_constructor }};
//     wxHtmlWidgetCell(wxWindow* wnd, int w = 0)
static int LUACALL wxLua_wxHtmlWidgetCell_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int w = 0
    int w = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxWindow wnd
    wxWindow * wnd = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxHtmlWidgetCell* returns = new wxHtmlWidgetCell(wnd, w);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlWidgetCell);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlWidgetCell_methods[] = {
    { "wxHtmlWidgetCell", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHtmlWidgetCell_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxHtmlWidgetCell_methodCount = sizeof(wxHtmlWidgetCell_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxHTML && wxUSE_HTML


#if wxLUA_USE_wxHTML && wxUSE_HTML
// ---------------------------------------------------------------------------
// Bind class wxHtmlContainerCell
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlContainerCell'
int wxluatype_wxHtmlContainerCell = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlContainerCell_GetAlignHor[] = { &wxluatype_wxHtmlContainerCell, NULL };
static int LUACALL wxLua_wxHtmlContainerCell_GetAlignHor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_GetAlignHor[1] = {{ wxLua_wxHtmlContainerCell_GetAlignHor, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlContainerCell_GetAlignHor }};
//     int GetAlignHor() const
static int LUACALL wxLua_wxHtmlContainerCell_GetAlignHor(lua_State *L)
{
    // get this
    wxHtmlContainerCell * self = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlContainerCell);
    // call GetAlignHor
    int returns = (self->GetAlignHor());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlContainerCell_GetAlignVer[] = { &wxluatype_wxHtmlContainerCell, NULL };
static int LUACALL wxLua_wxHtmlContainerCell_GetAlignVer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_GetAlignVer[1] = {{ wxLua_wxHtmlContainerCell_GetAlignVer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlContainerCell_GetAlignVer }};
//     int GetAlignVer() const
static int LUACALL wxLua_wxHtmlContainerCell_GetAlignVer(lua_State *L)
{
    // get this
    wxHtmlContainerCell * self = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlContainerCell);
    // call GetAlignVer
    int returns = (self->GetAlignVer());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlContainerCell_GetBackgroundColour[] = { &wxluatype_wxHtmlContainerCell, NULL };
static int LUACALL wxLua_wxHtmlContainerCell_GetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_GetBackgroundColour[1] = {{ wxLua_wxHtmlContainerCell_GetBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlContainerCell_GetBackgroundColour }};
//     wxColour GetBackgroundColour()
static int LUACALL wxLua_wxHtmlContainerCell_GetBackgroundColour(lua_State *L)
{
    // get this
    wxHtmlContainerCell * self = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlContainerCell);
    // call GetBackgroundColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetBackgroundColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlContainerCell_GetIndent[] = { &wxluatype_wxHtmlContainerCell, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlContainerCell_GetIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_GetIndent[1] = {{ wxLua_wxHtmlContainerCell_GetIndent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlContainerCell_GetIndent }};
//     int GetIndent(int ind) const
static int LUACALL wxLua_wxHtmlContainerCell_GetIndent(lua_State *L)
{
    // int ind
    int ind = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlContainerCell * self = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlContainerCell);
    // call GetIndent
    int returns = (self->GetIndent(ind));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlContainerCell_GetIndentUnits[] = { &wxluatype_wxHtmlContainerCell, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlContainerCell_GetIndentUnits(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_GetIndentUnits[1] = {{ wxLua_wxHtmlContainerCell_GetIndentUnits, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlContainerCell_GetIndentUnits }};
//     int GetIndentUnits(int ind) const
static int LUACALL wxLua_wxHtmlContainerCell_GetIndentUnits(lua_State *L)
{
    // int ind
    int ind = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlContainerCell * self = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlContainerCell);
    // call GetIndentUnits
    int returns = (self->GetIndentUnits(ind));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlContainerCell_InsertCell[] = { &wxluatype_wxHtmlContainerCell, &wxluatype_wxHtmlCell, NULL };
static int LUACALL wxLua_wxHtmlContainerCell_InsertCell(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_InsertCell[1] = {{ wxLua_wxHtmlContainerCell_InsertCell, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlContainerCell_InsertCell }};
//     void InsertCell(wxHtmlCell *cell)
static int LUACALL wxLua_wxHtmlContainerCell_InsertCell(lua_State *L)
{
    // wxHtmlCell cell
    wxHtmlCell * cell = (wxHtmlCell *)wxluaT_getuserdatatype(L, 2, wxluatype_wxHtmlCell);
    // get this
    wxHtmlContainerCell * self = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlContainerCell);
    // call InsertCell
    self->InsertCell(cell);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetAlign[] = { &wxluatype_wxHtmlContainerCell, &wxluatype_wxHtmlTag, NULL };
static int LUACALL wxLua_wxHtmlContainerCell_SetAlign(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_SetAlign[1] = {{ wxLua_wxHtmlContainerCell_SetAlign, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetAlign }};
//     void SetAlign(const wxHtmlTag& tag)
static int LUACALL wxLua_wxHtmlContainerCell_SetAlign(lua_State *L)
{
    // const wxHtmlTag tag
    const wxHtmlTag * tag = (const wxHtmlTag *)wxluaT_getuserdatatype(L, 2, wxluatype_wxHtmlTag);
    // get this
    wxHtmlContainerCell * self = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlContainerCell);
    // call SetAlign
    self->SetAlign(*tag);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetAlignHor[] = { &wxluatype_wxHtmlContainerCell, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlContainerCell_SetAlignHor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_SetAlignHor[1] = {{ wxLua_wxHtmlContainerCell_SetAlignHor, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetAlignHor }};
//     void SetAlignHor(int al)
static int LUACALL wxLua_wxHtmlContainerCell_SetAlignHor(lua_State *L)
{
    // int al
    int al = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlContainerCell * self = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlContainerCell);
    // call SetAlignHor
    self->SetAlignHor(al);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetAlignVer[] = { &wxluatype_wxHtmlContainerCell, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlContainerCell_SetAlignVer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_SetAlignVer[1] = {{ wxLua_wxHtmlContainerCell_SetAlignVer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetAlignVer }};
//     void SetAlignVer(int al)
static int LUACALL wxLua_wxHtmlContainerCell_SetAlignVer(lua_State *L)
{
    // int al
    int al = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlContainerCell * self = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlContainerCell);
    // call SetAlignVer
    self->SetAlignVer(al);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetBackgroundColour[] = { &wxluatype_wxHtmlContainerCell, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxHtmlContainerCell_SetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_SetBackgroundColour[1] = {{ wxLua_wxHtmlContainerCell_SetBackgroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetBackgroundColour }};
//     void SetBackgroundColour(const wxColour& clr)
static int LUACALL wxLua_wxHtmlContainerCell_SetBackgroundColour(lua_State *L)
{
    // const wxColour clr
    const wxColour * clr = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxHtmlContainerCell * self = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlContainerCell);
    // call SetBackgroundColour
    self->SetBackgroundColour(*clr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetBorder[] = { &wxluatype_wxHtmlContainerCell, &wxluatype_wxColour, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxHtmlContainerCell_SetBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_SetBorder[1] = {{ wxLua_wxHtmlContainerCell_SetBorder, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetBorder }};
//     void SetBorder(const wxColour& clr1, const wxColour& clr2)
static int LUACALL wxLua_wxHtmlContainerCell_SetBorder(lua_State *L)
{
    // const wxColour clr2
    const wxColour * clr2 = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // const wxColour clr1
    const wxColour * clr1 = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxHtmlContainerCell * self = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlContainerCell);
    // call SetBorder
    self->SetBorder(*clr1, *clr2);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetIndent[] = { &wxluatype_wxHtmlContainerCell, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlContainerCell_SetIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_SetIndent[1] = {{ wxLua_wxHtmlContainerCell_SetIndent, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetIndent }};
//     void SetIndent(int i, int what, int units = wxHTML_UNITS_PIXELS)
static int LUACALL wxLua_wxHtmlContainerCell_SetIndent(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int units = wxHTML_UNITS_PIXELS
    int units = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxHTML_UNITS_PIXELS);
    // int what
    int what = (int)wxlua_getnumbertype(L, 3);
    // int i
    int i = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlContainerCell * self = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlContainerCell);
    // call SetIndent
    self->SetIndent(i, what, units);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetMinHeight[] = { &wxluatype_wxHtmlContainerCell, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlContainerCell_SetMinHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_SetMinHeight[1] = {{ wxLua_wxHtmlContainerCell_SetMinHeight, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetMinHeight }};
//     void SetMinHeight(int h, int align = wxHTML_ALIGN_TOP)
static int LUACALL wxLua_wxHtmlContainerCell_SetMinHeight(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int align = wxHTML_ALIGN_TOP
    int align = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxHTML_ALIGN_TOP);
    // int h
    int h = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlContainerCell * self = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlContainerCell);
    // call SetMinHeight
    self->SetMinHeight(h, align);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetWidthFloat1[] = { &wxluatype_wxHtmlContainerCell, &wxluatype_wxHtmlTag, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlContainerCell_SetWidthFloat1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_SetWidthFloat1[1] = {{ wxLua_wxHtmlContainerCell_SetWidthFloat1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetWidthFloat1 }};
//     void SetWidthFloat(const wxHtmlTag& tag, double pixel_scale = 1.0)
static int LUACALL wxLua_wxHtmlContainerCell_SetWidthFloat1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // double pixel_scale = 1.0
    double pixel_scale = (argCount >= 3 ? (double)wxlua_getnumbertype(L, 3) : 1.0);
    // const wxHtmlTag tag
    const wxHtmlTag * tag = (const wxHtmlTag *)wxluaT_getuserdatatype(L, 2, wxluatype_wxHtmlTag);
    // get this
    wxHtmlContainerCell * self = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlContainerCell);
    // call SetWidthFloat
    self->SetWidthFloat(*tag, pixel_scale);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetWidthFloat[] = { &wxluatype_wxHtmlContainerCell, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlContainerCell_SetWidthFloat(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_SetWidthFloat[1] = {{ wxLua_wxHtmlContainerCell_SetWidthFloat, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetWidthFloat }};
//     void SetWidthFloat(int w, int units)
static int LUACALL wxLua_wxHtmlContainerCell_SetWidthFloat(lua_State *L)
{
    // int units
    int units = (int)wxlua_getnumbertype(L, 3);
    // int w
    int w = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlContainerCell * self = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlContainerCell);
    // call SetWidthFloat
    self->SetWidthFloat(w, units);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlContainerCell_constructor[] = { &wxluatype_wxHtmlContainerCell, NULL };
static int LUACALL wxLua_wxHtmlContainerCell_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_constructor[1] = {{ wxLua_wxHtmlContainerCell_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxHtmlContainerCell_constructor }};
//     wxHtmlContainerCell(wxHtmlContainerCell *parent)
static int LUACALL wxLua_wxHtmlContainerCell_constructor(lua_State *L)
{
    // wxHtmlContainerCell parent
    wxHtmlContainerCell * parent = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlContainerCell);
    // call constructor
    wxHtmlContainerCell* returns = new wxHtmlContainerCell(parent);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlContainerCell);

    return 1;
}




#if (wxLUA_USE_wxHTML && wxUSE_HTML)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlContainerCell_SetWidthFloat_overload[] =
{
    { wxLua_wxHtmlContainerCell_SetWidthFloat1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetWidthFloat1 },
    { wxLua_wxHtmlContainerCell_SetWidthFloat, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxHtmlContainerCell_SetWidthFloat },
};
static int s_wxluafunc_wxLua_wxHtmlContainerCell_SetWidthFloat_overload_count = sizeof(s_wxluafunc_wxLua_wxHtmlContainerCell_SetWidthFloat_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxHTML && wxUSE_HTML)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlContainerCell_methods[] = {
    { "GetAlignHor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlContainerCell_GetAlignHor, 1, NULL },
    { "GetAlignVer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlContainerCell_GetAlignVer, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "GetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlContainerCell_GetBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "GetIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlContainerCell_GetIndent, 1, NULL },
    { "GetIndentUnits", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlContainerCell_GetIndentUnits, 1, NULL },
    { "InsertCell", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlContainerCell_InsertCell, 1, NULL },
    { "SetAlign", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlContainerCell_SetAlign, 1, NULL },
    { "SetAlignHor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlContainerCell_SetAlignHor, 1, NULL },
    { "SetAlignVer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlContainerCell_SetAlignVer, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "SetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlContainerCell_SetBackgroundColour, 1, NULL },
    { "SetBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlContainerCell_SetBorder, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "SetIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlContainerCell_SetIndent, 1, NULL },
    { "SetMinHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlContainerCell_SetMinHeight, 1, NULL },

#if (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "SetWidthFloat", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlContainerCell_SetWidthFloat_overload, s_wxluafunc_wxLua_wxHtmlContainerCell_SetWidthFloat_overload_count, 0 },
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "wxHtmlContainerCell", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHtmlContainerCell_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxHtmlContainerCell_methodCount = sizeof(wxHtmlContainerCell_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxHTML && wxUSE_HTML


#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxHtmlColourCell
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlColourCell'
int wxluatype_wxHtmlColourCell = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlColourCell_constructor[] = { &wxluatype_wxColour, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlColourCell_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlColourCell_constructor[1] = {{ wxLua_wxHtmlColourCell_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxHtmlColourCell_constructor }};
//     wxHtmlColourCell(const wxColour& clr, int flags = wxHTML_CLR_FOREGROUND)
static int LUACALL wxLua_wxHtmlColourCell_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxHTML_CLR_FOREGROUND
    int flags = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxHTML_CLR_FOREGROUND);
    // const wxColour clr
    const wxColour * clr = (const wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call constructor
    wxHtmlColourCell* returns = new wxHtmlColourCell(*clr, flags);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlColourCell);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlColourCell_methods[] = {
#if (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
    { "wxHtmlColourCell", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHtmlColourCell_constructor, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

    { 0, 0, 0, 0 },
};

int wxHtmlColourCell_methodCount = sizeof(wxHtmlColourCell_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))


#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxHtmlFontCell
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlFontCell'
int wxluatype_wxHtmlFontCell = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxFont) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlFontCell_constructor[] = { &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxHtmlFontCell_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlFontCell_constructor[1] = {{ wxLua_wxHtmlFontCell_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxHtmlFontCell_constructor }};
//     wxHtmlFontCell(wxFont *font)
static int LUACALL wxLua_wxHtmlFontCell_constructor(lua_State *L)
{
    // wxFont font
    wxFont * font = (wxFont *)wxluaT_getuserdatatype(L, 1, wxluatype_wxFont);
    // call constructor
    wxHtmlFontCell* returns = new wxHtmlFontCell(font);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlFontCell);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlFontCell_methods[] = {
#if (wxLUA_USE_wxFont) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
    { "wxHtmlFontCell", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHtmlFontCell_constructor, 1, NULL },
#endif // (wxLUA_USE_wxFont) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

    { 0, 0, 0, 0 },
};

int wxHtmlFontCell_methodCount = sizeof(wxHtmlFontCell_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))


#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxHtmlCellEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlCellEvent'
int wxluatype_wxHtmlCellEvent = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxHTML && wxUSE_HTML) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCellEvent_GetCell[] = { &wxluatype_wxHtmlCellEvent, NULL };
static int LUACALL wxLua_wxHtmlCellEvent_GetCell(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCellEvent_GetCell[1] = {{ wxLua_wxHtmlCellEvent_GetCell, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlCellEvent_GetCell }};
//     wxHtmlCell* GetCell() const
static int LUACALL wxLua_wxHtmlCellEvent_GetCell(lua_State *L)
{
    // get this
    wxHtmlCellEvent * self = (wxHtmlCellEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCellEvent);
    // call GetCell
    wxHtmlCell* returns = (wxHtmlCell*)self->GetCell();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlCell);

    return 1;
}

#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCellEvent_GetLinkClicked[] = { &wxluatype_wxHtmlCellEvent, NULL };
static int LUACALL wxLua_wxHtmlCellEvent_GetLinkClicked(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCellEvent_GetLinkClicked[1] = {{ wxLua_wxHtmlCellEvent_GetLinkClicked, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlCellEvent_GetLinkClicked }};
//     bool GetLinkClicked() const
static int LUACALL wxLua_wxHtmlCellEvent_GetLinkClicked(lua_State *L)
{
    // get this
    wxHtmlCellEvent * self = (wxHtmlCellEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCellEvent);
    // call GetLinkClicked
    bool returns = (self->GetLinkClicked());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCellEvent_GetMouseEvent[] = { &wxluatype_wxHtmlCellEvent, NULL };
static int LUACALL wxLua_wxHtmlCellEvent_GetMouseEvent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCellEvent_GetMouseEvent[1] = {{ wxLua_wxHtmlCellEvent_GetMouseEvent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlCellEvent_GetMouseEvent }};
//     wxMouseEvent GetMouseEvent() const
static int LUACALL wxLua_wxHtmlCellEvent_GetMouseEvent(lua_State *L)
{
    // get this
    wxHtmlCellEvent * self = (wxHtmlCellEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCellEvent);
    // call GetMouseEvent
    // allocate a new object using the copy constructor
    wxMouseEvent* returns = new wxMouseEvent(self->GetMouseEvent());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxMouseEvent*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMouseEvent);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCellEvent_GetPoint[] = { &wxluatype_wxHtmlCellEvent, NULL };
static int LUACALL wxLua_wxHtmlCellEvent_GetPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCellEvent_GetPoint[1] = {{ wxLua_wxHtmlCellEvent_GetPoint, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlCellEvent_GetPoint }};
//     wxPoint GetPoint() const
static int LUACALL wxLua_wxHtmlCellEvent_GetPoint(lua_State *L)
{
    // get this
    wxHtmlCellEvent * self = (wxHtmlCellEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCellEvent);
    // call GetPoint
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPoint());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCellEvent_SetLinkClicked[] = { &wxluatype_wxHtmlCellEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxHtmlCellEvent_SetLinkClicked(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCellEvent_SetLinkClicked[1] = {{ wxLua_wxHtmlCellEvent_SetLinkClicked, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlCellEvent_SetLinkClicked }};
//     void SetLinkClicked(bool linkclicked)
static int LUACALL wxLua_wxHtmlCellEvent_SetLinkClicked(lua_State *L)
{
    // bool linkclicked
    bool linkclicked = wxlua_getbooleantype(L, 2);
    // get this
    wxHtmlCellEvent * self = (wxHtmlCellEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlCellEvent);
    // call SetLinkClicked
    self->SetLinkClicked(linkclicked);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCellEvent_delete[] = { &wxluatype_wxHtmlCellEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCellEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxHtmlCellEvent_delete }};


#if (((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxHTML && wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlCellEvent_constructor1[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxHtmlCell, &wxluatype_wxPoint, &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxHtmlCellEvent_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCellEvent_constructor1[1] = {{ wxLua_wxHtmlCellEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 5, 5, s_wxluatypeArray_wxLua_wxHtmlCellEvent_constructor1 }};
//     wxHtmlCellEvent(wxEventType commandType, int id, wxHtmlCell *cell, const wxPoint &pt, const wxMouseEvent &ev)
static int LUACALL wxLua_wxHtmlCellEvent_constructor1(lua_State *L)
{
    // const wxMouseEvent ev
    const wxMouseEvent * ev = (const wxMouseEvent *)wxluaT_getuserdatatype(L, 5, wxluatype_wxMouseEvent);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint);
    // wxHtmlCell cell
    wxHtmlCell * cell = (wxHtmlCell *)wxluaT_getuserdatatype(L, 3, wxluatype_wxHtmlCell);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // wxEventType commandType
    wxEventType commandType = (wxEventType)wxlua_getnumbertype(L, 1);
    // call constructor
    wxHtmlCellEvent* returns = new wxHtmlCellEvent(commandType, id, cell, *pt, *ev);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlCellEvent);

    return 1;
}

#endif // (((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxHTML && wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxHtmlCellEvent_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCellEvent_constructor[1] = {{ wxLua_wxHtmlCellEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxHtmlCellEvent()
static int LUACALL wxLua_wxHtmlCellEvent_constructor(lua_State *L)
{
    // call constructor
    wxHtmlCellEvent* returns = new wxHtmlCellEvent();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlCellEvent);

    return 1;
}




#if ((((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxHTML && wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlCellEvent_constructor_overload[] =
{

#if (((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxHTML && wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxHtmlCellEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 5, 5, s_wxluatypeArray_wxLua_wxHtmlCellEvent_constructor1 },
#endif // (((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxHTML && wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxHtmlCellEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxHtmlCellEvent_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxHtmlCellEvent_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxHTML && wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlCellEvent_methods[] = {
#if (wxLUA_USE_wxHTML && wxUSE_HTML) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
    { "GetCell", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCellEvent_GetCell, 1, NULL },
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

    { "GetLinkClicked", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCellEvent_GetLinkClicked, 1, NULL },
    { "GetMouseEvent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCellEvent_GetMouseEvent, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
    { "GetPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCellEvent_GetPoint, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

    { "SetLinkClicked", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlCellEvent_SetLinkClicked, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxHtmlCellEvent_delete, 1, NULL },

#if ((((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxHTML && wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
    { "wxHtmlCellEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHtmlCellEvent_constructor_overload, s_wxluafunc_wxLua_wxHtmlCellEvent_constructor_overload_count, 0 },
#endif // ((((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxHTML && wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

    { 0, 0, 0, 0 },
};

int wxHtmlCellEvent_methodCount = sizeof(wxHtmlCellEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))


#if wxLUA_USE_wxHTML && wxUSE_HTML
// ---------------------------------------------------------------------------
// Bind class wxHtmlLinkInfo
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlLinkInfo'
int wxluatype_wxHtmlLinkInfo = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlLinkInfo_GetEvent[] = { &wxluatype_wxHtmlLinkInfo, NULL };
static int LUACALL wxLua_wxHtmlLinkInfo_GetEvent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlLinkInfo_GetEvent[1] = {{ wxLua_wxHtmlLinkInfo_GetEvent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlLinkInfo_GetEvent }};
//     const wxMouseEvent * GetEvent()
static int LUACALL wxLua_wxHtmlLinkInfo_GetEvent(lua_State *L)
{
    // get this
    wxHtmlLinkInfo * self = (wxHtmlLinkInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlLinkInfo);
    // call GetEvent
    const wxMouseEvent* returns = (const wxMouseEvent*)self->GetEvent();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMouseEvent);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlLinkInfo_GetHref[] = { &wxluatype_wxHtmlLinkInfo, NULL };
static int LUACALL wxLua_wxHtmlLinkInfo_GetHref(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlLinkInfo_GetHref[1] = {{ wxLua_wxHtmlLinkInfo_GetHref, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlLinkInfo_GetHref }};
//     wxString GetHref()
static int LUACALL wxLua_wxHtmlLinkInfo_GetHref(lua_State *L)
{
    // get this
    wxHtmlLinkInfo * self = (wxHtmlLinkInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlLinkInfo);
    // call GetHref
    wxString returns = (self->GetHref());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlLinkInfo_GetHtmlCell[] = { &wxluatype_wxHtmlLinkInfo, NULL };
static int LUACALL wxLua_wxHtmlLinkInfo_GetHtmlCell(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlLinkInfo_GetHtmlCell[1] = {{ wxLua_wxHtmlLinkInfo_GetHtmlCell, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlLinkInfo_GetHtmlCell }};
//     const wxHtmlCell * GetHtmlCell()
static int LUACALL wxLua_wxHtmlLinkInfo_GetHtmlCell(lua_State *L)
{
    // get this
    wxHtmlLinkInfo * self = (wxHtmlLinkInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlLinkInfo);
    // call GetHtmlCell
    const wxHtmlCell* returns = (const wxHtmlCell*)self->GetHtmlCell();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlCell);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlLinkInfo_GetTarget[] = { &wxluatype_wxHtmlLinkInfo, NULL };
static int LUACALL wxLua_wxHtmlLinkInfo_GetTarget(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlLinkInfo_GetTarget[1] = {{ wxLua_wxHtmlLinkInfo_GetTarget, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlLinkInfo_GetTarget }};
//     wxString GetTarget()
static int LUACALL wxLua_wxHtmlLinkInfo_GetTarget(lua_State *L)
{
    // get this
    wxHtmlLinkInfo * self = (wxHtmlLinkInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlLinkInfo);
    // call GetTarget
    wxString returns = (self->GetTarget());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlLinkInfo_delete[] = { &wxluatype_wxHtmlLinkInfo, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlLinkInfo_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxHtmlLinkInfo_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlLinkInfo_constructor[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlLinkInfo_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlLinkInfo_constructor[1] = {{ wxLua_wxHtmlLinkInfo_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxHtmlLinkInfo_constructor }};
//     wxHtmlLinkInfo(const wxString& href, const wxString& target = "")
static int LUACALL wxLua_wxHtmlLinkInfo_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString target = ""
    const wxString target = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // const wxString href
    const wxString href = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxHtmlLinkInfo* returns = new wxHtmlLinkInfo(href, target);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlLinkInfo);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlLinkInfo_methods[] = {
    { "GetEvent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlLinkInfo_GetEvent, 1, NULL },
    { "GetHref", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlLinkInfo_GetHref, 1, NULL },
    { "GetHtmlCell", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlLinkInfo_GetHtmlCell, 1, NULL },
    { "GetTarget", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlLinkInfo_GetTarget, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxHtmlLinkInfo_delete, 1, NULL },
    { "wxHtmlLinkInfo", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHtmlLinkInfo_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxHtmlLinkInfo_methodCount = sizeof(wxHtmlLinkInfo_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxHTML && wxUSE_HTML


#if wxLUA_USE_wxHTML && wxUSE_HTML
// ---------------------------------------------------------------------------
// Bind class wxHtmlTag
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlTag'
int wxluatype_wxHtmlTag = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlTag_GetAllParams[] = { &wxluatype_wxHtmlTag, NULL };
static int LUACALL wxLua_wxHtmlTag_GetAllParams(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlTag_GetAllParams[1] = {{ wxLua_wxHtmlTag_GetAllParams, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlTag_GetAllParams }};
//     const wxString GetAllParams() const
static int LUACALL wxLua_wxHtmlTag_GetAllParams(lua_State *L)
{
    // get this
    wxHtmlTag * self = (wxHtmlTag *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlTag);
    // call GetAllParams
    wxString returns = (self->GetAllParams());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlTag_GetBeginPos[] = { &wxluatype_wxHtmlTag, NULL };
static int LUACALL wxLua_wxHtmlTag_GetBeginPos(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlTag_GetBeginPos[1] = {{ wxLua_wxHtmlTag_GetBeginPos, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlTag_GetBeginPos }};
//     int GetBeginPos() const
static int LUACALL wxLua_wxHtmlTag_GetBeginPos(lua_State *L)
{
    // get this
    wxHtmlTag * self = (wxHtmlTag *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlTag);
    // call GetBeginPos
    int returns = (self->GetBeginPos());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlTag_GetEndPos1[] = { &wxluatype_wxHtmlTag, NULL };
static int LUACALL wxLua_wxHtmlTag_GetEndPos1(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlTag_GetEndPos1[1] = {{ wxLua_wxHtmlTag_GetEndPos1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlTag_GetEndPos1 }};
//     int GetEndPos1() const
static int LUACALL wxLua_wxHtmlTag_GetEndPos1(lua_State *L)
{
    // get this
    wxHtmlTag * self = (wxHtmlTag *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlTag);
    // call GetEndPos1
    int returns = (self->GetEndPos1());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlTag_GetEndPos2[] = { &wxluatype_wxHtmlTag, NULL };
static int LUACALL wxLua_wxHtmlTag_GetEndPos2(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlTag_GetEndPos2[1] = {{ wxLua_wxHtmlTag_GetEndPos2, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlTag_GetEndPos2 }};
//     int GetEndPos2() const
static int LUACALL wxLua_wxHtmlTag_GetEndPos2(lua_State *L)
{
    // get this
    wxHtmlTag * self = (wxHtmlTag *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlTag);
    // call GetEndPos2
    int returns = (self->GetEndPos2());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlTag_GetName[] = { &wxluatype_wxHtmlTag, NULL };
static int LUACALL wxLua_wxHtmlTag_GetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlTag_GetName[1] = {{ wxLua_wxHtmlTag_GetName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlTag_GetName }};
//     wxString GetName() const
static int LUACALL wxLua_wxHtmlTag_GetName(lua_State *L)
{
    // get this
    wxHtmlTag * self = (wxHtmlTag *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlTag);
    // call GetName
    wxString returns = (self->GetName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlTag_GetParam[] = { &wxluatype_wxHtmlTag, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxHtmlTag_GetParam(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlTag_GetParam[1] = {{ wxLua_wxHtmlTag_GetParam, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlTag_GetParam }};
//     wxString GetParam(const wxString& par, bool with_commas = false) const
static int LUACALL wxLua_wxHtmlTag_GetParam(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool with_commas = false
    bool with_commas = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // const wxString par
    const wxString par = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlTag * self = (wxHtmlTag *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlTag);
    // call GetParam
    wxString returns = (self->GetParam(par, with_commas));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlTag_GetParamAsColour[] = { &wxluatype_wxHtmlTag, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlTag_GetParamAsColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlTag_GetParamAsColour[1] = {{ wxLua_wxHtmlTag_GetParamAsColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlTag_GetParamAsColour }};
// %override wxLua_wxHtmlTag_GetParamAsColour
// %alias GetParamAsColor bool GetParamAsColour(const wxString& par, wxColour *clr) const
static int LUACALL wxLua_wxHtmlTag_GetParamAsColour(lua_State *L)
{
    wxColour *retColour = new wxColour;
    // const wxString& par
    wxString par = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlTag *self = (wxHtmlTag *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlTag);
    // call GetParamAsColour
    bool returns = self->GetParamAsColour(par, retColour);
    //
    // push the result number
    lua_pushboolean(L, returns);
    wxluaT_pushuserdatatype(L, retColour, wxluatype_wxColour);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlTag_GetParamAsInt[] = { &wxluatype_wxHtmlTag, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlTag_GetParamAsInt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlTag_GetParamAsInt[1] = {{ wxLua_wxHtmlTag_GetParamAsInt, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlTag_GetParamAsInt }};
// %override wxLua_wxHtmlTag_GetParamAsInt
// bool GetParamAsInt(const wxString& par, int *value) const
static int LUACALL wxLua_wxHtmlTag_GetParamAsInt(lua_State *L)
{
    int value;
    // const wxString& par
    wxString par = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlTag *self = (wxHtmlTag *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlTag);
    // call GetParamAsInt
    bool returns = self->GetParamAsInt(par, &value);
    // push the result number
    lua_pushboolean(L, returns);
    //
    lua_pushnumber(L, value);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlTag_HasEnding[] = { &wxluatype_wxHtmlTag, NULL };
static int LUACALL wxLua_wxHtmlTag_HasEnding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlTag_HasEnding[1] = {{ wxLua_wxHtmlTag_HasEnding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlTag_HasEnding }};
//     bool HasEnding() const
static int LUACALL wxLua_wxHtmlTag_HasEnding(lua_State *L)
{
    // get this
    wxHtmlTag * self = (wxHtmlTag *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlTag);
    // call HasEnding
    bool returns = (self->HasEnding());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlTag_HasParam[] = { &wxluatype_wxHtmlTag, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlTag_HasParam(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlTag_HasParam[1] = {{ wxLua_wxHtmlTag_HasParam, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlTag_HasParam }};
//     bool HasParam(const wxString& par) const
static int LUACALL wxLua_wxHtmlTag_HasParam(lua_State *L)
{
    // const wxString par
    const wxString par = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlTag * self = (wxHtmlTag *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlTag);
    // call HasParam
    bool returns = (self->HasParam(par));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlTag_methods[] = {
    { "GetAllParams", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlTag_GetAllParams, 1, NULL },
    { "GetBeginPos", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlTag_GetBeginPos, 1, NULL },
    { "GetEndPos1", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlTag_GetEndPos1, 1, NULL },
    { "GetEndPos2", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlTag_GetEndPos2, 1, NULL },
    { "GetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlTag_GetName, 1, NULL },
    { "GetParam", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlTag_GetParam, 1, NULL },
    { "GetParamAsColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlTag_GetParamAsColour, 1, NULL },
    { "GetParamAsInt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlTag_GetParamAsInt, 1, NULL },
    { "HasEnding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlTag_HasEnding, 1, NULL },
    { "HasParam", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlTag_HasParam, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxHtmlTag_methodCount = sizeof(wxHtmlTag_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxHTML && wxUSE_HTML


#if wxLUA_USE_wxHTML && wxUSE_HTML
// ---------------------------------------------------------------------------
// Bind class wxHtmlWindow
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlWindow'
int wxluatype_wxHtmlWindow = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_AppendToPage[] = { &wxluatype_wxHtmlWindow, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlWindow_AppendToPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_AppendToPage[1] = {{ wxLua_wxHtmlWindow_AppendToPage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWindow_AppendToPage }};
//     bool AppendToPage(const wxString& source)
static int LUACALL wxLua_wxHtmlWindow_AppendToPage(lua_State *L)
{
    // const wxString source
    const wxString source = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call AppendToPage
    bool returns = (self->AppendToPage(source));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_GetInternalRepresentation[] = { &wxluatype_wxHtmlWindow, NULL };
static int LUACALL wxLua_wxHtmlWindow_GetInternalRepresentation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_GetInternalRepresentation[1] = {{ wxLua_wxHtmlWindow_GetInternalRepresentation, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWindow_GetInternalRepresentation }};
//     wxHtmlContainerCell* GetInternalRepresentation() const
static int LUACALL wxLua_wxHtmlWindow_GetInternalRepresentation(lua_State *L)
{
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call GetInternalRepresentation
    wxHtmlContainerCell* returns = (wxHtmlContainerCell*)self->GetInternalRepresentation();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlContainerCell);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_GetOpenedAnchor[] = { &wxluatype_wxHtmlWindow, NULL };
static int LUACALL wxLua_wxHtmlWindow_GetOpenedAnchor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_GetOpenedAnchor[1] = {{ wxLua_wxHtmlWindow_GetOpenedAnchor, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWindow_GetOpenedAnchor }};
//     wxString GetOpenedAnchor()
static int LUACALL wxLua_wxHtmlWindow_GetOpenedAnchor(lua_State *L)
{
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call GetOpenedAnchor
    wxString returns = (self->GetOpenedAnchor());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_GetOpenedPage[] = { &wxluatype_wxHtmlWindow, NULL };
static int LUACALL wxLua_wxHtmlWindow_GetOpenedPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_GetOpenedPage[1] = {{ wxLua_wxHtmlWindow_GetOpenedPage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWindow_GetOpenedPage }};
//     wxString GetOpenedPage()
static int LUACALL wxLua_wxHtmlWindow_GetOpenedPage(lua_State *L)
{
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call GetOpenedPage
    wxString returns = (self->GetOpenedPage());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_GetOpenedPageTitle[] = { &wxluatype_wxHtmlWindow, NULL };
static int LUACALL wxLua_wxHtmlWindow_GetOpenedPageTitle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_GetOpenedPageTitle[1] = {{ wxLua_wxHtmlWindow_GetOpenedPageTitle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWindow_GetOpenedPageTitle }};
//     wxString GetOpenedPageTitle()
static int LUACALL wxLua_wxHtmlWindow_GetOpenedPageTitle(lua_State *L)
{
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call GetOpenedPageTitle
    wxString returns = (self->GetOpenedPageTitle());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxFrame) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_GetRelatedFrame[] = { &wxluatype_wxHtmlWindow, NULL };
static int LUACALL wxLua_wxHtmlWindow_GetRelatedFrame(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_GetRelatedFrame[1] = {{ wxLua_wxHtmlWindow_GetRelatedFrame, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWindow_GetRelatedFrame }};
//     wxFrame* GetRelatedFrame() const
static int LUACALL wxLua_wxHtmlWindow_GetRelatedFrame(lua_State *L)
{
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call GetRelatedFrame
    wxFrame* returns = (wxFrame*)self->GetRelatedFrame();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFrame);

    return 1;
}

#endif // (wxLUA_USE_wxFrame) && (wxLUA_USE_wxHTML && wxUSE_HTML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_HistoryBack[] = { &wxluatype_wxHtmlWindow, NULL };
static int LUACALL wxLua_wxHtmlWindow_HistoryBack(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_HistoryBack[1] = {{ wxLua_wxHtmlWindow_HistoryBack, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWindow_HistoryBack }};
//     bool HistoryBack()
static int LUACALL wxLua_wxHtmlWindow_HistoryBack(lua_State *L)
{
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call HistoryBack
    bool returns = (self->HistoryBack());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_HistoryCanBack[] = { &wxluatype_wxHtmlWindow, NULL };
static int LUACALL wxLua_wxHtmlWindow_HistoryCanBack(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_HistoryCanBack[1] = {{ wxLua_wxHtmlWindow_HistoryCanBack, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWindow_HistoryCanBack }};
//     bool HistoryCanBack()
static int LUACALL wxLua_wxHtmlWindow_HistoryCanBack(lua_State *L)
{
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call HistoryCanBack
    bool returns = (self->HistoryCanBack());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_HistoryCanForward[] = { &wxluatype_wxHtmlWindow, NULL };
static int LUACALL wxLua_wxHtmlWindow_HistoryCanForward(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_HistoryCanForward[1] = {{ wxLua_wxHtmlWindow_HistoryCanForward, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWindow_HistoryCanForward }};
//     bool HistoryCanForward()
static int LUACALL wxLua_wxHtmlWindow_HistoryCanForward(lua_State *L)
{
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call HistoryCanForward
    bool returns = (self->HistoryCanForward());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_HistoryClear[] = { &wxluatype_wxHtmlWindow, NULL };
static int LUACALL wxLua_wxHtmlWindow_HistoryClear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_HistoryClear[1] = {{ wxLua_wxHtmlWindow_HistoryClear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWindow_HistoryClear }};
//     void HistoryClear()
static int LUACALL wxLua_wxHtmlWindow_HistoryClear(lua_State *L)
{
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call HistoryClear
    self->HistoryClear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_HistoryForward[] = { &wxluatype_wxHtmlWindow, NULL };
static int LUACALL wxLua_wxHtmlWindow_HistoryForward(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_HistoryForward[1] = {{ wxLua_wxHtmlWindow_HistoryForward, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWindow_HistoryForward }};
//     bool HistoryForward()
static int LUACALL wxLua_wxHtmlWindow_HistoryForward(lua_State *L)
{
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call HistoryForward
    bool returns = (self->HistoryForward());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxFileName) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_LoadFile[] = { &wxluatype_wxHtmlWindow, &wxluatype_wxFileName, NULL };
static int LUACALL wxLua_wxHtmlWindow_LoadFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_LoadFile[1] = {{ wxLua_wxHtmlWindow_LoadFile, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWindow_LoadFile }};
//     virtual bool LoadFile(const wxFileName& filename)
static int LUACALL wxLua_wxHtmlWindow_LoadFile(lua_State *L)
{
    // const wxFileName filename
    const wxFileName * filename = (const wxFileName *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFileName);
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call LoadFile
    bool returns = (self->LoadFile(*filename));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxFileName) && (wxLUA_USE_wxHTML && wxUSE_HTML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_LoadPage[] = { &wxluatype_wxHtmlWindow, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlWindow_LoadPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_LoadPage[1] = {{ wxLua_wxHtmlWindow_LoadPage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWindow_LoadPage }};
//     bool LoadPage(const wxString& location)
static int LUACALL wxLua_wxHtmlWindow_LoadPage(lua_State *L)
{
    // const wxString location
    const wxString location = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call LoadPage
    bool returns = (self->LoadPage(location));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxConfig && wxUSE_CONFIG) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_ReadCustomization[] = { &wxluatype_wxHtmlWindow, &wxluatype_wxConfigBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlWindow_ReadCustomization(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_ReadCustomization[1] = {{ wxLua_wxHtmlWindow_ReadCustomization, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlWindow_ReadCustomization }};
//     void ReadCustomization(wxConfigBase *cfg, wxString path = wxEmptyString)
static int LUACALL wxLua_wxHtmlWindow_ReadCustomization(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxString path = wxEmptyString
    wxString path = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // wxConfigBase cfg
    wxConfigBase * cfg = (wxConfigBase *)wxluaT_getuserdatatype(L, 2, wxluatype_wxConfigBase);
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call ReadCustomization
    self->ReadCustomization(cfg, path);

    return 0;
}

#endif // (wxLUA_USE_wxConfig && wxUSE_CONFIG) && (wxLUA_USE_wxHTML && wxUSE_HTML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_SelectAll[] = { &wxluatype_wxHtmlWindow, NULL };
static int LUACALL wxLua_wxHtmlWindow_SelectAll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_SelectAll[1] = {{ wxLua_wxHtmlWindow_SelectAll, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWindow_SelectAll }};
//     void SelectAll()
static int LUACALL wxLua_wxHtmlWindow_SelectAll(lua_State *L)
{
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call SelectAll
    self->SelectAll();

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_SelectLine[] = { &wxluatype_wxHtmlWindow, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxHtmlWindow_SelectLine(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_SelectLine[1] = {{ wxLua_wxHtmlWindow_SelectLine, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWindow_SelectLine }};
//     void SelectLine(const wxPoint& pos)
static int LUACALL wxLua_wxHtmlWindow_SelectLine(lua_State *L)
{
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call SelectLine
    self->SelectLine(*pos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_SelectWord[] = { &wxluatype_wxHtmlWindow, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxHtmlWindow_SelectWord(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_SelectWord[1] = {{ wxLua_wxHtmlWindow_SelectWord, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWindow_SelectWord }};
//     void SelectWord(const wxPoint& pos)
static int LUACALL wxLua_wxHtmlWindow_SelectWord(lua_State *L)
{
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call SelectWord
    self->SelectWord(*pos);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxHTML && wxUSE_HTML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_SelectionToText[] = { &wxluatype_wxHtmlWindow, NULL };
static int LUACALL wxLua_wxHtmlWindow_SelectionToText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_SelectionToText[1] = {{ wxLua_wxHtmlWindow_SelectionToText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWindow_SelectionToText }};
//     wxString SelectionToText()
static int LUACALL wxLua_wxHtmlWindow_SelectionToText(lua_State *L)
{
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call SelectionToText
    wxString returns = (self->SelectionToText());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_SetBorders[] = { &wxluatype_wxHtmlWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlWindow_SetBorders(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_SetBorders[1] = {{ wxLua_wxHtmlWindow_SetBorders, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWindow_SetBorders }};
//     void SetBorders(int b)
static int LUACALL wxLua_wxHtmlWindow_SetBorders(lua_State *L)
{
    // int b
    int b = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call SetBorders
    self->SetBorders(b);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_SetFonts[] = { &wxluatype_wxHtmlWindow, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TTABLE, NULL };
static int LUACALL wxLua_wxHtmlWindow_SetFonts(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_SetFonts[1] = {{ wxLua_wxHtmlWindow_SetFonts, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxHtmlWindow_SetFonts }};
// %override wxLua_wxHtmlWindow_SetFonts
// void SetFonts(wxString normal_face, wxString fixed_face, const int *sizes)
static int LUACALL wxLua_wxHtmlWindow_SetFonts(lua_State *L)
{
    // const int *sizes
#ifdef __WXMSW__
    int sizes[7] = { 7,8,10,12,16,22,30 };
#else
    int sizes[7] = { 10,12,14,16,19,24,32 };
#endif

    const int arraySize = sizeof(sizes)/sizeof(sizes[0]);

    int argCount = lua_gettop(L);

    if (argCount >= 4)
    {
        if (lua_istable(L, 4))
        {
            int count = 0;

            int *sizeArray = wxlua_getintarray(L, 4, count);

            if (count > arraySize)
                count = arraySize;

            memcpy(sizes, sizeArray, count * sizeof(int));

            delete[] sizeArray;
        }
        else
        {
            int idx;

            if (argCount > 4 + arraySize)
                argCount = 4 + arraySize;

            for (idx = 4; idx < argCount; ++idx)
                sizes[idx - 4] = (int)lua_tonumber(L, idx);
        }
    }

    // wxString fixed_face
    wxString fixed_face = wxlua_getwxStringtype(L, 3);
    // wxString normal_face
    wxString normal_face = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlWindow *self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call SetFonts
    self->SetFonts(normal_face, fixed_face, sizes);

    // return the number of parameters
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_SetPage[] = { &wxluatype_wxHtmlWindow, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlWindow_SetPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_SetPage[1] = {{ wxLua_wxHtmlWindow_SetPage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWindow_SetPage }};
//     bool SetPage(const wxString& source)
static int LUACALL wxLua_wxHtmlWindow_SetPage(lua_State *L)
{
    // const wxString source
    const wxString source = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call SetPage
    bool returns = (self->SetPage(source));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxFrame) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_SetRelatedFrame[] = { &wxluatype_wxHtmlWindow, &wxluatype_wxFrame, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlWindow_SetRelatedFrame(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_SetRelatedFrame[1] = {{ wxLua_wxHtmlWindow_SetRelatedFrame, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxHtmlWindow_SetRelatedFrame }};
//     void SetRelatedFrame(wxFrame* frame, const wxString& format)
static int LUACALL wxLua_wxHtmlWindow_SetRelatedFrame(lua_State *L)
{
    // const wxString format
    const wxString format = wxlua_getwxStringtype(L, 3);
    // wxFrame frame
    wxFrame * frame = (wxFrame *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFrame);
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call SetRelatedFrame
    self->SetRelatedFrame(frame, format);

    return 0;
}

#endif // (wxLUA_USE_wxFrame) && (wxLUA_USE_wxHTML && wxUSE_HTML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_SetRelatedStatusBar[] = { &wxluatype_wxHtmlWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlWindow_SetRelatedStatusBar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_SetRelatedStatusBar[1] = {{ wxLua_wxHtmlWindow_SetRelatedStatusBar, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWindow_SetRelatedStatusBar }};
//     void SetRelatedStatusBar(int bar)
static int LUACALL wxLua_wxHtmlWindow_SetRelatedStatusBar(lua_State *L)
{
    // int bar
    int bar = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call SetRelatedStatusBar
    self->SetRelatedStatusBar(bar);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_ToText[] = { &wxluatype_wxHtmlWindow, NULL };
static int LUACALL wxLua_wxHtmlWindow_ToText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_ToText[1] = {{ wxLua_wxHtmlWindow_ToText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWindow_ToText }};
//     wxString ToText()
static int LUACALL wxLua_wxHtmlWindow_ToText(lua_State *L)
{
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call ToText
    wxString returns = (self->ToText());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxConfig && wxUSE_CONFIG) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_WriteCustomization[] = { &wxluatype_wxHtmlWindow, &wxluatype_wxConfigBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlWindow_WriteCustomization(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_WriteCustomization[1] = {{ wxLua_wxHtmlWindow_WriteCustomization, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlWindow_WriteCustomization }};
//     void WriteCustomization(wxConfigBase *cfg, wxString path = wxEmptyString)
static int LUACALL wxLua_wxHtmlWindow_WriteCustomization(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxString path = wxEmptyString
    wxString path = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // wxConfigBase cfg
    wxConfigBase * cfg = (wxConfigBase *)wxluaT_getuserdatatype(L, 2, wxluatype_wxConfigBase);
    // get this
    wxHtmlWindow * self = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call WriteCustomization
    self->WriteCustomization(cfg, path);

    return 0;
}

#endif // (wxLUA_USE_wxConfig && wxUSE_CONFIG) && (wxLUA_USE_wxHTML && wxUSE_HTML)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindow_constructor[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlWindow_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindow_constructor[1] = {{ wxLua_wxHtmlWindow_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 6, s_wxluatypeArray_wxLua_wxHtmlWindow_constructor }};
//     wxHtmlWindow(wxWindow *parent, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxHW_SCROLLBAR_AUTO, const wxString& name = "wxHtmlWindow")
static int LUACALL wxLua_wxHtmlWindow_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxHtmlWindow"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxHtmlWindow")));
    // long style = wxHW_SCROLLBAR_AUTO
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxHW_SCROLLBAR_AUTO);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = -1
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : -1);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxHtmlWindow* returns = new wxHtmlWindow(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlWindow);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxHTML && wxUSE_HTML)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlWindow_methods[] = {
    { "AppendToPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_AppendToPage, 1, NULL },
    { "GetInternalRepresentation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_GetInternalRepresentation, 1, NULL },
    { "GetOpenedAnchor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_GetOpenedAnchor, 1, NULL },
    { "GetOpenedPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_GetOpenedPage, 1, NULL },
    { "GetOpenedPageTitle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_GetOpenedPageTitle, 1, NULL },

#if (wxLUA_USE_wxFrame) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "GetRelatedFrame", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_GetRelatedFrame, 1, NULL },
#endif // (wxLUA_USE_wxFrame) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "HistoryBack", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_HistoryBack, 1, NULL },
    { "HistoryCanBack", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_HistoryCanBack, 1, NULL },
    { "HistoryCanForward", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_HistoryCanForward, 1, NULL },
    { "HistoryClear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_HistoryClear, 1, NULL },
    { "HistoryForward", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_HistoryForward, 1, NULL },

#if (wxLUA_USE_wxFileName) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "LoadFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_LoadFile, 1, NULL },
#endif // (wxLUA_USE_wxFileName) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "LoadPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_LoadPage, 1, NULL },

#if (wxLUA_USE_wxConfig && wxUSE_CONFIG) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "ReadCustomization", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_ReadCustomization, 1, NULL },
#endif // (wxLUA_USE_wxConfig && wxUSE_CONFIG) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "SelectAll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_SelectAll, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "SelectLine", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_SelectLine, 1, NULL },
    { "SelectWord", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_SelectWord, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "SelectionToText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_SelectionToText, 1, NULL },
    { "SetBorders", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_SetBorders, 1, NULL },
    { "SetFonts", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_SetFonts, 1, NULL },
    { "SetPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_SetPage, 1, NULL },

#if (wxLUA_USE_wxFrame) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "SetRelatedFrame", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_SetRelatedFrame, 1, NULL },
#endif // (wxLUA_USE_wxFrame) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "SetRelatedStatusBar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_SetRelatedStatusBar, 1, NULL },
    { "ToText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_ToText, 1, NULL },

#if (wxLUA_USE_wxConfig && wxUSE_CONFIG) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "WriteCustomization", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindow_WriteCustomization, 1, NULL },
#endif // (wxLUA_USE_wxConfig && wxUSE_CONFIG) && (wxLUA_USE_wxHTML && wxUSE_HTML)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "wxHtmlWindow", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHtmlWindow_constructor, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { 0, 0, 0, 0 },
};

int wxHtmlWindow_methodCount = sizeof(wxHtmlWindow_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxHTML && wxUSE_HTML


#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow)
// ---------------------------------------------------------------------------
// Bind class wxLuaHtmlWindow
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLuaHtmlWindow'
int wxluatype_wxLuaHtmlWindow = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow))
static wxLuaArgType s_wxluatypeArray_wxLua_wxLuaHtmlWindow_constructor[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxLuaHtmlWindow_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLuaHtmlWindow_constructor[1] = {{ wxLua_wxLuaHtmlWindow_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 6, s_wxluatypeArray_wxLua_wxLuaHtmlWindow_constructor }};
// %override wxLua_wxLuaHtmlWindow_constructor
//     wxLuaHtmlWindow(wxWindow *parent, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxHW_SCROLLBAR_AUTO, const wxString& name = "wxLuaHtmlWindow")
static int LUACALL wxLua_wxLuaHtmlWindow_constructor(lua_State *L)
{
    wxLuaState wxlState(L);
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxLuaHtmlWindow"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxLuaHtmlWindow")));
    // long style = wxHW_SCROLLBAR_AUTO
    long style = (argCount >= 5 ? (long)wxlua_getintegertype(L, 5) : wxHW_SCROLLBAR_AUTO);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = -1
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getintegertype(L, 2) : -1);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxLuaHtmlWindow *returns = new wxLuaHtmlWindow(wxlState, parent, id, *pos, *size, style, name);
    // add to tracked window list
    if (returns && returns->IsKindOf(CLASSINFO(wxWindow)))
        wxluaW_addtrackedwindow(L, (wxWindow*)returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLuaHtmlWindow);

    return 1;
}


#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow))



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLuaHtmlWindow_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow))
    { "wxLuaHtmlWindow", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLuaHtmlWindow_constructor, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow))

    { 0, 0, 0, 0 },
};

int wxLuaHtmlWindow_methodCount = sizeof(wxLuaHtmlWindow_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow)


#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow)
// ---------------------------------------------------------------------------
// Bind class wxLuaHtmlWinTagEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLuaHtmlWinTagEvent'
int wxluatype_wxLuaHtmlWinTagEvent = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxHTML && wxUSE_HTML) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow))
static wxLuaArgType s_wxluatypeArray_wxLua_wxLuaHtmlWinTagEvent_GetHtmlParser[] = { &wxluatype_wxLuaHtmlWinTagEvent, NULL };
static int LUACALL wxLua_wxLuaHtmlWinTagEvent_GetHtmlParser(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLuaHtmlWinTagEvent_GetHtmlParser[1] = {{ wxLua_wxLuaHtmlWinTagEvent_GetHtmlParser, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLuaHtmlWinTagEvent_GetHtmlParser }};
//     wxHtmlWinParser      *GetHtmlParser() const
static int LUACALL wxLua_wxLuaHtmlWinTagEvent_GetHtmlParser(lua_State *L)
{
    // get this
    wxLuaHtmlWinTagEvent * self = (wxLuaHtmlWinTagEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLuaHtmlWinTagEvent);
    // call GetHtmlParser
    wxHtmlWinParser* returns = (wxHtmlWinParser*)self->GetHtmlParser();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlWinParser);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLuaHtmlWinTagEvent_GetHtmlTag[] = { &wxluatype_wxLuaHtmlWinTagEvent, NULL };
static int LUACALL wxLua_wxLuaHtmlWinTagEvent_GetHtmlTag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLuaHtmlWinTagEvent_GetHtmlTag[1] = {{ wxLua_wxLuaHtmlWinTagEvent_GetHtmlTag, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLuaHtmlWinTagEvent_GetHtmlTag }};
//     const wxHtmlTag      *GetHtmlTag() const
static int LUACALL wxLua_wxLuaHtmlWinTagEvent_GetHtmlTag(lua_State *L)
{
    // get this
    wxLuaHtmlWinTagEvent * self = (wxLuaHtmlWinTagEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLuaHtmlWinTagEvent);
    // call GetHtmlTag
    const wxHtmlTag* returns = (const wxHtmlTag*)self->GetHtmlTag();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlTag);

    return 1;
}

#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow))

static wxLuaArgType s_wxluatypeArray_wxLua_wxLuaHtmlWinTagEvent_GetParseInnerCalled[] = { &wxluatype_wxLuaHtmlWinTagEvent, NULL };
static int LUACALL wxLua_wxLuaHtmlWinTagEvent_GetParseInnerCalled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLuaHtmlWinTagEvent_GetParseInnerCalled[1] = {{ wxLua_wxLuaHtmlWinTagEvent_GetParseInnerCalled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxLuaHtmlWinTagEvent_GetParseInnerCalled }};
//     bool                  GetParseInnerCalled() const
static int LUACALL wxLua_wxLuaHtmlWinTagEvent_GetParseInnerCalled(lua_State *L)
{
    // get this
    wxLuaHtmlWinTagEvent * self = (wxLuaHtmlWinTagEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLuaHtmlWinTagEvent);
    // call GetParseInnerCalled
    bool returns = (self->GetParseInnerCalled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLuaHtmlWinTagEvent_SetParseInnerCalled[] = { &wxluatype_wxLuaHtmlWinTagEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxLuaHtmlWinTagEvent_SetParseInnerCalled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLuaHtmlWinTagEvent_SetParseInnerCalled[1] = {{ wxLua_wxLuaHtmlWinTagEvent_SetParseInnerCalled, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxLuaHtmlWinTagEvent_SetParseInnerCalled }};
//     void                  SetParseInnerCalled(bool fParseInnerCalled = true)
static int LUACALL wxLua_wxLuaHtmlWinTagEvent_SetParseInnerCalled(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool fParseInnerCalled = true
    bool fParseInnerCalled = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxLuaHtmlWinTagEvent * self = (wxLuaHtmlWinTagEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLuaHtmlWinTagEvent);
    // call SetParseInnerCalled
    self->SetParseInnerCalled(fParseInnerCalled);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLuaHtmlWinTagEvent_delete[] = { &wxluatype_wxLuaHtmlWinTagEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLuaHtmlWinTagEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxLuaHtmlWinTagEvent_delete }};




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLuaHtmlWinTagEvent_methods[] = {
#if (wxLUA_USE_wxHTML && wxUSE_HTML) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow))
    { "GetHtmlParser", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLuaHtmlWinTagEvent_GetHtmlParser, 1, NULL },
    { "GetHtmlTag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLuaHtmlWinTagEvent_GetHtmlTag, 1, NULL },
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow))

    { "GetParseInnerCalled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLuaHtmlWinTagEvent_GetParseInnerCalled, 1, NULL },
    { "SetParseInnerCalled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLuaHtmlWinTagEvent_SetParseInnerCalled, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxLuaHtmlWinTagEvent_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxLuaHtmlWinTagEvent_methodCount = sizeof(wxLuaHtmlWinTagEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow)


#if wxLUA_USE_wxHTML && wxUSE_HTML
// ---------------------------------------------------------------------------
// Bind class wxHtmlParser
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlParser'
int wxluatype_wxHtmlParser = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlParser_DoParsing1[] = { &wxluatype_wxHtmlParser, NULL };
static int LUACALL wxLua_wxHtmlParser_DoParsing1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlParser_DoParsing1[1] = {{ wxLua_wxHtmlParser_DoParsing1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlParser_DoParsing1 }};
//     void DoParsing()
static int LUACALL wxLua_wxHtmlParser_DoParsing1(lua_State *L)
{
    // get this
    wxHtmlParser * self = (wxHtmlParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlParser);
    // call DoParsing
    self->DoParsing();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlParser_DoParsing[] = { &wxluatype_wxHtmlParser, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlParser_DoParsing(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlParser_DoParsing[1] = {{ wxLua_wxHtmlParser_DoParsing, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxHtmlParser_DoParsing }};
//     void DoParsing(int begin_pos, int end_pos)
static int LUACALL wxLua_wxHtmlParser_DoParsing(lua_State *L)
{
    // int end_pos
    int end_pos = (int)wxlua_getnumbertype(L, 3);
    // int begin_pos
    int begin_pos = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlParser * self = (wxHtmlParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlParser);
    // call DoParsing
    self->DoParsing(begin_pos, end_pos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlParser_DoneParser[] = { &wxluatype_wxHtmlParser, NULL };
static int LUACALL wxLua_wxHtmlParser_DoneParser(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlParser_DoneParser[1] = {{ wxLua_wxHtmlParser_DoneParser, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlParser_DoneParser }};
//     virtual void DoneParser()
static int LUACALL wxLua_wxHtmlParser_DoneParser(lua_State *L)
{
    // get this
    wxHtmlParser * self = (wxHtmlParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlParser);
    // call DoneParser
    self->DoneParser();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlParser_InitParser[] = { &wxluatype_wxHtmlParser, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlParser_InitParser(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlParser_InitParser[1] = {{ wxLua_wxHtmlParser_InitParser, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlParser_InitParser }};
//     void InitParser(const wxString& source)
static int LUACALL wxLua_wxHtmlParser_InitParser(lua_State *L)
{
    // const wxString source
    const wxString source = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlParser * self = (wxHtmlParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlParser);
    // call InitParser
    self->InitParser(source);

    return 0;
}




#if (wxLUA_USE_wxHTML && wxUSE_HTML)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlParser_DoParsing_overload[] =
{
    { wxLua_wxHtmlParser_DoParsing1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlParser_DoParsing1 },
    { wxLua_wxHtmlParser_DoParsing, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxHtmlParser_DoParsing },
};
static int s_wxluafunc_wxLua_wxHtmlParser_DoParsing_overload_count = sizeof(s_wxluafunc_wxLua_wxHtmlParser_DoParsing_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxHTML && wxUSE_HTML)

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlParser_methods[] = {
#if (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "DoParsing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlParser_DoParsing_overload, s_wxluafunc_wxLua_wxHtmlParser_DoParsing_overload_count, 0 },
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "DoneParser", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlParser_DoneParser, 1, NULL },
    { "InitParser", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlParser_InitParser, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxHtmlParser_methodCount = sizeof(wxHtmlParser_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxHTML && wxUSE_HTML


#if wxLUA_USE_wxHTML && wxUSE_HTML
// ---------------------------------------------------------------------------
// Bind class wxHtmlWinParser
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlWinParser'
int wxluatype_wxHtmlWinParser = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_CloseContainer[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_CloseContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_CloseContainer[1] = {{ wxLua_wxHtmlWinParser_CloseContainer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_CloseContainer }};
//     wxHtmlContainerCell* CloseContainer()
static int LUACALL wxLua_wxHtmlWinParser_CloseContainer(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call CloseContainer
    wxHtmlContainerCell* returns = (wxHtmlContainerCell*)self->CloseContainer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlContainerCell);

    return 1;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_CreateCurrentFont[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_CreateCurrentFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_CreateCurrentFont[1] = {{ wxLua_wxHtmlWinParser_CreateCurrentFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_CreateCurrentFont }};
//     wxFont* CreateCurrentFont()
static int LUACALL wxLua_wxHtmlWinParser_CreateCurrentFont(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call CreateCurrentFont
    wxFont* returns = (wxFont*)self->CreateCurrentFont();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxHTML && wxUSE_HTML)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_GetActualColor[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_GetActualColor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_GetActualColor[1] = {{ wxLua_wxHtmlWinParser_GetActualColor, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_GetActualColor }};
//     wxColour GetActualColor() const
static int LUACALL wxLua_wxHtmlWinParser_GetActualColor(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call GetActualColor
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetActualColor());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_GetAlign[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_GetAlign(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_GetAlign[1] = {{ wxLua_wxHtmlWinParser_GetAlign, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_GetAlign }};
//     int GetAlign() const
static int LUACALL wxLua_wxHtmlWinParser_GetAlign(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call GetAlign
    int returns = (self->GetAlign());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_GetCharHeight[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_GetCharHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_GetCharHeight[1] = {{ wxLua_wxHtmlWinParser_GetCharHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_GetCharHeight }};
//     int GetCharHeight() const
static int LUACALL wxLua_wxHtmlWinParser_GetCharHeight(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call GetCharHeight
    int returns = (self->GetCharHeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_GetCharWidth[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_GetCharWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_GetCharWidth[1] = {{ wxLua_wxHtmlWinParser_GetCharWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_GetCharWidth }};
//     int GetCharWidth() const
static int LUACALL wxLua_wxHtmlWinParser_GetCharWidth(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call GetCharWidth
    int returns = (self->GetCharWidth());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_GetContainer[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_GetContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_GetContainer[1] = {{ wxLua_wxHtmlWinParser_GetContainer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_GetContainer }};
//     wxHtmlContainerCell* GetContainer() const
static int LUACALL wxLua_wxHtmlWinParser_GetContainer(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call GetContainer
    wxHtmlContainerCell* returns = (wxHtmlContainerCell*)self->GetContainer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlContainerCell);

    return 1;
}


#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_GetDC[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_GetDC(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_GetDC[1] = {{ wxLua_wxHtmlWinParser_GetDC, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_GetDC }};
//     wxDC* GetDC()
static int LUACALL wxLua_wxHtmlWinParser_GetDC(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call GetDC
    wxDC* returns = (wxDC*)self->GetDC();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDC);

    return 1;
}

#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxHTML && wxUSE_HTML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_GetFontBold[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_GetFontBold(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_GetFontBold[1] = {{ wxLua_wxHtmlWinParser_GetFontBold, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_GetFontBold }};
//     int GetFontBold() const
static int LUACALL wxLua_wxHtmlWinParser_GetFontBold(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call GetFontBold
    int returns = (self->GetFontBold());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_GetFontFace[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_GetFontFace(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_GetFontFace[1] = {{ wxLua_wxHtmlWinParser_GetFontFace, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_GetFontFace }};
//     wxString GetFontFace() const
static int LUACALL wxLua_wxHtmlWinParser_GetFontFace(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call GetFontFace
    wxString returns = (self->GetFontFace());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_GetFontFixed[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_GetFontFixed(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_GetFontFixed[1] = {{ wxLua_wxHtmlWinParser_GetFontFixed, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_GetFontFixed }};
//     int GetFontFixed() const
static int LUACALL wxLua_wxHtmlWinParser_GetFontFixed(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call GetFontFixed
    int returns = (self->GetFontFixed());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_GetFontItalic[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_GetFontItalic(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_GetFontItalic[1] = {{ wxLua_wxHtmlWinParser_GetFontItalic, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_GetFontItalic }};
//     int GetFontItalic() const
static int LUACALL wxLua_wxHtmlWinParser_GetFontItalic(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call GetFontItalic
    int returns = (self->GetFontItalic());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_GetFontSize[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_GetFontSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_GetFontSize[1] = {{ wxLua_wxHtmlWinParser_GetFontSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_GetFontSize }};
//     int GetFontSize() const
static int LUACALL wxLua_wxHtmlWinParser_GetFontSize(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call GetFontSize
    int returns = (self->GetFontSize());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_GetFontUnderlined[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_GetFontUnderlined(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_GetFontUnderlined[1] = {{ wxLua_wxHtmlWinParser_GetFontUnderlined, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_GetFontUnderlined }};
//     int GetFontUnderlined() const
static int LUACALL wxLua_wxHtmlWinParser_GetFontUnderlined(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call GetFontUnderlined
    int returns = (self->GetFontUnderlined());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_GetLink[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_GetLink(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_GetLink[1] = {{ wxLua_wxHtmlWinParser_GetLink, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_GetLink }};
//     const wxHtmlLinkInfo& GetLink() const
static int LUACALL wxLua_wxHtmlWinParser_GetLink(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call GetLink
    const wxHtmlLinkInfo* returns = &self->GetLink();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlLinkInfo);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_GetLinkColor[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_GetLinkColor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_GetLinkColor[1] = {{ wxLua_wxHtmlWinParser_GetLinkColor, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_GetLinkColor }};
//     wxColour GetLinkColor() const
static int LUACALL wxLua_wxHtmlWinParser_GetLinkColor(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call GetLinkColor
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetLinkColor());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_GetWindow[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_GetWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_GetWindow[1] = {{ wxLua_wxHtmlWinParser_GetWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_GetWindow }};
//     !%wxchkver_2_8 wxWindow* GetWindow()
static int LUACALL wxLua_wxHtmlWinParser_GetWindow(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call GetWindow
    wxWindow* returns = (wxWindow*)self->GetWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)

#if ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML))
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_GetWindowInterface[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_GetWindowInterface(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_GetWindowInterface[1] = {{ wxLua_wxHtmlWinParser_GetWindowInterface, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_GetWindowInterface }};
//     %wxchkver_2_8 wxHtmlWindowInterface *GetWindowInterface()
static int LUACALL wxLua_wxHtmlWinParser_GetWindowInterface(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call GetWindowInterface
    wxHtmlWindowInterface* returns = (wxHtmlWindowInterface*)self->GetWindowInterface();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlWindowInterface);

    return 1;
}

#endif // ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML))

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_OpenContainer[] = { &wxluatype_wxHtmlWinParser, NULL };
static int LUACALL wxLua_wxHtmlWinParser_OpenContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_OpenContainer[1] = {{ wxLua_wxHtmlWinParser_OpenContainer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_OpenContainer }};
//     wxHtmlContainerCell* OpenContainer()
static int LUACALL wxLua_wxHtmlWinParser_OpenContainer(lua_State *L)
{
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call OpenContainer
    wxHtmlContainerCell* returns = (wxHtmlContainerCell*)self->OpenContainer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlContainerCell);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_SetActualColor[] = { &wxluatype_wxHtmlWinParser, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxHtmlWinParser_SetActualColor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_SetActualColor[1] = {{ wxLua_wxHtmlWinParser_SetActualColor, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWinParser_SetActualColor }};
//     void SetActualColor(const wxColour& clr)
static int LUACALL wxLua_wxHtmlWinParser_SetActualColor(lua_State *L)
{
    // const wxColour clr
    const wxColour * clr = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call SetActualColor
    self->SetActualColor(*clr);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_SetAlign[] = { &wxluatype_wxHtmlWinParser, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlWinParser_SetAlign(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_SetAlign[1] = {{ wxLua_wxHtmlWinParser_SetAlign, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWinParser_SetAlign }};
//     void SetAlign(int a)
static int LUACALL wxLua_wxHtmlWinParser_SetAlign(lua_State *L)
{
    // int a
    int a = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call SetAlign
    self->SetAlign(a);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_SetContainer[] = { &wxluatype_wxHtmlWinParser, &wxluatype_wxHtmlContainerCell, NULL };
static int LUACALL wxLua_wxHtmlWinParser_SetContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_SetContainer[1] = {{ wxLua_wxHtmlWinParser_SetContainer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWinParser_SetContainer }};
//     wxHtmlContainerCell* SetContainer(wxHtmlContainerCell *c)
static int LUACALL wxLua_wxHtmlWinParser_SetContainer(lua_State *L)
{
    // wxHtmlContainerCell c
    wxHtmlContainerCell * c = (wxHtmlContainerCell *)wxluaT_getuserdatatype(L, 2, wxluatype_wxHtmlContainerCell);
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call SetContainer
    wxHtmlContainerCell* returns = (wxHtmlContainerCell*)self->SetContainer(c);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlContainerCell);

    return 1;
}


#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_SetDC[] = { &wxluatype_wxHtmlWinParser, &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlWinParser_SetDC(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_SetDC[1] = {{ wxLua_wxHtmlWinParser_SetDC, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlWinParser_SetDC }};
//     void SetDC(wxDC *dc, double pixel_scale = 1.0)
static int LUACALL wxLua_wxHtmlWinParser_SetDC(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // double pixel_scale = 1.0
    double pixel_scale = (argCount >= 3 ? (double)wxlua_getnumbertype(L, 3) : 1.0);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call SetDC
    self->SetDC(dc, pixel_scale);

    return 0;
}

#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxHTML && wxUSE_HTML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_SetFontBold[] = { &wxluatype_wxHtmlWinParser, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlWinParser_SetFontBold(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_SetFontBold[1] = {{ wxLua_wxHtmlWinParser_SetFontBold, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWinParser_SetFontBold }};
//     void SetFontBold(int x)
static int LUACALL wxLua_wxHtmlWinParser_SetFontBold(lua_State *L)
{
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call SetFontBold
    self->SetFontBold(x);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_SetFontFace[] = { &wxluatype_wxHtmlWinParser, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlWinParser_SetFontFace(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_SetFontFace[1] = {{ wxLua_wxHtmlWinParser_SetFontFace, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWinParser_SetFontFace }};
//     void SetFontFace(const wxString& face)
static int LUACALL wxLua_wxHtmlWinParser_SetFontFace(lua_State *L)
{
    // const wxString face
    const wxString face = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call SetFontFace
    self->SetFontFace(face);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_SetFontFixed[] = { &wxluatype_wxHtmlWinParser, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlWinParser_SetFontFixed(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_SetFontFixed[1] = {{ wxLua_wxHtmlWinParser_SetFontFixed, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWinParser_SetFontFixed }};
//     void SetFontFixed(int x)
static int LUACALL wxLua_wxHtmlWinParser_SetFontFixed(lua_State *L)
{
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call SetFontFixed
    self->SetFontFixed(x);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_SetFontItalic[] = { &wxluatype_wxHtmlWinParser, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlWinParser_SetFontItalic(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_SetFontItalic[1] = {{ wxLua_wxHtmlWinParser_SetFontItalic, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWinParser_SetFontItalic }};
//     void SetFontItalic(int x)
static int LUACALL wxLua_wxHtmlWinParser_SetFontItalic(lua_State *L)
{
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call SetFontItalic
    self->SetFontItalic(x);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_SetFontSize[] = { &wxluatype_wxHtmlWinParser, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlWinParser_SetFontSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_SetFontSize[1] = {{ wxLua_wxHtmlWinParser_SetFontSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWinParser_SetFontSize }};
//     void SetFontSize(int s)
static int LUACALL wxLua_wxHtmlWinParser_SetFontSize(lua_State *L)
{
    // int s
    int s = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call SetFontSize
    self->SetFontSize(s);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_SetFontUnderlined[] = { &wxluatype_wxHtmlWinParser, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlWinParser_SetFontUnderlined(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_SetFontUnderlined[1] = {{ wxLua_wxHtmlWinParser_SetFontUnderlined, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWinParser_SetFontUnderlined }};
//     void SetFontUnderlined(int x)
static int LUACALL wxLua_wxHtmlWinParser_SetFontUnderlined(lua_State *L)
{
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call SetFontUnderlined
    self->SetFontUnderlined(x);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_SetFonts[] = { &wxluatype_wxHtmlWinParser, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TTABLE, NULL };
static int LUACALL wxLua_wxHtmlWinParser_SetFonts(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_SetFonts[1] = {{ wxLua_wxHtmlWinParser_SetFonts, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxHtmlWinParser_SetFonts }};
// %override wxLua_wxHtmlWinParser_SetFonts
// void SetFonts(wxString normal_face, wxString fixed_face, const int *sizes)
static int LUACALL wxLua_wxHtmlWinParser_SetFonts(lua_State *L)
{
    // const int *sizes
#ifdef __WXMSW__
    int sizes[7] = { 7,8,10,12,16,22,30 };
#else
    int sizes[7] = { 10,12,14,16,19,24,32 };
#endif

    const int arraySize = sizeof(sizes)/sizeof(sizes[0]);

    int argCount = lua_gettop(L);

    if (argCount >= 4)
    {
        if (lua_istable(L, 4))
        {
            int count = 0;

            int *sizeArray = wxlua_getintarray(L, 4, count);

            if (count > arraySize)
                count = arraySize;

            memcpy(sizes, sizeArray, count * sizeof(int));

            delete[] sizeArray;
        }
        else
        {
            int idx;

            if (argCount > 4 + arraySize)
                argCount = 4 + arraySize;

            for (idx = 4; idx < argCount; ++idx)
                sizes[idx - 4] = (int)lua_tonumber(L, idx);
        }
    }

    // wxString fixed_face
    wxString fixed_face = wxlua_getwxStringtype(L, 3);
    // wxString normal_face
    wxString normal_face = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlWinParser *self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call SetFonts
    self->SetFonts(normal_face, fixed_face, sizes);
    // return the number of parameters
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_SetLink[] = { &wxluatype_wxHtmlWinParser, &wxluatype_wxHtmlLinkInfo, NULL };
static int LUACALL wxLua_wxHtmlWinParser_SetLink(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_SetLink[1] = {{ wxLua_wxHtmlWinParser_SetLink, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWinParser_SetLink }};
//     void SetLink(const wxHtmlLinkInfo& link)
static int LUACALL wxLua_wxHtmlWinParser_SetLink(lua_State *L)
{
    // const wxHtmlLinkInfo link
    const wxHtmlLinkInfo * link = (const wxHtmlLinkInfo *)wxluaT_getuserdatatype(L, 2, wxluatype_wxHtmlLinkInfo);
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call SetLink
    self->SetLink(*link);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_SetLinkColor[] = { &wxluatype_wxHtmlWinParser, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxHtmlWinParser_SetLinkColor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_SetLinkColor[1] = {{ wxLua_wxHtmlWinParser_SetLinkColor, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWinParser_SetLinkColor }};
//     void SetLinkColor(const wxColour& clr)
static int LUACALL wxLua_wxHtmlWinParser_SetLinkColor(lua_State *L)
{
    // const wxColour clr
    const wxColour * clr = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxHtmlWinParser * self = (wxHtmlWinParser *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWinParser);
    // call SetLinkColor
    self->SetLinkColor(*clr);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWinParser_constructor[] = { &wxluatype_wxHtmlWindow, NULL };
static int LUACALL wxLua_wxHtmlWinParser_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWinParser_constructor[1] = {{ wxLua_wxHtmlWinParser_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWinParser_constructor }};
//     wxHtmlWinParser(wxHtmlWindow *wnd)
static int LUACALL wxLua_wxHtmlWinParser_constructor(lua_State *L)
{
    // wxHtmlWindow wnd
    wxHtmlWindow * wnd = (wxHtmlWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindow);
    // call constructor
    wxHtmlWinParser* returns = new wxHtmlWinParser(wnd);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlWinParser);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlWinParser_methods[] = {
    { "CloseContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_CloseContainer, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "CreateCurrentFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_CreateCurrentFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxHTML && wxUSE_HTML)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "GetActualColor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_GetActualColor, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "GetAlign", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_GetAlign, 1, NULL },
    { "GetCharHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_GetCharHeight, 1, NULL },
    { "GetCharWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_GetCharWidth, 1, NULL },
    { "GetContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_GetContainer, 1, NULL },

#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "GetDC", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_GetDC, 1, NULL },
#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "GetFontBold", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_GetFontBold, 1, NULL },
    { "GetFontFace", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_GetFontFace, 1, NULL },
    { "GetFontFixed", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_GetFontFixed, 1, NULL },
    { "GetFontItalic", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_GetFontItalic, 1, NULL },
    { "GetFontSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_GetFontSize, 1, NULL },
    { "GetFontUnderlined", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_GetFontUnderlined, 1, NULL },
    { "GetLink", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_GetLink, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "GetLinkColor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_GetLinkColor, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "GetWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_GetWindow, 1, NULL },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)

#if ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML))
    { "GetWindowInterface", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_GetWindowInterface, 1, NULL },
#endif // ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML))

    { "OpenContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_OpenContainer, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "SetActualColor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_SetActualColor, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "SetAlign", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_SetAlign, 1, NULL },
    { "SetContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_SetContainer, 1, NULL },

#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "SetDC", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_SetDC, 1, NULL },
#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "SetFontBold", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_SetFontBold, 1, NULL },
    { "SetFontFace", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_SetFontFace, 1, NULL },
    { "SetFontFixed", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_SetFontFixed, 1, NULL },
    { "SetFontItalic", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_SetFontItalic, 1, NULL },
    { "SetFontSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_SetFontSize, 1, NULL },
    { "SetFontUnderlined", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_SetFontUnderlined, 1, NULL },
    { "SetFonts", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_SetFonts, 1, NULL },
    { "SetLink", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_SetLink, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "SetLinkColor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWinParser_SetLinkColor, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "wxHtmlWinParser", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHtmlWinParser_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxHtmlWinParser_methodCount = sizeof(wxHtmlWinParser_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxHTML && wxUSE_HTML


#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxHtmlWindowInterface
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlWindowInterface'
int wxluatype_wxHtmlWindowInterface = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindowInterface_GetHTMLBackgroundColour[] = { &wxluatype_wxHtmlWindowInterface, NULL };
static int LUACALL wxLua_wxHtmlWindowInterface_GetHTMLBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindowInterface_GetHTMLBackgroundColour[1] = {{ wxLua_wxHtmlWindowInterface_GetHTMLBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWindowInterface_GetHTMLBackgroundColour }};
//     virtual wxColour GetHTMLBackgroundColour() const
static int LUACALL wxLua_wxHtmlWindowInterface_GetHTMLBackgroundColour(lua_State *L)
{
    // get this
    wxHtmlWindowInterface * self = (wxHtmlWindowInterface *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindowInterface);
    // call GetHTMLBackgroundColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetHTMLBackgroundColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxColour*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxCursor) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindowInterface_GetHTMLCursor[] = { &wxluatype_wxHtmlWindowInterface, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxHtmlWindowInterface_GetHTMLCursor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindowInterface_GetHTMLCursor[1] = {{ wxLua_wxHtmlWindowInterface_GetHTMLCursor, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWindowInterface_GetHTMLCursor }};
//     virtual wxCursor GetHTMLCursor(wxHtmlWindowInterface::HTMLCursor type) const
static int LUACALL wxLua_wxHtmlWindowInterface_GetHTMLCursor(lua_State *L)
{
    // wxHtmlWindowInterface::HTMLCursor type
    wxHtmlWindowInterface::HTMLCursor type = (wxHtmlWindowInterface::HTMLCursor)wxlua_getenumtype(L, 2);
    // get this
    wxHtmlWindowInterface * self = (wxHtmlWindowInterface *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindowInterface);
    // call GetHTMLCursor
    // allocate a new object using the copy constructor
    wxCursor* returns = new wxCursor(self->GetHTMLCursor(type));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (wxCursor*)returns);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCursor);

    return 1;
}

#endif // (wxLUA_USE_wxCursor) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindowInterface_GetHTMLWindow[] = { &wxluatype_wxHtmlWindowInterface, NULL };
static int LUACALL wxLua_wxHtmlWindowInterface_GetHTMLWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindowInterface_GetHTMLWindow[1] = {{ wxLua_wxHtmlWindowInterface_GetHTMLWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlWindowInterface_GetHTMLWindow }};
//     virtual wxWindow* GetHTMLWindow()
static int LUACALL wxLua_wxHtmlWindowInterface_GetHTMLWindow(lua_State *L)
{
    // get this
    wxHtmlWindowInterface * self = (wxHtmlWindowInterface *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindowInterface);
    // call GetHTMLWindow
    wxWindow* returns = (wxWindow*)self->GetHTMLWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}


#if (((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxHTML && wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindowInterface_HTMLCoordsToWindow[] = { &wxluatype_wxHtmlWindowInterface, &wxluatype_wxHtmlCell, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxHtmlWindowInterface_HTMLCoordsToWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindowInterface_HTMLCoordsToWindow[1] = {{ wxLua_wxHtmlWindowInterface_HTMLCoordsToWindow, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxHtmlWindowInterface_HTMLCoordsToWindow }};
//     virtual wxPoint HTMLCoordsToWindow(wxHtmlCell *cell, const wxPoint& pos) const
static int LUACALL wxLua_wxHtmlWindowInterface_HTMLCoordsToWindow(lua_State *L)
{
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint);
    // wxHtmlCell cell
    wxHtmlCell * cell = (wxHtmlCell *)wxluaT_getuserdatatype(L, 2, wxluatype_wxHtmlCell);
    // get this
    wxHtmlWindowInterface * self = (wxHtmlWindowInterface *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindowInterface);
    // call HTMLCoordsToWindow
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->HTMLCoordsToWindow(cell, *pos));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxPoint((wxPoint*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxHTML && wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxHTML && wxUSE_HTML) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindowInterface_OnHTMLLinkClicked[] = { &wxluatype_wxHtmlWindowInterface, &wxluatype_wxHtmlLinkInfo, NULL };
static int LUACALL wxLua_wxHtmlWindowInterface_OnHTMLLinkClicked(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindowInterface_OnHTMLLinkClicked[1] = {{ wxLua_wxHtmlWindowInterface_OnHTMLLinkClicked, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWindowInterface_OnHTMLLinkClicked }};
//     virtual void OnHTMLLinkClicked(const wxHtmlLinkInfo& link)
static int LUACALL wxLua_wxHtmlWindowInterface_OnHTMLLinkClicked(lua_State *L)
{
    // const wxHtmlLinkInfo link
    const wxHtmlLinkInfo * link = (const wxHtmlLinkInfo *)wxluaT_getuserdatatype(L, 2, wxluatype_wxHtmlLinkInfo);
    // get this
    wxHtmlWindowInterface * self = (wxHtmlWindowInterface *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindowInterface);
    // call OnHTMLLinkClicked
    self->OnHTMLLinkClicked(*link);

    return 0;
}

#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindowInterface_SetHTMLBackgroundColour[] = { &wxluatype_wxHtmlWindowInterface, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxHtmlWindowInterface_SetHTMLBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindowInterface_SetHTMLBackgroundColour[1] = {{ wxLua_wxHtmlWindowInterface_SetHTMLBackgroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWindowInterface_SetHTMLBackgroundColour }};
//     virtual void SetHTMLBackgroundColour(const wxColour& clr)
static int LUACALL wxLua_wxHtmlWindowInterface_SetHTMLBackgroundColour(lua_State *L)
{
    // const wxColour clr
    const wxColour * clr = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxHtmlWindowInterface * self = (wxHtmlWindowInterface *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindowInterface);
    // call SetHTMLBackgroundColour
    self->SetHTMLBackgroundColour(*clr);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxBitmap) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindowInterface_SetHTMLBackgroundImage[] = { &wxluatype_wxHtmlWindowInterface, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxHtmlWindowInterface_SetHTMLBackgroundImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindowInterface_SetHTMLBackgroundImage[1] = {{ wxLua_wxHtmlWindowInterface_SetHTMLBackgroundImage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWindowInterface_SetHTMLBackgroundImage }};
//     virtual void SetHTMLBackgroundImage(const wxBitmap& bmpBg)
static int LUACALL wxLua_wxHtmlWindowInterface_SetHTMLBackgroundImage(lua_State *L)
{
    // const wxBitmap bmpBg
    const wxBitmap * bmpBg = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxHtmlWindowInterface * self = (wxHtmlWindowInterface *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindowInterface);
    // call SetHTMLBackgroundImage
    self->SetHTMLBackgroundImage(*bmpBg);

    return 0;
}

#endif // (wxLUA_USE_wxBitmap) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindowInterface_SetHTMLStatusText[] = { &wxluatype_wxHtmlWindowInterface, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlWindowInterface_SetHTMLStatusText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindowInterface_SetHTMLStatusText[1] = {{ wxLua_wxHtmlWindowInterface_SetHTMLStatusText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWindowInterface_SetHTMLStatusText }};
//     virtual void SetHTMLStatusText(const wxString& text)
static int LUACALL wxLua_wxHtmlWindowInterface_SetHTMLStatusText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlWindowInterface * self = (wxHtmlWindowInterface *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindowInterface);
    // call SetHTMLStatusText
    self->SetHTMLStatusText(text);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlWindowInterface_SetHTMLWindowTitle[] = { &wxluatype_wxHtmlWindowInterface, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlWindowInterface_SetHTMLWindowTitle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlWindowInterface_SetHTMLWindowTitle[1] = {{ wxLua_wxHtmlWindowInterface_SetHTMLWindowTitle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlWindowInterface_SetHTMLWindowTitle }};
//     virtual void SetHTMLWindowTitle(const wxString& title)
static int LUACALL wxLua_wxHtmlWindowInterface_SetHTMLWindowTitle(lua_State *L)
{
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlWindowInterface * self = (wxHtmlWindowInterface *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlWindowInterface);
    // call SetHTMLWindowTitle
    self->SetHTMLWindowTitle(title);

    return 0;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlWindowInterface_methods[] = {
#if (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
    { "GetHTMLBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindowInterface_GetHTMLBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxCursor) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
    { "GetHTMLCursor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindowInterface_GetHTMLCursor, 1, NULL },
#endif // (wxLUA_USE_wxCursor) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

    { "GetHTMLWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindowInterface_GetHTMLWindow, 1, NULL },

#if (((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxHTML && wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
    { "HTMLCoordsToWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindowInterface_HTMLCoordsToWindow, 1, NULL },
#endif // (((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))) && (wxLUA_USE_wxHTML && wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)

#if (wxLUA_USE_wxHTML && wxUSE_HTML) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
    { "OnHTMLLinkClicked", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindowInterface_OnHTMLLinkClicked, 1, NULL },
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
    { "SetHTMLBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindowInterface_SetHTMLBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

#if (wxLUA_USE_wxBitmap) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
    { "SetHTMLBackgroundImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindowInterface_SetHTMLBackgroundImage, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

    { "SetHTMLStatusText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindowInterface_SetHTMLStatusText, 1, NULL },
    { "SetHTMLWindowTitle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlWindowInterface_SetHTMLWindowTitle, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxHtmlWindowInterface_methodCount = sizeof(wxHtmlWindowInterface_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxHtmlWindowInterface_enums[] = {
#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))
        { "HTMLCursor_Default", wxHtmlWindowInterface::HTMLCursor_Default },
        { "HTMLCursor_Link", wxHtmlWindowInterface::HTMLCursor_Link },
        { "HTMLCursor_Text", wxHtmlWindowInterface::HTMLCursor_Text },
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))

    { NULL, 0, },
};
int wxHtmlWindowInterface_enumCount = sizeof(wxHtmlWindowInterface_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))


#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))
// ---------------------------------------------------------------------------
// Bind class wxSimpleHtmlListBox
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSimpleHtmlListBox'
int wxluatype_wxSimpleHtmlListBox = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Append3[] = { &wxluatype_wxSimpleHtmlListBox, &wxluatype_TSTRING, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxSimpleHtmlListBox_Append3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_Append3[1] = {{ wxLua_wxSimpleHtmlListBox_Append3, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Append3 }};
//     int Append(const wxString& item, wxClientData *clientData)
static int LUACALL wxLua_wxSimpleHtmlListBox_Append3(lua_State *L)
{
    // wxClientData clientData
    wxClientData * clientData = (wxClientData *)wxluaT_getuserdatatype(L, 3, wxluatype_wxClientData);
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 2);
    // get this
    wxSimpleHtmlListBox * self = (wxSimpleHtmlListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSimpleHtmlListBox);
    // call Append
    int returns = (self->Append(item, clientData));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Append2[] = { &wxluatype_wxSimpleHtmlListBox, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSimpleHtmlListBox_Append2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_Append2[1] = {{ wxLua_wxSimpleHtmlListBox_Append2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Append2 }};
//     int Append(const wxString& item, voidptr_long number) // C++ is (void *clientData) You can put a number here
static int LUACALL wxLua_wxSimpleHtmlListBox_Append2(lua_State *L)
{
    // voidptr_long number
    long number = (long)wxlua_getnumbertype(L, 3);
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 2);
    // get this
    wxSimpleHtmlListBox * self = (wxSimpleHtmlListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSimpleHtmlListBox);
    // call Append
    int returns = (self->Append(item, (void*)number));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Append1[] = { &wxluatype_wxSimpleHtmlListBox, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSimpleHtmlListBox_Append1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_Append1[1] = {{ wxLua_wxSimpleHtmlListBox_Append1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Append1 }};
//     int Append(const wxString& item)
static int LUACALL wxLua_wxSimpleHtmlListBox_Append1(lua_State *L)
{
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 2);
    // get this
    wxSimpleHtmlListBox * self = (wxSimpleHtmlListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSimpleHtmlListBox);
    // call Append
    int returns = (self->Append(item));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Append[] = { &wxluatype_wxSimpleHtmlListBox, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxSimpleHtmlListBox_Append(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_Append[1] = {{ wxLua_wxSimpleHtmlListBox_Append, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Append }};
//     void Append(const wxArrayString& strings)
static int LUACALL wxLua_wxSimpleHtmlListBox_Append(lua_State *L)
{
    // const wxArrayString strings
    wxLuaSmartwxArrayString strings = wxlua_getwxArrayString(L, 2);
    // get this
    wxSimpleHtmlListBox * self = (wxSimpleHtmlListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSimpleHtmlListBox);
    // call Append
    self->Append(strings);

    return 0;
}

#endif // (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Clear[] = { &wxluatype_wxSimpleHtmlListBox, NULL };
static int LUACALL wxLua_wxSimpleHtmlListBox_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_Clear[1] = {{ wxLua_wxSimpleHtmlListBox_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Clear }};
//     virtual void Clear()
static int LUACALL wxLua_wxSimpleHtmlListBox_Clear(lua_State *L)
{
    // get this
    wxSimpleHtmlListBox * self = (wxSimpleHtmlListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSimpleHtmlListBox);
    // call Clear
    self->Clear();

    return 0;
}


#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Create[] = { &wxluatype_wxSimpleHtmlListBox, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayString, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSimpleHtmlListBox_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_Create[1] = {{ wxLua_wxSimpleHtmlListBox_Create, WXLUAMETHOD_METHOD, 6, 9, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Create }};
//     bool Create(wxWindow *parent, wxWindowID id, const wxPoint& pos, const wxSize& size, const wxArrayString& choices, long style = wxHLB_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxSimpleHtmlListBox")
static int LUACALL wxLua_wxSimpleHtmlListBox_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxSimpleHtmlListBox"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxSimpleHtmlListBox")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxHLB_DEFAULT_STYLE
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxHLB_DEFAULT_STYLE);
    // const wxArrayString choices
    wxLuaSmartwxArrayString choices = wxlua_getwxArrayString(L, 6);
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize);
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSimpleHtmlListBox * self = (wxSimpleHtmlListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSimpleHtmlListBox);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, choices, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Delete[] = { &wxluatype_wxSimpleHtmlListBox, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSimpleHtmlListBox_Delete(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_Delete[1] = {{ wxLua_wxSimpleHtmlListBox_Delete, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Delete }};
//     virtual void Delete(unsigned int n)
static int LUACALL wxLua_wxSimpleHtmlListBox_Delete(lua_State *L)
{
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxSimpleHtmlListBox * self = (wxSimpleHtmlListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSimpleHtmlListBox);
    // call Delete
    self->Delete(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_GetCount[] = { &wxluatype_wxSimpleHtmlListBox, NULL };
static int LUACALL wxLua_wxSimpleHtmlListBox_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_GetCount[1] = {{ wxLua_wxSimpleHtmlListBox_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_GetCount }};
//     virtual unsigned int GetCount() const
static int LUACALL wxLua_wxSimpleHtmlListBox_GetCount(lua_State *L)
{
    // get this
    wxSimpleHtmlListBox * self = (wxSimpleHtmlListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSimpleHtmlListBox);
    // call GetCount
    unsigned int returns = (self->GetCount());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_GetSelection[] = { &wxluatype_wxSimpleHtmlListBox, NULL };
static int LUACALL wxLua_wxSimpleHtmlListBox_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_GetSelection[1] = {{ wxLua_wxSimpleHtmlListBox_GetSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_GetSelection }};
//     int GetSelection() const
static int LUACALL wxLua_wxSimpleHtmlListBox_GetSelection(lua_State *L)
{
    // get this
    wxSimpleHtmlListBox * self = (wxSimpleHtmlListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSimpleHtmlListBox);
    // call GetSelection
    int returns = (self->GetSelection());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_GetString[] = { &wxluatype_wxSimpleHtmlListBox, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSimpleHtmlListBox_GetString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_GetString[1] = {{ wxLua_wxSimpleHtmlListBox_GetString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_GetString }};
//     virtual wxString GetString(unsigned int n) const
static int LUACALL wxLua_wxSimpleHtmlListBox_GetString(lua_State *L)
{
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxSimpleHtmlListBox * self = (wxSimpleHtmlListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSimpleHtmlListBox);
    // call GetString
    wxString returns = (self->GetString(n));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
static wxLuaArgType s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_GetStrings[] = { &wxluatype_wxSimpleHtmlListBox, NULL };
static int LUACALL wxLua_wxSimpleHtmlListBox_GetStrings(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_GetStrings[1] = {{ wxLua_wxSimpleHtmlListBox_GetStrings, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_GetStrings }};
//     wxArrayString GetStrings() const
static int LUACALL wxLua_wxSimpleHtmlListBox_GetStrings(lua_State *L)
{
    // get this
    wxSimpleHtmlListBox * self = (wxSimpleHtmlListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSimpleHtmlListBox);
    // call GetStrings
    // allocate a new object using the copy constructor
    wxArrayString* returns = new wxArrayString(self->GetStrings());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, (void*)returns, new wxLua_wxObject_wxArrayString((wxArrayString*)returns));
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

#endif // (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

static wxLuaArgType s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_SetSelection[] = { &wxluatype_wxSimpleHtmlListBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSimpleHtmlListBox_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_SetSelection[1] = {{ wxLua_wxSimpleHtmlListBox_SetSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_SetSelection }};
//     void SetSelection(int n)
static int LUACALL wxLua_wxSimpleHtmlListBox_SetSelection(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSimpleHtmlListBox * self = (wxSimpleHtmlListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSimpleHtmlListBox);
    // call SetSelection
    self->SetSelection(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_SetString[] = { &wxluatype_wxSimpleHtmlListBox, &wxluatype_TINTEGER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSimpleHtmlListBox_SetString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_SetString[1] = {{ wxLua_wxSimpleHtmlListBox_SetString, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_SetString }};
//     virtual void SetString(unsigned int n, const wxString& s)
static int LUACALL wxLua_wxSimpleHtmlListBox_SetString(lua_State *L)
{
    // const wxString s
    const wxString s = wxlua_getwxStringtype(L, 3);
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxSimpleHtmlListBox * self = (wxSimpleHtmlListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSimpleHtmlListBox);
    // call SetString
    self->SetString(n, s);

    return 0;
}


#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayString, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSimpleHtmlListBox_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_constructor1[1] = {{ wxLua_wxSimpleHtmlListBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 5, 8, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_constructor1 }};
//     wxSimpleHtmlListBox(wxWindow *parent, wxWindowID id, const wxPoint& pos, const wxSize& size, const wxArrayString& choices, long style = wxHLB_DEFAULT_STYLE, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxSimpleHtmlListBox")
static int LUACALL wxLua_wxSimpleHtmlListBox_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxSimpleHtmlListBox"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxSimpleHtmlListBox")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxHLB_DEFAULT_STYLE
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxHLB_DEFAULT_STYLE);
    // const wxArrayString choices
    wxLuaSmartwxArrayString choices = wxlua_getwxArrayString(L, 5);
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize);
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxSimpleHtmlListBox* returns = new wxSimpleHtmlListBox(parent, id, *pos, *size, choices, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSimpleHtmlListBox);

    return 1;
}

#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxSimpleHtmlListBox_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_constructor[1] = {{ wxLua_wxSimpleHtmlListBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxSimpleHtmlListBox()
static int LUACALL wxLua_wxSimpleHtmlListBox_constructor(lua_State *L)
{
    // call constructor
    wxSimpleHtmlListBox* returns = new wxSimpleHtmlListBox();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSimpleHtmlListBox);

    return 1;
}




#if ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))||((wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_Append_overload[] =
{
    { wxLua_wxSimpleHtmlListBox_Append3, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Append3 },
    { wxLua_wxSimpleHtmlListBox_Append2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Append2 },
    { wxLua_wxSimpleHtmlListBox_Append1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Append1 },

#if (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
    { wxLua_wxSimpleHtmlListBox_Append, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_Append },
#endif // (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
};
static int s_wxluafunc_wxLua_wxSimpleHtmlListBox_Append_overload_count = sizeof(s_wxluafunc_wxLua_wxSimpleHtmlListBox_Append_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))||((wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))))

#if ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSimpleHtmlListBox_constructor_overload[] =
{

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxSimpleHtmlListBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 5, 8, s_wxluatypeArray_wxLua_wxSimpleHtmlListBox_constructor1 },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxSimpleHtmlListBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxSimpleHtmlListBox_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxSimpleHtmlListBox_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSimpleHtmlListBox_methods[] = {
#if ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))||((wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))))
    { "Append", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSimpleHtmlListBox_Append_overload, s_wxluafunc_wxLua_wxSimpleHtmlListBox_Append_overload_count, 0 },
#endif // ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))||((wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))))

    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSimpleHtmlListBox_Clear, 1, NULL },

#if (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSimpleHtmlListBox_Create, 1, NULL },
#endif // (((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect)

    { "Delete", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSimpleHtmlListBox_Delete, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSimpleHtmlListBox_GetCount, 1, NULL },
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSimpleHtmlListBox_GetSelection, 1, NULL },
    { "GetString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSimpleHtmlListBox_GetString, 1, NULL },

#if (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
    { "GetStrings", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSimpleHtmlListBox_GetStrings, 1, NULL },
#endif // (wxLUA_USE_wxArrayString) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSimpleHtmlListBox_SetSelection, 1, NULL },
    { "SetString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSimpleHtmlListBox_SetString, 1, NULL },

#if ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))
    { "wxSimpleHtmlListBox", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSimpleHtmlListBox_constructor_overload, s_wxluafunc_wxLua_wxSimpleHtmlListBox_constructor_overload_count, 0 },
#endif // ((((wxLUA_USE_wxValidator && wxUSE_VALIDATORS) && ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))) && (wxLUA_USE_wxArrayString)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0)))

    { 0, 0, 0, 0 },
};

int wxSimpleHtmlListBox_methodCount = sizeof(wxSimpleHtmlListBox_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))


#if wxLUA_USE_wxHTML && wxUSE_HTML
// ---------------------------------------------------------------------------
// Bind class wxHtmlDCRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlDCRenderer'
int wxluatype_wxHtmlDCRenderer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlDCRenderer_GetTotalHeight[] = { &wxluatype_wxHtmlDCRenderer, NULL };
static int LUACALL wxLua_wxHtmlDCRenderer_GetTotalHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlDCRenderer_GetTotalHeight[1] = {{ wxLua_wxHtmlDCRenderer_GetTotalHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlDCRenderer_GetTotalHeight }};
//     int GetTotalHeight()
static int LUACALL wxLua_wxHtmlDCRenderer_GetTotalHeight(lua_State *L)
{
    // get this
    wxHtmlDCRenderer * self = (wxHtmlDCRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlDCRenderer);
    // call GetTotalHeight
    int returns = (self->GetTotalHeight());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxArrayInt) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML))
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlDCRenderer_Render1[] = { &wxluatype_wxHtmlDCRenderer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxArrayInt, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlDCRenderer_Render1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlDCRenderer_Render1[1] = {{ wxLua_wxHtmlDCRenderer_Render1, WXLUAMETHOD_METHOD, 4, 7, s_wxluatypeArray_wxLua_wxHtmlDCRenderer_Render1 }};
//     %wxchkver_2_8 int Render(int x, int y, wxArrayInt& known_pagebreaks, int from = 0, int dont_render = false, int to = INT_MAX);
static int LUACALL wxLua_wxHtmlDCRenderer_Render1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int to = INT_MAX
    int to = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : INT_MAX);
    // int dont_render = false
    int dont_render = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : false);
    // int from = 0
    int from = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // wxArrayInt known_pagebreaks
    wxArrayInt * known_pagebreaks = (wxArrayInt *)wxluaT_getuserdatatype(L, 4, wxluatype_wxArrayInt);
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlDCRenderer * self = (wxHtmlDCRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlDCRenderer);
    // call Render
    int returns = (self->Render(x, y, *known_pagebreaks, from, dont_render, to));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxArrayInt) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML))

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlDCRenderer_Render[] = { &wxluatype_wxHtmlDCRenderer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlDCRenderer_Render(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlDCRenderer_Render[1] = {{ wxLua_wxHtmlDCRenderer_Render, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxHtmlDCRenderer_Render }};
//     !%wxchkver_2_8 int Render(int x, int y, int from = 0, int dont_render = false) //, int *known_pagebreaks = NULL, int number_of_pages = 0)
static int LUACALL wxLua_wxHtmlDCRenderer_Render(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int dont_render = false
    int dont_render = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : false);
    // int from = 0
    int from = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlDCRenderer * self = (wxHtmlDCRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlDCRenderer);
    // call Render
    int returns = (self->Render(x, y, from, dont_render));
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)

#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlDCRenderer_SetDC[] = { &wxluatype_wxHtmlDCRenderer, &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlDCRenderer_SetDC(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlDCRenderer_SetDC[1] = {{ wxLua_wxHtmlDCRenderer_SetDC, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlDCRenderer_SetDC }};
//     void SetDC(wxDC* dc, double pixel_scale = 1.0)
static int LUACALL wxLua_wxHtmlDCRenderer_SetDC(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // double pixel_scale = 1.0
    double pixel_scale = (argCount >= 3 ? (double)wxlua_getnumbertype(L, 3) : 1.0);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxHtmlDCRenderer * self = (wxHtmlDCRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlDCRenderer);
    // call SetDC
    self->SetDC(dc, pixel_scale);

    return 0;
}

#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxHTML && wxUSE_HTML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlDCRenderer_SetHtmlText[] = { &wxluatype_wxHtmlDCRenderer, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxHtmlDCRenderer_SetHtmlText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlDCRenderer_SetHtmlText[1] = {{ wxLua_wxHtmlDCRenderer_SetHtmlText, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxHtmlDCRenderer_SetHtmlText }};
//     void SetHtmlText(const wxString& html, const wxString& basepath = "", bool isdir = true)
static int LUACALL wxLua_wxHtmlDCRenderer_SetHtmlText(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool isdir = true
    bool isdir = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // const wxString basepath = ""
    const wxString basepath = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString html
    const wxString html = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlDCRenderer * self = (wxHtmlDCRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlDCRenderer);
    // call SetHtmlText
    self->SetHtmlText(html, basepath, isdir);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlDCRenderer_SetSize[] = { &wxluatype_wxHtmlDCRenderer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlDCRenderer_SetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlDCRenderer_SetSize[1] = {{ wxLua_wxHtmlDCRenderer_SetSize, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxHtmlDCRenderer_SetSize }};
//     void SetSize(int width, int height)
static int LUACALL wxLua_wxHtmlDCRenderer_SetSize(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlDCRenderer * self = (wxHtmlDCRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlDCRenderer);
    // call SetSize
    self->SetSize(width, height);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlDCRenderer_delete[] = { &wxluatype_wxHtmlDCRenderer, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlDCRenderer_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxHtmlDCRenderer_delete }};

static int LUACALL wxLua_wxHtmlDCRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlDCRenderer_constructor[1] = {{ wxLua_wxHtmlDCRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxHtmlDCRenderer()
static int LUACALL wxLua_wxHtmlDCRenderer_constructor(lua_State *L)
{
    // call constructor
    wxHtmlDCRenderer* returns = new wxHtmlDCRenderer();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlDCRenderer);

    return 1;
}




#if ((wxLUA_USE_wxArrayInt) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)))||((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlDCRenderer_Render_overload[] =
{

#if (wxLUA_USE_wxArrayInt) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML))
    { wxLua_wxHtmlDCRenderer_Render1, WXLUAMETHOD_METHOD, 4, 7, s_wxluatypeArray_wxLua_wxHtmlDCRenderer_Render1 },
#endif // (wxLUA_USE_wxArrayInt) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML))

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { wxLua_wxHtmlDCRenderer_Render, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxHtmlDCRenderer_Render },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)
};
static int s_wxluafunc_wxLua_wxHtmlDCRenderer_Render_overload_count = sizeof(s_wxluafunc_wxLua_wxHtmlDCRenderer_Render_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxArrayInt) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)))||((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlDCRenderer_methods[] = {
    { "GetTotalHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlDCRenderer_GetTotalHeight, 1, NULL },

#if ((wxLUA_USE_wxArrayInt) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)))||((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML))
    { "Render", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlDCRenderer_Render_overload, s_wxluafunc_wxLua_wxHtmlDCRenderer_Render_overload_count, 0 },
#endif // ((wxLUA_USE_wxArrayInt) && ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)))||((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML))

#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "SetDC", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlDCRenderer_SetDC, 1, NULL },
#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "SetHtmlText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlDCRenderer_SetHtmlText, 1, NULL },
    { "SetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlDCRenderer_SetSize, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxHtmlDCRenderer_delete, 1, NULL },
    { "wxHtmlDCRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHtmlDCRenderer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxHtmlDCRenderer_methodCount = sizeof(wxHtmlDCRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxHTML && wxUSE_HTML


#if wxLUA_USE_wxHTML && wxUSE_HTML
// ---------------------------------------------------------------------------
// Bind class wxHtmlEasyPrinting
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlEasyPrinting'
int wxluatype_wxHtmlEasyPrinting = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_GetPageSetupData[] = { &wxluatype_wxHtmlEasyPrinting, NULL };
static int LUACALL wxLua_wxHtmlEasyPrinting_GetPageSetupData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlEasyPrinting_GetPageSetupData[1] = {{ wxLua_wxHtmlEasyPrinting_GetPageSetupData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_GetPageSetupData }};
//     wxPageSetupDialogData* GetPageSetupData()
static int LUACALL wxLua_wxHtmlEasyPrinting_GetPageSetupData(lua_State *L)
{
    // get this
    wxHtmlEasyPrinting * self = (wxHtmlEasyPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlEasyPrinting);
    // call GetPageSetupData
    wxPageSetupDialogData* returns = (wxPageSetupDialogData*)self->GetPageSetupData();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPageSetupDialogData);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_GetPrintData[] = { &wxluatype_wxHtmlEasyPrinting, NULL };
static int LUACALL wxLua_wxHtmlEasyPrinting_GetPrintData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlEasyPrinting_GetPrintData[1] = {{ wxLua_wxHtmlEasyPrinting_GetPrintData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_GetPrintData }};
//     wxPrintData* GetPrintData()
static int LUACALL wxLua_wxHtmlEasyPrinting_GetPrintData(lua_State *L)
{
    // get this
    wxHtmlEasyPrinting * self = (wxHtmlEasyPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlEasyPrinting);
    // call GetPrintData
    wxPrintData* returns = (wxPrintData*)self->GetPrintData();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPrintData);

    return 1;
}

#endif // (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxHTML && wxUSE_HTML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_PageSetup[] = { &wxluatype_wxHtmlEasyPrinting, NULL };
static int LUACALL wxLua_wxHtmlEasyPrinting_PageSetup(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlEasyPrinting_PageSetup[1] = {{ wxLua_wxHtmlEasyPrinting_PageSetup, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_PageSetup }};
//     void PageSetup()
static int LUACALL wxLua_wxHtmlEasyPrinting_PageSetup(lua_State *L)
{
    // get this
    wxHtmlEasyPrinting * self = (wxHtmlEasyPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlEasyPrinting);
    // call PageSetup
    self->PageSetup();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_PreviewFile[] = { &wxluatype_wxHtmlEasyPrinting, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlEasyPrinting_PreviewFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlEasyPrinting_PreviewFile[1] = {{ wxLua_wxHtmlEasyPrinting_PreviewFile, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_PreviewFile }};
//     bool PreviewFile(const wxString& htmlfile)
static int LUACALL wxLua_wxHtmlEasyPrinting_PreviewFile(lua_State *L)
{
    // const wxString htmlfile
    const wxString htmlfile = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlEasyPrinting * self = (wxHtmlEasyPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlEasyPrinting);
    // call PreviewFile
    bool returns = (self->PreviewFile(htmlfile));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_PreviewText[] = { &wxluatype_wxHtmlEasyPrinting, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlEasyPrinting_PreviewText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlEasyPrinting_PreviewText[1] = {{ wxLua_wxHtmlEasyPrinting_PreviewText, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_PreviewText }};
//     bool PreviewText(const wxString& htmltext, const wxString& basepath = "")
static int LUACALL wxLua_wxHtmlEasyPrinting_PreviewText(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString basepath = ""
    const wxString basepath = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString htmltext
    const wxString htmltext = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlEasyPrinting * self = (wxHtmlEasyPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlEasyPrinting);
    // call PreviewText
    bool returns = (self->PreviewText(htmltext, basepath));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_PrintFile[] = { &wxluatype_wxHtmlEasyPrinting, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlEasyPrinting_PrintFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlEasyPrinting_PrintFile[1] = {{ wxLua_wxHtmlEasyPrinting_PrintFile, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_PrintFile }};
//     bool PrintFile(const wxString& htmlfile)
static int LUACALL wxLua_wxHtmlEasyPrinting_PrintFile(lua_State *L)
{
    // const wxString htmlfile
    const wxString htmlfile = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlEasyPrinting * self = (wxHtmlEasyPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlEasyPrinting);
    // call PrintFile
    bool returns = (self->PrintFile(htmlfile));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_PrintText[] = { &wxluatype_wxHtmlEasyPrinting, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlEasyPrinting_PrintText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlEasyPrinting_PrintText[1] = {{ wxLua_wxHtmlEasyPrinting_PrintText, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_PrintText }};
//     bool PrintText(const wxString& htmltext, const wxString& basepath = "")
static int LUACALL wxLua_wxHtmlEasyPrinting_PrintText(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString basepath = ""
    const wxString basepath = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString htmltext
    const wxString htmltext = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlEasyPrinting * self = (wxHtmlEasyPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlEasyPrinting);
    // call PrintText
    bool returns = (self->PrintText(htmltext, basepath));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,4,0) && !wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_PrinterSetup[] = { &wxluatype_wxHtmlEasyPrinting, NULL };
static int LUACALL wxLua_wxHtmlEasyPrinting_PrinterSetup(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlEasyPrinting_PrinterSetup[1] = {{ wxLua_wxHtmlEasyPrinting_PrinterSetup, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_PrinterSetup }};
//     %wxchkver_2_4&!%wxchkver_2_6 void PrinterSetup()
static int LUACALL wxLua_wxHtmlEasyPrinting_PrinterSetup(lua_State *L)
{
    // get this
    wxHtmlEasyPrinting * self = (wxHtmlEasyPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlEasyPrinting);
    // call PrinterSetup
    self->PrinterSetup();

    return 0;
}

#endif // (wxCHECK_VERSION(2,4,0) && !wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_SetFooter[] = { &wxluatype_wxHtmlEasyPrinting, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlEasyPrinting_SetFooter(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlEasyPrinting_SetFooter[1] = {{ wxLua_wxHtmlEasyPrinting_SetFooter, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_SetFooter }};
//     void SetFooter(const wxString& footer, int pg = wxPAGE_ALL)
static int LUACALL wxLua_wxHtmlEasyPrinting_SetFooter(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int pg = wxPAGE_ALL
    int pg = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxPAGE_ALL);
    // const wxString footer
    const wxString footer = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlEasyPrinting * self = (wxHtmlEasyPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlEasyPrinting);
    // call SetFooter
    self->SetFooter(footer, pg);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_SetHeader[] = { &wxluatype_wxHtmlEasyPrinting, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlEasyPrinting_SetHeader(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlEasyPrinting_SetHeader[1] = {{ wxLua_wxHtmlEasyPrinting_SetHeader, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_SetHeader }};
//     void SetHeader(const wxString& header, int pg = wxPAGE_ALL)
static int LUACALL wxLua_wxHtmlEasyPrinting_SetHeader(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int pg = wxPAGE_ALL
    int pg = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxPAGE_ALL);
    // const wxString header
    const wxString header = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlEasyPrinting * self = (wxHtmlEasyPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlEasyPrinting);
    // call SetHeader
    self->SetHeader(header, pg);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_delete[] = { &wxluatype_wxHtmlEasyPrinting, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlEasyPrinting_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_delete }};


#if (wxLUA_USE_wxFrame) && (wxLUA_USE_wxHTML && wxUSE_HTML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_constructor[] = { &wxluatype_TSTRING, &wxluatype_wxFrame, NULL };
static int LUACALL wxLua_wxHtmlEasyPrinting_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlEasyPrinting_constructor[1] = {{ wxLua_wxHtmlEasyPrinting_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxHtmlEasyPrinting_constructor }};
//     wxHtmlEasyPrinting(const wxString& name = "Printing", wxFrame* parent_frame = NULL)
static int LUACALL wxLua_wxHtmlEasyPrinting_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxFrame parent_frame = NULL
    wxFrame * parent_frame = (argCount >= 2 ? (wxFrame *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFrame) : NULL);
    // const wxString name = "Printing"
    const wxString name = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxT("Printing")));
    // call constructor
    wxHtmlEasyPrinting* returns = new wxHtmlEasyPrinting(name, parent_frame);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlEasyPrinting);

    return 1;
}

#endif // (wxLUA_USE_wxFrame) && (wxLUA_USE_wxHTML && wxUSE_HTML)



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlEasyPrinting_methods[] = {
#if (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "GetPageSetupData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlEasyPrinting_GetPageSetupData, 1, NULL },
    { "GetPrintData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlEasyPrinting_GetPrintData, 1, NULL },
#endif // (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "PageSetup", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlEasyPrinting_PageSetup, 1, NULL },
    { "PreviewFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlEasyPrinting_PreviewFile, 1, NULL },
    { "PreviewText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlEasyPrinting_PreviewText, 1, NULL },
    { "PrintFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlEasyPrinting_PrintFile, 1, NULL },
    { "PrintText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlEasyPrinting_PrintText, 1, NULL },

#if (wxCHECK_VERSION(2,4,0) && !wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "PrinterSetup", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlEasyPrinting_PrinterSetup, 1, NULL },
#endif // (wxCHECK_VERSION(2,4,0) && !wxCHECK_VERSION(2,6,0)) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { "SetFooter", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlEasyPrinting_SetFooter, 1, NULL },
    { "SetHeader", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlEasyPrinting_SetHeader, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxHtmlEasyPrinting_delete, 1, NULL },

#if (wxLUA_USE_wxFrame) && (wxLUA_USE_wxHTML && wxUSE_HTML)
    { "wxHtmlEasyPrinting", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHtmlEasyPrinting_constructor, 1, NULL },
#endif // (wxLUA_USE_wxFrame) && (wxLUA_USE_wxHTML && wxUSE_HTML)

    { 0, 0, 0, 0 },
};

int wxHtmlEasyPrinting_methodCount = sizeof(wxHtmlEasyPrinting_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxHTML && wxUSE_HTML


#if wxLUA_USE_wxHTML && wxUSE_HTML
// ---------------------------------------------------------------------------
// Bind class wxHtmlPrintout
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlPrintout'
int wxluatype_wxHtmlPrintout = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlPrintout_SetFooter[] = { &wxluatype_wxHtmlPrintout, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlPrintout_SetFooter(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlPrintout_SetFooter[1] = {{ wxLua_wxHtmlPrintout_SetFooter, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlPrintout_SetFooter }};
//     void SetFooter(const wxString& footer, int pg = wxPAGE_ALL)
static int LUACALL wxLua_wxHtmlPrintout_SetFooter(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int pg = wxPAGE_ALL
    int pg = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxPAGE_ALL);
    // const wxString footer
    const wxString footer = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlPrintout * self = (wxHtmlPrintout *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlPrintout);
    // call SetFooter
    self->SetFooter(footer, pg);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlPrintout_SetHeader[] = { &wxluatype_wxHtmlPrintout, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlPrintout_SetHeader(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlPrintout_SetHeader[1] = {{ wxLua_wxHtmlPrintout_SetHeader, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlPrintout_SetHeader }};
//     void SetHeader(const wxString& header, int pg = wxPAGE_ALL)
static int LUACALL wxLua_wxHtmlPrintout_SetHeader(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int pg = wxPAGE_ALL
    int pg = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxPAGE_ALL);
    // const wxString header
    const wxString header = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlPrintout * self = (wxHtmlPrintout *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlPrintout);
    // call SetHeader
    self->SetHeader(header, pg);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlPrintout_SetHtmlFile[] = { &wxluatype_wxHtmlPrintout, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlPrintout_SetHtmlFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlPrintout_SetHtmlFile[1] = {{ wxLua_wxHtmlPrintout_SetHtmlFile, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlPrintout_SetHtmlFile }};
//     void SetHtmlFile(const wxString& htmlfile)
static int LUACALL wxLua_wxHtmlPrintout_SetHtmlFile(lua_State *L)
{
    // const wxString htmlfile
    const wxString htmlfile = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlPrintout * self = (wxHtmlPrintout *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlPrintout);
    // call SetHtmlFile
    self->SetHtmlFile(htmlfile);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlPrintout_SetHtmlText[] = { &wxluatype_wxHtmlPrintout, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxHtmlPrintout_SetHtmlText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlPrintout_SetHtmlText[1] = {{ wxLua_wxHtmlPrintout_SetHtmlText, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxHtmlPrintout_SetHtmlText }};
//     void SetHtmlText(const wxString& html, const wxString& basepath = "", bool isdir = true)
static int LUACALL wxLua_wxHtmlPrintout_SetHtmlText(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool isdir = true
    bool isdir = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // const wxString basepath = ""
    const wxString basepath = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString html
    const wxString html = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlPrintout * self = (wxHtmlPrintout *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlPrintout);
    // call SetHtmlText
    self->SetHtmlText(html, basepath, isdir);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlPrintout_SetMargins[] = { &wxluatype_wxHtmlPrintout, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlPrintout_SetMargins(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlPrintout_SetMargins[1] = {{ wxLua_wxHtmlPrintout_SetMargins, WXLUAMETHOD_METHOD, 1, 6, s_wxluatypeArray_wxLua_wxHtmlPrintout_SetMargins }};
//     void SetMargins(float top = 25.2, float bottom = 25.2, float left = 25.2, float right = 25.2, float spaces = 5)
static int LUACALL wxLua_wxHtmlPrintout_SetMargins(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // float spaces = 5
    float spaces = (argCount >= 6 ? (float)wxlua_getnumbertype(L, 6) : 5);
    // float right = 25.2
    float right = (argCount >= 5 ? (float)wxlua_getnumbertype(L, 5) : 25.2);
    // float left = 25.2
    float left = (argCount >= 4 ? (float)wxlua_getnumbertype(L, 4) : 25.2);
    // float bottom = 25.2
    float bottom = (argCount >= 3 ? (float)wxlua_getnumbertype(L, 3) : 25.2);
    // float top = 25.2
    float top = (argCount >= 2 ? (float)wxlua_getnumbertype(L, 2) : 25.2);
    // get this
    wxHtmlPrintout * self = (wxHtmlPrintout *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlPrintout);
    // call SetMargins
    self->SetMargins(top, bottom, left, right, spaces);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlPrintout_delete[] = { &wxluatype_wxHtmlPrintout, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlPrintout_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxHtmlPrintout_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlPrintout_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlPrintout_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlPrintout_constructor[1] = {{ wxLua_wxHtmlPrintout_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxHtmlPrintout_constructor }};
//     wxHtmlPrintout(const wxString& title = "Printout")
static int LUACALL wxLua_wxHtmlPrintout_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString title = "Printout"
    const wxString title = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxT("Printout")));
    // call constructor
    wxHtmlPrintout* returns = new wxHtmlPrintout(title);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlPrintout);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlPrintout_methods[] = {
    { "SetFooter", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlPrintout_SetFooter, 1, NULL },
    { "SetHeader", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlPrintout_SetHeader, 1, NULL },
    { "SetHtmlFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlPrintout_SetHtmlFile, 1, NULL },
    { "SetHtmlText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlPrintout_SetHtmlText, 1, NULL },
    { "SetMargins", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlPrintout_SetMargins, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxHtmlPrintout_delete, 1, NULL },
    { "wxHtmlPrintout", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHtmlPrintout_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxHtmlPrintout_methodCount = sizeof(wxHtmlPrintout_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxHTML && wxUSE_HTML


#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)
// ---------------------------------------------------------------------------
// Bind class wxHtmlHelpData
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlHelpData'
int wxluatype_wxHtmlHelpData = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpData_AddBook[] = { &wxluatype_wxHtmlHelpData, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlHelpData_AddBook(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpData_AddBook[1] = {{ wxLua_wxHtmlHelpData_AddBook, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlHelpData_AddBook }};
//     bool AddBook(const wxString& book)
static int LUACALL wxLua_wxHtmlHelpData_AddBook(lua_State *L)
{
    // const wxString book
    const wxString book = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlHelpData * self = (wxHtmlHelpData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlHelpData);
    // call AddBook
    bool returns = (self->AddBook(book));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpData_FindPageById[] = { &wxluatype_wxHtmlHelpData, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlHelpData_FindPageById(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpData_FindPageById[1] = {{ wxLua_wxHtmlHelpData_FindPageById, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlHelpData_FindPageById }};
//     wxString FindPageById(int id)
static int LUACALL wxLua_wxHtmlHelpData_FindPageById(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlHelpData * self = (wxHtmlHelpData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlHelpData);
    // call FindPageById
    wxString returns = (self->FindPageById(id));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpData_FindPageByName[] = { &wxluatype_wxHtmlHelpData, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlHelpData_FindPageByName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpData_FindPageByName[1] = {{ wxLua_wxHtmlHelpData_FindPageByName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlHelpData_FindPageByName }};
//     wxString FindPageByName(const wxString& page)
static int LUACALL wxLua_wxHtmlHelpData_FindPageByName(lua_State *L)
{
    // const wxString page
    const wxString page = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlHelpData * self = (wxHtmlHelpData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlHelpData);
    // call FindPageByName
    wxString returns = (self->FindPageByName(page));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpData_SetTempDir[] = { &wxluatype_wxHtmlHelpData, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlHelpData_SetTempDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpData_SetTempDir[1] = {{ wxLua_wxHtmlHelpData_SetTempDir, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlHelpData_SetTempDir }};
//     void SetTempDir(const wxString& path)
static int LUACALL wxLua_wxHtmlHelpData_SetTempDir(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlHelpData * self = (wxHtmlHelpData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlHelpData);
    // call SetTempDir
    self->SetTempDir(path);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpData_delete[] = { &wxluatype_wxHtmlHelpData, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpData_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxHtmlHelpData_delete }};

static int LUACALL wxLua_wxHtmlHelpData_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpData_constructor[1] = {{ wxLua_wxHtmlHelpData_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxHtmlHelpData()
static int LUACALL wxLua_wxHtmlHelpData_constructor(lua_State *L)
{
    // call constructor
    wxHtmlHelpData* returns = new wxHtmlHelpData();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlHelpData);

    return 1;
}




// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlHelpData_methods[] = {
    { "AddBook", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlHelpData_AddBook, 1, NULL },
    { "FindPageById", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlHelpData_FindPageById, 1, NULL },
    { "FindPageByName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlHelpData_FindPageByName, 1, NULL },
    { "SetTempDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlHelpData_SetTempDir, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxHtmlHelpData_delete, 1, NULL },
    { "wxHtmlHelpData", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHtmlHelpData_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxHtmlHelpData_methodCount = sizeof(wxHtmlHelpData_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)


#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)
// ---------------------------------------------------------------------------
// Bind class wxHtmlHelpController
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHtmlHelpController'
int wxluatype_wxHtmlHelpController = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)) && (wxLUA_USE_wxFileName)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpController_AddBook1[] = { &wxluatype_wxHtmlHelpController, &wxluatype_wxFileName, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxHtmlHelpController_AddBook1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpController_AddBook1[1] = {{ wxLua_wxHtmlHelpController_AddBook1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxHtmlHelpController_AddBook1 }};
//     bool AddBook(const wxFileName& book_file, bool show_wait_msg)
static int LUACALL wxLua_wxHtmlHelpController_AddBook1(lua_State *L)
{
    // bool show_wait_msg
    bool show_wait_msg = wxlua_getbooleantype(L, 3);
    // const wxFileName book_file
    const wxFileName * book_file = (const wxFileName *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFileName);
    // get this
    wxHtmlHelpController * self = (wxHtmlHelpController *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlHelpController);
    // call AddBook
    bool returns = (self->AddBook(*book_file, show_wait_msg));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)) && (wxLUA_USE_wxFileName)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpController_AddBook[] = { &wxluatype_wxHtmlHelpController, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxHtmlHelpController_AddBook(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpController_AddBook[1] = {{ wxLua_wxHtmlHelpController_AddBook, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxHtmlHelpController_AddBook }};
//     bool AddBook(const wxString& book, bool show_wait_msg)
static int LUACALL wxLua_wxHtmlHelpController_AddBook(lua_State *L)
{
    // bool show_wait_msg
    bool show_wait_msg = wxlua_getbooleantype(L, 3);
    // const wxString book
    const wxString book = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlHelpController * self = (wxHtmlHelpController *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlHelpController);
    // call AddBook
    bool returns = (self->AddBook(book, show_wait_msg));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpController_Display1[] = { &wxluatype_wxHtmlHelpController, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlHelpController_Display1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpController_Display1[1] = {{ wxLua_wxHtmlHelpController_Display1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlHelpController_Display1 }};
//     void Display(const int id)
static int LUACALL wxLua_wxHtmlHelpController_Display1(lua_State *L)
{
    // const int id
    const int id = (const int)wxlua_getnumbertype(L, 2);
    // get this
    wxHtmlHelpController * self = (wxHtmlHelpController *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlHelpController);
    // call Display
    self->Display(id);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpController_Display[] = { &wxluatype_wxHtmlHelpController, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlHelpController_Display(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpController_Display[1] = {{ wxLua_wxHtmlHelpController_Display, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlHelpController_Display }};
//     void Display(const wxString& x)
static int LUACALL wxLua_wxHtmlHelpController_Display(lua_State *L)
{
    // const wxString x
    const wxString x = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlHelpController * self = (wxHtmlHelpController *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlHelpController);
    // call Display
    self->Display(x);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpController_DisplayIndex[] = { &wxluatype_wxHtmlHelpController, NULL };
static int LUACALL wxLua_wxHtmlHelpController_DisplayIndex(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpController_DisplayIndex[1] = {{ wxLua_wxHtmlHelpController_DisplayIndex, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHtmlHelpController_DisplayIndex }};
//     void DisplayIndex()
static int LUACALL wxLua_wxHtmlHelpController_DisplayIndex(lua_State *L)
{
    // get this
    wxHtmlHelpController * self = (wxHtmlHelpController *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlHelpController);
    // call DisplayIndex
    self->DisplayIndex();

    return 0;
}


#if ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)) && (wxLUA_USE_wxConfig && wxUSE_CONFIG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpController_ReadCustomization[] = { &wxluatype_wxHtmlHelpController, &wxluatype_wxConfigBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlHelpController_ReadCustomization(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpController_ReadCustomization[1] = {{ wxLua_wxHtmlHelpController_ReadCustomization, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlHelpController_ReadCustomization }};
//     void ReadCustomization(wxConfigBase* cfg, wxString path = "")
static int LUACALL wxLua_wxHtmlHelpController_ReadCustomization(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxString path = ""
    wxString path = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // wxConfigBase cfg
    wxConfigBase * cfg = (wxConfigBase *)wxluaT_getuserdatatype(L, 2, wxluatype_wxConfigBase);
    // get this
    wxHtmlHelpController * self = (wxHtmlHelpController *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlHelpController);
    // call ReadCustomization
    self->ReadCustomization(cfg, path);

    return 0;
}

#endif // ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)) && (wxLUA_USE_wxConfig && wxUSE_CONFIG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpController_SetTempDir[] = { &wxluatype_wxHtmlHelpController, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlHelpController_SetTempDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpController_SetTempDir[1] = {{ wxLua_wxHtmlHelpController_SetTempDir, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlHelpController_SetTempDir }};
//     void SetTempDir(const wxString& path)
static int LUACALL wxLua_wxHtmlHelpController_SetTempDir(lua_State *L)
{
    // const wxString path
    const wxString path = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlHelpController * self = (wxHtmlHelpController *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlHelpController);
    // call SetTempDir
    self->SetTempDir(path);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpController_SetTitleFormat[] = { &wxluatype_wxHtmlHelpController, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlHelpController_SetTitleFormat(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpController_SetTitleFormat[1] = {{ wxLua_wxHtmlHelpController_SetTitleFormat, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlHelpController_SetTitleFormat }};
//     void SetTitleFormat(const wxString& format)
static int LUACALL wxLua_wxHtmlHelpController_SetTitleFormat(lua_State *L)
{
    // const wxString format
    const wxString format = wxlua_getwxStringtype(L, 2);
    // get this
    wxHtmlHelpController * self = (wxHtmlHelpController *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlHelpController);
    // call SetTitleFormat
    self->SetTitleFormat(format);

    return 0;
}


#if ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)) && (wxLUA_USE_wxConfig && wxUSE_CONFIG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpController_UseConfig[] = { &wxluatype_wxHtmlHelpController, &wxluatype_wxConfigBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlHelpController_UseConfig(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpController_UseConfig[1] = {{ wxLua_wxHtmlHelpController_UseConfig, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlHelpController_UseConfig }};
//     void UseConfig(wxConfigBase* config, const wxString& rootpath = "")
static int LUACALL wxLua_wxHtmlHelpController_UseConfig(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString rootpath = ""
    const wxString rootpath = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // wxConfigBase config
    wxConfigBase * config = (wxConfigBase *)wxluaT_getuserdatatype(L, 2, wxluatype_wxConfigBase);
    // get this
    wxHtmlHelpController * self = (wxHtmlHelpController *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlHelpController);
    // call UseConfig
    self->UseConfig(config, rootpath);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpController_WriteCustomization[] = { &wxluatype_wxHtmlHelpController, &wxluatype_wxConfigBase, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHtmlHelpController_WriteCustomization(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpController_WriteCustomization[1] = {{ wxLua_wxHtmlHelpController_WriteCustomization, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxHtmlHelpController_WriteCustomization }};
//     void WriteCustomization(wxConfigBase* cfg, wxString path = "")
static int LUACALL wxLua_wxHtmlHelpController_WriteCustomization(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxString path = ""
    wxString path = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // wxConfigBase cfg
    wxConfigBase * cfg = (wxConfigBase *)wxluaT_getuserdatatype(L, 2, wxluatype_wxConfigBase);
    // get this
    wxHtmlHelpController * self = (wxHtmlHelpController *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHtmlHelpController);
    // call WriteCustomization
    self->WriteCustomization(cfg, path);

    return 0;
}

#endif // ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)) && (wxLUA_USE_wxConfig && wxUSE_CONFIG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpController_delete[] = { &wxluatype_wxHtmlHelpController, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpController_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxHtmlHelpController_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxHtmlHelpController_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHtmlHelpController_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpController_constructor[1] = {{ wxLua_wxHtmlHelpController_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxHtmlHelpController_constructor }};
//     wxHtmlHelpController(int style = wxHF_DEFAULT_STYLE)
static int LUACALL wxLua_wxHtmlHelpController_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int style = wxHF_DEFAULT_STYLE
    int style = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : wxHF_DEFAULT_STYLE);
    // call constructor
    wxHtmlHelpController* returns = new wxHtmlHelpController(style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHtmlHelpController);

    return 1;
}




#if (((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)) && (wxLUA_USE_wxFileName))||((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpController_AddBook_overload[] =
{

#if ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)) && (wxLUA_USE_wxFileName)
    { wxLua_wxHtmlHelpController_AddBook1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxHtmlHelpController_AddBook1 },
#endif // ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)) && (wxLUA_USE_wxFileName)
    { wxLua_wxHtmlHelpController_AddBook, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxHtmlHelpController_AddBook },
};
static int s_wxluafunc_wxLua_wxHtmlHelpController_AddBook_overload_count = sizeof(s_wxluafunc_wxLua_wxHtmlHelpController_AddBook_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)) && (wxLUA_USE_wxFileName))||((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP))

#if ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHtmlHelpController_Display_overload[] =
{
    { wxLua_wxHtmlHelpController_Display1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlHelpController_Display1 },
    { wxLua_wxHtmlHelpController_Display, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHtmlHelpController_Display },
};
static int s_wxluafunc_wxLua_wxHtmlHelpController_Display_overload_count = sizeof(s_wxluafunc_wxLua_wxHtmlHelpController_Display_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP))

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHtmlHelpController_methods[] = {
#if (((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)) && (wxLUA_USE_wxFileName))||((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP))
    { "AddBook", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlHelpController_AddBook_overload, s_wxluafunc_wxLua_wxHtmlHelpController_AddBook_overload_count, 0 },
#endif // (((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)) && (wxLUA_USE_wxFileName))||((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP))

#if ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP))
    { "Display", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlHelpController_Display_overload, s_wxluafunc_wxLua_wxHtmlHelpController_Display_overload_count, 0 },
#endif // ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP))

    { "DisplayIndex", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlHelpController_DisplayIndex, 1, NULL },

#if ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)) && (wxLUA_USE_wxConfig && wxUSE_CONFIG)
    { "ReadCustomization", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlHelpController_ReadCustomization, 1, NULL },
#endif // ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)) && (wxLUA_USE_wxConfig && wxUSE_CONFIG)

    { "SetTempDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlHelpController_SetTempDir, 1, NULL },
    { "SetTitleFormat", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlHelpController_SetTitleFormat, 1, NULL },

#if ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)) && (wxLUA_USE_wxConfig && wxUSE_CONFIG)
    { "UseConfig", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlHelpController_UseConfig, 1, NULL },
    { "WriteCustomization", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHtmlHelpController_WriteCustomization, 1, NULL },
#endif // ((wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)) && (wxLUA_USE_wxConfig && wxUSE_CONFIG)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxHtmlHelpController_delete, 1, NULL },
    { "wxHtmlHelpController", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHtmlHelpController_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxHtmlHelpController_methodCount = sizeof(wxHtmlHelpController_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)



// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxhtml_bind.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------


// ---------------------------------------------------------------------------
// wxLuaGetEventList_wxhtml() is called to register events
// ---------------------------------------------------------------------------

wxLuaBindEvent* wxLuaGetEventList_wxhtml(size_t &count)
{
    static wxLuaBindEvent eventList[] =
    {
#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow)
        { "wxEVT_HTML_TAG_HANDLER", &wxEVT_HTML_TAG_HANDLER, &wxluatype_wxLuaHtmlWinTagEvent },
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow)


        { 0, 0, 0 },
    };
    count = sizeof(eventList)/sizeof(wxLuaBindEvent) - 1;
    return eventList;
}

// ---------------------------------------------------------------------------
// wxLuaGetDefineList_wxhtml() is called to register %define and %enum
// ---------------------------------------------------------------------------

wxLuaBindNumber* wxLuaGetDefineList_wxhtml(size_t &count)
{
    static wxLuaBindNumber numberList[] =
    {
#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)
        { "wxHF_BOOKMARKS", wxHF_BOOKMARKS },
        { "wxHF_CONTENTS", wxHF_CONTENTS },
        { "wxHF_DEFAULT_STYLE", wxHF_DEFAULT_STYLE },
        { "wxHF_FLAT_TOOLBAR", wxHF_FLAT_TOOLBAR },
        { "wxHF_ICONS_BOOK", wxHF_ICONS_BOOK },
        { "wxHF_ICONS_BOOK_CHAPTER", wxHF_ICONS_BOOK_CHAPTER },
        { "wxHF_ICONS_FOLDER", wxHF_ICONS_FOLDER },
        { "wxHF_INDEX", wxHF_INDEX },
        { "wxHF_MERGE_BOOKS", wxHF_MERGE_BOOKS },
        { "wxHF_OPEN_FILES", wxHF_OPEN_FILES },
        { "wxHF_PRINT", wxHF_PRINT },
        { "wxHF_SEARCH", wxHF_SEARCH },
        { "wxHF_TOOLBAR", wxHF_TOOLBAR },
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)

#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))
        { "wxHLB_DEFAULT_STYLE", wxHLB_DEFAULT_STYLE },
        { "wxHLB_MULTIPLE", wxHLB_MULTIPLE },
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))

#if wxLUA_USE_wxHTML && wxUSE_HTML
        { "wxHTML_ALIGN_BOTTOM", wxHTML_ALIGN_BOTTOM },
        { "wxHTML_ALIGN_CENTER", wxHTML_ALIGN_CENTER },
        { "wxHTML_ALIGN_JUSTIFY", wxHTML_ALIGN_JUSTIFY },
        { "wxHTML_ALIGN_LEFT", wxHTML_ALIGN_LEFT },
        { "wxHTML_ALIGN_RIGHT", wxHTML_ALIGN_RIGHT },
        { "wxHTML_ALIGN_TOP", wxHTML_ALIGN_TOP },
        { "wxHTML_COND_ISANCHOR", wxHTML_COND_ISANCHOR },
        { "wxHTML_COND_ISIMAGEMAP", wxHTML_COND_ISIMAGEMAP },
        { "wxHTML_COND_USER", wxHTML_COND_USER },
        { "wxHTML_INDENT_ALL", wxHTML_INDENT_ALL },
        { "wxHTML_INDENT_BOTTOM", wxHTML_INDENT_BOTTOM },
        { "wxHTML_INDENT_HORIZONTAL", wxHTML_INDENT_HORIZONTAL },
        { "wxHTML_INDENT_LEFT", wxHTML_INDENT_LEFT },
        { "wxHTML_INDENT_RIGHT", wxHTML_INDENT_RIGHT },
        { "wxHTML_INDENT_TOP", wxHTML_INDENT_TOP },
        { "wxHTML_INDENT_VERTICAL", wxHTML_INDENT_VERTICAL },
        { "wxHTML_UNITS_PERCENT", wxHTML_UNITS_PERCENT },
        { "wxHTML_UNITS_PIXELS", wxHTML_UNITS_PIXELS },
        { "wxHW_SCROLLBAR_AUTO", wxHW_SCROLLBAR_AUTO },
        { "wxHW_SCROLLBAR_NEVER", wxHW_SCROLLBAR_NEVER },
#endif // wxLUA_USE_wxHTML && wxUSE_HTML


        { 0, 0 },
    };
    count = sizeof(numberList)/sizeof(wxLuaBindNumber) - 1;
    return numberList;
}

// ---------------------------------------------------------------------------

// wxLuaGetStringList_wxhtml() is called to register %define %string
// ---------------------------------------------------------------------------

wxLuaBindString* wxLuaGetStringList_wxhtml(size_t &count)
{
    static wxLuaBindString stringList[] =
    {

        { 0, 0 },
    };
    count = sizeof(stringList)/sizeof(wxLuaBindString) - 1;
    return stringList;
}

// ---------------------------------------------------------------------------
// wxLuaGetObjectList_wxhtml() is called to register object and pointer bindings
// ---------------------------------------------------------------------------

wxLuaBindObject* wxLuaGetObjectList_wxhtml(size_t &count)
{
    static wxLuaBindObject objectList[] =
    {

        { 0, 0, 0, 0 },
    };
    count = sizeof(objectList)/sizeof(wxLuaBindObject) - 1;
    return objectList;
}

// ---------------------------------------------------------------------------
// wxLuaGetFunctionList_wxhtml() is called to register global functions
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
// wxLuaGetFunctionList_wxhtml() is called to register global functions
// ---------------------------------------------------------------------------

wxLuaBindMethod* wxLuaGetFunctionList_wxhtml(size_t &count)
{
    static wxLuaBindMethod functionList[] =
    {

        { 0, 0, 0, 0 }, 
    };
    count = sizeof(functionList)/sizeof(wxLuaBindMethod) - 1;
    return functionList;
}



// ---------------------------------------------------------------------------
// wxLuaGetClassList_wxhtml() is called to register classes
// ---------------------------------------------------------------------------

static const char* wxluaclassname_wxCommandEvent = "wxCommandEvent";
static const char* wxluaclassname_wxEvent = "wxEvent";
static const char* wxluaclassname_wxHelpControllerBase = "wxHelpControllerBase";
static const char* wxluaclassname_wxHtmlCell = "wxHtmlCell";
static const char* wxluaclassname_wxHtmlCellEvent = "wxHtmlCellEvent";
static const char* wxluaclassname_wxHtmlColourCell = "wxHtmlColourCell";
static const char* wxluaclassname_wxHtmlContainerCell = "wxHtmlContainerCell";
static const char* wxluaclassname_wxHtmlDCRenderer = "wxHtmlDCRenderer";
static const char* wxluaclassname_wxHtmlEasyPrinting = "wxHtmlEasyPrinting";
static const char* wxluaclassname_wxHtmlFontCell = "wxHtmlFontCell";
static const char* wxluaclassname_wxHtmlHelpController = "wxHtmlHelpController";
static const char* wxluaclassname_wxHtmlHelpData = "wxHtmlHelpData";
static const char* wxluaclassname_wxHtmlLinkInfo = "wxHtmlLinkInfo";
static const char* wxluaclassname_wxHtmlParser = "wxHtmlParser";
static const char* wxluaclassname_wxHtmlPrintout = "wxHtmlPrintout";
static const char* wxluaclassname_wxHtmlTag = "wxHtmlTag";
static const char* wxluaclassname_wxHtmlWidgetCell = "wxHtmlWidgetCell";
static const char* wxluaclassname_wxHtmlWinParser = "wxHtmlWinParser";
static const char* wxluaclassname_wxHtmlWindow = "wxHtmlWindow";
static const char* wxluaclassname_wxHtmlWindowInterface = "wxHtmlWindowInterface";
static const char* wxluaclassname_wxLuaHtmlWinTagEvent = "wxLuaHtmlWinTagEvent";
static const char* wxluaclassname_wxLuaHtmlWindow = "wxLuaHtmlWindow";
static const char* wxluaclassname_wxObject = "wxObject";
static const char* wxluaclassname_wxPrintout = "wxPrintout";
static const char* wxluaclassname_wxScrolledWindow = "wxScrolledWindow";
static const char* wxluaclassname_wxSimpleHtmlListBox = "wxSimpleHtmlListBox";

static const char* wxluabaseclassnames_wxHtmlCell[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHtmlCell[] = { NULL };
static const char* wxluabaseclassnames_wxHtmlCellEvent[] = { wxluaclassname_wxCommandEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHtmlCellEvent[] = { NULL };
static const char* wxluabaseclassnames_wxHtmlColourCell[] = { wxluaclassname_wxHtmlCell, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHtmlColourCell[] = { NULL };
static const char* wxluabaseclassnames_wxHtmlContainerCell[] = { wxluaclassname_wxHtmlCell, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHtmlContainerCell[] = { NULL };
static const char* wxluabaseclassnames_wxHtmlDCRenderer[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHtmlDCRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxHtmlEasyPrinting[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHtmlEasyPrinting[] = { NULL };
static const char* wxluabaseclassnames_wxHtmlFontCell[] = { wxluaclassname_wxHtmlCell, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHtmlFontCell[] = { NULL };
static const char* wxluabaseclassnames_wxHtmlHelpController[] = { wxluaclassname_wxHelpControllerBase, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHtmlHelpController[] = { NULL };
static const char* wxluabaseclassnames_wxHtmlHelpData[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHtmlHelpData[] = { NULL };
static const char* wxluabaseclassnames_wxHtmlParser[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHtmlParser[] = { NULL };
static const char* wxluabaseclassnames_wxHtmlPrintout[] = { wxluaclassname_wxPrintout, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHtmlPrintout[] = { NULL };
static const char* wxluabaseclassnames_wxHtmlTag[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHtmlTag[] = { NULL };
static const char* wxluabaseclassnames_wxHtmlWidgetCell[] = { wxluaclassname_wxHtmlCell, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHtmlWidgetCell[] = { NULL };
static const char* wxluabaseclassnames_wxHtmlWinParser[] = { wxluaclassname_wxHtmlParser, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHtmlWinParser[] = { NULL };
static const char* wxluabaseclassnames_wxHtmlWindow[] = { wxluaclassname_wxScrolledWindow, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHtmlWindow[] = { NULL };
static const char* wxluabaseclassnames_wxLuaHtmlWinTagEvent[] = { wxluaclassname_wxEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxLuaHtmlWinTagEvent[] = { NULL };
static const char* wxluabaseclassnames_wxLuaHtmlWindow[] = { wxluaclassname_wxHtmlWindow, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxLuaHtmlWindow[] = { NULL };
static const char* wxluabaseclassnames_wxSimpleHtmlListBox[] = { wxluaclassname_wxHtmlWindowInterface, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxSimpleHtmlListBox[] = { NULL };
// ---------------------------------------------------------------------------
// Lua Tag Method Values and Tables for each Class
// ---------------------------------------------------------------------------

#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))
    extern wxLuaBindMethod wxHtmlCellEvent_methods[];
    extern int wxHtmlCellEvent_methodCount;
    extern wxLuaBindMethod wxHtmlColourCell_methods[];
    extern int wxHtmlColourCell_methodCount;
    extern wxLuaBindMethod wxHtmlFontCell_methods[];
    extern int wxHtmlFontCell_methodCount;
    extern wxLuaBindMethod wxHtmlWindowInterface_methods[];
    extern int wxHtmlWindowInterface_methodCount;
    extern wxLuaBindNumber wxHtmlWindowInterface_enums[];
    extern int wxHtmlWindowInterface_enumCount;
    extern wxLuaBindMethod wxSimpleHtmlListBox_methods[];
    extern int wxSimpleHtmlListBox_methodCount;
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)
    extern wxLuaBindMethod wxHtmlHelpController_methods[];
    extern int wxHtmlHelpController_methodCount;
    extern wxLuaBindMethod wxHtmlHelpData_methods[];
    extern int wxHtmlHelpData_methodCount;
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)

#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow)
    extern wxLuaBindMethod wxLuaHtmlWinTagEvent_methods[];
    extern int wxLuaHtmlWinTagEvent_methodCount;
    extern wxLuaBindMethod wxLuaHtmlWindow_methods[];
    extern int wxLuaHtmlWindow_methodCount;
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow)

#if wxLUA_USE_wxHTML && wxUSE_HTML
    extern wxLuaBindMethod wxHtmlCell_methods[];
    extern int wxHtmlCell_methodCount;
    extern wxLuaBindMethod wxHtmlContainerCell_methods[];
    extern int wxHtmlContainerCell_methodCount;
    extern wxLuaBindMethod wxHtmlDCRenderer_methods[];
    extern int wxHtmlDCRenderer_methodCount;
    extern wxLuaBindMethod wxHtmlEasyPrinting_methods[];
    extern int wxHtmlEasyPrinting_methodCount;
    extern wxLuaBindMethod wxHtmlLinkInfo_methods[];
    extern int wxHtmlLinkInfo_methodCount;
    extern wxLuaBindMethod wxHtmlParser_methods[];
    extern int wxHtmlParser_methodCount;
    extern wxLuaBindMethod wxHtmlPrintout_methods[];
    extern int wxHtmlPrintout_methodCount;
    extern wxLuaBindMethod wxHtmlTag_methods[];
    extern int wxHtmlTag_methodCount;
    extern wxLuaBindMethod wxHtmlWidgetCell_methods[];
    extern int wxHtmlWidgetCell_methodCount;
    extern wxLuaBindMethod wxHtmlWinParser_methods[];
    extern int wxHtmlWinParser_methodCount;
    extern wxLuaBindMethod wxHtmlWindow_methods[];
    extern int wxHtmlWindow_methodCount;
#endif // wxLUA_USE_wxHTML && wxUSE_HTML




wxLuaBindClass* wxLuaGetClassList_wxhtml(size_t &count)
{
    static wxLuaBindClass classList[] =
    {
#if wxLUA_USE_wxHTML && wxUSE_HTML
        { wxluaclassname_wxHtmlCell, wxHtmlCell_methods, wxHtmlCell_methodCount, CLASSINFO(wxHtmlCell), &wxluatype_wxHtmlCell, wxluabaseclassnames_wxHtmlCell, wxluabaseclassbinds_wxHtmlCell, g_wxluanumberArray_None, 0, }, 
#endif // wxLUA_USE_wxHTML && wxUSE_HTML

#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))
        { wxluaclassname_wxHtmlCellEvent, wxHtmlCellEvent_methods, wxHtmlCellEvent_methodCount, CLASSINFO(wxHtmlCellEvent), &wxluatype_wxHtmlCellEvent, wxluabaseclassnames_wxHtmlCellEvent, wxluabaseclassbinds_wxHtmlCellEvent, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxHtmlColourCell, wxHtmlColourCell_methods, wxHtmlColourCell_methodCount, CLASSINFO(wxHtmlColourCell), &wxluatype_wxHtmlColourCell, wxluabaseclassnames_wxHtmlColourCell, wxluabaseclassbinds_wxHtmlColourCell, g_wxluanumberArray_None, 0, }, 
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))

#if wxLUA_USE_wxHTML && wxUSE_HTML
        { wxluaclassname_wxHtmlContainerCell, wxHtmlContainerCell_methods, wxHtmlContainerCell_methodCount, CLASSINFO(wxHtmlContainerCell), &wxluatype_wxHtmlContainerCell, wxluabaseclassnames_wxHtmlContainerCell, wxluabaseclassbinds_wxHtmlContainerCell, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxHtmlDCRenderer, wxHtmlDCRenderer_methods, wxHtmlDCRenderer_methodCount, NULL, &wxluatype_wxHtmlDCRenderer, wxluabaseclassnames_wxHtmlDCRenderer, wxluabaseclassbinds_wxHtmlDCRenderer, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxHtmlEasyPrinting, wxHtmlEasyPrinting_methods, wxHtmlEasyPrinting_methodCount, NULL, &wxluatype_wxHtmlEasyPrinting, wxluabaseclassnames_wxHtmlEasyPrinting, wxluabaseclassbinds_wxHtmlEasyPrinting, g_wxluanumberArray_None, 0, }, 
#endif // wxLUA_USE_wxHTML && wxUSE_HTML

#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))
        { wxluaclassname_wxHtmlFontCell, wxHtmlFontCell_methods, wxHtmlFontCell_methodCount, CLASSINFO(wxHtmlFontCell), &wxluatype_wxHtmlFontCell, wxluabaseclassnames_wxHtmlFontCell, wxluabaseclassbinds_wxHtmlFontCell, g_wxluanumberArray_None, 0, }, 
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)
        { wxluaclassname_wxHtmlHelpController, wxHtmlHelpController_methods, wxHtmlHelpController_methodCount, CLASSINFO(wxHtmlHelpController), &wxluatype_wxHtmlHelpController, wxluabaseclassnames_wxHtmlHelpController, wxluabaseclassbinds_wxHtmlHelpController, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxHtmlHelpData, wxHtmlHelpData_methods, wxHtmlHelpData_methodCount, CLASSINFO(wxHtmlHelpData), &wxluatype_wxHtmlHelpData, wxluabaseclassnames_wxHtmlHelpData, wxluabaseclassbinds_wxHtmlHelpData, g_wxluanumberArray_None, 0, }, 
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxHtmlHelpController && wxUSE_WXHTML_HELP)

#if wxLUA_USE_wxHTML && wxUSE_HTML
        { wxluaclassname_wxHtmlLinkInfo, wxHtmlLinkInfo_methods, wxHtmlLinkInfo_methodCount, NULL, &wxluatype_wxHtmlLinkInfo, NULL, NULL, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxHtmlParser, wxHtmlParser_methods, wxHtmlParser_methodCount, CLASSINFO(wxHtmlParser), &wxluatype_wxHtmlParser, wxluabaseclassnames_wxHtmlParser, wxluabaseclassbinds_wxHtmlParser, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxHtmlPrintout, wxHtmlPrintout_methods, wxHtmlPrintout_methodCount, NULL, &wxluatype_wxHtmlPrintout, wxluabaseclassnames_wxHtmlPrintout, wxluabaseclassbinds_wxHtmlPrintout, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxHtmlTag, wxHtmlTag_methods, wxHtmlTag_methodCount, CLASSINFO(wxHtmlTag), &wxluatype_wxHtmlTag, wxluabaseclassnames_wxHtmlTag, wxluabaseclassbinds_wxHtmlTag, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxHtmlWidgetCell, wxHtmlWidgetCell_methods, wxHtmlWidgetCell_methodCount, CLASSINFO(wxHtmlWidgetCell), &wxluatype_wxHtmlWidgetCell, wxluabaseclassnames_wxHtmlWidgetCell, wxluabaseclassbinds_wxHtmlWidgetCell, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxHtmlWinParser, wxHtmlWinParser_methods, wxHtmlWinParser_methodCount, CLASSINFO(wxHtmlWinParser), &wxluatype_wxHtmlWinParser, wxluabaseclassnames_wxHtmlWinParser, wxluabaseclassbinds_wxHtmlWinParser, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxHtmlWindow, wxHtmlWindow_methods, wxHtmlWindow_methodCount, CLASSINFO(wxHtmlWindow), &wxluatype_wxHtmlWindow, wxluabaseclassnames_wxHtmlWindow, wxluabaseclassbinds_wxHtmlWindow, g_wxluanumberArray_None, 0, }, 
#endif // wxLUA_USE_wxHTML && wxUSE_HTML

#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))
        { wxluaclassname_wxHtmlWindowInterface, wxHtmlWindowInterface_methods, wxHtmlWindowInterface_methodCount, NULL, &wxluatype_wxHtmlWindowInterface, NULL, NULL, wxHtmlWindowInterface_enums, wxHtmlWindowInterface_enumCount, }, 
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))

#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow)
        { wxluaclassname_wxLuaHtmlWinTagEvent, wxLuaHtmlWinTagEvent_methods, wxLuaHtmlWinTagEvent_methodCount, CLASSINFO(wxLuaHtmlWinTagEvent), &wxluatype_wxLuaHtmlWinTagEvent, wxluabaseclassnames_wxLuaHtmlWinTagEvent, wxluabaseclassbinds_wxLuaHtmlWinTagEvent, g_wxluanumberArray_None, 0, }, 
        { wxluaclassname_wxLuaHtmlWindow, wxLuaHtmlWindow_methods, wxLuaHtmlWindow_methodCount, CLASSINFO(wxLuaHtmlWindow), &wxluatype_wxLuaHtmlWindow, wxluabaseclassnames_wxLuaHtmlWindow, wxluabaseclassbinds_wxLuaHtmlWindow, g_wxluanumberArray_None, 0, }, 
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxLUA_USE_wxLuaHtmlWindow)

#if (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))
        { wxluaclassname_wxSimpleHtmlListBox, wxSimpleHtmlListBox_methods, wxSimpleHtmlListBox_methodCount, CLASSINFO(wxSimpleHtmlListBox), &wxluatype_wxSimpleHtmlListBox, wxluabaseclassnames_wxSimpleHtmlListBox, wxluabaseclassbinds_wxSimpleHtmlListBox, g_wxluanumberArray_None, 0, }, 
#endif // (wxLUA_USE_wxHTML && wxUSE_HTML) && (wxCHECK_VERSION(2,8,0))


        { 0, 0, 0, 0, 0, 0, 0 }, 
    };
    count = sizeof(classList)/sizeof(wxLuaBindClass) - 1;

    return classList;
}

// ---------------------------------------------------------------------------
// wxLuaBinding_wxhtml() - the binding class
// ---------------------------------------------------------------------------

IMPLEMENT_DYNAMIC_CLASS(wxLuaBinding_wxhtml, wxLuaBinding)

wxLuaBinding_wxhtml::wxLuaBinding_wxhtml() : wxLuaBinding()
{
    m_bindingName   = wxT("wxhtml");
    m_nameSpace     = wxT("wx");
    m_classArray    = wxLuaGetClassList_wxhtml(m_classCount);
    m_numberArray   = wxLuaGetDefineList_wxhtml(m_numberCount);
    m_stringArray   = wxLuaGetStringList_wxhtml(m_stringCount);
    m_eventArray    = wxLuaGetEventList_wxhtml(m_eventCount);
    m_objectArray   = wxLuaGetObjectList_wxhtml(m_objectCount);
    m_functionArray = wxLuaGetFunctionList_wxhtml(m_functionCount);
}



// ---------------------------------------------------------------------------

bool wxLuaBinding_wxhtml_init()
{
    static wxLuaBinding_wxhtml m_binding;
    if (wxLuaBinding::GetBindingList()->Find(&m_binding)) return false;

    wxLuaBinding::GetBindingList()->Append(&m_binding);
    return true;
}


