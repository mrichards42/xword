// ---------------------------------------------------------------------------
// ./xwordlua.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#include "wx/wxprec.h"

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif


#include "wxlua/include/wxlstate.h"
#include "xword_bind.h"


// ---------------------------------------------------------------------------
// Bind class XPuzzle
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'XPuzzle'
int wxluatype_XPuzzle = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_Clear[] = { &wxluatype_XPuzzle, NULL };
static int LUACALL wxLua_XPuzzle_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_Clear[1] = {{ wxLua_XPuzzle_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_XPuzzle_Clear }};
//     void Clear();
static int LUACALL wxLua_XPuzzle_Clear(lua_State *L)
{
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_GetAuthor[] = { &wxluatype_XPuzzle, NULL };
static int LUACALL wxLua_XPuzzle_GetAuthor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_GetAuthor[1] = {{ wxLua_XPuzzle_GetAuthor, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_XPuzzle_GetAuthor }};
//     const wxString & GetAuthor() const 
static int LUACALL wxLua_XPuzzle_GetAuthor(lua_State *L)
{
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call GetAuthor
    wxString returns = (self->GetAuthor());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_GetCopyright[] = { &wxluatype_XPuzzle, NULL };
static int LUACALL wxLua_XPuzzle_GetCopyright(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_GetCopyright[1] = {{ wxLua_XPuzzle_GetCopyright, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_XPuzzle_GetCopyright }};
//     const wxString & GetCopyright() const 
static int LUACALL wxLua_XPuzzle_GetCopyright(lua_State *L)
{
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call GetCopyright
    wxString returns = (self->GetCopyright());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_GetFilename[] = { &wxluatype_XPuzzle, NULL };
static int LUACALL wxLua_XPuzzle_GetFilename(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_GetFilename[1] = {{ wxLua_XPuzzle_GetFilename, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_XPuzzle_GetFilename }};
//     const wxString & GetFilename() const
static int LUACALL wxLua_XPuzzle_GetFilename(lua_State *L)
{
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call GetFilename
    wxString returns = (self->GetFilename());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_GetModified[] = { &wxluatype_XPuzzle, NULL };
static int LUACALL wxLua_XPuzzle_GetModified(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_GetModified[1] = {{ wxLua_XPuzzle_GetModified, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_XPuzzle_GetModified }};
//     bool GetModified() const 
static int LUACALL wxLua_XPuzzle_GetModified(lua_State *L)
{
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call GetModified
    bool returns = (self->GetModified());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_GetNotes[] = { &wxluatype_XPuzzle, NULL };
static int LUACALL wxLua_XPuzzle_GetNotes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_GetNotes[1] = {{ wxLua_XPuzzle_GetNotes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_XPuzzle_GetNotes }};
//     const wxString & GetNotes() const 
static int LUACALL wxLua_XPuzzle_GetNotes(lua_State *L)
{
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call GetNotes
    wxString returns = (self->GetNotes());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_GetTime[] = { &wxluatype_XPuzzle, NULL };
static int LUACALL wxLua_XPuzzle_GetTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_GetTime[1] = {{ wxLua_XPuzzle_GetTime, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_XPuzzle_GetTime }};
//     int GetTime() const 
static int LUACALL wxLua_XPuzzle_GetTime(lua_State *L)
{
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call GetTime
    int returns = (self->GetTime());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_GetTitle[] = { &wxluatype_XPuzzle, NULL };
static int LUACALL wxLua_XPuzzle_GetTitle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_GetTitle[1] = {{ wxLua_XPuzzle_GetTitle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_XPuzzle_GetTitle }};
//     const wxString & GetTitle() const 
static int LUACALL wxLua_XPuzzle_GetTitle(lua_State *L)
{
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call GetTitle
    wxString returns = (self->GetTitle());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_GetVersion[] = { &wxluatype_XPuzzle, NULL };
static int LUACALL wxLua_XPuzzle_GetVersion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_GetVersion[1] = {{ wxLua_XPuzzle_GetVersion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_XPuzzle_GetVersion }};
//     short GetVersion() const
static int LUACALL wxLua_XPuzzle_GetVersion(lua_State *L)
{
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call GetVersion
    short returns = (self->GetVersion());
    // push the result number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_IsOk[] = { &wxluatype_XPuzzle, NULL };
static int LUACALL wxLua_XPuzzle_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_IsOk[1] = {{ wxLua_XPuzzle_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_XPuzzle_IsOk }};
//     bool IsOk()        const
static int LUACALL wxLua_XPuzzle_IsOk(lua_State *L)
{
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_IsScrambled[] = { &wxluatype_XPuzzle, NULL };
static int LUACALL wxLua_XPuzzle_IsScrambled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_IsScrambled[1] = {{ wxLua_XPuzzle_IsScrambled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_XPuzzle_IsScrambled }};
//     bool IsScrambled() const
static int LUACALL wxLua_XPuzzle_IsScrambled(lua_State *L)
{
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call IsScrambled
    bool returns = (self->IsScrambled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_Load[] = { &wxluatype_XPuzzle, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_XPuzzle_Load(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_Load[1] = {{ wxLua_XPuzzle_Load, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_XPuzzle_Load }};
//     bool Load(const wxString & filename, wxString ext = wxEmptyString)
static int LUACALL wxLua_XPuzzle_Load(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxString ext = wxEmptyString
    wxString ext = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call Load
    bool returns = (self->Load(filename, ext));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_Save[] = { &wxluatype_XPuzzle, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_XPuzzle_Save(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_Save[1] = {{ wxLua_XPuzzle_Save, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_XPuzzle_Save }};
//     bool Save(const wxString & filename, wxString ext = wxEmptyString)
static int LUACALL wxLua_XPuzzle_Save(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxString ext = wxEmptyString
    wxString ext = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call Save
    bool returns = (self->Save(filename, ext));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_SetAuthor[] = { &wxluatype_XPuzzle, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_XPuzzle_SetAuthor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_SetAuthor[1] = {{ wxLua_XPuzzle_SetAuthor, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_XPuzzle_SetAuthor }};
//     void SetAuthor(const wxString & author) 
static int LUACALL wxLua_XPuzzle_SetAuthor(lua_State *L)
{
    // const wxString author
    const wxString author = wxlua_getwxStringtype(L, 2);
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call SetAuthor
    self->SetAuthor(author);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_SetCopyright[] = { &wxluatype_XPuzzle, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_XPuzzle_SetCopyright(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_SetCopyright[1] = {{ wxLua_XPuzzle_SetCopyright, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_XPuzzle_SetCopyright }};
//     void SetCopyright(const wxString & copyright) 
static int LUACALL wxLua_XPuzzle_SetCopyright(lua_State *L)
{
    // const wxString copyright
    const wxString copyright = wxlua_getwxStringtype(L, 2);
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call SetCopyright
    self->SetCopyright(copyright);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_SetFilename[] = { &wxluatype_XPuzzle, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_XPuzzle_SetFilename(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_SetFilename[1] = {{ wxLua_XPuzzle_SetFilename, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_XPuzzle_SetFilename }};
//     void SetFilename(const wxString & filename)
static int LUACALL wxLua_XPuzzle_SetFilename(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call SetFilename
    self->SetFilename(filename);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_SetModified[] = { &wxluatype_XPuzzle, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_XPuzzle_SetModified(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_SetModified[1] = {{ wxLua_XPuzzle_SetModified, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_XPuzzle_SetModified }};
//     void SetModified(bool modified) 
static int LUACALL wxLua_XPuzzle_SetModified(lua_State *L)
{
    // bool modified
    bool modified = wxlua_getbooleantype(L, 2);
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call SetModified
    self->SetModified(modified);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_SetNotes[] = { &wxluatype_XPuzzle, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_XPuzzle_SetNotes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_SetNotes[1] = {{ wxLua_XPuzzle_SetNotes, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_XPuzzle_SetNotes }};
//     void SetNotes(const wxString & notes) 
static int LUACALL wxLua_XPuzzle_SetNotes(lua_State *L)
{
    // const wxString notes
    const wxString notes = wxlua_getwxStringtype(L, 2);
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call SetNotes
    self->SetNotes(notes);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_SetOk[] = { &wxluatype_XPuzzle, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_XPuzzle_SetOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_SetOk[1] = {{ wxLua_XPuzzle_SetOk, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_XPuzzle_SetOk }};
//     void SetOk(bool doit=true)
static int LUACALL wxLua_XPuzzle_SetOk(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool doit = true
    bool doit = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call SetOk
    self->SetOk(doit);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_SetTime[] = { &wxluatype_XPuzzle, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_XPuzzle_SetTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_SetTime[1] = {{ wxLua_XPuzzle_SetTime, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_XPuzzle_SetTime }};
//     void SetTime(int time) 
static int LUACALL wxLua_XPuzzle_SetTime(lua_State *L)
{
    // int time
    int time = (int)wxlua_getnumbertype(L, 2);
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call SetTime
    self->SetTime(time);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_SetTitle[] = { &wxluatype_XPuzzle, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_XPuzzle_SetTitle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_SetTitle[1] = {{ wxLua_XPuzzle_SetTitle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_XPuzzle_SetTitle }};
//     void SetTitle(const wxString & title) 
static int LUACALL wxLua_XPuzzle_SetTitle(lua_State *L)
{
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 2);
    // get this
    XPuzzle * self = (XPuzzle *)wxluaT_getuserdatatype(L, 1, wxluatype_XPuzzle);
    // call SetTitle
    self->SetTitle(title);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_XPuzzle_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_XPuzzle_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_XPuzzle_constructor[1] = {{ wxLua_XPuzzle_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_XPuzzle_constructor }};
//     XPuzzle(const wxString & filename = wxEmptyString)
static int LUACALL wxLua_XPuzzle_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString filename = wxEmptyString
    const wxString filename = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    XPuzzle* returns = new XPuzzle(filename);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_XPuzzle);

    return 1;
}



// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod XPuzzle_methods[] = {
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_Clear, 1, NULL },
    { "GetAuthor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_GetAuthor, 1, NULL },
    { "GetCopyright", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_GetCopyright, 1, NULL },
    { "GetFilename", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_GetFilename, 1, NULL },
    { "GetModified", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_GetModified, 1, NULL },
    { "GetNotes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_GetNotes, 1, NULL },
    { "GetTime", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_GetTime, 1, NULL },
    { "GetTitle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_GetTitle, 1, NULL },
    { "GetVersion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_GetVersion, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_IsOk, 1, NULL },
    { "IsScrambled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_IsScrambled, 1, NULL },
    { "Load", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_Load, 1, NULL },
    { "Save", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_Save, 1, NULL },
    { "SetAuthor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_SetAuthor, 1, NULL },
    { "SetCopyright", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_SetCopyright, 1, NULL },
    { "SetFilename", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_SetFilename, 1, NULL },
    { "SetModified", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_SetModified, 1, NULL },
    { "SetNotes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_SetNotes, 1, NULL },
    { "SetOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_SetOk, 1, NULL },
    { "SetTime", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_SetTime, 1, NULL },
    { "SetTitle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_XPuzzle_SetTitle, 1, NULL },
    { "XPuzzle", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_XPuzzle_constructor, 1, NULL },
    { 0, 0, 0, 0 },
};

int XPuzzle_methodCount = sizeof(XPuzzle_methods)/sizeof(wxLuaBindMethod) - 1;




// ---------------------------------------------------------------------------
// ./xword_bind.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------


// ---------------------------------------------------------------------------
// wxLuaGetEventList_xword() is called to register events
// ---------------------------------------------------------------------------

wxLuaBindEvent* wxLuaGetEventList_xword(size_t &count)
{
    static wxLuaBindEvent eventList[] =
    {

        { 0, 0, 0 },
    };
    count = sizeof(eventList)/sizeof(wxLuaBindEvent) - 1;
    return eventList;
}

// ---------------------------------------------------------------------------
// wxLuaGetDefineList_xword() is called to register %define and %enum
// ---------------------------------------------------------------------------

wxLuaBindNumber* wxLuaGetDefineList_xword(size_t &count)
{
    static wxLuaBindNumber numberList[] =
    {

        { 0, 0 },
    };
    count = sizeof(numberList)/sizeof(wxLuaBindNumber) - 1;
    return numberList;
}

// ---------------------------------------------------------------------------

// wxLuaGetStringList_xword() is called to register %define %string
// ---------------------------------------------------------------------------

wxLuaBindString* wxLuaGetStringList_xword(size_t &count)
{
    static wxLuaBindString stringList[] =
    {

        { 0, 0 },
    };
    count = sizeof(stringList)/sizeof(wxLuaBindString) - 1;
    return stringList;
}

// ---------------------------------------------------------------------------
// wxLuaGetObjectList_xword() is called to register object and pointer bindings
// ---------------------------------------------------------------------------

wxLuaBindObject* wxLuaGetObjectList_xword(size_t &count)
{
    static wxLuaBindObject objectList[] =
    {

        { 0, 0, 0, 0 },
    };
    count = sizeof(objectList)/sizeof(wxLuaBindObject) - 1;
    return objectList;
}

// ---------------------------------------------------------------------------
// wxLuaGetFunctionList_xword() is called to register global functions
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
// wxLuaGetFunctionList_xword() is called to register global functions
// ---------------------------------------------------------------------------

wxLuaBindMethod* wxLuaGetFunctionList_xword(size_t &count)
{
    static wxLuaBindMethod functionList[] =
    {

        { 0, 0, 0, 0 }, 
    };
    count = sizeof(functionList)/sizeof(wxLuaBindMethod) - 1;
    return functionList;
}



// ---------------------------------------------------------------------------
// wxLuaGetClassList_xword() is called to register classes
// ---------------------------------------------------------------------------

static const char* wxluaclassname_XPuzzle = "XPuzzle";

// ---------------------------------------------------------------------------
// Lua Tag Method Values and Tables for each Class
// ---------------------------------------------------------------------------

extern wxLuaBindMethod XPuzzle_methods[];
extern int XPuzzle_methodCount;




wxLuaBindClass* wxLuaGetClassList_xword(size_t &count)
{
    static wxLuaBindClass classList[] =
    {
        { wxluaclassname_XPuzzle, XPuzzle_methods, XPuzzle_methodCount, NULL, &wxluatype_XPuzzle, NULL, NULL, g_wxluanumberArray_None, 0, }, 

        { 0, 0, 0, 0, 0, 0, 0 }, 
    };
    count = sizeof(classList)/sizeof(wxLuaBindClass) - 1;

    return classList;
}

// ---------------------------------------------------------------------------
// wxLuaBinding_xword() - the binding class
// ---------------------------------------------------------------------------

IMPLEMENT_DYNAMIC_CLASS(wxLuaBinding_xword, wxLuaBinding)

wxLuaBinding_xword::wxLuaBinding_xword() : wxLuaBinding()
{
    m_bindingName   = wxT("xword");
    m_nameSpace     = wxT("xword");
    m_classArray    = wxLuaGetClassList_xword(m_classCount);
    m_numberArray   = wxLuaGetDefineList_xword(m_numberCount);
    m_stringArray   = wxLuaGetStringList_xword(m_stringCount);
    m_eventArray    = wxLuaGetEventList_xword(m_eventCount);
    m_objectArray   = wxLuaGetObjectList_xword(m_objectCount);
    m_functionArray = wxLuaGetFunctionList_xword(m_functionCount);
}



// ---------------------------------------------------------------------------

bool wxLuaBinding_xword_init()
{
    static wxLuaBinding_xword m_binding;
    if (wxLuaBinding::GetBindingList()->Find(&m_binding)) return false;

    wxLuaBinding::GetBindingList()->Append(&m_binding);
    return true;
}

wxLUA_IMPLEMENT_ENCAPSULATION(XPuzzle, XPuzzle)

